package wsms.com.controller;

import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.Serializable;
import java.lang.reflect.InvocationTargetException;
import java.security.NoSuchAlgorithmException;
import java.security.spec.KeySpec;
import java.sql.Blob;
import java.sql.Connection;
import java.sql.Date;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.format.FormatStyle;
import java.util.ArrayList;
import java.util.Base64;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Optional;
import java.util.Vector;
import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.PBEKeySpec;
import javax.crypto.spec.SecretKeySpec;
import javax.imageio.ImageIO;
import javax.management.openmbean.InvalidKeyException;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.persistence.Query;
import javax.persistence.TypedQuery;
import javax.sound.sampled.AudioFormat;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.LineUnavailableException;
import javax.sound.sampled.SourceDataLine;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.UIManager;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import com.github.sarxos.webcam.Webcam;
import com.google.zxing.BarcodeFormat;
import com.google.zxing.BinaryBitmap;
import com.google.zxing.EncodeHintType;
import com.google.zxing.MultiFormatReader;
import com.google.zxing.MultiFormatWriter;
import com.google.zxing.NotFoundException;
import com.google.zxing.Result;
import com.google.zxing.client.j2se.BufferedImageLuminanceSource;
import com.google.zxing.client.j2se.MatrixToImageWriter;
import com.google.zxing.common.BitMatrix;
import com.google.zxing.common.HybridBinarizer;
import com.google.zxing.qrcode.decoder.ErrorCorrectionLevel;
import com.sun.mail.util.BASE64DecoderStream;
import com.sun.mail.util.BASE64EncoderStream;
import javafx.application.Application;
import javafx.application.Platform;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.event.Event;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.geometry.Rectangle2D;
import javafx.print.PageLayout;
import javafx.print.PageOrientation;
import javafx.print.Paper;
import javafx.print.Printer;
import javafx.print.PrinterJob;
import javafx.scene.Node;
import javafx.scene.Scene;
import javafx.scene.control.Alert;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.control.ButtonBar.ButtonData;
import javafx.scene.control.Button;
import javafx.scene.control.ButtonType;
import javafx.scene.control.ChoiceDialog;
import javafx.scene.control.ComboBox;
import javafx.scene.control.DatePicker;
import javafx.scene.control.Label;
import javafx.scene.control.MenuItem;
import javafx.scene.control.PasswordField;
import javafx.scene.control.SplitPane;
import javafx.scene.control.Tab;
import javafx.scene.control.TabPane;
import javafx.scene.control.TableCell;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;
import javafx.scene.control.TextInputDialog;
import javafx.scene.control.Tooltip;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.control.cell.TextFieldTableCell;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.input.InputEvent;
import javafx.scene.input.KeyCode;
import javafx.scene.input.KeyEvent;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.AnchorPane;
import javafx.scene.layout.Background;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import javafx.scene.media.Media;
import javafx.scene.media.MediaPlayer;
import javafx.scene.media.MediaView;
import javafx.scene.paint.Color;
import javafx.scene.paint.Paint;
import javafx.scene.text.Font;
import javafx.scene.text.TextFlow;
import javafx.scene.transform.Scale;
import javafx.stage.FileChooser;
import javafx.stage.Screen;
import javafx.stage.Stage;
import javafx.util.Callback;
import javafx.util.Duration;
import wsms.com.controller.LibBooksDataTable;
import wsms.com.controller.LibBooksLentDataTable;
import wsms.com.controller.LibOverdueDataTable;
import wsms.com.controller.ScoresDataTable;
import wsms.com.entity.AcademicAssessment;
import wsms.com.entity.AcademicHoliday;
import wsms.com.entity.AcademicSession;
import wsms.com.entity.AcademicTerm;
import wsms.com.entity.AccountBalance;
import wsms.com.entity.AnnualClassResults;
import wsms.com.entity.AnnualScoreSheetsSummary;
import wsms.com.entity.AnnualScoresTotal;
import wsms.com.entity.AnnualSubjectsResults;
import wsms.com.entity.AssignedSubjects;
import wsms.com.entity.BarcodeScannedGate;
import wsms.com.entity.BarcodeScannedSpecial;
import wsms.com.entity.BillingsInformation;
import wsms.com.entity.CashTransactions;
import wsms.com.entity.ChangeBorderStatus;
import wsms.com.entity.ChangeStdClass;
import wsms.com.entity.CommendationEntry;
import wsms.com.entity.DESKeys;
import wsms.com.entity.DisciplinaryEntry;
import wsms.com.entity.DrugInformation;
import wsms.com.entity.FeeConcession;
import wsms.com.entity.Inventory;
import wsms.com.entity.Invoicing;
import wsms.com.entity.JSSClassResults;
import wsms.com.entity.JSSSubjectsResults;
import wsms.com.entity.JssScoreSheets;
import wsms.com.entity.JssScoreSheetsNew;
import wsms.com.entity.LendingBook;
import wsms.com.entity.LendingBookCount;
import wsms.com.entity.LibraryBooks;
import wsms.com.entity.POSTransactions;
import wsms.com.entity.ProspectiveStudent;
import wsms.com.entity.ReturningBook;
import wsms.com.entity.RusticateEntry;
import wsms.com.entity.SSSClassResults;
import wsms.com.entity.SSSSubjectsResults;
import wsms.com.entity.SchoolAttendance;
import wsms.com.entity.ScoreSheets;
import wsms.com.entity.ScoreSheetsSummary;
import wsms.com.entity.Staff;
import wsms.com.entity.StudentClasses;
import wsms.com.entity.StudentPayments;
import wsms.com.entity.Students;
import wsms.com.entity.SubjectNames;
import wsms.com.entity.SuspensionEntry;
import wsms.com.entity.TellerTransactions;
import wsms.com.entity.TillTransactions;
import wsms.com.entity.Tills;
import wsms.com.entity.Transactions;
import wsms.com.entity.TransferredWithdrawn;
import wsms.com.entity.Users;
import wsms.com.services.CreateAcademicAssessment;
import wsms.com.services.CreateAcademicHoliday;
import wsms.com.services.CreateAcademicSession;
import wsms.com.services.CreateAcademicTerm;
import wsms.com.services.CreateAccountBalance;
import wsms.com.services.CreateAnnualClassResults;
import wsms.com.services.CreateAnnualSubjectsResults;
import wsms.com.services.CreateAssignedSubject;
import wsms.com.services.CreateBarcodeScannedGate;
import wsms.com.services.CreateBarcodeScannedSpecial;
import wsms.com.services.CreateBook;
import wsms.com.services.CreateCashTransactions;
import wsms.com.services.CreateChangeBorderStatus;
import wsms.com.services.CreateChangeStdClass;
import wsms.com.services.CreateCommendationEntry;
import wsms.com.services.CreateDESKeys;
import wsms.com.services.CreateDeferred;
import wsms.com.services.CreateDisciplinaryEntry;
import wsms.com.services.CreateDrugInformation;
import wsms.com.services.CreateFeeConcession;
import wsms.com.services.CreateGraduated;
import wsms.com.services.CreateInventory;
import wsms.com.services.CreateInvoicing;
import wsms.com.services.CreateJSSClassResults;
import wsms.com.services.CreateJSSSubjectsResults;
import wsms.com.services.CreateMoveClass2Class;
import wsms.com.services.CreateMoveStdClass2Class;
import wsms.com.services.CreatePOSTransactions;
import wsms.com.services.CreateProspectiveStudent;
import wsms.com.services.CreateRusticateEntry;
import wsms.com.services.CreateRusticated;
import wsms.com.services.CreateSSSClassResults;
import wsms.com.services.CreateSSSSubjectsResults;
import wsms.com.services.CreateSchoolAttendance;
import wsms.com.services.CreateScores;
import wsms.com.services.CreateStaff;
import wsms.com.services.CreateStudent;
import wsms.com.services.CreateStudentClasses;
import wsms.com.services.CreateStudentPayment;
import wsms.com.services.CreateSubjects;
import wsms.com.services.CreateSuspended;
import wsms.com.services.CreateSuspensionEntry;
import wsms.com.services.CreateTellerTransactions;
import wsms.com.services.CreateTransactions;
import wsms.com.services.CreateTransferredWithdrawn;
import wsms.com.services.CreateUser;
import wsms.com.services.DeleteAcademicAssessment;
import wsms.com.services.DeleteAcademicHoliday;
import wsms.com.services.DeleteAcademicSession;
import wsms.com.services.DeleteAcademicTerm;
import wsms.com.services.DeleteAccountBalance;
import wsms.com.services.DeleteBook;
import wsms.com.services.DeleteCommendationEntry;
import wsms.com.services.DeleteDisciplinaryEntry;
import wsms.com.services.DeleteDrugInformation;
import wsms.com.services.DeleteInventory;
import wsms.com.services.DeleteRusticateEntry;
import wsms.com.services.DeleteSchoolAttendance;
import wsms.com.services.DeleteScores;
import wsms.com.services.DeleteStaff;
import wsms.com.services.DeleteStudent;
import wsms.com.services.DeleteStudentClasses;
import wsms.com.services.DeleteStudentPayment;
import wsms.com.services.DeleteSubjects;
import wsms.com.services.DeleteSuspensionEntry;
import wsms.com.services.DeleteTransactions;
import wsms.com.services.DeleteUser;
import wsms.com.services.UpdateAcademicAssessment;
import wsms.com.services.UpdateAcademicHoliday;
import wsms.com.services.UpdateAcademicSession;
import wsms.com.services.UpdateAcademicTerm;
import wsms.com.services.UpdateAccountBalance;
import wsms.com.services.UpdateBook;
import wsms.com.services.UpdateChangeBorderStatus;
import wsms.com.services.UpdateChangeStdClass;
import wsms.com.services.UpdateDrugInformation;
import wsms.com.services.UpdateInventory;
import wsms.com.services.UpdateSchoolAttendance;
import wsms.com.services.UpdateScores;
import wsms.com.services.UpdateStaff;
import wsms.com.services.UpdateStudent;
import wsms.com.services.UpdateStudentClasses;
import wsms.com.services.UpdateStudentPayment;
import wsms.com.services.UpdateSubjects;
import wsms.com.services.UpdateTransactions;
import wsms.com.services.UpdateUser;

public class OmniLoginControl extends Application {
		
	final static String dbUSR = "root";
	final static String dbPWD = "root";
	final static String dbURL = "jdbc:mysql://127.0.0.1/kusakidb?useSSL=false";
	
	//AES
	final static String secretKey = "??19041801Orede!";
    
	@FXML TextField userNameLogin_TF;
	@FXML PasswordField passwordLogin_TF;
	@FXML private Button loginBtn;
	@FXML private BorderPane homeBorderPane;
	@FXML private Label dashboardLabel;
	
	@FXML public void loginButton(ActionEvent event) {
		
		//create a user if not exists
		try {
			
			EntityManagerFactory emfactory = 
					Persistence.createEntityManagerFactory("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			Users user = new Users();
			
			String uPswd = "P@$$W0rd";
			String encPwd = AES.encrypt(uPswd, secretKey);
			
			user.setUserName("ADMIN909".toUpperCase());
			user.setUserStaffID("Nil");
			user.setName("Sys Admin");
			user.setPassword(encPwd);
			user.setUserClass("Admin");
			user.setDept("System");
			
			entitymanager.persist(user);
			entitymanager.getTransaction().commit();
			
			entitymanager.close();
			emfactory.close();
			
		}
		catch(Exception tryPassE) {
			tryPassE.printStackTrace();
		}
		
		try {
			String userName = userNameLogin_TF.getText().toUpperCase();
			
			Users user = new Users();
			
			EntityManagerFactory emfactory = 
					Persistence.createEntityManagerFactory("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			user = entitymanager.find(Users.class, userName);
			
			dispName = user.getName();
			dispUserClass = user.getUserClass();
			dispUserName = user.getUserName();
						
			String pwdUnsecure = passwordLogin_TF.getText();			
						
			String pWord = pwdUnsecure.toUpperCase();
			String uName = userName;
			
			String myPwd = user.getPassword();
			String decPwd = AES.decrypt(myPwd, secretKey);
			
			if(pWord.equals(uName) && pwdUnsecure.equals(decPwd)) {
					try {
						Stage primaryStage = (Stage)loginBtn.getScene().getWindow();
						BorderPane root = (BorderPane)FXMLLoader.load(getClass().getResource("changePassword.fxml"));
						primaryStage.setTitle("You Must Change Your Password at Your First Login");
						Scene scene = new Scene(root,580,600);
						scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
						primaryStage.setScene(scene);
						primaryStage.show();
					} catch(Exception e) {
						userNameLogin_TF.setText("Error(pwd==userName): "+ e.getMessage());
					}
				}
			else if(pwdUnsecure.equals(decPwd)) {
				try {
					Stage primaryStage = (Stage)loginBtn.getScene().getWindow();
					BorderPane root = (BorderPane)FXMLLoader.load(getClass().getResource("homeLaunch.fxml"));
					primaryStage.setTitle("Webstartrek School Management System");
					Scene scene = new Scene(root,800,600);
					
					//timeout
//					IdleMonitor idleMonitor = new IdleMonitor(Duration.seconds(10),
//			                () -> Platform.exit(), true);
//			        idleMonitor.register(scene, Event.ANY);
//			        
//			        homeBorderPane = root;
//			        homeBorderPane.setOnMouseMoved(e -> idleMonitor.startMonitoring());
					
					scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
					primaryStage.setScene(scene);
					
//					Rectangle2D primaryScreenBounds = Screen.getPrimary().getVisualBounds();
//					primaryStage.setX(primaryScreenBounds.getMinX());
//					primaryStage.setY(primaryScreenBounds.getMinY());
//					primaryStage.setWidth(primaryScreenBounds.getWidth());
//					primaryStage.setHeight(primaryScreenBounds.getHeight());
					
					primaryStage.show();
				} 
				catch(Exception e) {
					e.printStackTrace();
					userNameLogin_TF.setText("ERROR: "+e.getLocalizedMessage());
				}
			}
				
			else {
				//userNameLogin_TF.setText("Invalid login credentials!");
				Alert alert = new Alert(Alert.AlertType.WARNING);
				alert.setContentText("Invalid Login Credentials!");
				alert.setTitle("Login Error!");
				Optional<ButtonType> result = alert.showAndWait();
				if(result.get() == ButtonType.OK) {
					alert.close();
				}
				else {
					alert.close();
				}
			}
			
		}
		catch(Exception e) {
			//userNameLogin_TF.setText("Error: "+ e.getMessage());
			Alert alert = new Alert(Alert.AlertType.ERROR);
			alert.setContentText("Error: "+e.getMessage());
			alert.setTitle("Login Error!");
			Optional<ButtonType> result = alert.showAndWait();
			if(result.get() == ButtonType.OK) {
				alert.close();
			}
			else {
				alert.close();
			}
		}
	}
	

	public static void main(String[] args) {
		launch(args);
	}
	
	@FXML public void exitMenuItemClick(ActionEvent event) {
		Platform.exit();
	}
	
	//File and Help About login
	
	@FXML private Button returnAboutLogin, aboutMenuItemClick2;
	@FXML MenuItem aboutMenuItemClick;
	
	@FXML public void handleAboutMenuItemClick(ActionEvent event) throws IOException {
		if(event.getSource() == aboutMenuItemClick) {
			try {
				Stage primaryStage = (Stage)aboutMenuItemClick2.getScene().getWindow();
				
				BorderPane root = (BorderPane)FXMLLoader.load(getClass().getResource("about.fxml"));
				primaryStage.setTitle("Webstartrek School Management System");
				Scene scene = new Scene(root,600,400);
				scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
				primaryStage.setScene(scene);
				primaryStage.show();
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
		else {
			Stage primaryStage = (Stage)returnAboutLogin.getScene().getWindow();
			BorderPane root = (BorderPane)FXMLLoader.load(getClass().getResource("login.fxml"));
			Scene scene = new Scene(root,600,400);
			scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
			primaryStage.setScene(scene);
			primaryStage.setTitle("Login");
			
			primaryStage.show();
		}
	}
	
	//About File and Help for Home
	@FXML private Button aboutMenuItemHome, returnAboutLogin2;
	@FXML private MenuItem aboutMenuItemHomeClick, aboutMenuItemHomeLogout;
	
	@FXML public void handleAboutMenuItemHome(ActionEvent event) throws IOException {
		if(event.getSource() == aboutMenuItemHomeClick) {
			try {
				Stage primaryStage = (Stage)aboutMenuItemHome.getScene().getWindow();
		
				BorderPane root = (BorderPane)FXMLLoader.load(getClass().getResource("about2.fxml"));
				primaryStage.setTitle("Webstartrek School Management System");
				Scene scene = new Scene(root,600,400);
				scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
				primaryStage.setScene(scene);
				primaryStage.show();
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
		else {
			Stage primaryStage = (Stage)returnAboutLogin2.getScene().getWindow();
			BorderPane root = (BorderPane)FXMLLoader.load(getClass().getResource("homeLaunch.fxml"));
			Scene scene = new Scene(root);
			primaryStage.setScene(scene);
			
//			Rectangle2D primaryScreenBounds = Screen.getPrimary().getVisualBounds();
//			primaryStage.setX(primaryScreenBounds.getMinX());
//			primaryStage.setY(primaryScreenBounds.getMinY());
//			primaryStage.setWidth(primaryScreenBounds.getWidth());
//			primaryStage.setHeight(primaryScreenBounds.getHeight());
			
			primaryStage.show();
		}
	}
	
	@FXML public void logOutMenuHome(ActionEvent event) {
		try{
			if(event.getSource() == aboutMenuItemHomeLogout) {
				try {
					Stage primaryStage = (Stage)logOffHomeButton.getScene().getWindow();
					BorderPane root = (BorderPane)FXMLLoader.load(getClass().getResource("login.fxml"));
					primaryStage.setTitle("Login");
					Scene scene = new Scene(root,600,400);
					scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
					primaryStage.setScene(scene);
					primaryStage.show();
				} catch(Exception e) {
					msgLabel.setText("Error: "+ e.getMessage());
				}
			}
		}
		catch(Exception e) {
			msgLabel.setText("Error: "+ e.getMessage());
		}
	}

	@Override
	public void start(Stage primaryStage) throws Exception {
		try {
			BorderPane root = (BorderPane)FXMLLoader.load(getClass().getResource("login.fxml"));
			
			Scene scene = new Scene(root,600,400);
			
//	        IdleMonitor idleMonitor = new IdleMonitor(Duration.seconds(30),
//	                () -> Platform.exit(), true);
//	        idleMonitor.register(scene, Event.ANY);
			
			scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
			primaryStage.setScene(scene);
			primaryStage.setTitle("Login");
			
//			Rectangle2D primaryScreenBounds = Screen.getPrimary().getVisualBounds();
//			primaryStage.setX(primaryScreenBounds.getMinX());
//			primaryStage.setY(primaryScreenBounds.getMinY());
//			primaryStage.setWidth(primaryScreenBounds.getWidth());
//			primaryStage.setHeight(primaryScreenBounds.getHeight());
			
			primaryStage.show();
		} catch(Exception e) {
			e.printStackTrace();
		}
	}
	
	//Idle Monitor
//	private void startCountDownLogin(Runnable start) {
//		loginBtn.setOnAction(e -> start.run());
//    }
//	
//	@FXML private BorderPane homeBorderPane;
//	homeBorderPane.setOnMouseMoved(e -> idleMonitor.startMonitoring());
//	private void startCountDownHome(Runnable start) {
//		homeBorderPane.setOnMouseMoved(e -> start.run());
//    }
	
	
	//As it is
	//loginBtn.set

//    private Parent buildMainUI() {
//        TabPane tabPane = new TabPane();
//        Tab tab1 = new Tab("One");
//        Parent tab1Content = buildTabUI("Tab 1");
//        Parent tab1StartContent = buildStartUI(() -> tab1.setContent(tab1Content));
//        tab1.setContent(tab1StartContent);
//        IdleMonitor tab1IdleMonitor = new IdleMonitor(Duration.seconds(5), 
//                () -> tab1.setContent(tab1StartContent), true);
//        tab1IdleMonitor.register(tab1Content, Event.ANY);
//
//        Tab tab2 = new Tab("Two");
//        Parent tab2Content = buildTabUI("Tab 2") ;
//        Parent tab2StartContent = buildStartUI(() -> tab2.setContent(tab2Content));
//        tab2.setContent(tab2StartContent);
//        IdleMonitor tab2IdleMonitor = new IdleMonitor(Duration.seconds(10),
//                () -> tab2.setContent(tab2StartContent), true);
//        tab2IdleMonitor.register(tab2Content, Event.ANY);
//
//        tabPane.getTabs().addAll(tab1, tab2);
//        return tabPane ;
//    }
//
//    private Parent buildTabUI(String text) {
//        Button button = new Button("Click here");
//        button.setOnAction(e -> System.out.println("Click in "+text));
//        VBox content = new VBox(10, new Label(text), new TextField(), button);
//        content.setAlignment(Pos.CENTER);
//        return content ;
//    }
	
	// homeLaunch Experiment
	ObservableList<String> sex = FXCollections.observableArrayList("Male","Female","Rather Not Say");
	ObservableList<String> disable = FXCollections.observableArrayList("Yes","No");
	
	ObservableList<String> entryClassLst = FXCollections.observableArrayList();
	
	@FXML TextField msgLabel;
	
	@FXML
	public void initialize(MouseEvent event) {
		sexTF.setItems(sex);
		disabilityTF.setItems(disable);
		stdStatusCombo.setItems(statusCombo);
		entryBorderStatus.setItems(borderStatus);
		populateStdClassesCombo(entryClassLst, entryClassAssigned);
	}
	
	@FXML
	public void initialize2(MouseEvent event) {
		sexTF2.setItems(sex);
		disabilityTF2.setItems(disable);
		stdStatusCombo2.setItems(statusCombo);
		populateStdClassesCombo(entryClassLst, entryClassAssigned2);
	}
	
	@FXML private Button createNewStudentButton;
	@FXML private Button returnCreateButton;
	@FXML private Button findStudentButton;
	@FXML private Button calendarMgtButton;
	@FXML private Button returnCalendarMgtButton;
	@FXML private Button returnUpdateButton;
	@FXML private Button deleteStudentButton;
	@FXML private Button returnDeleteButton;
	@FXML private Button enterScoreSheetsButton;
	@FXML private Button returnScoreSheetsButton;
	@FXML private Button addDeleteSubjectsButton;
	@FXML private Button returnAddDeleteSubjectsButton;
	@FXML private Button changePwdButton;
	@FXML private Button returnChangePwdButton;
	@FXML private Button returnChangePwdButton2;
	
	@FXML private BorderPane createStdPane;
	
	@FXML
	private void handleButtonAction(ActionEvent event) throws IOException{
	
		if(event.getSource() == createNewStudentButton) {
			try {
				Stage primaryStage = (Stage)createNewStudentButton.getScene().getWindow();
				BorderPane root = (BorderPane)FXMLLoader.load(getClass().getResource("studentEntryEntity.fxml"));
				primaryStage.setTitle("Student Details Entry");
				Scene scene = new Scene(root,1044,700);
				
//				IdleMonitor idleMonitor = new IdleMonitor(Duration.seconds(10),
//		                () -> Platform.exit(), true);
//		        idleMonitor.register(scene, Event.ANY);
//		        
//		        createNewStudentButton.setOnMouseClicked(e -> idleMonitor.startMonitoring());
//		        createStdPane = root;
//		        createStdPane.setOnMouseMoved(e -> idleMonitor.stopMonitoring());
				
				scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
				primaryStage.setScene(scene);
				primaryStage.show();
			} catch(Exception e) {
				e.printStackTrace();
				//msgLabel.setText("Error: "+ e.getMessage());
			}
		}
		else {
			Stage primaryStage = (Stage)returnCreateButton.getScene().getWindow();
			BorderPane root = (BorderPane)FXMLLoader.load(getClass().getResource("homeLaunch.fxml"));
			Scene scene = new Scene(root);
			primaryStage.setScene(scene);
			
//			Rectangle2D primaryScreenBounds = Screen.getPrimary().getVisualBounds();
//			primaryStage.setX(primaryScreenBounds.getMinX());
//			primaryStage.setY(primaryScreenBounds.getMinY());
//			primaryStage.setWidth(primaryScreenBounds.getWidth());
//			primaryStage.setHeight(primaryScreenBounds.getHeight());
			
			primaryStage.show();
		}
	}
	
	@FXML
	private void handleButtonAction2(ActionEvent event) throws IOException{
		
		if(event.getSource() == findStudentButton) {
			try {
				Stage primaryStage = (Stage)findStudentButton.getScene().getWindow();
				BorderPane root = (BorderPane)FXMLLoader.load(getClass().getResource("updateStudentEntity.fxml"));
				primaryStage.setTitle("Find Student");
				Scene scene = new Scene(root,1044,700);
				scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
				primaryStage.setScene(scene);
				primaryStage.show();
			} 
			catch(Exception e) {
				//msgLabel.setText("Error: "+ e.getMessage());
				e.printStackTrace();
			}
		}
		
		else {
			Stage primaryStage = (Stage)returnUpdateButton.getScene().getWindow();
			BorderPane root = (BorderPane)FXMLLoader.load(getClass().getResource("homeLaunch.fxml"));
			Scene scene = new Scene(root);
			primaryStage.setScene(scene);
			
//			Rectangle2D primaryScreenBounds = Screen.getPrimary().getVisualBounds();
//			primaryStage.setX(primaryScreenBounds.getMinX());
//			primaryStage.setY(primaryScreenBounds.getMinY());
//			primaryStage.setWidth(primaryScreenBounds.getWidth());
//			primaryStage.setHeight(primaryScreenBounds.getHeight());
			
			primaryStage.show();
			}
		}
	
	@FXML
	private void handleButtonAction3(ActionEvent event) throws IOException{
	
		if(event.getSource() == deleteStudentButton) {
			try {
				Stage primaryStage = (Stage)deleteStudentButton.getScene().getWindow();
				BorderPane root = (BorderPane)FXMLLoader.load(getClass().getResource("deleteCentral.fxml"));
				primaryStage.setTitle("Delete Student");
				Scene scene = new Scene(root,800,600);
				scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
				primaryStage.setScene(scene);
				primaryStage.show();
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
		else {
			Stage primaryStage = (Stage)returnDeleteButton.getScene().getWindow();
			BorderPane root = (BorderPane)FXMLLoader.load(getClass().getResource("homeLaunch.fxml"));
			Scene scene = new Scene(root);
			scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
			primaryStage.setScene(scene);
			
//			Rectangle2D primaryScreenBounds = Screen.getPrimary().getVisualBounds();
//			primaryStage.setX(primaryScreenBounds.getMinX());
//			primaryStage.setY(primaryScreenBounds.getMinY());
//			primaryStage.setWidth(primaryScreenBounds.getWidth());
//			primaryStage.setHeight(primaryScreenBounds.getHeight());
			
			primaryStage.show();
		}
	}
	
	@FXML
	private void handleButtonAction4(ActionEvent event) throws IOException{
	
		if(event.getSource() == enterScoreSheetsButton) {
			try {
				Stage primaryStage = (Stage)enterScoreSheetsButton.getScene().getWindow();
				BorderPane root = (BorderPane)FXMLLoader.load(getClass().getResource("scoreSheetsEntity.fxml"));
				Scene scene = new Scene(root,800,620);
				scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
				primaryStage.setScene(scene);
				primaryStage.setTitle("Student Scores Manager");
				primaryStage.show();
			} catch(Exception e) {
				msgLabel.setText("Error: "+ e.getMessage());
			}
		}
		else {
			Stage primaryStage = (Stage)returnScoreSheetsButton.getScene().getWindow();
			GridPane root = (GridPane)FXMLLoader.load(getClass().getResource("scoresheetsHome.fxml"));
			
			Scene scene = new Scene(root);
			primaryStage.setScene(scene);
			primaryStage.show();
		}
	}
	
	@FXML
	private void handleButtonAction5(ActionEvent event) throws IOException{
	
		if(event.getSource() == addDeleteSubjectsButton) {
			try {
				Stage primaryStage = (Stage)addDeleteSubjectsButton.getScene().getWindow();
				BorderPane root = (BorderPane)FXMLLoader.load(getClass().getResource("subjectList.fxml"));
				Scene scene = new Scene(root,800,600);
				scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
				primaryStage.setScene(scene);
				primaryStage.setTitle("Subjects Entry");
				primaryStage.show();
			} catch(Exception e) {
				msgLabel.setText("Error: "+ e.getMessage());
			}
		}
		else {
			Stage primaryStage = (Stage)returnAddDeleteSubjectsButton.getScene().getWindow();
			BorderPane root = (BorderPane)FXMLLoader.load(getClass().getResource("homeLaunch.fxml"));
			Scene scene = new Scene(root);
			scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
			primaryStage.setScene(scene);
			
//			Rectangle2D primaryScreenBounds = Screen.getPrimary().getVisualBounds();
//			primaryStage.setX(primaryScreenBounds.getMinX());
//			primaryStage.setY(primaryScreenBounds.getMinY());
//			primaryStage.setWidth(primaryScreenBounds.getWidth());
//			primaryStage.setHeight(primaryScreenBounds.getHeight());
			
			primaryStage.show();
		}
	}
	
	@FXML private Button logOffHomeButton;
	@FXML public void quitPlatformButton(ActionEvent event) {
		try{
			if(event.getSource() == logOffHomeButton) {
				try {
					Stage primaryStage = (Stage)logOffHomeButton.getScene().getWindow();
					BorderPane root = (BorderPane)FXMLLoader.load(getClass().getResource("login.fxml"));
					primaryStage.setTitle("Login");
					Scene scene = new Scene(root,600,400);
					scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
					primaryStage.setScene(scene);
					primaryStage.show();
				} catch(Exception e) {
					msgLabel.setText("Error: "+ e.getMessage());
				}
			}
		}
		catch(Exception e) {
			msgLabel.setText("Error: "+ e.getMessage());
		}
	}
	
	@FXML private Button adminButton;
	@FXML private Button logoutAdminButton;
	static String dispName;
	static String dispUserName;
	static String dispUserClass;
	
	@FXML
	private void handleButtonAction6(ActionEvent event) throws IOException{
	
		if(event.getSource() == adminButton) {
			
			EntityManagerFactory emfactory = 
					Persistence.createEntityManagerFactory("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
		
			String userName1 = userNameLogin_TF.getText();
			dispUserName2 = userNameLogin_TF.getText();
			String pwd1 = passwordLogin_TF.getText();
			
			Users user1 = entitymanager.find(Users.class, userName1);
			
			if(pwd1.equals(user1.getUserName()) && pwd1.equals(AES.decrypt(user1.getPassword(), secretKey))) {
				if(user1.getUserClass().equalsIgnoreCase("admin")) {
				
					try {
						Stage primaryStage = (Stage)adminButton.getScene().getWindow();
						BorderPane root = (BorderPane)FXMLLoader.load(getClass().getResource("changePassword2.fxml"));
						primaryStage.setTitle("You Must Change Your Password at Your First Login");
						Scene scene = new Scene(root,579,620);
						scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
						primaryStage.setScene(scene);
						primaryStage.show();
					} catch(Exception e) {
						userNameLogin_TF.setText("Error(adminpwd==userName): "+ e.getMessage());
					}
				}
				else {
					userNameLogin_TF.setText("Only Admin users can login here...");
				}
			}
			else if (pwd1.equals(AES.decrypt(user1.getPassword(), secretKey))){
				try {
					if(user1.getUserClass().equalsIgnoreCase("admin")) {
			
						try {
							Stage primaryStage = (Stage)adminButton.getScene().getWindow();
							BorderPane root = (BorderPane)FXMLLoader.load(getClass().getResource("users.fxml"));
							primaryStage.setTitle("Users Entry");
							Scene scene = new Scene(root,570,539);
							scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
							primaryStage.setScene(scene);
							primaryStage.show();
						} 
						catch(Exception e) {
							userNameLogin_TF.setText("Error: "+e.getLocalizedMessage());
						}
					}
					userNameLogin_TF.setText("Only admin can login here...");
				}
				catch(Exception e) {
					userNameLogin_TF.setText("Only admin can login here..."+ e.getLocalizedMessage());
				}
	
			}
			else {
				userNameLogin_TF.setText("Password missmatch... Contact Administrator");
				passwordLogin_TF.clear();
			}
			entitymanager.getTransaction().commit();
			entitymanager.close();
			emfactory.close();
		}
		else if(event.getSource() == returnChangePwdButton2) {
			Stage primaryStage = (Stage)returnChangePwdButton2.getScene().getWindow();
			BorderPane root = (BorderPane)FXMLLoader.load(getClass().getResource("login.fxml"));		
			Scene scene = new Scene(root);
			scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
			primaryStage.setScene(scene);
			primaryStage.show();
		}
		else {
			Stage primaryStage = (Stage)logoutAdminButton.getScene().getWindow();
			BorderPane root = (BorderPane)FXMLLoader.load(getClass().getResource("login.fxml"));
			Scene scene = new Scene(root);
			scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
			primaryStage.setScene(scene);
			primaryStage.show();
		}
		
	}
	
	@FXML
	private void handleButtonAction7(ActionEvent event) throws IOException{
	
		if(event.getSource() == changePwdButton) {
			try {				
				Stage primaryStage = (Stage)changePwdButton.getScene().getWindow();
				BorderPane root = (BorderPane)FXMLLoader.load(getClass().getResource("changePasswordSecurity.fxml"));
				primaryStage.setTitle("Change Your Password");
				Scene scene = new Scene(root,800,600);
				scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
				primaryStage.setScene(scene);
				primaryStage.show();
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
		else {
			Stage primaryStage = (Stage)returnChangePwdButton.getScene().getWindow();
			BorderPane root = (BorderPane)FXMLLoader.load(getClass().getResource("security.fxml"));
			Scene scene = new Scene(root);
			scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
			primaryStage.setScene(scene);
			primaryStage.show();
		}
	}
	
	@FXML private Button returnStdResultsButton, returnResultHome;
	@FXML private Button generateResultsButton, returnKusakiGrtHomeBtn;
	@FXML
	private void handleButtonAction8(ActionEvent event) throws IOException{
	
		if(event.getSource() == generateResultsButton) {
			try {				
				Stage primaryStage = (Stage)generateResultsButton.getScene().getWindow();
				GridPane pane = (GridPane)FXMLLoader.load(getClass().getResource("resultHome.fxml"));
				primaryStage.setTitle("Student Results");
				Scene scene = new Scene(pane,600,200);
				scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
				primaryStage.setScene(scene);
				primaryStage.show();
			} catch(Exception e) {
				msgLabel.setText("Error: "+ e.getMessage());
			}
		}
		else {
			Stage primaryStage = (Stage)returnResultHome.getScene().getWindow();
			BorderPane root = (BorderPane)FXMLLoader.load(getClass().getResource("homeLaunch.fxml"));
		
			Scene scene = new Scene(root);
			primaryStage.setScene(scene);
			
//			Rectangle2D primaryScreenBounds = Screen.getPrimary().getVisualBounds();
//			primaryStage.setX(primaryScreenBounds.getMinX());
//			primaryStage.setY(primaryScreenBounds.getMinY());
//			primaryStage.setWidth(primaryScreenBounds.getWidth());
//			primaryStage.setHeight(primaryScreenBounds.getHeight());
			
			primaryStage.show();
		}
	}
	
	//Calendar Mgt
	@FXML
	private void handleButtonAction9(ActionEvent event) throws IOException{
	
		if(event.getSource() == calendarMgtButton) {
			try {				
				Stage primaryStage = (Stage)calendarMgtButton.getScene().getWindow();
				primaryStage.setTitle("Calendar Management System");
				GridPane borderPane = (GridPane)FXMLLoader.load(getClass().getResource("calendarHome.fxml"));
				Scene scene = new Scene(borderPane,600,300);
				primaryStage.setScene(scene);
				primaryStage.show();
			} catch(Exception e) {
				msgLabel.setText("Error: "+ e.getMessage());
			}
		}
		else {
			Stage primaryStage = (Stage)returnCalendarMgtButton.getScene().getWindow();
			BorderPane root = (BorderPane)FXMLLoader.load(getClass().getResource("homeLaunch.fxml"));
		
			Scene scene = new Scene(root);
			primaryStage.setScene(scene);
			
//			Rectangle2D primaryScreenBounds = Screen.getPrimary().getVisualBounds();
//			primaryStage.setX(primaryScreenBounds.getMinX());
//			primaryStage.setY(primaryScreenBounds.getMinY());
//			primaryStage.setWidth(primaryScreenBounds.getWidth());
//			primaryStage.setHeight(primaryScreenBounds.getHeight());
			
			primaryStage.show();
		}
	}
	
	@FXML
	private void handleButtonAction10(ActionEvent event) throws IOException{
	
		if(event.getSource() == stdPayHistButton) {
			try {				
				Stage primaryStage = (Stage)stdPayHistButton.getScene().getWindow();
				primaryStage.setTitle("Student Payment Details");
				SplitPane splitPane = (SplitPane)FXMLLoader.load(getClass().getResource("stdPaymentHistory.fxml"));
				Scene scene = new Scene(splitPane,920,720);
				primaryStage.setScene(scene);
				primaryStage.show();
			} catch(Exception e) {
				paymentId_TF.setText("Error: "+ e.getMessage());
			}
		}
		else {
			Stage primaryStage = (Stage)returnStdPayHistButton.getScene().getWindow();
			BorderPane root = (BorderPane)FXMLLoader.load(getClass().getResource("homeLaunch.fxml"));
		
			Scene scene = new Scene(root);
			primaryStage.setScene(scene);
			
//			Rectangle2D primaryScreenBounds = Screen.getPrimary().getVisualBounds();
//			primaryStage.setX(primaryScreenBounds.getMinX());
//			primaryStage.setY(primaryScreenBounds.getMinY());
//			primaryStage.setWidth(primaryScreenBounds.getWidth());
//			primaryStage.setHeight(primaryScreenBounds.getHeight());
			
			primaryStage.show();
		}
	}
	
	@FXML private Button generateResultSSSBtn, returnStdResultsButton2;
	
	@FXML private void handleButtonAction11(ActionEvent event) throws IOException{
		
		if(event.getSource() == generateResultSSSBtn) {
			try {				
				Stage primaryStage = (Stage)generateResultSSSBtn.getScene().getWindow();
				SplitPane pane = (SplitPane)FXMLLoader.load(getClass().getResource("stdResultDosier.fxml"));
				primaryStage.setTitle("Student Results");
				Scene scene = new Scene(pane,920,720);
				scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
				primaryStage.setScene(scene);
				primaryStage.show();
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
		else {
			Stage primaryStage = (Stage)returnStdResultsButton2.getScene().getWindow();
			BorderPane root = (BorderPane)FXMLLoader.load(getClass().getResource("liveResultCentral.fxml"));
			Scene scene = new Scene(root);
			scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
			primaryStage.setScene(scene);
			primaryStage.show();
		}
	}
	
	@FXML private Button generateResultJSSBtn, returntoKusakiGrtHomeJSS, generateNewResultJSSBtn;
	
	@FXML private void handleButtonAction12(ActionEvent event) throws IOException{
		
		if(event.getSource() == generateResultJSSBtn) {
			try {				
				Stage primaryStage = (Stage)generateResultJSSBtn.getScene().getWindow();
				SplitPane pane = (SplitPane)FXMLLoader.load(getClass().getResource("JSS_StdResultDosier.fxml"));
				primaryStage.setTitle("Student Results");
				Scene scene = new Scene(pane,920,720);
				scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
				primaryStage.setScene(scene);
				primaryStage.show();
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
		else if(event.getSource() == generateNewResultJSSBtn) {
			try {				
				Stage primaryStage = (Stage)generateNewResultJSSBtn.getScene().getWindow();
				SplitPane pane = (SplitPane)FXMLLoader.load(getClass().getResource("JSS_New_StdResultDosier2.fxml"));
				primaryStage.setTitle("Student Results");
				Scene scene = new Scene(pane,920,720);
				scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
				primaryStage.setScene(scene);
				primaryStage.show();
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
		else {
			Stage primaryStage = (Stage)returntoKusakiGrtHomeJSS.getScene().getWindow();
			BorderPane root = (BorderPane)FXMLLoader.load(getClass().getResource("liveResultCentral.fxml"));
			Scene scene = new Scene(root);
			scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
			primaryStage.setScene(scene);
			primaryStage.show();
		}
	}
	
	@FXML private Button generateResultAnnualBtn, returntoKusakiGrtHomeAnnual;
	@FXML private void handleButtonAction13(ActionEvent event) throws IOException{
		
		if(event.getSource() == generateResultAnnualBtn) {
			try {				
				Stage primaryStage = (Stage)generateResultAnnualBtn.getScene().getWindow();
				SplitPane pane = (SplitPane)FXMLLoader.load(getClass().getResource("annualResultDosier.fxml"));
				primaryStage.setTitle("Student Results");
				Scene scene = new Scene(pane,920,720);
				scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
				primaryStage.setScene(scene);
				primaryStage.show();
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
		else {
			Stage primaryStage = (Stage)returntoKusakiGrtHomeAnnual.getScene().getWindow();
			BorderPane root = (BorderPane)FXMLLoader.load(getClass().getResource("liveResultCentral.fxml"));
			Scene scene = new Scene(root);
			scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
			primaryStage.setScene(scene);
			primaryStage.show();
		}
	}
	
	@FXML
	private void handleButtonAction14(ActionEvent event) throws IOException{
		
		if(event.getSource() == staffInfoButton) {
			try {
				Stage primaryStage = (Stage)staffInfoButton.getScene().getWindow();
				BorderPane root = (BorderPane)FXMLLoader.load(getClass().getResource("teacherInfo.fxml"));
				primaryStage.setTitle("Teacher Information");
				Scene scene = new Scene(root,1150,700);
				scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
				primaryStage.setScene(scene);
				primaryStage.show();
			} 
			catch(Exception e) {
				e.printStackTrace();
				//msgLabel.setText("Error: "+ e.getMessage());
			}
		}
		else {
			Stage primaryStage = (Stage)returnStaffInfoButton.getScene().getWindow();
			BorderPane root = (BorderPane)FXMLLoader.load(getClass().getResource("homeLaunch.fxml"));
			Scene scene = new Scene(root);
			scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
			primaryStage.setScene(scene);
			
//			Rectangle2D primaryScreenBounds = Screen.getPrimary().getVisualBounds();
//			primaryStage.setX(primaryScreenBounds.getMinX());
//			primaryStage.setY(primaryScreenBounds.getMinY());
//			primaryStage.setWidth(primaryScreenBounds.getWidth());
//			primaryStage.setHeight(primaryScreenBounds.getHeight());
			
			primaryStage.show();
			}
		}
	
	@FXML private void handleButtonAction15(ActionEvent event) throws IOException{
		
		if(event.getSource() == generateReportsButton) {
			try {				
				Stage primaryStage = (Stage)generateReportsButton.getScene().getWindow();
				BorderPane pane = (BorderPane)FXMLLoader.load(getClass().getResource("reportCentral.fxml"));
				primaryStage.setTitle("Basic Reports");
				Scene scene = new Scene(pane,800,600);
				scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
				primaryStage.setScene(scene);
				primaryStage.show();
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
		else {
			Stage primaryStage = (Stage)returnGenerateReportsButton.getScene().getWindow();
			BorderPane root = (BorderPane)FXMLLoader.load(getClass().getResource("homeLaunch.fxml"));
			Scene scene = new Scene(root);
			scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
			primaryStage.setScene(scene);
			
//			Rectangle2D primaryScreenBounds = Screen.getPrimary().getVisualBounds();
//			primaryStage.setX(primaryScreenBounds.getMinX());
//			primaryStage.setY(primaryScreenBounds.getMinY());
//			primaryStage.setWidth(primaryScreenBounds.getWidth());
//			primaryStage.setHeight(primaryScreenBounds.getHeight());
			
			primaryStage.show();
		}
	}
	
	@FXML private void handleButtonAction16(ActionEvent event) throws IOException{
		
		if(event.getSource() == terminalClassResultBtn) {
			try {				
				Stage primaryStage = (Stage)terminalClassResultBtn.getScene().getWindow();
				SplitPane pane = (SplitPane)FXMLLoader.load(getClass().getResource("classTerminalResult.fxml"));
				primaryStage.setTitle("Class Result");
				Scene scene = new Scene(pane,920,720);
				scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
				primaryStage.setScene(scene);
				primaryStage.show();
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
		else {
			Stage primaryStage = (Stage)returnGenReportHome.getScene().getWindow();
			BorderPane root = (BorderPane)FXMLLoader.load(getClass().getResource("reportCentral.fxml"));
			Scene scene = new Scene(root);
			scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
			primaryStage.setScene(scene);
			primaryStage.show();
		}
	}

	@FXML private void handleButtonAction17(ActionEvent event) throws IOException{
		
		if(event.getSource() == genAnnualClassSummary) {
			try {				
				Stage primaryStage = (Stage)genAnnualClassSummary.getScene().getWindow();
				SplitPane pane = (SplitPane)FXMLLoader.load(getClass().getResource("annualClassResult.fxml"));
				primaryStage.setTitle("Class Result");
				Scene scene = new Scene(pane,920,720);
				scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
				primaryStage.setScene(scene);
				primaryStage.show();
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
		else {
			Stage primaryStage = (Stage)annualClassSpoolBtn.getScene().getWindow();
			BorderPane root = (BorderPane)FXMLLoader.load(getClass().getResource("reportCentral.fxml"));
			Scene scene = new Scene(root);
			scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
			primaryStage.setScene(scene);
			primaryStage.show();
		}
	}
	
	@FXML private void handleButtonAction18(ActionEvent event) throws IOException{
		
		if(event.getSource() == terminalSubjectClassResultBtn) {
			try {				
				Stage primaryStage = (Stage)terminalSubjectClassResultBtn.getScene().getWindow();
				SplitPane pane = (SplitPane)FXMLLoader.load(getClass().getResource("classTerminalResultBySubject.fxml"));
				primaryStage.setTitle("Class Result");
				Scene scene = new Scene(pane,920,720);
				scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
				primaryStage.setScene(scene);
				primaryStage.show();
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
		else {
			Stage primaryStage = (Stage)returnSubjectGenReportHome.getScene().getWindow();
			BorderPane root = (BorderPane)FXMLLoader.load(getClass().getResource("reportCentral.fxml"));
			Scene scene = new Scene(root);
			scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
			primaryStage.setScene(scene);
			primaryStage.show();
		}
	}
	
	@FXML private void handleButtonAction19(ActionEvent event) throws IOException{
		
		if(event.getSource() == annualClassSummBySubjBtn) {
			try {				
				Stage primaryStage = (Stage)annualClassSummBySubjBtn.getScene().getWindow();
				SplitPane pane = (SplitPane)FXMLLoader.load(getClass().getResource("annualClassSummaryBySubject.fxml"));
				primaryStage.setTitle("Class Result");
				Scene scene = new Scene(pane,920,720);
				scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
				primaryStage.setScene(scene);
				primaryStage.show();
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
		else {
			Stage primaryStage = (Stage)returnAnnualSubjectGenReportHome.getScene().getWindow();
			BorderPane root = (BorderPane)FXMLLoader.load(getClass().getResource("reportCentral.fxml"));
			Scene scene = new Scene(root);
			scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
			primaryStage.setScene(scene);
			primaryStage.show();
		}
	}
	
	@FXML private void handleButtonAction20(ActionEvent event) throws IOException{
		
		if(event.getSource() == paymentHistRptBtn) {
			try {				
				Stage primaryStage = (Stage)paymentHistRptBtn.getScene().getWindow();
				SplitPane pane = (SplitPane)FXMLLoader.load(getClass().getResource("paymentHistoryReport.fxml"));
				primaryStage.setTitle("Class Result");
				Scene scene = new Scene(pane,920,720);
				scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
				primaryStage.setScene(scene);
				primaryStage.show();
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
		else {
			Stage primaryStage = (Stage)returnPayHistReptBtn.getScene().getWindow();
			BorderPane root = (BorderPane)FXMLLoader.load(getClass().getResource("reportHome.fxml"));
			Scene scene = new Scene(root);
			primaryStage.setScene(scene);
			primaryStage.show();
		}
	}
	
	@FXML private void handleButtonAction21(ActionEvent event) throws IOException{
		
		if(event.getSource() == studentListBtn) {
			try {				
				Stage primaryStage = (Stage)studentListBtn.getScene().getWindow();
				SplitPane pane = (SplitPane)FXMLLoader.load(getClass().getResource("studentList.fxml"));
				primaryStage.setTitle("Student List");
				Scene scene = new Scene(pane,920,720);
				scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
				primaryStage.setScene(scene);
				primaryStage.show();
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
		else {
			Stage primaryStage = (Stage)returnSpoolStdListBtn.getScene().getWindow();
			BorderPane root = (BorderPane)FXMLLoader.load(getClass().getResource("reportCentral.fxml"));
			Scene scene = new Scene(root);
			scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
			primaryStage.setScene(scene);
			primaryStage.show();
		}
	}
	
	@FXML private void handleButtonAction22(ActionEvent event) throws IOException{
		
		if(event.getSource() == staffListBtn) {
			try {				
				Stage primaryStage = (Stage)staffListBtn.getScene().getWindow();
				SplitPane pane = (SplitPane)FXMLLoader.load(getClass().getResource("staffList.fxml"));
				primaryStage.setTitle("Class Result");
				Scene scene = new Scene(pane,920,720);
				scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
				primaryStage.setScene(scene);
				primaryStage.show();
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
		else {
			Stage primaryStage = (Stage)returnSpoolStaffListBtn.getScene().getWindow();
			BorderPane root = (BorderPane)FXMLLoader.load(getClass().getResource("reportCentral.fxml"));
			Scene scene = new Scene(root);
			scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
			primaryStage.setScene(scene);
			primaryStage.show();
		}
	}

	@FXML private void handleButtonAction23(ActionEvent event) throws IOException{
		
		if(event.getSource() == librarySysBtn) {
			try {				
				Stage primaryStage = (Stage)librarySysBtn.getScene().getWindow();
				BorderPane pane = (BorderPane)FXMLLoader.load(getClass().getResource("libraryCentral.fxml"));
				primaryStage.setTitle("Library Mgt System");
				Scene scene = new Scene(pane,800,600);
				scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
				primaryStage.setScene(scene);
				primaryStage.show();
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
		else {
			Stage primaryStage = (Stage)returnLibrarySysBtn.getScene().getWindow();
			BorderPane root = (BorderPane)FXMLLoader.load(getClass().getResource("homeLaunch.fxml"));
			Scene scene = new Scene(root);
			scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
			primaryStage.setScene(scene);
			
//			Rectangle2D primaryScreenBounds = Screen.getPrimary().getVisualBounds();
//			primaryStage.setX(primaryScreenBounds.getMinX());
//			primaryStage.setY(primaryScreenBounds.getMinY());
//			primaryStage.setWidth(primaryScreenBounds.getWidth());
//			primaryStage.setHeight(primaryScreenBounds.getHeight());
			
			primaryStage.show();
		}
	}
	
	@FXML private void handleButtonAction24(ActionEvent event) throws IOException{
		
		if(event.getSource() == createLibBook) {
			try {				
				Stage primaryStage = (Stage)createLibBook.getScene().getWindow();
				BorderPane pane = (BorderPane)FXMLLoader.load(getClass().getResource("createNewBook.fxml"));
				primaryStage.setTitle("Library Mgt System");
				Scene scene = new Scene(pane,900,700);
				scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
				primaryStage.setScene(scene);
				primaryStage.show();
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
		else {
			Stage primaryStage = (Stage)returnCreateLibBook.getScene().getWindow();
			BorderPane root = (BorderPane)FXMLLoader.load(getClass().getResource("libraryCentral.fxml"));
			Scene scene = new Scene(root);
			scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
			primaryStage.setScene(scene);
			primaryStage.show();
		}
	}
	
	@FXML private void handleButtonAction25(ActionEvent event) throws IOException{
		
		if(event.getSource() == lendBookBtn) {
			try {				
				Stage primaryStage = (Stage)lendBookBtn.getScene().getWindow();
				BorderPane pane = (BorderPane)FXMLLoader.load(getClass().getResource("lendABook.fxml"));
				primaryStage.setTitle("Library Mgt System");
				Scene scene = new Scene(pane,900,700);
				scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
				primaryStage.setScene(scene);
				primaryStage.show();
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
		else {
			Stage primaryStage = (Stage)returnLendBookBtn.getScene().getWindow();
			BorderPane root = (BorderPane)FXMLLoader.load(getClass().getResource("libraryCentral.fxml"));
			Scene scene = new Scene(root);
			scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
			primaryStage.setScene(scene);
			primaryStage.show();
		}
	}
	
	@FXML private void handleButtonAction26(ActionEvent event) throws IOException{
		
		if(event.getSource() == bookReturnBtn) {
			try {				
				Stage primaryStage = (Stage)bookReturnBtn.getScene().getWindow();
				BorderPane pane = (BorderPane)FXMLLoader.load(getClass().getResource("returnABook.fxml"));
				primaryStage.setTitle("Library Mgt System");
				Scene scene = new Scene(pane,900,700);
				scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
				primaryStage.setScene(scene);
				primaryStage.show();
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
		else {
			Stage primaryStage = (Stage)returnBookReturnBtn.getScene().getWindow();
			BorderPane root = (BorderPane)FXMLLoader.load(getClass().getResource("libraryCentral.fxml"));
			Scene scene = new Scene(root);
			scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
			primaryStage.setScene(scene);
			primaryStage.show();
		}
	} 
	
	@FXML private void handleButtonAction27(ActionEvent event) throws IOException{
		
		if(event.getSource() == listLibBooksButton) {
			try {				
				Stage primaryStage = (Stage)listLibBooksButton.getScene().getWindow();
				SplitPane pane = (SplitPane)FXMLLoader.load(getClass().getResource("libBookList.fxml"));
				primaryStage.setTitle("Library Mgt System");
				Scene scene = new Scene(pane,920,720);
				scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
				primaryStage.setScene(scene);
				primaryStage.show();
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
		else {
			Stage primaryStage = (Stage)returnBookLibHome.getScene().getWindow();
			BorderPane root = (BorderPane)FXMLLoader.load(getClass().getResource("libraryCentral.fxml"));
			Scene scene = new Scene(root);
			scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
			primaryStage.setScene(scene);
			primaryStage.show();
		}
	}

	@FXML private void handleButtonAction28(ActionEvent event) throws IOException{
		
		if(event.getSource() == listLibBooksLentButton) {
			try {				
				Stage primaryStage = (Stage)listLibBooksLentButton.getScene().getWindow();
				SplitPane pane = (SplitPane)FXMLLoader.load(getClass().getResource("libBookLent.fxml"));
				primaryStage.setTitle("Library Mgt System");
				Scene scene = new Scene(pane,920,720);
				scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
				primaryStage.setScene(scene);
				primaryStage.show();
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
		else {
			Stage primaryStage = (Stage)returnBookLentLibHome.getScene().getWindow();
			BorderPane root = (BorderPane)FXMLLoader.load(getClass().getResource("libraryCentral.fxml"));
			Scene scene = new Scene(root);
			scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
			primaryStage.setScene(scene);
			primaryStage.show();
		}
	}
	
	@FXML private void handleButtonAction29(ActionEvent event) throws IOException{
		
		if(event.getSource() == listLibBooksOverdueButton) {
			try {				
				Stage primaryStage = (Stage)listLibBooksOverdueButton.getScene().getWindow();
				SplitPane pane = (SplitPane)FXMLLoader.load(getClass().getResource("libBookOverdue.fxml"));
				primaryStage.setTitle("Library Mgt System");
				Scene scene = new Scene(pane,920,720);
				scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
				primaryStage.setScene(scene);
				primaryStage.show();
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
		else {
			Stage primaryStage = (Stage)returnOverdueLibHome.getScene().getWindow();
			BorderPane root = (BorderPane)FXMLLoader.load(getClass().getResource("libraryCentral.fxml"));
			Scene scene = new Scene(root);
			scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
			primaryStage.setScene(scene);
			primaryStage.show();
		}
	}
	
	@FXML private Button enterImageHomeBtn, returnEnterImageHomeBtn;
	@FXML private void handleButtonAction30(ActionEvent event) throws IOException{
		
		if(event.getSource() == enterImageHomeBtn) {
			try {				
				Stage primaryStage = (Stage)enterImageHomeBtn.getScene().getWindow();
				GridPane pane = (GridPane)FXMLLoader.load(getClass().getResource("imageHome.fxml"));
				primaryStage.setTitle("Image Mgt System");
				Scene scene = new Scene(pane,600,400);
				scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
				primaryStage.setScene(scene);
				primaryStage.show();
			} catch(Exception e) {
				e.printStackTrace();
				//msgLabel.setText("Error: "+ e.getMessage());
			}
		}
		else {
			Stage primaryStage = (Stage)returnEnterImageHomeBtn.getScene().getWindow();
			BorderPane root = (BorderPane)FXMLLoader.load(getClass().getResource("homeLaunch.fxml"));
			Scene scene = new Scene(root);
			scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
			primaryStage.setScene(scene);
			
//			Rectangle2D primaryScreenBounds = Screen.getPrimary().getVisualBounds();
//			primaryStage.setX(primaryScreenBounds.getMinX());
//			primaryStage.setY(primaryScreenBounds.getMinY());
//			primaryStage.setWidth(primaryScreenBounds.getWidth());
//			primaryStage.setHeight(primaryScreenBounds.getHeight());
			
			primaryStage.show();
		}
	}
	
	@FXML private Button enterUploadPhotoBtn, returnEnterUploadPhotoBtn;
	@FXML private void handleButtonAction31(ActionEvent event) throws IOException{
		
		if(event.getSource() == enterUploadPhotoBtn) {
			try {				
				Stage primaryStage = (Stage)enterUploadPhotoBtn.getScene().getWindow();
				BorderPane pane = (BorderPane)FXMLLoader.load(getClass().getResource("imageCapture.fxml"));
				primaryStage.setTitle("Image Mgt System");
				Scene scene = new Scene(pane,1044,700);
				scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
				primaryStage.setScene(scene);
				primaryStage.show();
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
		else {
			Stage primaryStage = (Stage)returnEnterUploadPhotoBtn.getScene().getWindow();
			BorderPane root = (BorderPane)FXMLLoader.load(getClass().getResource("homeLaunch.fxml"));
			Scene scene = new Scene(root);
			scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
			primaryStage.setScene(scene);
			
//			Rectangle2D primaryScreenBounds = Screen.getPrimary().getVisualBounds();
//			primaryStage.setX(primaryScreenBounds.getMinX());
//			primaryStage.setY(primaryScreenBounds.getMinY());
//			primaryStage.setWidth(primaryScreenBounds.getWidth());
//			primaryStage.setHeight(primaryScreenBounds.getHeight());
			
			primaryStage.show();
		}
	}
	
	@FXML private Button enterEnqViewBtn, returnEnterEnqViewBtn;
	@FXML private void handleButtonAction32(ActionEvent event) throws IOException{
		
		if(event.getSource() == enterEnqViewBtn) {
			try {				
				Stage primaryStage = (Stage)enterEnqViewBtn.getScene().getWindow();
				GridPane pane = (GridPane)FXMLLoader.load(getClass().getResource("imageView.fxml"));
				primaryStage.setTitle("Image Mgt System");
				Scene scene = new Scene(pane,550,600);
				scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
				primaryStage.setScene(scene);
				primaryStage.show();
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
		else {
			Stage primaryStage = (Stage)returnEnterEnqViewBtn.getScene().getWindow();
			GridPane root = (GridPane)FXMLLoader.load(getClass().getResource("imageHome.fxml"));
		
			Scene scene = new Scene(root);
			primaryStage.setScene(scene);
			primaryStage.show();
		}
	}
	
	@FXML private void handleButtonAction33(ActionEvent event) throws IOException{
		
		if(event.getSource() == studentListBtn2) {
			try {				
				Stage primaryStage = (Stage)studentListBtn2.getScene().getWindow();
				SplitPane pane = (SplitPane)FXMLLoader.load(getClass().getResource("stdWithoutImg.fxml"));
				primaryStage.setTitle("Student Without Image");
				Scene scene = new Scene(pane,920,720);
				scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
				primaryStage.setScene(scene);
				primaryStage.show();
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
		else {
			Stage primaryStage = (Stage)returnSpoolStdListBtn2.getScene().getWindow();
			GridPane root = (GridPane)FXMLLoader.load(getClass().getResource("imageHome.fxml"));
			Scene scene = new Scene(root);
			primaryStage.setScene(scene);
			primaryStage.show();
		}
	}
	
	@FXML
	private void handleButtonAction34(ActionEvent event) throws IOException{
	
		if(event.getSource() == enterInventoryPad) {
			try {				
				Stage primaryStage = (Stage)enterInventoryPad.getScene().getWindow();
				BorderPane root = (BorderPane)FXMLLoader.load(getClass().getResource("adminCentral.fxml"));
				primaryStage.setTitle("Webstartrek School Management System");
				Scene scene = new Scene(root,800,600);
				scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
				primaryStage.setScene(scene);
				primaryStage.show();
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
		else {
			Stage primaryStage = (Stage)returnEnterInventoryPad.getScene().getWindow();
			BorderPane root = (BorderPane)FXMLLoader.load(getClass().getResource("homeLaunch.fxml"));
			Scene scene = new Scene(root);
			scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
			primaryStage.setScene(scene);
			
//			Rectangle2D primaryScreenBounds = Screen.getPrimary().getVisualBounds();
//			primaryStage.setX(primaryScreenBounds.getMinX());
//			primaryStage.setY(primaryScreenBounds.getMinY());
//			primaryStage.setWidth(primaryScreenBounds.getWidth());
//			primaryStage.setHeight(primaryScreenBounds.getHeight());
			
			primaryStage.show();
		}
	}
	
	@FXML
	private void handleButtonAction35(ActionEvent event) throws IOException{
	
		if(event.getSource() == enterInventoryBtn) {
			try {				
				Stage primaryStage = (Stage)enterInventoryBtn.getScene().getWindow();
				BorderPane root = (BorderPane)FXMLLoader.load(getClass().getResource("createInventoryInfo.fxml"));
				primaryStage.setTitle("Webstartrek School Management System");
				Scene scene = new Scene(root,800,600);
				scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
				primaryStage.setScene(scene);
				primaryStage.show();
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
		else {
			Stage primaryStage = (Stage)returnEnterInventoryBtn.getScene().getWindow();
			BorderPane root = (BorderPane)FXMLLoader.load(getClass().getResource("homeLaunch.fxml"));
			Scene scene = new Scene(root);
			scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
			primaryStage.setScene(scene);
			
//			Rectangle2D primaryScreenBounds = Screen.getPrimary().getVisualBounds();
//			primaryStage.setX(primaryScreenBounds.getMinX());
//			primaryStage.setY(primaryScreenBounds.getMinY());
//			primaryStage.setWidth(primaryScreenBounds.getWidth());
//			primaryStage.setHeight(primaryScreenBounds.getHeight());
			
			primaryStage.show();
		}
	}
	
	@FXML
	private void handleButtonAction36(ActionEvent event) throws IOException{
	
		if(event.getSource() == invListBtn) {
			try {				
				Stage primaryStage = (Stage)invListBtn.getScene().getWindow();
				SplitPane root = (SplitPane)FXMLLoader.load(getClass().getResource("inventoryList.fxml"));
				primaryStage.setTitle("Inventory Information");
				Scene scene = new Scene(root,920,720);
				scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
				primaryStage.setScene(scene);
				primaryStage.show();
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
		else {
			Stage primaryStage = (Stage)returnInvListBtn.getScene().getWindow();
			BorderPane root = (BorderPane)FXMLLoader.load(getClass().getResource("adminCentral.fxml"));
			Scene scene = new Scene(root);
			scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
			primaryStage.setScene(scene);
			primaryStage.show();
		}
	}
	
	@FXML
	private void handleButtonAction37(ActionEvent event) throws IOException{
	
		if(event.getSource() == enterDrugsInfoBtn) {
			try {				
				Stage primaryStage = (Stage)enterDrugsInfoBtn.getScene().getWindow();
				BorderPane root = (BorderPane)FXMLLoader.load(getClass().getResource("billedItems.fxml"));
				primaryStage.setTitle("Bill Items");
				Scene scene = new Scene(root,800,600);
				scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
				primaryStage.setScene(scene);
				primaryStage.show();
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
		else {
			Stage primaryStage = (Stage)returnEnterDrugsInfoBtn.getScene().getWindow();
			BorderPane root = (BorderPane)FXMLLoader.load(getClass().getResource("homeLaunch.fxml"));
			Scene scene = new Scene(root);
			scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
			primaryStage.setScene(scene);
			
//			Rectangle2D primaryScreenBounds = Screen.getPrimary().getVisualBounds();
//			primaryStage.setX(primaryScreenBounds.getMinX());
//			primaryStage.setY(primaryScreenBounds.getMinY());
//			primaryStage.setWidth(primaryScreenBounds.getWidth());
//			primaryStage.setHeight(primaryScreenBounds.getHeight());
			
			primaryStage.show();
		}
	}
	
	@FXML
	private void handleButtonAction38(ActionEvent event) throws IOException{
	
		if(event.getSource() == enterCashPadBtn) {
			try {				
				Stage primaryStage = (Stage)enterCashPadBtn.getScene().getWindow();
				GridPane root = (GridPane)FXMLLoader.load(getClass().getResource("cashPad.fxml"));
				primaryStage.setTitle("Cash Management System");
				Scene scene = new Scene(root,800,400);
				scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
				primaryStage.setScene(scene);
				primaryStage.show();
			} catch(Exception e) {
				msgLabel.setText("Error: "+ e.getMessage());
			}
		}
		else {
			Stage primaryStage = (Stage)returnEnterCashPadBtn.getScene().getWindow();
			BorderPane root = (BorderPane)FXMLLoader.load(getClass().getResource("homeLaunch.fxml"));
			Scene scene = new Scene(root);
			primaryStage.setScene(scene);
			
//			Rectangle2D primaryScreenBounds = Screen.getPrimary().getVisualBounds();
//			primaryStage.setX(primaryScreenBounds.getMinX());
//			primaryStage.setY(primaryScreenBounds.getMinY());
//			primaryStage.setWidth(primaryScreenBounds.getWidth());
//			primaryStage.setHeight(primaryScreenBounds.getHeight());
			
			primaryStage.show();
		}
	}
	
	@FXML
	private void handleButtonAction39(ActionEvent event) throws IOException{
	
		if(event.getSource() == enterABBtn) {
			try {				
				Stage primaryStage = (Stage)enterABBtn.getScene().getWindow();
				BorderPane root = (BorderPane)FXMLLoader.load(getClass().getResource("balanceEnquiry.fxml"));
				primaryStage.setTitle("Financial Management System");
				Scene scene = new Scene(root,800,600);
				scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
				primaryStage.setScene(scene);
				primaryStage.show();
			} catch(Exception e) {
				//msgLabel.setText("Error: "+ e.getMessage());
				e.printStackTrace();
			}
		}
		else {
			Stage primaryStage = (Stage)returnEnterABBtn.getScene().getWindow();
			GridPane root = (GridPane)FXMLLoader.load(getClass().getResource("homeLaunch.fxml"));
			Scene scene = new Scene(root);
			scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
			primaryStage.setScene(scene);
			
//			Rectangle2D primaryScreenBounds = Screen.getPrimary().getVisualBounds();
//			primaryStage.setX(primaryScreenBounds.getMinX());
//			primaryStage.setY(primaryScreenBounds.getMinY());
//			primaryStage.setWidth(primaryScreenBounds.getWidth());
//			primaryStage.setHeight(primaryScreenBounds.getHeight());
			
			primaryStage.show();
		}
	}
	
	@FXML
	private void handleButtonAction40(ActionEvent event) throws IOException{
	
		if(event.getSource() == tellerButton) {
			try {				
				Stage primaryStage = (Stage)tellerButton.getScene().getWindow();
				BorderPane root = (BorderPane)FXMLLoader.load(getClass().getResource("hmsTellering.fxml"));
				primaryStage.setTitle("Transaction Window");
				Scene scene = new Scene(root,1044,700);
				scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
				primaryStage.setScene(scene);
				primaryStage.show();
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
		else {
			Stage primaryStage = (Stage)returnTellerButton.getScene().getWindow();
			BorderPane root = (BorderPane)FXMLLoader.load(getClass().getResource("homeLaunch.fxml"));
			Scene scene = new Scene(root);
			scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
			primaryStage.setScene(scene);
			
//			Rectangle2D primaryScreenBounds = Screen.getPrimary().getVisualBounds();
//			primaryStage.setX(primaryScreenBounds.getMinX());
//			primaryStage.setY(primaryScreenBounds.getMinY());
//			primaryStage.setWidth(primaryScreenBounds.getWidth());
//			primaryStage.setHeight(primaryScreenBounds.getHeight());
			
			primaryStage.show();
		}	
	}
	
	@FXML
	private void handleButtonAction41(ActionEvent event) throws IOException{
	
		if(event.getSource() == FTButton) {
			try {				
				Stage primaryStage = (Stage)FTButton.getScene().getWindow();
				BorderPane pane = (BorderPane)FXMLLoader.load(getClass().getResource("fundTransfer.fxml"));
				primaryStage.setTitle("Fund Transfer");
				Scene scene = new Scene(pane,1044,700);
				scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
				primaryStage.setScene(scene);
				primaryStage.show();
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
		else {
			Stage primaryStage = (Stage)returnFTButton.getScene().getWindow();
			BorderPane root = (BorderPane)FXMLLoader.load(getClass().getResource("homeLaunch.fxml"));
			Scene scene = new Scene(root);
			scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
			primaryStage.setScene(scene);
			
//			Rectangle2D primaryScreenBounds = Screen.getPrimary().getVisualBounds();
//			primaryStage.setX(primaryScreenBounds.getMinX());
//			primaryStage.setY(primaryScreenBounds.getMinY());
//			primaryStage.setWidth(primaryScreenBounds.getWidth());
//			primaryStage.setHeight(primaryScreenBounds.getHeight());
			
			primaryStage.show();
		}
	}
	
	@FXML
	private void handleButtonAction42(ActionEvent event) throws IOException{
	
		if(event.getSource() == enterOpenTillGLBtn) {
			try {				
				Stage primaryStage = (Stage)enterOpenTillGLBtn.getScene().getWindow();
				BorderPane root = (BorderPane)FXMLLoader.load(getClass().getResource("bill_acct_admin_Tab.fxml"));
				primaryStage.setTitle("Webstartrek Financial Management System");
				Scene scene = new Scene(root,920,720);
				scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
				primaryStage.setScene(scene);
				primaryStage.show();
			} catch(Exception e) {
				//msgLabel.setText("Error: "+ e.getMessage());
				e.printStackTrace();
			}
		}
		else if(event.getSource() == returnEnterBillForDrugsBtn){
			Stage primaryStage = (Stage)returnEnterBillForDrugsBtn.getScene().getWindow();
			BorderPane root = (BorderPane)FXMLLoader.load(getClass().getResource("homeLaunch.fxml"));
			Scene scene = new Scene(root);
			scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
			primaryStage.setScene(scene);
			
//			Rectangle2D primaryScreenBounds = Screen.getPrimary().getVisualBounds();
//			primaryStage.setX(primaryScreenBounds.getMinX());
//			primaryStage.setY(primaryScreenBounds.getMinY());
//			primaryStage.setWidth(primaryScreenBounds.getWidth());
//			primaryStage.setHeight(primaryScreenBounds.getHeight());
			
			primaryStage.show();
		}
		else {
			Stage primaryStage = (Stage)returnEnterOpenTillGLBtn.getScene().getWindow();
			BorderPane root = (BorderPane)FXMLLoader.load(getClass().getResource("homeLaunch.fxml"));
			Scene scene = new Scene(root);
			scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
			primaryStage.setScene(scene);
			
//			Rectangle2D primaryScreenBounds = Screen.getPrimary().getVisualBounds();
//			primaryStage.setX(primaryScreenBounds.getMinX());
//			primaryStage.setY(primaryScreenBounds.getMinY());
//			primaryStage.setWidth(primaryScreenBounds.getWidth());
//			primaryStage.setHeight(primaryScreenBounds.getHeight());
			
			primaryStage.show();
		}
	}
	
	@FXML private Button enterStmBtn, returnEnterPatientStmBtn, transactionHistoryTxnButton, 
		enterStdTHBtn, genEnterTHBtn;
	@FXML private void handleButtonAction43(ActionEvent event) throws IOException{
		
		if(event.getSource() == enterStmBtn) {
			try {				
				Stage primaryStage = (Stage)enterStmBtn.getScene().getWindow();
				SplitPane root = (SplitPane)FXMLLoader.load(getClass().getResource("patientStatement.fxml"));
				primaryStage.setTitle("Student Information");
				Scene scene = new Scene(root,800,720);
				scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
				primaryStage.setScene(scene);
				primaryStage.show();
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
		else if(event.getSource() == enterStdTHBtn) {
			try {				
				Stage primaryStage = (Stage)enterStdTHBtn.getScene().getWindow();
				SplitPane root = (SplitPane)FXMLLoader.load(getClass().getResource("patientStatement.fxml"));
				primaryStage.setTitle("Student Information");
				Scene scene = new Scene(root,800,720);
				scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
				primaryStage.setScene(scene);
				primaryStage.show();
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
		else if(event.getSource() == transactionHistoryTxnButton) {
			try {				
				Stage primaryStage = (Stage)transactionHistoryTxnButton.getScene().getWindow();
				SplitPane root = (SplitPane)FXMLLoader.load(getClass().getResource("patientStatement.fxml"));
				primaryStage.setTitle("Student Information");
				Scene scene = new Scene(root,800,720);
				scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
				primaryStage.setScene(scene);
				primaryStage.show();
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
		else if(event.getSource() == genEnterTHBtn) {
			try {				
				Stage primaryStage = (Stage)genEnterTHBtn.getScene().getWindow();
				SplitPane root = (SplitPane)FXMLLoader.load(getClass().getResource("patientStatement.fxml"));
				primaryStage.setTitle("Student Information");
				Scene scene = new Scene(root,800,720);
				scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
				primaryStage.setScene(scene);
				primaryStage.show();
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
		else {
			Stage primaryStage = (Stage)returnEnterPatientStmBtn.getScene().getWindow();
			BorderPane root = (BorderPane)FXMLLoader.load(getClass().getResource("finHomeCentral.fxml"));
			Scene scene = new Scene(root);
			scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
			primaryStage.setScene(scene);
			primaryStage.show();
		}
	}
	
//	@FXML private void handleButtonAction44(ActionEvent event) throws IOException{
//		
//		if(event.getSource() == enterEarnedIncomeBtn) {
//			try {				
//				Stage primaryStage = (Stage)enterEarnedIncomeBtn.getScene().getWindow();
//				SplitPane pane = (SplitPane)FXMLLoader.load(getClass().getResource("earnedIncome.fxml"));
//				primaryStage.setTitle("School Mgt System");
//				Scene scene = new Scene(pane,920,720);
//				scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
//				primaryStage.setScene(scene);
//				primaryStage.show();
//			} catch(Exception e) {
//				e.printStackTrace();
//			}
//		}
//		else {
//			Stage primaryStage = (Stage)returnEnterIncomeBtn.getScene().getWindow();
//			GridPane root = (GridPane)FXMLLoader.load(getClass().getResource("cashPad.fxml"));
//			Scene scene = new Scene(root);
//			scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
//			primaryStage.setScene(scene);
//			primaryStage.show();
//		}
//	}
	
	
	@FXML private Button cashEnterBillBtn;
//	@FXML
//	private void handleButtonAction45(ActionEvent event) throws IOException{
//	
//		if(event.getSource() == cashEnterBillBtn) {
//			try {				
//				Stage primaryStage = (Stage)cashEnterBillBtn.getScene().getWindow();
//				BorderPane root = (BorderPane)FXMLLoader.load(getClass().getResource("billForDrugs.fxml"));
//				primaryStage.setTitle("Cash Management System");
//				Scene scene = new Scene(root,720,610);
//				scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
//				primaryStage.setScene(scene);
//				primaryStage.show();
//			} catch(Exception e) {
//				//msgLabel.setText("Error: "+ e.getMessage());
//				e.printStackTrace();
//			}
//		}
//		else {
//			Stage primaryStage = (Stage)returnEnterBillForDrugsBtn.getScene().getWindow();
//			GridPane root = (GridPane)FXMLLoader.load(getClass().getResource("cashPad.fxml"));
//			Scene scene = new Scene(root);
//			primaryStage.setScene(scene);
//			primaryStage.show();
//		}
//	}
	
	@FXML private void handleButtonAction46(ActionEvent event) throws IOException{
		
		if(event.getSource() == enterEarnedIncomeBtn2) {
			try {				
				Stage primaryStage = (Stage)enterEarnedIncomeBtn2.getScene().getWindow();
				TabPane pane = (TabPane)FXMLLoader.load(getClass().getResource("earned_PEI_Tab2.fxml"));
				primaryStage.setTitle("Cash Mgt System");
				Scene scene = new Scene(pane,920,720);
				scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
				primaryStage.setScene(scene);
				primaryStage.show();
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
		else if(event.getSource() == returnEnterIncomeBtn) {
			Stage primaryStage = (Stage)returnEnterIncomeBtn.getScene().getWindow();
			BorderPane root = (BorderPane)FXMLLoader.load(getClass().getResource("finHomeCentral.fxml"));
			Scene scene = new Scene(root);
			scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
			primaryStage.setScene(scene);
			primaryStage.show();
		}
		else {
			Stage primaryStage = (Stage)returnEnterIncomeBtn2.getScene().getWindow();
			BorderPane root = (BorderPane)FXMLLoader.load(getClass().getResource("finHomeCentral.fxml"));
			Scene scene = new Scene(root);
			scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
			primaryStage.setScene(scene);
			primaryStage.show();
		}
	}
	
	@FXML private void handleButtonAction47(ActionEvent event) throws IOException{
		
		if(event.getSource() == invoicingBtn) {
			try {				
				Stage primaryStage = (Stage)invoicingBtn.getScene().getWindow();
				TabPane root = (TabPane)FXMLLoader.load(getClass().getResource("invoice_bill_Tab.fxml"));
				primaryStage.setTitle("Financial Information");
				Scene scene = new Scene(root,920,720);
				scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
				primaryStage.setScene(scene);
				primaryStage.show();
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
		else if(event.getSource() == returnBillingsBtn) {
			Stage primaryStage = (Stage)returnBillingsBtn.getScene().getWindow();
			BorderPane root = (BorderPane)FXMLLoader.load(getClass().getResource("finHomeCentral.fxml"));
			Scene scene = new Scene(root);
			scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
			primaryStage.setScene(scene);
			primaryStage.show();
		}
		else {
			Stage primaryStage = (Stage)returnInvoicingBtn.getScene().getWindow();
			BorderPane root = (BorderPane)FXMLLoader.load(getClass().getResource("finHomeCentral.fxml"));
			Scene scene = new Scene(root);
			scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
			primaryStage.setScene(scene);
			primaryStage.show();
		}
	}
	
//	@FXML
//	private void handleButtonAction48(ActionEvent event) throws IOException{
//	
//		if(event.getSource() == billingsBtn) {
//			try {				
//				Stage primaryStage = (Stage)billingsBtn.getScene().getWindow();
//				SplitPane root = (SplitPane)FXMLLoader.load(getClass().getResource("Billing.fxml"));
//				primaryStage.setTitle("Billing Information");
//				Scene scene = new Scene(root,920,720);
//				scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
//				primaryStage.setScene(scene);
//				primaryStage.show();
//			} catch(Exception e) {
//				e.printStackTrace();
//			}
//		}
//		else {
//			Stage primaryStage = (Stage)returnBillingsBtn.getScene().getWindow();
//			GridPane root = (GridPane)FXMLLoader.load(getClass().getResource("cashPad.fxml"));
//			Scene scene = new Scene(root);
//			primaryStage.setScene(scene);
//			primaryStage.show();
//		}
//	}
	
	@FXML
	private void handleButtonAction49(ActionEvent event) throws IOException{
	
		if(event.getSource() == enterCreateClass) {
			try {				
				Stage primaryStage = (Stage)enterCreateClass.getScene().getWindow();
				BorderPane root = (BorderPane)FXMLLoader.load(getClass().getResource("createStdClasses.fxml"));
				primaryStage.setTitle("School Management System");
				Scene scene = new Scene(root,800,600);
				scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
				primaryStage.setScene(scene);
				primaryStage.show();
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
		else {
			Stage primaryStage = (Stage)returnEnterCreateClass.getScene().getWindow();
			BorderPane root = (BorderPane)FXMLLoader.load(getClass().getResource("homeLaunch.fxml"));
			Scene scene = new Scene(root);
			scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
			primaryStage.setScene(scene);
			
//			Rectangle2D primaryScreenBounds = Screen.getPrimary().getVisualBounds();
//			primaryStage.setX(primaryScreenBounds.getMinX());
//			primaryStage.setY(primaryScreenBounds.getMinY());
//			primaryStage.setWidth(primaryScreenBounds.getWidth());
//			primaryStage.setHeight(primaryScreenBounds.getHeight());
			
			primaryStage.show();
		}
	}
	
	@FXML
	private void handleButtonAction50(ActionEvent event) throws IOException{
	
		if(event.getSource() == enterChangeBorderStatusBtn) {
			try {				
				Stage primaryStage = (Stage)enterChangeBorderStatusBtn.getScene().getWindow();
				BorderPane root = (BorderPane)FXMLLoader.load(getClass().getResource("changeStdBoarderDay.fxml"));
				primaryStage.setTitle("Student Management System");
				Scene scene = new Scene(root,800,600);
				scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
				primaryStage.setScene(scene);
				primaryStage.show();
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
		else {
			Stage primaryStage = (Stage)returnEnterChangeBorderStatusBtn.getScene().getWindow();
			BorderPane root = (BorderPane)FXMLLoader.load(getClass().getResource("homeLaunch.fxml"));
			Scene scene = new Scene(root);
			scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
			primaryStage.setScene(scene);
			
//			Rectangle2D primaryScreenBounds = Screen.getPrimary().getVisualBounds();
//			primaryStage.setX(primaryScreenBounds.getMinX());
//			primaryStage.setY(primaryScreenBounds.getMinY());
//			primaryStage.setWidth(primaryScreenBounds.getWidth());
//			primaryStage.setHeight(primaryScreenBounds.getHeight());
			
			primaryStage.show();
		}
	}
	
	@FXML
	private void handleButtonAction51(ActionEvent event) throws IOException{
	
		if(event.getSource() == enterChangeStdClassBtn) {
			try {				
				Stage primaryStage = (Stage)enterChangeStdClassBtn.getScene().getWindow();
				BorderPane root = (BorderPane)FXMLLoader.load(getClass().getResource("assignStdToClass.fxml"));
				primaryStage.setTitle("Student Management System");
				Scene scene = new Scene(root,800,655);
				scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
				primaryStage.setScene(scene);
				primaryStage.show();
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
		else {
			Stage primaryStage = (Stage)returnEnterChangeStdClassBtn.getScene().getWindow();
			BorderPane root = (BorderPane)FXMLLoader.load(getClass().getResource("adminCentral.fxml"));
			Scene scene = new Scene(root);
			scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
			primaryStage.setScene(scene);
			primaryStage.show();
		}
	}
	
	
	@FXML private Button enterAssignBillToClassBtn, returnEnterAssignBillToClassBtn;
	@FXML
	private void handleButtonAction52(ActionEvent event) throws IOException{
	
		if(event.getSource() == enterAssignBillToClassBtn) {
			try {				
				Stage primaryStage = (Stage)enterAssignBillToClassBtn.getScene().getWindow();
				SplitPane root = (SplitPane)FXMLLoader.load(getClass().getResource("assignBillToClass.fxml"));
				primaryStage.setTitle("Student Management System");
				Scene scene = new Scene(root,900,600);
				scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
				primaryStage.setScene(scene);
				primaryStage.show();
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
		else {
			Stage primaryStage = (Stage)returnEnterAssignBillToClassBtn.getScene().getWindow();
			BorderPane root = (BorderPane)FXMLLoader.load(getClass().getResource("adminCentral.fxml"));
			Scene scene = new Scene(root);
			scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
			primaryStage.setScene(scene);
			primaryStage.show();
		}
	}
	
	@FXML
	private void handleButtonAction53(ActionEvent event) throws IOException{
	
		if(event.getSource() == enterBACBtn) {
			try {				
				Stage primaryStage = (Stage)enterBACBtn.getScene().getWindow();
				BorderPane root = (BorderPane)FXMLLoader.load(getClass().getResource("billAClass.fxml"));
				primaryStage.setTitle("Class Billing System");
				Scene scene = new Scene(root,720,703);
				scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
				primaryStage.setScene(scene);
				primaryStage.show();
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
		else {
			Stage primaryStage = (Stage)returnEnterBACBtn.getScene().getWindow();
			BorderPane root = (BorderPane)FXMLLoader.load(getClass().getResource("adminCentral.fxml"));
			Scene scene = new Scene(root);
			scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
			primaryStage.setScene(scene);
			primaryStage.show();
		}
	}
	
	@FXML
	private void handleButtonAction54(ActionEvent event) throws IOException{
	
		if(event.getSource() == enterStdClassListBtn) {
			try {				
				Stage primaryStage = (Stage)enterStdClassListBtn.getScene().getWindow();
				VBox root = (VBox)FXMLLoader.load(getClass().getResource("stdClassList.fxml"));
				primaryStage.setTitle("School Mgt System");
				Scene scene = new Scene(root,800,650);
				scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
				primaryStage.setScene(scene);
				primaryStage.show();
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
		else {
			Stage primaryStage = (Stage)returnStdClassListBtn.getScene().getWindow();
			BorderPane root = (BorderPane)FXMLLoader.load(getClass().getResource("adminCentral.fxml"));
			Scene scene = new Scene(root);
			scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
			primaryStage.setScene(scene);
			primaryStage.show();
		}
	}
	
	@FXML
	private void handleButtonAction55(ActionEvent event) throws IOException{
	
		if(event.getSource() == enterMoveClass2ClassBtn) {
			try {				
				Stage primaryStage = (Stage)enterMoveClass2ClassBtn.getScene().getWindow();
				BorderPane root = (BorderPane)FXMLLoader.load(getClass().getResource("assignStdToClass2.fxml"));
				primaryStage.setTitle("Student Management System");
				Scene scene = new Scene(root,800,655);
				scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
				primaryStage.setScene(scene);
				primaryStage.show();
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
		else {
			Stage primaryStage = (Stage)returnMoveClass2ClassBtn.getScene().getWindow();
			BorderPane root = (BorderPane)FXMLLoader.load(getClass().getResource("adminCentral.fxml"));
			Scene scene = new Scene(root);
			scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
			primaryStage.setScene(scene);
			primaryStage.show();
		}
	}
	
	@FXML
	private void handleButtonAction56(ActionEvent event) throws IOException{
	
		if(event.getSource() == enterDiscRecBtn) {
			try {				
				Stage primaryStage = (Stage)enterDiscRecBtn.getScene().getWindow();
				BorderPane root = (BorderPane)FXMLLoader.load(getClass().getResource("dcEntry.fxml"));
				primaryStage.setTitle("Student Disciplinary Record");
				Scene scene = new Scene(root,1044,700);
				scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
				primaryStage.setScene(scene);
				primaryStage.show();
			} catch(Exception e) {
				e.printStackTrace();
				//msgLabel.setText("Error: "+ e.getMessage());
			}
		}
		else {
			Stage primaryStage = (Stage)returnDiscRecBtn.getScene().getWindow();
			BorderPane root = (BorderPane)FXMLLoader.load(getClass().getResource("homeLaunch.fxml"));
			Scene scene = new Scene(root);
			scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
			primaryStage.setScene(scene);
			
//			Rectangle2D primaryScreenBounds = Screen.getPrimary().getVisualBounds();
//			primaryStage.setX(primaryScreenBounds.getMinX());
//			primaryStage.setY(primaryScreenBounds.getMinY());
//			primaryStage.setWidth(primaryScreenBounds.getWidth());
//			primaryStage.setHeight(primaryScreenBounds.getHeight());
			
			primaryStage.show();
		}
	}
	
	@FXML private Button tellerPaymentAnalBtn;
	@FXML private void handleButtonAction57(ActionEvent event) throws IOException{
		
		if(event.getSource() == enterPayAnalysisBtn) {
			try {				
				Stage primaryStage = (Stage)enterPayAnalysisBtn.getScene().getWindow();
				VBox root = (VBox)FXMLLoader.load(getClass().getResource("payAnalysis.fxml"));
				primaryStage.setTitle("Financial Information");
				Scene scene = new Scene(root,950,700);
				scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
				primaryStage.setScene(scene);
				primaryStage.show();
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
		else if(event.getSource() == tellerPaymentAnalBtn) {
			try {				
				Stage primaryStage = (Stage)tellerPaymentAnalBtn.getScene().getWindow();
				VBox root = (VBox)FXMLLoader.load(getClass().getResource("payAnalysis.fxml"));
				primaryStage.setTitle("Student Information");
				Scene scene = new Scene(root,950,700);
				scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
				primaryStage.setScene(scene);
				primaryStage.show();
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
		else {
			Stage primaryStage = (Stage)returnPayAnalysisBtn.getScene().getWindow();
			BorderPane root = (BorderPane)FXMLLoader.load(getClass().getResource("finHomeCentral.fxml"));
			Scene scene = new Scene(root);
			scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
			primaryStage.setScene(scene);
			primaryStage.show();
		}
	}
	
	@FXML private Button returnEnterFpBarcodeBtn;
	@FXML private void handleButtonAction58(ActionEvent event) throws IOException{
		
		if(event.getSource() == enterFpBarcodeBtn) {
			try {				
				Stage primaryStage = (Stage)enterFpBarcodeBtn.getScene().getWindow();
				GridPane pane = (GridPane)FXMLLoader.load(getClass().getResource("fpBarcodeHome.fxml"));
				primaryStage.setTitle("Barcode Mgt System");
				Scene scene = new Scene(pane,600,200);
				scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
				primaryStage.setScene(scene);
				primaryStage.show();
			} catch(Exception e) {
				msgLabel.setText("Error: "+ e.getMessage());
			}
		}
		else {
			Stage primaryStage = (Stage)returnEnterFpBarcodeBtn.getScene().getWindow();
			BorderPane root = (BorderPane)FXMLLoader.load(getClass().getResource("homeLaunch.fxml"));
		
			Scene scene = new Scene(root);
			primaryStage.setScene(scene);
			
//			Rectangle2D primaryScreenBounds = Screen.getPrimary().getVisualBounds();
//			primaryStage.setX(primaryScreenBounds.getMinX());
//			primaryStage.setY(primaryScreenBounds.getMinY());
//			primaryStage.setWidth(primaryScreenBounds.getWidth());
//			primaryStage.setHeight(primaryScreenBounds.getHeight());
			
			primaryStage.show();
		}
	}
	
	@FXML private Button enterBarcodeBtn, returnEnterBarcodeBtn;
	@FXML private void handleButtonAction59(ActionEvent event) throws IOException{
		
		if(event.getSource() == enterBarcodeBtn) {
			try {				
				Stage primaryStage = (Stage)enterBarcodeBtn.getScene().getWindow();
				GridPane pane = (GridPane)FXMLLoader.load(getClass().getResource("barcodeHome.fxml"));
				primaryStage.setTitle("Barcode Mgt System");
				Scene scene = new Scene(pane,600,400);
				scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
				primaryStage.setScene(scene);
				primaryStage.show();
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
		else {
			Stage primaryStage = (Stage)returnEnterBarcodeBtn.getScene().getWindow();
			GridPane root = (GridPane)FXMLLoader.load(getClass().getResource("fpBarcodeHome.fxml"));
		
			Scene scene = new Scene(root);
			primaryStage.setScene(scene);
			primaryStage.show();
		}
	}
	
	@FXML private Button enterUploadBarcodeBtn, returnEnterUploadBarcodeBtn;
	@FXML private void handleButtonAction60(ActionEvent event) throws IOException{
		
		if(event.getSource() == enterUploadBarcodeBtn) {
			try {				
				Stage primaryStage = (Stage)enterUploadBarcodeBtn.getScene().getWindow();
				GridPane pane = (GridPane)FXMLLoader.load(getClass().getResource("barcodeGenerator.fxml"));
				primaryStage.setTitle("Barcode Mgt System");
				Scene scene = new Scene(pane,550,500);
				scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
				primaryStage.setScene(scene);
				primaryStage.show();
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
		else {
			Stage primaryStage = (Stage)returnEnterUploadBarcodeBtn.getScene().getWindow();
			GridPane root = (GridPane)FXMLLoader.load(getClass().getResource("barcodeHome.fxml"));
		
			Scene scene = new Scene(root);
			primaryStage.setScene(scene);
			primaryStage.show();
		}
	}
	
	@FXML private Button enterEnqViewBarcodeBtn, returnEnterEnqViewBarcodeBtn;
	@FXML private void handleButtonAction61(ActionEvent event) throws IOException{
		
		if(event.getSource() == enterEnqViewBarcodeBtn) {
			try {				
				Stage primaryStage = (Stage)enterEnqViewBarcodeBtn.getScene().getWindow();
				GridPane pane = (GridPane)FXMLLoader.load(getClass().getResource("barcodeViewStd.fxml"));
				primaryStage.setTitle("Barcode Mgt System");
				Scene scene = new Scene(pane,550,600);
				scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
				primaryStage.setScene(scene);
				primaryStage.show();
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
		else {
			Stage primaryStage = (Stage)returnEnterEnqViewBarcodeBtn.getScene().getWindow();
			GridPane root = (GridPane)FXMLLoader.load(getClass().getResource("barcodeHome.fxml"));
		
			Scene scene = new Scene(root);
			primaryStage.setScene(scene);
			primaryStage.show();
		}
	}
	
	@FXML private Button enterGenClassBarcodeBtn, returnEnterGenClassBarcodeBtn;
	@FXML private void handleButtonAction62(ActionEvent event) throws IOException{
		
		if(event.getSource() == enterGenClassBarcodeBtn) {
			try {				
				Stage primaryStage = (Stage)enterGenClassBarcodeBtn.getScene().getWindow();
				BorderPane pane = (BorderPane)FXMLLoader.load(getClass().getResource("barcodeClassGenerator.fxml"));
				primaryStage.setTitle("Barcode Mgt System");
				Scene scene = new Scene(pane,800,650);
				scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
				primaryStage.setScene(scene);
				primaryStage.show();
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
		else {
			Stage primaryStage = (Stage)returnEnterGenClassBarcodeBtn.getScene().getWindow();
			GridPane root = (GridPane)FXMLLoader.load(getClass().getResource("barcodeHome.fxml"));
		
			Scene scene = new Scene(root);
			primaryStage.setScene(scene);
			primaryStage.show();
		}
	}
	
	@FXML private Button enterBarcodeEnqBtn, returnEnterBarcodeEnqBtn;
	@FXML private void handleButtonAction63(ActionEvent event) throws IOException{
		
		if(event.getSource() == enterBarcodeEnqBtn) {
			try {				
				Stage primaryStage = (Stage)enterBarcodeEnqBtn.getScene().getWindow();
				BorderPane pane = (BorderPane)FXMLLoader.load(getClass().getResource("barcode.fxml"));
				primaryStage.setTitle("Barcode System");
				Scene scene = new Scene(pane,1044,700);
				scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
				primaryStage.setScene(scene);
				primaryStage.show();
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
		else {
			Stage primaryStage = (Stage)returnEnterBarcodeEnqBtn.getScene().getWindow();
			BorderPane root = (BorderPane)FXMLLoader.load(getClass().getResource("homeLaunch.fxml"));
			Scene scene = new Scene(root);
			scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
			primaryStage.setScene(scene);
			
//			Rectangle2D primaryScreenBounds = Screen.getPrimary().getVisualBounds();
//			primaryStage.setX(primaryScreenBounds.getMinX());
//			primaryStage.setY(primaryScreenBounds.getMinY());
//			primaryStage.setWidth(primaryScreenBounds.getWidth());
//			primaryStage.setHeight(primaryScreenBounds.getHeight());
			
			primaryStage.show();
		}
	}
	
	@FXML private Button enterScoresHomeBtn, returnEnterScoresHomeBtn;
	@FXML private void handleButtonAction64(ActionEvent event) throws IOException{
		
		if(event.getSource() == enterScoresHomeBtn) {
			try {				
				Stage primaryStage = (Stage)enterScoresHomeBtn.getScene().getWindow();
				GridPane pane = (GridPane)FXMLLoader.load(getClass().getResource("scoresheetsHome.fxml"));
				primaryStage.setTitle("Scoresheet Mgt System");
				Scene scene = new Scene(pane,800,400);
				scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
				primaryStage.setScene(scene);
				primaryStage.show();
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
		else {
			Stage primaryStage = (Stage)returnEnterScoresHomeBtn.getScene().getWindow();
			BorderPane root = (BorderPane)FXMLLoader.load(getClass().getResource("homeLaunch.fxml"));
		
			Scene scene = new Scene(root);
			primaryStage.setScene(scene);
			primaryStage.show();
		}
	}
	
	@FXML private Button enterScoreSheetsButton1, returnScoreSheetsButton1;
	@FXML
	private void handleButtonAction65(ActionEvent event) throws IOException{
	
		if(event.getSource() == enterScoreSheetsButton1) {
			try {
				Stage primaryStage = (Stage)enterScoreSheetsButton1.getScene().getWindow();
				BorderPane root = (BorderPane)FXMLLoader.load(getClass().getResource("firstCAsEntry.fxml"));
				Scene scene = new Scene(root,800,620);
				scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
				primaryStage.setScene(scene);
				primaryStage.setTitle("First CA Scores Manager");
				primaryStage.show();
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
		else {
			Stage primaryStage = (Stage)returnScoreSheetsButton1.getScene().getWindow();
			GridPane root = (GridPane)FXMLLoader.load(getClass().getResource("scoresheetsHome.fxml"));
			
			Scene scene = new Scene(root);
			primaryStage.setScene(scene);
			primaryStage.show();
		}
	}
	
	@FXML private Button enterScoreSheetsButton2, returnScoreSheetsButton2;
	@FXML
	private void handleButtonAction66(ActionEvent event) throws IOException{
	
		if(event.getSource() == enterScoreSheetsButton2) {
			try {
				Stage primaryStage = (Stage)enterScoreSheetsButton2.getScene().getWindow();
				BorderPane root = (BorderPane)FXMLLoader.load(getClass().getResource("secondCAsEntry.fxml"));
				Scene scene = new Scene(root,800,620);
				scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
				primaryStage.setScene(scene);
				primaryStage.setTitle("Second CA Scores Manager");
				primaryStage.show();
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
		else {
			Stage primaryStage = (Stage)returnScoreSheetsButton2.getScene().getWindow();
			GridPane root = (GridPane)FXMLLoader.load(getClass().getResource("scoresheetsHome.fxml"));
			
			Scene scene = new Scene(root);
			primaryStage.setScene(scene);
			primaryStage.show();
		}
	}
	
	@FXML private Button enterScoreSheetsButton3, returnScoreSheetsButton3;
	@FXML
	private void handleButtonAction67(ActionEvent event) throws IOException{
	
		if(event.getSource() == enterScoreSheetsButton3) {
			try {
				Stage primaryStage = (Stage)enterScoreSheetsButton3.getScene().getWindow();
				BorderPane root = (BorderPane)FXMLLoader.load(getClass().getResource("thirdCAsEntry.fxml"));
				Scene scene = new Scene(root,800,620);
				scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
				primaryStage.setScene(scene);
				primaryStage.setTitle("Third CA Scores Manager");
				primaryStage.show();
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
		else {
			Stage primaryStage = (Stage)returnScoreSheetsButton3.getScene().getWindow();
			GridPane root = (GridPane)FXMLLoader.load(getClass().getResource("scoresheetsHome.fxml"));
			
			Scene scene = new Scene(root);
			primaryStage.setScene(scene);
			primaryStage.show();
		}
	}
	
	@FXML private Button enterScoreSheetsButton4, returnScoreSheetsButton4;
	@FXML
	private void handleButtonAction68(ActionEvent event) throws IOException{
	
		if(event.getSource() == enterScoreSheetsButton4) {
			try {
				Stage primaryStage = (Stage)enterScoreSheetsButton4.getScene().getWindow();
				BorderPane root = (BorderPane)FXMLLoader.load(getClass().getResource("examsScoreEntry.fxml"));
				Scene scene = new Scene(root,800,620);
				scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
				primaryStage.setScene(scene);
				primaryStage.setTitle("Exams Scores Manager");
				primaryStage.show();
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
		else {
			Stage primaryStage = (Stage)returnScoreSheetsButton4.getScene().getWindow();
			GridPane root = (GridPane)FXMLLoader.load(getClass().getResource("scoresheetsHome.fxml"));
			
			Scene scene = new Scene(root);
			primaryStage.setScene(scene);
			primaryStage.show();
		}
	}
	
	@FXML private Button enterBarcodeScannedList, returnEnterBarcodeScannedList;
	@FXML private void handleButtonAction69(ActionEvent event) throws IOException{
		
		if(event.getSource() == enterBarcodeScannedList) {
			try {				
				Stage primaryStage = (Stage)enterBarcodeScannedList.getScene().getWindow();
				VBox root = (VBox)FXMLLoader.load(getClass().getResource("scannedStdList.fxml"));
				primaryStage.setTitle("Student Information");
				Scene scene = new Scene(root,950,700);
				scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
				primaryStage.setScene(scene);
				primaryStage.show();
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
		else {
			Stage primaryStage = (Stage)returnEnterBarcodeScannedList.getScene().getWindow();
			GridPane root = (GridPane)FXMLLoader.load(getClass().getResource("barcodeHome.fxml"));
			Scene scene = new Scene(root);
			primaryStage.setScene(scene);
			primaryStage.show();
		}
	}
	
	@FXML private Button enterTIDsBtn, returnEnterTIDsBtn;
	@FXML private void handleButtonAction70(ActionEvent event) throws IOException{
		
		if(event.getSource() == enterTIDsBtn) {
			try {				
				Stage primaryStage = (Stage)enterTIDsBtn.getScene().getWindow();
				VBox root = (VBox)FXMLLoader.load(getClass().getResource("clearTIDsTTIDs.fxml"));
				primaryStage.setTitle("Student Information");
				Scene scene = new Scene(root,600,700);
				scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
				primaryStage.setScene(scene);
				primaryStage.show();
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
		else {
			Stage primaryStage = (Stage)returnEnterTIDsBtn.getScene().getWindow();
			BorderPane root = (BorderPane)FXMLLoader.load(getClass().getResource("finHomeCentral.fxml"));
			Scene scene = new Scene(root);
			scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
			primaryStage.setScene(scene);
			primaryStage.show();
		}
	}
	
	@FXML private Button enterScoreSheetsJssClass, returnScoreSheetsJssClass;
	@FXML
	private void handleButtonAction71(ActionEvent event) throws IOException{
	
		if(event.getSource() == enterScoreSheetsJssClass) {
			try {
				Stage primaryStage = (Stage)enterScoreSheetsJssClass.getScene().getWindow();
				TabPane root = (TabPane)FXMLLoader.load(getClass().getResource("scoresheetmanager.fxml"));
				Scene scene = new Scene(root,920,720);
				scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
				primaryStage.setScene(scene);
				primaryStage.setTitle("Scoresheet Manager");
				primaryStage.show();
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
		else if(event.getSource() == returnScoreSheetsSSSClass){
			Stage primaryStage = (Stage)returnScoreSheetsSSSClass.getScene().getWindow();
			BorderPane root = (BorderPane)FXMLLoader.load(getClass().getResource("scoresheetHomeCentral.fxml"));
			Scene scene = new Scene(root);
			scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
			primaryStage.setScene(scene);
			primaryStage.show();
		}
		else {
			Stage primaryStage = (Stage)returnScoreSheetsJssClass.getScene().getWindow();
			BorderPane root = (BorderPane)FXMLLoader.load(getClass().getResource("scoresheetHomeCentral.fxml"));
			Scene scene = new Scene(root);
			scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
			primaryStage.setScene(scene);
			primaryStage.show();
		}
	}
	
	@FXML private Button enterScoreSheetsSSSClass, returnScoreSheetsSSSClass;
//	@FXML
//	private void handleButtonAction72(ActionEvent event) throws IOException{
//	
//		if(event.getSource() == enterScoreSheetsSSSClass) {
//			try {
//				Stage primaryStage = (Stage)enterScoreSheetsSSSClass.getScene().getWindow();
//				VBox root = (VBox)FXMLLoader.load(getClass().getResource("scoreSheetTableViewSSS.fxml"));
//				Scene scene = new Scene(root,900,700);
//				scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
//				primaryStage.setScene(scene);
//				primaryStage.setTitle("Scoresheet Manager");
//				primaryStage.show();
//			} catch(Exception e) {
//				e.printStackTrace();
//			}
//		}
//		else {
//			Stage primaryStage = (Stage)returnScoreSheetsSSSClass.getScene().getWindow();
//			GridPane root = (GridPane)FXMLLoader.load(getClass().getResource("scoresheetsHome.fxml"));
//			
//			Scene scene = new Scene(root);
//			primaryStage.setScene(scene);
//			primaryStage.show();
//		}
//	}
	
	@FXML private Button enterGenReportBtn, returnGenReportBtn;
	@FXML
	private void handleButtonAction73(ActionEvent event) throws IOException{
	
		if(event.getSource() == enterGenReportBtn) {
			try {
				Stage primaryStage = (Stage)enterGenReportBtn.getScene().getWindow();
				BorderPane root = (BorderPane)FXMLLoader.load(getClass().getResource("reportCentral2.fxml"));
				Scene scene = new Scene(root,800,600);
				scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
				primaryStage.setScene(scene);
				primaryStage.setTitle("Report Manager");
				primaryStage.show();
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
		else {
			Stage primaryStage = (Stage)returnGenReportBtn.getScene().getWindow();
			BorderPane root = (BorderPane)FXMLLoader.load(getClass().getResource("adminCentral.fxml"));
			Scene scene = new Scene(root);
			scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
			primaryStage.setScene(scene);
			primaryStage.show();
		}
	}
	
	@FXML private Button deleteStdButton, returnDeleteStdButton;
	@FXML
	private void handleButtonAction74(ActionEvent event) throws IOException{
	
		if(event.getSource() == deleteStdButton) {
			try {
				Stage primaryStage = (Stage)deleteStdButton.getScene().getWindow();
				BorderPane root = (BorderPane)FXMLLoader.load(getClass().getResource("deleteStd.fxml"));
				primaryStage.setTitle("Delete Student");
				Scene scene = new Scene(root,800,600);
				scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
				primaryStage.setScene(scene);
				primaryStage.show();
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
		else {
			Stage primaryStage = (Stage)returnDeleteStdButton.getScene().getWindow();
			BorderPane root = (BorderPane)FXMLLoader.load(getClass().getResource("homeLaunch.fxml"));
			Scene scene = new Scene(root);
			scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
			primaryStage.setScene(scene);
			
//			Rectangle2D primaryScreenBounds = Screen.getPrimary().getVisualBounds();
//			primaryStage.setX(primaryScreenBounds.getMinX());
//			primaryStage.setY(primaryScreenBounds.getMinY());
//			primaryStage.setWidth(primaryScreenBounds.getWidth());
//			primaryStage.setHeight(primaryScreenBounds.getHeight());
			
			primaryStage.show();
		}
	}
	
	@FXML private Button enterPhotoIdBtn, returnPhotoIdBtn;
	@FXML private void handleButtonAction75(ActionEvent event) throws IOException{
		
		if(event.getSource() == enterPhotoIdBtn) {
			try {				
				Stage primaryStage = (Stage)enterPhotoIdBtn.getScene().getWindow();
				GridPane pane = (GridPane)FXMLLoader.load(getClass().getResource("IdCard.fxml"));
				primaryStage.setTitle("School Mgt System");
				Scene scene = new Scene(pane,550,600);
				scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
				primaryStage.setScene(scene);
				primaryStage.show();
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
		else {
			Stage primaryStage = (Stage)returnPhotoIdBtn.getScene().getWindow();
			GridPane root = (GridPane)FXMLLoader.load(getClass().getResource("imageHome.fxml"));
		
			Scene scene = new Scene(root);
			primaryStage.setScene(scene);
			primaryStage.show();
		}
	}
	
	@FXML private Button enterEOTBtn, returnEOTBtn;
	@FXML
	private void handleButtonAction76(ActionEvent event) throws IOException{
	
		if(event.getSource() == enterEOTBtn) {
			try {				
				Stage primaryStage = (Stage)enterEOTBtn.getScene().getWindow();
				BorderPane root = (BorderPane)FXMLLoader.load(getClass().getResource("eot_ResultProcessing.fxml"));
				primaryStage.setTitle("End of Term Result Processing");
				Scene scene = new Scene(root,720,703);
				scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
				primaryStage.setScene(scene);
				primaryStage.show();
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
		else {
			Stage primaryStage = (Stage)returnEOTBtn.getScene().getWindow();
			BorderPane root = (BorderPane)FXMLLoader.load(getClass().getResource("adminCentral.fxml"));
			Scene scene = new Scene(root);
			scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
			primaryStage.setScene(scene);
			primaryStage.show();
		}
	}
	
	@FXML private Button enterKGenerate, returnKGenerate;
	@FXML private void handleButtonAction77(ActionEvent event) throws IOException{
		
		if(event.getSource() == enterKGenerate) {
			try {				
				Stage primaryStage = (Stage)enterKGenerate.getScene().getWindow();
				BorderPane pane = (BorderPane)FXMLLoader.load(getClass().getResource("kusakiGenerate.fxml"));
				primaryStage.setTitle("Student Results");
				Scene scene = new Scene(pane,507,520);
				scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
				primaryStage.setScene(scene);
				primaryStage.show();
			} catch(Exception e) {
				msgLabel.setText("Error: "+ e.getMessage());
			}
		}
		else {
			Stage primaryStage = (Stage)returnKGenerate.getScene().getWindow();
			GridPane root = (GridPane)FXMLLoader.load(getClass().getResource("resultHome.fxml"));
		
			Scene scene = new Scene(root);
			primaryStage.setScene(scene);
			primaryStage.show();
		}
	}
	
	@FXML private Button enterKGenerate2, returnKGenerate2;
	@FXML private void handleButtonAction78(ActionEvent event) throws IOException{
		
		if(event.getSource() == enterKGenerate2) {
			try {				
				Stage primaryStage = (Stage)enterKGenerate2.getScene().getWindow();
				GridPane pane = (GridPane)FXMLLoader.load(getClass().getResource("kusakiGenerate2.fxml"));
				primaryStage.setTitle("Student Results");
				Scene scene = new Scene(pane,600,300);
				scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
				primaryStage.setScene(scene);
				primaryStage.show();
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
		else {
			Stage primaryStage = (Stage)returnKGenerate2.getScene().getWindow();
			GridPane root = (GridPane)FXMLLoader.load(getClass().getResource("resultHome.fxml"));
		
			Scene scene = new Scene(root);
			primaryStage.setScene(scene);
			primaryStage.show();
		}
	}
	
	
	@FXML private Button generateResultJSSBtn2, returntoKusakiGrtHomeJSS2, generateNewResultJSSBtn2;
	@FXML private void handleButtonAction79(ActionEvent event) throws IOException{
		
		if(event.getSource() == generateResultJSSBtn2) {
			try {				
				Stage primaryStage = (Stage)generateResultJSSBtn2.getScene().getWindow();
				SplitPane pane = (SplitPane)FXMLLoader.load(getClass().getResource("JSS_StdResultDosier2.fxml"));
				primaryStage.setTitle("Student Results");
				Scene scene = new Scene(pane,920,720);
				scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
				primaryStage.setScene(scene);
				primaryStage.show();
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
		else if(event.getSource() == generateNewResultJSSBtn2) {
			try {				
				Stage primaryStage = (Stage)generateNewResultJSSBtn2.getScene().getWindow();
				SplitPane pane = (SplitPane)FXMLLoader.load(getClass().getResource("JSS_New_StdResultDosier2.fxml"));
				primaryStage.setTitle("Student Results");
				Scene scene = new Scene(pane,920,720);
				scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
				primaryStage.setScene(scene);
				primaryStage.show();
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
		else {
			Stage primaryStage = (Stage)returntoKusakiGrtHomeJSS2.getScene().getWindow();
			BorderPane root = (BorderPane)FXMLLoader.load(getClass().getResource("eotResultCentral.fxml"));
			Scene scene = new Scene(root);
			scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
			primaryStage.setScene(scene);
			primaryStage.show();
		}
	}	
	
	
	@FXML private Button generateResultSSSBtn2, returnResultSSSBtn2;
	@FXML private void handleButtonAction80(ActionEvent event) throws IOException{
		
		if(event.getSource() == generateResultSSSBtn2) {
			try {				
				Stage primaryStage = (Stage)generateResultSSSBtn2.getScene().getWindow();
				SplitPane pane = (SplitPane)FXMLLoader.load(getClass().getResource("stdResultDosier2.fxml"));
				primaryStage.setTitle("Student Results");
				Scene scene = new Scene(pane,920,720);
				scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
				primaryStage.setScene(scene);
				primaryStage.show();
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
		else {
			Stage primaryStage = (Stage)returnResultSSSBtn2.getScene().getWindow();
			BorderPane root = (BorderPane)FXMLLoader.load(getClass().getResource("eotResultCentral.fxml"));
			Scene scene = new Scene(root);
			scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
			primaryStage.setScene(scene);
			primaryStage.show();
		}
	}
	
	@FXML private Button generateResultAnnualBtn2, returntoKusakiGrtHomeAnnual2;
	@FXML private void handleButtonAction81(ActionEvent event) throws IOException{
		
		if(event.getSource() == generateResultAnnualBtn2) {
			try {				
				Stage primaryStage = (Stage)generateResultAnnualBtn2.getScene().getWindow();
				SplitPane pane = (SplitPane)FXMLLoader.load(getClass().getResource("annualResultDosier2.fxml"));
				primaryStage.setTitle("Student Results");
				Scene scene = new Scene(pane,920,720);
				scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
				primaryStage.setScene(scene);
				primaryStage.show();
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
		else {
			Stage primaryStage = (Stage)returntoKusakiGrtHomeAnnual2.getScene().getWindow();
			BorderPane root = (BorderPane)FXMLLoader.load(getClass().getResource("eotResultCentral.fxml"));
			Scene scene = new Scene(root);
			scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
			primaryStage.setScene(scene);
			primaryStage.show();
		}
	}
	
	
	@FXML private Button enterAcademicYrBtn, returnAcademicYrBtn;
	@FXML private void handleButtonAction82(ActionEvent event) throws IOException{
		
		if(event.getSource() == enterAcademicYrBtn) {
			try {				
				Stage primaryStage = (Stage)enterAcademicYrBtn.getScene().getWindow();
				BorderPane pane = (BorderPane)FXMLLoader.load(getClass().getResource("calendarManager.fxml"));
				primaryStage.setTitle("Calendar Management");
				Scene scene = new Scene(pane,900,700);
				scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
				primaryStage.setScene(scene);
				primaryStage.show();
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
		else if(event.getSource() == returnAcademicTermBtn) {
			Stage primaryStage = (Stage)returnAcademicTermBtn.getScene().getWindow();
			BorderPane root = (BorderPane)FXMLLoader.load(getClass().getResource("homeLaunch.fxml"));
			Scene scene = new Scene(root);
			scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
			primaryStage.setScene(scene);
			
//			Rectangle2D primaryScreenBounds = Screen.getPrimary().getVisualBounds();
//			primaryStage.setX(primaryScreenBounds.getMinX());
//			primaryStage.setY(primaryScreenBounds.getMinY());
//			primaryStage.setWidth(primaryScreenBounds.getWidth());
//			primaryStage.setHeight(primaryScreenBounds.getHeight());
			
			primaryStage.show();
		}
		else if(event.getSource() == returnHolsTermBtn) {
			Stage primaryStage = (Stage)returnHolsTermBtn.getScene().getWindow();
			BorderPane root = (BorderPane)FXMLLoader.load(getClass().getResource("homeLaunch.fxml"));
			Scene scene = new Scene(root);
			scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
			primaryStage.setScene(scene);
			
//			Rectangle2D primaryScreenBounds = Screen.getPrimary().getVisualBounds();
//			primaryStage.setX(primaryScreenBounds.getMinX());
//			primaryStage.setY(primaryScreenBounds.getMinY());
//			primaryStage.setWidth(primaryScreenBounds.getWidth());
//			primaryStage.setHeight(primaryScreenBounds.getHeight());
			
			primaryStage.show();
		}
		else if(event.getSource() == returnAssessTermBtn) {
			Stage primaryStage = (Stage)returnAssessTermBtn.getScene().getWindow();
			BorderPane root = (BorderPane)FXMLLoader.load(getClass().getResource("homeLaunch.fxml"));
			Scene scene = new Scene(root);
			scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
			primaryStage.setScene(scene);
			
//			Rectangle2D primaryScreenBounds = Screen.getPrimary().getVisualBounds();
//			primaryStage.setX(primaryScreenBounds.getMinX());
//			primaryStage.setY(primaryScreenBounds.getMinY());
//			primaryStage.setWidth(primaryScreenBounds.getWidth());
//			primaryStage.setHeight(primaryScreenBounds.getHeight());
			
			primaryStage.show();
		}
		else {
			Stage primaryStage = (Stage)returnAcademicYrBtn.getScene().getWindow();
			BorderPane root = (BorderPane)FXMLLoader.load(getClass().getResource("homeLaunch.fxml"));
			Scene scene = new Scene(root);
			scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
			primaryStage.setScene(scene);
			
//			Rectangle2D primaryScreenBounds = Screen.getPrimary().getVisualBounds();
//			primaryStage.setX(primaryScreenBounds.getMinX());
//			primaryStage.setY(primaryScreenBounds.getMinY());
//			primaryStage.setWidth(primaryScreenBounds.getWidth());
//			primaryStage.setHeight(primaryScreenBounds.getHeight());
			
			primaryStage.show();
		}
	}
	
	@FXML private Button enterAcademicTermBtn, returnAcademicTermBtn;
//	@FXML private void handleButtonAction83(ActionEvent event) throws IOException{
//		
//		if(event.getSource() == enterAcademicTermBtn) {
//			try {				
//				Stage primaryStage = (Stage)enterAcademicTermBtn.getScene().getWindow();
//				BorderPane pane = (BorderPane)FXMLLoader.load(getClass().getResource("academicTerm.fxml"));
//				primaryStage.setTitle("Calendar Management");
//				Scene scene = new Scene(pane,717,700);
//				scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
//				primaryStage.setScene(scene);
//				primaryStage.show();
//			} catch(Exception e) {
//				e.printStackTrace();
//			}
//		}
//		else {
//			Stage primaryStage = (Stage)returnAcademicTermBtn.getScene().getWindow();
//			GridPane root = (GridPane)FXMLLoader.load(getClass().getResource("calendarHome.fxml"));
//			Scene scene = new Scene(root);
//			scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
//			primaryStage.setScene(scene);
//			primaryStage.show();
//		}
//	}
	
	
	@FXML private Button enterHolsTermBtn, returnHolsTermBtn;
//	@FXML private void handleButtonAction84(ActionEvent event) throws IOException{
//		
//		if(event.getSource() == enterHolsTermBtn) {
//			try {				
//				Stage primaryStage = (Stage)enterHolsTermBtn.getScene().getWindow();
//				BorderPane pane = (BorderPane)FXMLLoader.load(getClass().getResource("academicHols.fxml"));
//				primaryStage.setTitle("Calendar Management");
//				Scene scene = new Scene(pane,750,322);
//				scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
//				primaryStage.setScene(scene);
//				primaryStage.show();
//			} catch(Exception e) {
//				e.printStackTrace();
//			}
//		}
//		else {
//			Stage primaryStage = (Stage)returnHolsTermBtn.getScene().getWindow();
//			GridPane root = (GridPane)FXMLLoader.load(getClass().getResource("calendarHome.fxml"));
//			Scene scene = new Scene(root);
//			scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
//			primaryStage.setScene(scene);
//			primaryStage.show();
//		}
//	}
	
	
	@FXML private Button enterAssessTermBtn, returnAssessTermBtn;
//	@FXML private void handleButtonAction85(ActionEvent event) throws IOException{
//		
//		if(event.getSource() == enterAssessTermBtn) {
//			try {				
//				Stage primaryStage = (Stage)enterAssessTermBtn.getScene().getWindow();
//				BorderPane pane = (BorderPane)FXMLLoader.load(getClass().getResource("academicAssessment.fxml"));
//				primaryStage.setTitle("Calendar Management");
//				Scene scene = new Scene(pane,750,322);
//				scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
//				primaryStage.setScene(scene);
//				primaryStage.show();
//			} catch(Exception e) {
//				e.printStackTrace();
//			}
//		}
//		else {
//			Stage primaryStage = (Stage)returnAssessTermBtn.getScene().getWindow();
//			GridPane root = (GridPane)FXMLLoader.load(getClass().getResource("calendarHome.fxml"));
//			Scene scene = new Scene(root);
//			scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
//			primaryStage.setScene(scene);
//			primaryStage.show();
//		}
//	}
	
	@FXML private Button enterClassAttendanceBtn, returnClassAttendanceBtn;
	@FXML
	private void handleButtonAction86(ActionEvent event) throws IOException{
	
		if(event.getSource() == enterClassAttendanceBtn) {
			try {
				Stage primaryStage = (Stage)enterClassAttendanceBtn.getScene().getWindow();
				VBox root = (VBox)FXMLLoader.load(getClass().getResource("attendanceTableView.fxml"));
				Scene scene = new Scene(root,900,700);
				scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
				primaryStage.setScene(scene);
				primaryStage.setTitle("Scoresheet Manager");
				primaryStage.show();
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
		else {
			Stage primaryStage = (Stage)returnClassAttendanceBtn.getScene().getWindow();
			BorderPane root = (BorderPane)FXMLLoader.load(getClass().getResource("attendanceCentral.fxml"));
			Scene scene = new Scene(root);
			scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
			primaryStage.setScene(scene);
			primaryStage.show();
		}
	}
	
//	@FXML private Button enterAttendanceBCode, returnAttendanceBCode;
//	@FXML private void handleButtonAction87(ActionEvent event) throws IOException{
//		
//		if(event.getSource() == enterAttendanceBCode) {
//			try {				
//				Stage primaryStage = (Stage)enterAttendanceBCode.getScene().getWindow();
//				GridPane pane = (GridPane)FXMLLoader.load(getClass().getResource("attendanceEntryBarcode.fxml"));
//				primaryStage.setTitle("Calendar Mgt System");
//				Scene scene = new Scene(pane,550,600);
//				scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
//				primaryStage.setScene(scene);
//				primaryStage.show();
//			} catch(Exception e) {
//				e.printStackTrace();
//			}
//		}
//		else {
//			Stage primaryStage = (Stage)returnAttendanceBCode.getScene().getWindow();
//			GridPane root = (GridPane)FXMLLoader.load(getClass().getResource("calendarHome.fxml"));
//			Scene scene = new Scene(root);
//			scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
//			primaryStage.setScene(scene);
//			primaryStage.show();
//		}
//	}
	
	
	@FXML private Button enterDelAttBtn, returnDelAttBtn, returnDelAttYearBtn, returnDelAttTermBtn;
	@FXML private void handleButtonAction88(ActionEvent event) throws IOException{
		
		if(event.getSource() == enterDelAttBtn) {
			try {				
				Stage primaryStage = (Stage)enterDelAttBtn.getScene().getWindow();
				TabPane pane = (TabPane)FXMLLoader.load(getClass().getResource("deleteStdAttendance.fxml"));
				primaryStage.setTitle("Calendar Mgt System");
				Scene scene = new Scene(pane,600,400);
				scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
				primaryStage.setScene(scene);
				primaryStage.show();
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
		else if(event.getSource() == returnDelAttBtn) {
			try {
				Stage primaryStage = (Stage)returnDelAttBtn.getScene().getWindow();
				GridPane root = (GridPane)FXMLLoader.load(getClass().getResource("deleteHome.fxml"));
				Scene scene = new Scene(root);
				scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
				primaryStage.setScene(scene);
				primaryStage.show();
			}
			catch(Exception e) {
				e.printStackTrace();
			}
		}
		else if(event.getSource() == returnDelAttYearBtn) {
			try {
				Stage primaryStage = (Stage)returnDelAttYearBtn.getScene().getWindow();
				GridPane root = (GridPane)FXMLLoader.load(getClass().getResource("deleteHome.fxml"));
				Scene scene = new Scene(root);
				scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
				primaryStage.setScene(scene);
				primaryStage.show();
			}
			catch(Exception e) {
				e.printStackTrace();
			}
		}
		else {
			Stage primaryStage = (Stage)returnDelAttTermBtn.getScene().getWindow();
			GridPane root = (GridPane)FXMLLoader.load(getClass().getResource("deleteHome.fxml"));
			Scene scene = new Scene(root);
			scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
			primaryStage.setScene(scene);
			primaryStage.show();
		}
	}
	
	@FXML private Button enterSpecialAttendanceBtn, returnSpecialAttendanceBtn;
	@FXML private void handleButtonAction89(ActionEvent event) throws IOException{
		
		if(event.getSource() == enterSpecialAttendanceBtn) {
			try {				
				Stage primaryStage = (Stage)enterSpecialAttendanceBtn.getScene().getWindow();
				GridPane pane = (GridPane)FXMLLoader.load(getClass().getResource("barcodeSpecialAttendance.fxml"));
				primaryStage.setTitle("Barcode Mgt System");
				Scene scene = new Scene(pane,550,600);
				scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
				primaryStage.setScene(scene);
				primaryStage.show();
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
		else {
			Stage primaryStage = (Stage)returnSpecialAttendanceBtn.getScene().getWindow();
			GridPane root = (GridPane)FXMLLoader.load(getClass().getResource("barcodeHome.fxml"));
			Scene scene = new Scene(root);
			scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
			primaryStage.setScene(scene);
			primaryStage.show();
		}
	}
	
	@FXML private Button enterDelStdScores, retDelStdScores, retDelStdScores2, retDelStdScores3, 
		retDelStdScores4;
	@FXML private void handleButtonAction90(ActionEvent event) throws IOException{
		
		if(event.getSource() == enterDelStdScores) {
			try {				
				Stage primaryStage = (Stage)enterDelStdScores.getScene().getWindow();
				BorderPane pane = (BorderPane)FXMLLoader.load(getClass().getResource("deleteStdScoresNew.fxml"));
				primaryStage.setTitle("Student Scores");
				Scene scene = new Scene(pane,800,600);
				scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
				primaryStage.setScene(scene);
				primaryStage.show();
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
		else if(event.getSource() == retDelStdScores){
			Stage primaryStage = (Stage)retDelStdScores.getScene().getWindow();
			BorderPane root = (BorderPane)FXMLLoader.load(getClass().getResource("deleteCentral.fxml"));
			Scene scene = new Scene(root);
			scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
			primaryStage.setScene(scene);
			primaryStage.show();
		}
		else if(event.getSource() == retDelStdScores2){
			Stage primaryStage = (Stage)retDelStdScores2.getScene().getWindow();
			BorderPane root = (BorderPane)FXMLLoader.load(getClass().getResource("deleteCentral.fxml"));
			Scene scene = new Scene(root);
			scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
			primaryStage.setScene(scene);
			primaryStage.show();
		}
		else if(event.getSource() == retDelStdScores3){
			Stage primaryStage = (Stage)retDelStdScores3.getScene().getWindow();
			BorderPane root = (BorderPane)FXMLLoader.load(getClass().getResource("deleteCentral.fxml"));
			Scene scene = new Scene(root);
			scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
			primaryStage.setScene(scene);
			primaryStage.show();
		}
		else {
			Stage primaryStage = (Stage)retDelStdScores4.getScene().getWindow();
			BorderPane root = (BorderPane)FXMLLoader.load(getClass().getResource("deleteCentral.fxml"));
			Scene scene = new Scene(root);
			scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
			primaryStage.setScene(scene);
			primaryStage.show();
		}
	}
	
	@FXML private Button enterConcHomeBtn, returnConcHomeBtn;
	@FXML private void handleButtonAction91(ActionEvent event) throws IOException{
		
		if(event.getSource() == enterConcHomeBtn) {
			try {				
				Stage primaryStage = (Stage)enterConcHomeBtn.getScene().getWindow();
				HBox pane = (HBox)FXMLLoader.load(getClass().getResource("concessionHome.fxml"));
				primaryStage.setTitle("Barcode Mgt System");
				Scene scene = new Scene(pane,581,133);
				scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
				primaryStage.setScene(scene);
				primaryStage.show();
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
		else {
			Stage primaryStage = (Stage)returnConcHomeBtn.getScene().getWindow();
			BorderPane root = (BorderPane)FXMLLoader.load(getClass().getResource("homeLaunch.fxml"));
			Scene scene = new Scene(root);
			scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
			primaryStage.setScene(scene);
			
//			Rectangle2D primaryScreenBounds = Screen.getPrimary().getVisualBounds();
//			primaryStage.setX(primaryScreenBounds.getMinX());
//			primaryStage.setY(primaryScreenBounds.getMinY());
//			primaryStage.setWidth(primaryScreenBounds.getWidth());
//			primaryStage.setHeight(primaryScreenBounds.getHeight());
			
			primaryStage.show();
		}
	}
	
	@FXML private Button enterConcessionBtn, returnConcessionBtn, returnConcListBtn,
		returnConcessionHomeBtn;
	@FXML private void handleButtonAction92(ActionEvent event) throws IOException{
		
		if(event.getSource() == enterConcessionBtn) {
			try {				
				Stage primaryStage = (Stage)enterConcessionBtn.getScene().getWindow();
				BorderPane pane = (BorderPane)FXMLLoader.load(getClass().getResource("concession.fxml"));
				primaryStage.setTitle("School Mgt System");
				Scene scene = new Scene(pane,1044,700);
				scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
				primaryStage.setScene(scene);
				primaryStage.show();
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
		else if(event.getSource() == returnConcessionHomeBtn) {
			try {				
				Stage primaryStage = (Stage)returnConcessionHomeBtn.getScene().getWindow();
				BorderPane pane = (BorderPane)FXMLLoader.load(getClass().getResource("homeLaunch.fxml"));
				primaryStage.setTitle("School Mgt System");
				Scene scene = new Scene(pane,900,700);
				scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
				primaryStage.setScene(scene);
				
//				Rectangle2D primaryScreenBounds = Screen.getPrimary().getVisualBounds();
//				primaryStage.setX(primaryScreenBounds.getMinX());
//				primaryStage.setY(primaryScreenBounds.getMinY());
//				primaryStage.setWidth(primaryScreenBounds.getWidth());
//				primaryStage.setHeight(primaryScreenBounds.getHeight());
				
				primaryStage.show();
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
		else if(event.getSource() == returnConcessionBtn) {
			try {				
				Stage primaryStage = (Stage)returnConcessionBtn.getScene().getWindow();
				BorderPane pane = (BorderPane)FXMLLoader.load(getClass().getResource("homeLaunch.fxml"));
				primaryStage.setTitle("School Mgt System");
				Scene scene = new Scene(pane,900,700);
				scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
				primaryStage.setScene(scene);
				
//				Rectangle2D primaryScreenBounds = Screen.getPrimary().getVisualBounds();
//				primaryStage.setX(primaryScreenBounds.getMinX());
//				primaryStage.setY(primaryScreenBounds.getMinY());
//				primaryStage.setWidth(primaryScreenBounds.getWidth());
//				primaryStage.setHeight(primaryScreenBounds.getHeight());
				
				primaryStage.show();
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
		else {
			Stage primaryStage = (Stage)returnConcListBtn.getScene().getWindow();
			BorderPane root = (BorderPane)FXMLLoader.load(getClass().getResource("homeLaunch.fxml"));
			Scene scene = new Scene(root);
			scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
			primaryStage.setScene(scene);
			
//			Rectangle2D primaryScreenBounds = Screen.getPrimary().getVisualBounds();
//			primaryStage.setX(primaryScreenBounds.getMinX());
//			primaryStage.setY(primaryScreenBounds.getMinY());
//			primaryStage.setWidth(primaryScreenBounds.getWidth());
//			primaryStage.setHeight(primaryScreenBounds.getHeight());
			
			primaryStage.show();
		}
	}
	
	@FXML private Button enterstdInfoBtn, returnStdInfoBtn, returnStdCreateHome,
		returnStdUpdateHome;
	@FXML private void handleButtonAction93(ActionEvent event) throws IOException{
		
		if(event.getSource() == enterstdInfoBtn) {
			try {				
				Stage primaryStage = (Stage)enterstdInfoBtn.getScene().getWindow();
				BorderPane pane = (BorderPane)FXMLLoader.load(getClass().getResource("stdHomeCentral.fxml"));
				primaryStage.setTitle("Student Information Central");
				Scene scene = new Scene(pane,800,600);
				scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
				primaryStage.setScene(scene);
				primaryStage.show();
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
		else if(event.getSource() == returnStdCreateHome) {
			try {				
				Stage primaryStage = (Stage)returnStdCreateHome.getScene().getWindow();
				BorderPane root = (BorderPane)FXMLLoader.load(getClass().getResource("homeLaunch.fxml"));
				Scene scene = new Scene(root);
				scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
				primaryStage.setScene(scene);
				
//				Rectangle2D primaryScreenBounds = Screen.getPrimary().getVisualBounds();
//				primaryStage.setX(primaryScreenBounds.getMinX());
//				primaryStage.setY(primaryScreenBounds.getMinY());
//				primaryStage.setWidth(primaryScreenBounds.getWidth());
//				primaryStage.setHeight(primaryScreenBounds.getHeight());
				
				primaryStage.show();
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
		else if(event.getSource() == returnStdUpdateHome) {
			try {				
				Stage primaryStage = (Stage)returnStdUpdateHome.getScene().getWindow();
				BorderPane root = (BorderPane)FXMLLoader.load(getClass().getResource("homeLaunch.fxml"));
				Scene scene = new Scene(root);
				scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
				primaryStage.setScene(scene);
				
//				Rectangle2D primaryScreenBounds = Screen.getPrimary().getVisualBounds();
//				primaryStage.setX(primaryScreenBounds.getMinX());
//				primaryStage.setY(primaryScreenBounds.getMinY());
//				primaryStage.setWidth(primaryScreenBounds.getWidth());
//				primaryStage.setHeight(primaryScreenBounds.getHeight());
				
				primaryStage.show();
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
		else {
			Stage primaryStage = (Stage)returnStdInfoBtn.getScene().getWindow();
			BorderPane root = (BorderPane)FXMLLoader.load(getClass().getResource("homeLaunch.fxml"));
			Scene scene = new Scene(root);
			scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
			primaryStage.setScene(scene);
			
//			Rectangle2D primaryScreenBounds = Screen.getPrimary().getVisualBounds();
//			primaryStage.setX(primaryScreenBounds.getMinX());
//			primaryStage.setY(primaryScreenBounds.getMinY());
//			primaryStage.setWidth(primaryScreenBounds.getWidth());
//			primaryStage.setHeight(primaryScreenBounds.getHeight());
			
			primaryStage.show();
		}
	}
	
	@FXML private Button enterFinInfoBtn, returnFinInfoBtn;
	@FXML private void handleButtonAction94(ActionEvent event) throws IOException{
		
		if(event.getSource() == enterFinInfoBtn) {
			try {				
				Stage primaryStage = (Stage)enterFinInfoBtn.getScene().getWindow();
				BorderPane pane = (BorderPane)FXMLLoader.load(getClass().getResource("finHomeCentral.fxml"));
				primaryStage.setTitle("Financial Information Central");
				Scene scene = new Scene(pane,800,600);
				scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
				primaryStage.setScene(scene);
				primaryStage.show();
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
		else {
			Stage primaryStage = (Stage)returnFinInfoBtn.getScene().getWindow();
			BorderPane root = (BorderPane)FXMLLoader.load(getClass().getResource("homeLaunch.fxml"));
			Scene scene = new Scene(root);
			scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
			primaryStage.setScene(scene);
			
//			Rectangle2D primaryScreenBounds = Screen.getPrimary().getVisualBounds();
//			primaryStage.setX(primaryScreenBounds.getMinX());
//			primaryStage.setY(primaryScreenBounds.getMinY());
//			primaryStage.setWidth(primaryScreenBounds.getWidth());
//			primaryStage.setHeight(primaryScreenBounds.getHeight());
			
			primaryStage.show();
		}
	}
	
	@FXML private Button enterScoreInfoBtn, returnScoreInfoBtn;
	@FXML private void handleButtonAction95(ActionEvent event) throws IOException{
		
		if(event.getSource() == enterScoreInfoBtn) {
			try {				
				Stage primaryStage = (Stage)enterScoreInfoBtn.getScene().getWindow();
				BorderPane pane = (BorderPane)FXMLLoader.load(getClass().getResource("scoresheetHomeCentral.fxml"));
				primaryStage.setTitle("Academic Information Central");
				Scene scene = new Scene(pane,800,600);
				scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
				primaryStage.setScene(scene);
				primaryStage.show();
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
		else {
			Stage primaryStage = (Stage)returnScoreInfoBtn.getScene().getWindow();
			BorderPane root = (BorderPane)FXMLLoader.load(getClass().getResource("homeLaunch.fxml"));
			Scene scene = new Scene(root);
			scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
			primaryStage.setScene(scene);
			
//			Rectangle2D primaryScreenBounds = Screen.getPrimary().getVisualBounds();
//			primaryStage.setX(primaryScreenBounds.getMinX());
//			primaryStage.setY(primaryScreenBounds.getMinY());
//			primaryStage.setWidth(primaryScreenBounds.getWidth());
//			primaryStage.setHeight(primaryScreenBounds.getHeight());
			
			primaryStage.show();
		}
	}
	
	@FXML private Button enterEOTResult, returnEOTResult;
	@FXML private void handleButtonAction96(ActionEvent event) throws IOException{
		
		if(event.getSource() == enterEOTResult) {
			try {				
				Stage primaryStage = (Stage)enterEOTResult.getScene().getWindow();
				BorderPane pane = (BorderPane)FXMLLoader.load(getClass().getResource("eotResultCentral.fxml"));
				primaryStage.setTitle("Academic Information Central");
				Scene scene = new Scene(pane,800,600);
				scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
				primaryStage.setScene(scene);
				primaryStage.show();
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
		else {
			Stage primaryStage = (Stage)returnEOTResult.getScene().getWindow();
			BorderPane root = (BorderPane)FXMLLoader.load(getClass().getResource("scoresheetHomeCentral.fxml"));
			Scene scene = new Scene(root);
			scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
			primaryStage.setScene(scene);
			primaryStage.show();
		}
	}
	
	@FXML private Button enterLiveResult, returnLiveResult;
	@FXML private void handleButtonAction97(ActionEvent event) throws IOException{
		
		if(event.getSource() == enterLiveResult) {
			try {				
				Stage primaryStage = (Stage)enterLiveResult.getScene().getWindow();
				BorderPane pane = (BorderPane)FXMLLoader.load(getClass().getResource("liveResultCentral.fxml"));
				primaryStage.setTitle("Academic Information Central");
				Scene scene = new Scene(pane,800,600);
				scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
				primaryStage.setScene(scene);
				primaryStage.show();
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
		else {
			Stage primaryStage = (Stage)returnLiveResult.getScene().getWindow();
			BorderPane root = (BorderPane)FXMLLoader.load(getClass().getResource("scoresheetHomeCentral.fxml"));
			Scene scene = new Scene(root);
			scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
			primaryStage.setScene(scene);
			primaryStage.show();
		}
	}
	
	@FXML private Button enterAttendanceBtn, returnAttendanceBtn;
	@FXML private void handleButtonAction98(ActionEvent event) throws IOException{
		
		if(event.getSource() == enterAttendanceBtn) {
			try {				
				Stage primaryStage = (Stage)enterAttendanceBtn.getScene().getWindow();
				BorderPane pane = (BorderPane)FXMLLoader.load(getClass().getResource("attendanceCentral.fxml"));
				primaryStage.setTitle("Attendance Information Central");
				Scene scene = new Scene(pane,800,600);
				scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
				primaryStage.setScene(scene);
				primaryStage.show();
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
		else {
			Stage primaryStage = (Stage)returnAttendanceBtn.getScene().getWindow();
			BorderPane root = (BorderPane)FXMLLoader.load(getClass().getResource("homeLaunch.fxml"));
			Scene scene = new Scene(root);
			scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
			primaryStage.setScene(scene);
			
//			Rectangle2D primaryScreenBounds = Screen.getPrimary().getVisualBounds();
//			primaryStage.setX(primaryScreenBounds.getMinX());
//			primaryStage.setY(primaryScreenBounds.getMinY());
//			primaryStage.setWidth(primaryScreenBounds.getWidth());
//			primaryStage.setHeight(primaryScreenBounds.getHeight());
			
			primaryStage.show();
		}
	}
	
	@FXML private Button enterBarcAttendanceBtn, returnBarcAttendanceBtn;
	@FXML private void handleButtonAction99(ActionEvent event) throws IOException{
		
		if(event.getSource() == enterBarcAttendanceBtn) {
			try {				
				Stage primaryStage = (Stage)enterBarcAttendanceBtn.getScene().getWindow();
				BorderPane pane = (BorderPane)FXMLLoader.load(getClass().getResource("barcodeAttendance.fxml"));
				primaryStage.setTitle("Attendance Information Central");
				Scene scene = new Scene(pane,900,720);
				scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
				primaryStage.setScene(scene);
				primaryStage.show();
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
		else {
			Stage primaryStage = (Stage)returnBarcAttendanceBtn.getScene().getWindow();
			BorderPane root = (BorderPane)FXMLLoader.load(getClass().getResource("homeLaunch.fxml"));
			Scene scene = new Scene(root);
			scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
			primaryStage.setScene(scene);
			
//			Rectangle2D primaryScreenBounds = Screen.getPrimary().getVisualBounds();
//			primaryStage.setX(primaryScreenBounds.getMinX());
//			primaryStage.setY(primaryScreenBounds.getMinY());
//			primaryStage.setWidth(primaryScreenBounds.getWidth());
//			primaryStage.setHeight(primaryScreenBounds.getHeight());
			
			primaryStage.show();
		}
	}
	
	@FXML private Button enterSecurityBtn, returnSecurityBtn;
	@FXML private void handleButtonAction100(ActionEvent event) throws IOException{
		
		if(event.getSource() == enterSecurityBtn) {
			try {				
				Stage primaryStage = (Stage)enterSecurityBtn.getScene().getWindow();
				BorderPane pane = (BorderPane)FXMLLoader.load(getClass().getResource("security.fxml"));
				primaryStage.setTitle("Security Information Central");
				Scene scene = new Scene(pane,800,600);
				scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
				primaryStage.setScene(scene);
				primaryStage.show();
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
		else {
			Stage primaryStage = (Stage)returnSecurityBtn.getScene().getWindow();
			BorderPane root = (BorderPane)FXMLLoader.load(getClass().getResource("homeLaunch.fxml"));
			Scene scene = new Scene(root);
			scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
			primaryStage.setScene(scene);
			
//			Rectangle2D primaryScreenBounds = Screen.getPrimary().getVisualBounds();
//			primaryStage.setX(primaryScreenBounds.getMinX());
//			primaryStage.setY(primaryScreenBounds.getMinY());
//			primaryStage.setWidth(primaryScreenBounds.getWidth());
//			primaryStage.setHeight(primaryScreenBounds.getHeight());
			
			primaryStage.show();
		}
	}
	
	@FXML private Button enterAdmissionBtn, returnAdmissionBtn;
	@FXML private void handleButtonAction101(ActionEvent event) throws IOException{
		
		if(event.getSource() == enterAdmissionBtn) {
			try {				
				Stage primaryStage = (Stage)enterAdmissionBtn.getScene().getWindow();
				BorderPane pane = (BorderPane)FXMLLoader.load(getClass().getResource("admissionCentral.fxml"));
				primaryStage.setTitle("Admission Central");
				Scene scene = new Scene(pane,800,600);
				scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
				primaryStage.setScene(scene);
				primaryStage.show();
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
		else {
			Stage primaryStage = (Stage)returnAdmissionBtn.getScene().getWindow();
			BorderPane root = (BorderPane)FXMLLoader.load(getClass().getResource("stdHomeCentral.fxml"));
			Scene scene = new Scene(root);
			scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
			primaryStage.setScene(scene);			
			primaryStage.show();
		}
	}
	
	@FXML private Button enterAdmissionForm, returnAdmissionForm;
	@FXML private void handleButtonAction102(ActionEvent event) throws IOException{
		
		if(event.getSource() == enterAdmissionForm) {
			try {				
				Stage primaryStage = (Stage)enterAdmissionForm.getScene().getWindow();
				VBox pane = (VBox)FXMLLoader.load(getClass().getResource("admissionForm2.fxml"));
				primaryStage.setTitle("Admission Form");
				Scene scene = new Scene(pane,710,800);
				scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
				primaryStage.setScene(scene);
				primaryStage.show();
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
		else {
			Stage primaryStage = (Stage)returnAdmissionForm.getScene().getWindow();
			BorderPane root = (BorderPane)FXMLLoader.load(getClass().getResource("admissionCentral.fxml"));
			Scene scene = new Scene(root);
			scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
			primaryStage.setScene(scene);			
			primaryStage.show();
		}
	}
	
	@FXML private Button enterCreateAdmissionBtn, returnCreateAdmissionBtn;
	@FXML private void handleButtonAction103(ActionEvent event) throws IOException{
		
		if(event.getSource() == enterCreateAdmissionBtn) {
			try {				
				Stage primaryStage = (Stage)enterCreateAdmissionBtn.getScene().getWindow();
				BorderPane pane = (BorderPane)FXMLLoader.load(getClass().getResource("createAdmission.fxml"));
				primaryStage.setTitle("Admission Processing");
				Scene scene = new Scene(pane,1044,700);
				scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
				primaryStage.setScene(scene);
				primaryStage.show();
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
		else {
			Stage primaryStage = (Stage)returnCreateAdmissionBtn.getScene().getWindow();
			BorderPane root = (BorderPane)FXMLLoader.load(getClass().getResource("homeLaunch.fxml"));
			Scene scene = new Scene(root);
			scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
			primaryStage.setScene(scene);			
			primaryStage.show();
		}
	}
	
	@FXML private Button enterAdmissionList, returnAdmissionList;
	@FXML private void handleButtonAction104(ActionEvent event) throws IOException{
		if(event.getSource() == enterAdmissionList) {
			try {				
				Stage primaryStage = (Stage)enterAdmissionList.getScene().getWindow();
				VBox root = (VBox)FXMLLoader.load(getClass().getResource("admissionList.fxml"));
				primaryStage.setTitle("Admission Information");
				Scene scene = new Scene(root,950,700);
				scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
				primaryStage.setScene(scene);
				primaryStage.show();
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
		else {
			Stage primaryStage = (Stage)returnAdmissionList.getScene().getWindow();
			BorderPane root = (BorderPane)FXMLLoader.load(getClass().getResource("admissionCentral.fxml"));
			Scene scene = new Scene(root);
			scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
			primaryStage.setScene(scene);
			primaryStage.show();
		}
	}

	@FXML
	public void displayLoginUser(ActionEvent event) {
		msgLabel.setText("Login User: ("+dispUserClass+"): "+ dispName);
	}
	
	@FXML public void dispDashBoardUser(MouseEvent event) {
		dashboardLabel.setText(dispName+"'s Dashboard");
	}
	
	@FXML private Button updateStdBtn, copyClass2ClassBtn, enterHostelBtn;
	@FXML public void defineAccessLevel(MouseEvent event) {
//		Runnable start = null;
//		startCountDownHome(start);
		
		msgLabel.setText("Login User: "+ dispName);
		if(dispUserClass.equals("Cashier") || dispUserClass.equalsIgnoreCase("Bursar")) {
			enterScoresHomeBtn.setDisable(true);
			createNewStudentButton.setDisable(true);
			addDeleteSubjectsButton.setDisable(true);
			//findStudentButton.setDisable(true);
			generateResultsButton.setDisable(true);
			deleteStudentButton.setDisable(true);
			staffInfoButton.setDisable(true);
			calendarMgtButton.setDisable(true);
			enterImageHomeBtn.setDisable(true);
			librarySysBtn.setDisable(true);
			//enterInventoryPad.setDisable(true);
			enterDiscRecBtn.setDisable(true);
			//enterFpBarcodeBtn.setDisable(true);
			enterConcHomeBtn.setDisable(true);
			enterHostelBtn.setDisable(true);
		}
		else if(dispUserClass.equals("Teacher")) {
			createNewStudentButton.setDisable(true);
			addDeleteSubjectsButton.setDisable(true);
			//findStudentButton.setDisable(true);
			calendarMgtButton.setDisable(true);
			deleteStudentButton.setDisable(true);
			staffInfoButton.setDisable(true);
			enterCashPadBtn.setDisable(true);
			enterImageHomeBtn.setDisable(true);
			librarySysBtn.setDisable(true);
			enterInventoryPad.setDisable(true);
			enterDiscRecBtn.setDisable(true);
			enterFpBarcodeBtn.setDisable(true);
			enterConcHomeBtn.setDisable(true);
			enterHostelBtn.setDisable(true);
		}
		else if(dispUserClass.equals("Dean") || dispUserClass.equals("Sub-Dean")) {
			createNewStudentButton.setDisable(true);
			findStudentButton.setDisable(true);
			addDeleteSubjectsButton.setDisable(true);
			calendarMgtButton.setDisable(true);
			deleteStudentButton.setDisable(true);
			//enterCashPadBtn.setDisable(true);
			//enterImageHomeBtn.setDisable(true);
			librarySysBtn.setDisable(true);
			enterInventoryPad.setDisable(true);
			enterDiscRecBtn.setDisable(true);
			//enterFpBarcodeBtn.setDisable(true);
			enterConcHomeBtn.setDisable(true);
			enterHostelBtn.setDisable(true);
		}
		else if(dispUserClass.equals("Vice-Principal") || dispUserClass.equals("Principal")) {
			enterScoresHomeBtn.setDisable(true);
			calendarMgtButton.setDisable(true);
			deleteStudentButton.setDisable(true);
			//enterCashPadBtn.setDisable(true);
			//enterImageHomeBtn.setDisable(true);
			librarySysBtn.setDisable(true);
		}
		else if(dispUserClass.equals("AdmissionOfficer")) {
			addDeleteSubjectsButton.setDisable(true);
			calendarMgtButton.setDisable(true);
			deleteStudentButton.setDisable(true);
			staffInfoButton.setDisable(true);
			enterCashPadBtn.setDisable(true);
			enterImageHomeBtn.setDisable(true);
			librarySysBtn.setDisable(true);
			enterInventoryPad.setDisable(true);
			enterDiscRecBtn.setDisable(true);
			enterFpBarcodeBtn.setDisable(true);
			//enterConcHomeBtn.setDisable(true);
			enterHostelBtn.setDisable(true);
		}
		else if(dispUserClass.equals("SecurityOfficer")) {
			enterScoresHomeBtn.setDisable(true);
			createNewStudentButton.setDisable(true);
			addDeleteSubjectsButton.setDisable(true);
			findStudentButton.setDisable(true);
			generateResultsButton.setDisable(true);
			deleteStudentButton.setDisable(true);
			staffInfoButton.setDisable(true);
			calendarMgtButton.setDisable(true);
			enterCashPadBtn.setDisable(true);
			generateReportsButton.setDisable(true);
			//enterImageHomeBtn.setDisable(true);
			librarySysBtn.setDisable(true);
			enterInventoryPad.setDisable(true);
			enterDiscRecBtn.setDisable(true);
			//enterFpBarcodeBtn.setDisable(true);
			enterConcHomeBtn.setDisable(true);
			enterHostelBtn.setDisable(true);
		}
		else if(dispUserClass.equals("Boarding-Master")) {
			enterScoresHomeBtn.setDisable(true);
			createNewStudentButton.setDisable(true);
			addDeleteSubjectsButton.setDisable(true);
			findStudentButton.setDisable(true);
			generateResultsButton.setDisable(true);
			deleteStudentButton.setDisable(true);
			staffInfoButton.setDisable(true);
			calendarMgtButton.setDisable(true);
			//enterCashPadBtn.setDisable(true);
			generateReportsButton.setDisable(true);
			//enterImageHomeBtn.setDisable(true);
			librarySysBtn.setDisable(true);
			enterInventoryPad.setDisable(true);
			enterDiscRecBtn.setDisable(true);
			//enterFpBarcodeBtn.setDisable(true);
			enterConcHomeBtn.setDisable(true);
			//enterHostelBtn.setDisable(true);
		}
		else if(dispUserClass.equals("Counsellor")){
			enterScoresHomeBtn.setDisable(true);
			createNewStudentButton.setDisable(true);
			addDeleteSubjectsButton.setDisable(true);
			//findStudentButton.setDisable(true);
			//generateResultsButton.setDisable(true);
			deleteStudentButton.setDisable(true);
			staffInfoButton.setDisable(true);
			calendarMgtButton.setDisable(true);
			enterCashPadBtn.setDisable(true);
			//enterImageHomeBtn.setDisable(true);
			//librarySysBtn.setDisable(true);
			enterInventoryPad.setDisable(true);
			//enterDiscRecBtn.setDisable(true);
			//enterFpBarcodeBtn.setDisable(true);
			enterConcHomeBtn.setDisable(true);
			enterHostelBtn.setDisable(true);
		}
		else if(dispUserClass.equals("Computer-Operator")) {
			enterScoresHomeBtn.setDisable(true);
			//createNewStudentButton.setDisable(true);
			addDeleteSubjectsButton.setDisable(true);
			//findStudentButton.setDisable(true);
			generateResultsButton.setDisable(true);
			deleteStudentButton.setDisable(true);
			staffInfoButton.setDisable(true);
			calendarMgtButton.setDisable(true);
			enterCashPadBtn.setDisable(true);
			//enterImageHomeBtn.setDisable(true);
			librarySysBtn.setDisable(true);
			//enterInventoryPad.setDisable(true);
			enterDiscRecBtn.setDisable(true);
			//enterFpBarcodeBtn.setDisable(true);
			//enterConcHomeBtn.setDisable(true);
			//enterHostelBtn.setDisable(true);
		}
		else {
			//do nothing
		}
		
		enterScoresHomeBtn.setOnMouseEntered(e -> {
			enterScoresHomeBtn.setTextFill(Color.GREEN);
		});
		enterScoresHomeBtn.setOnMouseExited(e -> {
			enterScoresHomeBtn.setTextFill(Color.DARKBLUE);
		});
		
		createNewStudentButton.setOnMouseEntered(e -> {
			createNewStudentButton.setTextFill(Color.GREEN);
		});
		createNewStudentButton.setOnMouseExited(e -> {
			createNewStudentButton.setTextFill(Color.DARKBLUE);
		});
		
		addDeleteSubjectsButton.setOnMouseEntered(e -> {
			addDeleteSubjectsButton.setTextFill(Color.GREEN);
		});
		addDeleteSubjectsButton.setOnMouseExited(e -> {
			addDeleteSubjectsButton.setTextFill(Color.DARKBLUE);
		});
		
		findStudentButton.setOnMouseEntered(e -> {
			findStudentButton.setTextFill(Color.GREEN);
		});
		findStudentButton.setOnMouseExited(e -> {
			findStudentButton.setTextFill(Color.DARKBLUE);
		});
		
		generateResultsButton.setOnMouseEntered(e -> {
			generateResultsButton.setTextFill(Color.GREEN);
		});
		generateResultsButton.setOnMouseExited(e -> {
			generateResultsButton.setTextFill(Color.DARKBLUE);
		});
		
		deleteStudentButton.setOnMouseEntered(e -> {
			deleteStudentButton.setTextFill(Color.GREEN);
		});
		deleteStudentButton.setOnMouseExited(e -> {
			deleteStudentButton.setTextFill(Color.DARKBLUE);
		});
		
		staffInfoButton.setOnMouseEntered(e -> {
			staffInfoButton.setTextFill(Color.GREEN);
		});
		staffInfoButton.setOnMouseExited(e -> {
			staffInfoButton.setTextFill(Color.DARKBLUE);
		});
		
		calendarMgtButton.setOnMouseEntered(e -> {
			calendarMgtButton.setTextFill(Color.GREEN);
		});
		calendarMgtButton.setOnMouseExited(e -> {
			calendarMgtButton.setTextFill(Color.DARKBLUE);
		});
		
		enterCashPadBtn.setOnMouseEntered(e -> {
			enterCashPadBtn.setTextFill(Color.GREEN);
		});
		enterCashPadBtn.setOnMouseExited(e -> {
			enterCashPadBtn.setTextFill(Color.DARKBLUE);
		});
		
		generateReportsButton.setOnMouseEntered(e -> {
			generateReportsButton.setTextFill(Color.GREEN);
		});
		generateReportsButton.setOnMouseExited(e -> {
			generateReportsButton.setTextFill(Color.DARKBLUE);
		});
		
		enterImageHomeBtn.setOnMouseEntered(e -> {
			enterImageHomeBtn.setTextFill(Color.GREEN);
		});
		enterImageHomeBtn.setOnMouseExited(e -> {
			enterImageHomeBtn.setTextFill(Color.DARKBLUE);
		});
		
		librarySysBtn.setOnMouseEntered(e -> {
			librarySysBtn.setTextFill(Color.GREEN);
		});
		librarySysBtn.setOnMouseExited(e -> {
			librarySysBtn.setTextFill(Color.DARKBLUE);
		});
		
		enterInventoryPad.setOnMouseEntered(e -> {
			enterInventoryPad.setTextFill(Color.GREEN);
		});
		enterInventoryPad.setOnMouseExited(e -> {
			enterInventoryPad.setTextFill(Color.DARKBLUE);
		});
		
		enterDiscRecBtn.setOnMouseEntered(e -> {
			enterDiscRecBtn.setTextFill(Color.GREEN);
		});
		enterDiscRecBtn.setOnMouseExited(e -> {
			enterDiscRecBtn.setTextFill(Color.DARKBLUE);
		});
		
		enterFpBarcodeBtn.setOnMouseEntered(e -> {
			enterFpBarcodeBtn.setTextFill(Color.GREEN);
		});
		enterFpBarcodeBtn.setOnMouseExited(e -> {
			enterFpBarcodeBtn.setTextFill(Color.DARKBLUE);
		});
		
		changePwdButton.setOnMouseEntered(e -> {
			changePwdButton.setTextFill(Color.GREEN);
		});
		changePwdButton.setOnMouseExited(e -> {
			changePwdButton.setTextFill(Color.DARKBLUE);
		});
		
	}
	
	//Cash Module
	@FXML public void defineAccessLevelCashPad2(MouseEvent event) {
		if(dispUserClass.equalsIgnoreCase("Cashier")) {
			enterOpenTillGLBtn.setDisable(true);
			FTButton.setDisable(true);
			cashEnterBillBtn.setDisable(true);
		}
		else if(dispUserClass.equals("Boarding-Master")) {
			enterOpenTillGLBtn.setDisable(true);
			FTButton.setDisable(true);
			cashEnterBillBtn.setDisable(true);
			tellerButton.setDisable(true);
			enterEarnedIncomeBtn2.setDisable(true);
			enterEarnedIncomeBtn.setDisable(true);
			cashEnterBillBtn.setDisable(true);
			enterPayAnalysisBtn.setDisable(true);
		}
		else if(dispUserClass.equals("Dean") || dispUserClass.equals("Sub-Dean")) {
			enterOpenTillGLBtn.setDisable(true);
			FTButton.setDisable(true);
			cashEnterBillBtn.setDisable(true);
			tellerButton.setDisable(true);
			enterEarnedIncomeBtn2.setDisable(true);
			enterEarnedIncomeBtn.setDisable(true);
			cashEnterBillBtn.setDisable(true);
			enterPayAnalysisBtn.setDisable(true);
		}
		else if(dispUserClass.equals("Vice-Principal") || dispUserClass.equals("Principal")) {
			enterOpenTillGLBtn.setDisable(true);
			FTButton.setDisable(true);
			cashEnterBillBtn.setDisable(true);
			tellerButton.setDisable(true);
			enterEarnedIncomeBtn2.setDisable(true);
			enterEarnedIncomeBtn.setDisable(true);
			cashEnterBillBtn.setDisable(true);
			enterPayAnalysisBtn.setDisable(true);
		}
	}
	
	//Inventory/Admin Access
	@FXML public void defineAccessLevelCashPad(MouseEvent event) {
		if(dispUserClass.equalsIgnoreCase("Cashier")) {
			enterDrugsInfoBtn.setDisable(true);
			enterCreateClass.setDisable(true);
			enterChangeBorderStatusBtn.setDisable(true);
			enterMoveClass2ClassBtn.setDisable(true);
			enterChangeStdClassBtn.setDisable(true);
			enterAssignBillToClassBtn.setDisable(true);
			enterGenReportBtn.setDisable(true);
			enterEOTBtn.setDisable(true);
		}
		else if(dispUserClass.equals("Vice-Principal") || dispUserClass.equals("Principal")){
			enterDrugsInfoBtn.setDisable(true);
			enterCreateClass.setDisable(true);
			enterChangeBorderStatusBtn.setDisable(true);
			//enterMoveClass2ClassBtn.setDisable(true);
			enterChangeStdClassBtn.setDisable(true);
			enterAssignBillToClassBtn.setDisable(true);
			enterGenReportBtn.setDisable(true);
		}
		else if(dispUserClass.equals("Computer-Operator")) {
			enterDrugsInfoBtn.setDisable(true);
			enterCreateClass.setDisable(true);
			enterChangeBorderStatusBtn.setDisable(true);
			//enterMoveClass2ClassBtn.setDisable(true);
			enterChangeStdClassBtn.setDisable(true);
			enterAssignBillToClassBtn.setDisable(true);
			enterGenReportBtn.setDisable(true);
		}
		else if(dispUserClass.equals("Admin") && !(dispName.equalsIgnoreCase("Tony Lifu"))) {
			enterChangeStdClassBtn.setDisable(true);
		}
	}
	
	//update std
	@FXML public void defineAccessLevelUpdate(MouseEvent event) {
		if(dispUserClass.equals("Cashier") || dispUserClass.equalsIgnoreCase("Bursar")) {
			updateStdBtn.setDisable(true);
		}
		else if(dispUserClass.equals("Teacher")) {
			updateStdBtn.setDisable(true);
		}
	}
	
	//Image Access Control
	@FXML public void imageHomeAccessInit(MouseEvent event) {
		if(dispUserClass.equals("SecurityOfficer")) {
			enterUploadPhotoBtn.setDisable(true);
			studentListBtn2.setDisable(true);
			enterPhotoIdBtn.setDisable(true);
		}
		else if(dispUserClass.equals("Boarding-Master")) {
			enterUploadPhotoBtn.setDisable(true);
			studentListBtn2.setDisable(true);
			enterPhotoIdBtn.setDisable(true);
		}
		else if(dispUserClass.equals("Vice-Principal") || dispUserClass.equals("Principal")){
			//enterUploadPhotoBtn.setDisable(true);
			enterPhotoIdBtn.setDisable(true);
		}
		else if(dispUserClass.equals("Dean") || dispUserClass.equals("Sub-Dean")) {
			//enterUploadPhotoBtn.setDisable(true);
			enterPhotoIdBtn.setDisable(true);
		}
		else {
			//
		}
	}
	
	//Barcode Access Level
	@FXML public void barcodeHomeAccessInit(MouseEvent event) {
		if(dispUserClass.equals("SecurityOfficer")) {
			enterUploadBarcodeBtn.setDisable(true);
			enterEnqViewBarcodeBtn.setDisable(true);
			enterBarcodeScannedList.setDisable(true);
			enterGenClassBarcodeBtn.setDisable(true);
			enterSpecialAttendanceBtn.setDisable(true);
		}
		else if(dispUserClass.equals("Boarding-Master")) {
			enterUploadBarcodeBtn.setDisable(true);
			enterEnqViewBarcodeBtn.setDisable(true);
			enterBarcodeScannedList.setDisable(true);
			enterGenClassBarcodeBtn.setDisable(true);
			enterSpecialAttendanceBtn.setDisable(true);
		}
		else if(dispUserClass.equals("Vice-Principal") || dispUserClass.equals("Principal")){
			//enterUploadPhotoBtn.setDisable(true);
			enterSpecialAttendanceBtn.setDisable(true);
		}
		else if(dispUserClass.equals("Dean") || dispUserClass.equals("Sub-Dean")) {
			//enterUploadPhotoBtn.setDisable(true);
			enterSpecialAttendanceBtn.setDisable(true);
		}
		else {
			//
		}
	}
	
	
	@FXML private Button deleteStdPaymentBtn, updateStdPaymentBtn, createStdPaymentBtn,
		validateStdPaymentBtn, addStdPaymentBtn;
	
	@FXML public void defineAccessLevel2(MouseEvent event) {
		if(dispUserClass.equals("Cashier")) {
			deleteStdPaymentBtn.setDisable(true);
			updateStdPaymentBtn.setDisable(true);
			createStdPaymentBtn.setDisable(true);
		}
		else if(dispUserClass.equals("SecurityOfficer")) {
			deleteStdPaymentBtn.setDisable(true);
			updateStdPaymentBtn.setDisable(true);
			createStdPaymentBtn.setDisable(true);
			validateStdPaymentBtn.setDisable(true);
			addStdPaymentBtn.setDisable(true);
		}
	}
	
	@FXML private Button updateStaffBtn, saveStaffBtn;
	
	@FXML public void defineAccessLevel3(MouseEvent event) {
		if(dispUserClass.equals("Teacher")) {
			updateStaffBtn.setDisable(true);
			saveStaffBtn.setDisable(true);
		}
		else if(dispUserClass.equalsIgnoreCase("AdmissionOfficer")) {
			updateStaffBtn.setDisable(true);
			saveStaffBtn.setDisable(true);
		}
		else {
			//
		}
	}
	
	@FXML private Button deleteScoresBtn, updateScoresBtn;
	
	@FXML
	public void quitPlatformButton2(ActionEvent event) {
		Platform.exit();
	}
	
	@FXML private TextField idTF;
	@FXML private TextField surNameTF, otherNamesTF, placeOfBirthTF, villageTF, fatherNameTF, 
		fatherPhoneTF, fatherOccupationTF, fatherReligionTF, motherNameTF, motherPhoneTF, 
		motherOccupationTF, motherReligionTF, guardianNameTF, guardianPhoneTF, 
		guardianOccupationTF, guardianReligionTF, stdEmailTF, previousSchoolTF, ICETF;
	@FXML private DatePicker dateOfBirthTF, dateOfRegTF;
	@FXML private ComboBox<String> sexTF, disabilityTF, entryClassAssigned, entryBorderStatus,
		stdStatusCombo, nationalityTF, stateTF, lgaTF, lastClassTF, classSeekingTF, classOfferedTF;
	@FXML private TextArea addressTF, ifDisabledTF;
	
	@FXML private TextField idTF2;
	@FXML private TextField surNameTF2, otherNamesTF2, placeOfBirthTF2, villageTF2, 
		fatherNameTF2, fatherPhoneTF2, fatherOccupationTF2, fatherReligionTF2, motherNameTF2, 
		motherPhoneTF2, motherOccupationTF2, motherReligionTF2, guardianNameTF2, 
		guardianPhoneTF2, guardianOccupationTF2, guardianReligionTF2, previousSchoolTF2, 
		ICETF2,stdEmailTF2;
	@FXML private DatePicker dateOfBirthTF2, dateOfRegTF2;
	@FXML private ComboBox<String> sexTF2, disabilityTF2, entryClassAssigned2, 
		entryBorderStatus2, stdStatusCombo2, nationalityTF2, stateTF2, lgaTF2, 
		lastClassTF2, classSeekingTF2, classOfferedTF2;
	@FXML private TextArea addressTF2, ifDisabledTF2;
	
	ObservableList<String> statusCombo = FXCollections.observableArrayList("Regular","Suspended","Rusticated","Graduated",
			"Transferred","Withdrawn","Deferred");
	
	ObservableList<String> prevClaz = FXCollections.observableArrayList("PRY3","PRY4","PRY5","PRY6","JSS1",
			"JSS2","JSS3","SSS1","SSS2","SSS3");
	
	@FXML public void initStdClass(MouseEvent event) {
		lastClassTF.setItems(prevClaz);
		classSeekingTF.setItems(stdClassN); 
		classOfferedTF.setItems(stdClassN);
	}
	
	@FXML public void initStdClass2(MouseEvent event) {
		lastClassTF2.setItems(prevClaz);
		classSeekingTF2.setItems(stdClassN); 
		classOfferedTF2.setItems(stdClassN);
	}
	
	@FXML public void initNationality(MouseEvent event) {
		populateCountries(nationalityTF);
	}
	
	@FXML public void initNationality2(MouseEvent event) {
		populateCountries(nationalityTF2);
	}
	
	public void populateCountries(ComboBox<String> combo) {
		ObservableList<String> nationsList = FXCollections.observableArrayList();
		try {
			String[] locales = Locale.getISOCountries();
			for(String countryCode : locales) {
				Locale obj = new Locale("", countryCode);
				nationsList.add(obj.getDisplayCountry());
			}
			combo.setItems(nationsList);
			
			new AutoCompleteComboBoxListener<>(combo);
			
		}
		catch(Exception e) {
			e.printStackTrace();
		}
	}
	
	@FXML public void initState(MouseEvent event) {
		populateStates(stateTF);
	}
	
	@FXML public void initState2(MouseEvent event) {
		populateStates(stateTF2);
	}
	
	public void populateStates(ComboBox<String> combo) {
		ObservableList<String> statesList = FXCollections.observableArrayList(
				"Abia","Adamawa","Akwa Ibom","Anambra",	"Bauchi","Bayelsa",
				"Benue","Borno","Cross River","Delta","Ebonyi","Edo",
				"Ekiti","Enugu","Gombe","Imo","Jigawa","Kaduna",
				"Kano","Katsina","Kebbi","Kogi","Kwara","Lagos",
				"Nasarawa","Niger","Ogun","Ondo","Osun","Oyo",
				"Plateau","Rivers","Sokoto","Taraba","Yobe","Zamfara",
				"FCT"
				);
		try {
			
			combo.setItems(statesList);
			
			new AutoCompleteComboBoxListener<>(combo);
			
		}
		catch(Exception e) {
			e.printStackTrace();
		}
	}
	
	@FXML public void initLGAs(MouseEvent event) {
		populateLGAs(lgaTF);
	}
	
	@FXML public void initLGAs2(MouseEvent event) {
		populateLGAs(lgaTF2);
	}

	public void populateLGAs(ComboBox<String> combo) {
		ObservableList<String> statesList = FXCollections.observableArrayList(
				"Abadam","Abaji","Abak","Abakaliki","Aba North","Aba South",
				"Abeokuta North","Abeokuta South","Abi","Aboh Mbaise","Abua/Odual",
				"Adavi","Ado Ekiti","Ado-Odo/Ota","Afijio","Afikpo North",
				"Afikpo South (Edda)","Agaie","Agatu","Agwara"
				);
		try {
			
			combo.setItems(statesList);
			
			new AutoCompleteComboBoxListener<>(combo);
			
		}
		catch(Exception e) {
			e.printStackTrace();
		}
	}

	//StudentController
	@FXML public void SaveButton(ActionEvent event) {
		
		try {
			String stdNo = idTF.getText().trim().toUpperCase();
			String surName = surNameTF.getText().trim().toUpperCase();
			String otherNames = otherNamesTF.getText().toUpperCase();
			String entryClass = entryClassAssigned.getValue();
			String borderStatus = entryBorderStatus.getValue();
			String status = stdStatusCombo.getValue();
			String sex = sexTF.getValue();
			String age = String.valueOf(LocalDate.now().getYear() - dateOfBirthTF.getValue().getYear());
			
			try {
				if(stdNo.trim().length() != 0 && surName.trim().length() != 0 && otherNames.trim().length() != 0 && 
						entryClass.trim().length() != 0 && status.trim().length() != 0 && borderStatus.trim().length() != 0 && 
						(status.trim().equals("Regular") || status.trim().equals("Deferred")) && 
						!stdNo.equalsIgnoreCase("Error: Null") &&
						(validateStdNo(stdNo))) {
					
					CreateStudent student = new CreateStudent();
					
					try {
						student.createStudent(idTF, disabilityTF, surNameTF, otherNamesTF, dateOfBirthTF.getValue(), 
								placeOfBirthTF, sexTF,nationalityTF, stateTF, lgaTF, villageTF, addressTF, fatherNameTF, 
								fatherPhoneTF, fatherOccupationTF, fatherReligionTF, motherNameTF, motherPhoneTF, 
								motherOccupationTF, motherReligionTF, guardianNameTF, guardianPhoneTF, 
								guardianOccupationTF, guardianReligionTF, previousSchoolTF, lastClassTF, 
								classSeekingTF, classOfferedTF, ifDisabledTF, ICETF, LocalDate.now(), stdEmailTF, dispName,
								entryClass, borderStatus, status);
						try {
							CreateTransactions transaction = new CreateTransactions();
							String name = otherNames +" "+ surName;
							String TID = stdNo + "1000";
							transaction.createTransactions(TID, stdNo, name, LocalDate.now(), dispName);
						}
						catch(Exception ex) {
							//idTF.setText("Transaction Error: " + ex.getMessage());
							ex.printStackTrace();
							Alert alert = new Alert(Alert.AlertType.ERROR);
							alert.setContentText("Error: "+ ex.getMessage());
							Optional<ButtonType> result = alert.showAndWait();
							if(result.get() == ButtonType.OK) {
								alert.close();
							}
							else {
								alert.close();
							}
						}
						
						try {
							CreateAccountBalance bal = new CreateAccountBalance();
							bal.createAccountBalancePatient(stdNo, surName, otherNames, 0.0, dateOfRegTF.getValue(), 
									LocalDate.now(), stdNo+"1000", dispName);
						}
						catch(Exception ex) {
							//idTF.setText("Account Balance Error: " + ex.getMessage());
							ex.printStackTrace();
							Alert alert = new Alert(Alert.AlertType.ERROR);
							alert.setContentText("Error: "+ ex.getMessage());
							Optional<ButtonType> result = alert.showAndWait();
							if(result.get() == ButtonType.OK) {
								alert.close();
							}
							else {
								alert.close();
							}
						}
						
						//disc
						try {
							CreateDisciplinaryEntry disc = new CreateDisciplinaryEntry();
							disc.createDisciplinaryEntryStudent(stdNo, surName, otherNames, age, sex, borderStatus, entryClass, dispName);
						}
						catch(Exception ex) {
							//idTF.setText("disc entry Error: " + ex.getMessage());
							ex.printStackTrace();
							Alert alert = new Alert(Alert.AlertType.ERROR);
							alert.setContentText("Error: "+ ex.getMessage());
							Optional<ButtonType> result = alert.showAndWait();
							if(result.get() == ButtonType.OK) {
								alert.close();
							}
							else {
								alert.close();
							}
						}
						
						//commendation
						try {
							CreateCommendationEntry commend = new CreateCommendationEntry();
							commend.createCommendationEntryStudent(stdNo, surName, otherNames, age, sex, borderStatus, entryClass, dispName);
						}
						catch(Exception ex) {
							//idTF.setText("commend entry Error: " + ex.getMessage());
							ex.printStackTrace();
							Alert alert = new Alert(Alert.AlertType.ERROR);
							alert.setContentText("Error: "+ ex.getMessage());
							Optional<ButtonType> result = alert.showAndWait();
							if(result.get() == ButtonType.OK) {
								alert.close();
							}
							else {
								alert.close();
							}
						}
						
						//Suspension
						try {
							CreateSuspensionEntry suspend = new CreateSuspensionEntry();
							suspend.createSuspensionEntryStudent(stdNo, surName, otherNames, age, sex, borderStatus, entryClass, dispName);
						}
						catch(Exception ex) {
							//idTF.setText("suspend entry Error: " + ex.getMessage());
							ex.printStackTrace();
							Alert alert = new Alert(Alert.AlertType.ERROR);
							alert.setContentText("Error: "+ ex.getMessage());
							Optional<ButtonType> result = alert.showAndWait();
							if(result.get() == ButtonType.OK) {
								alert.close();
							}
							else {
								alert.close();
							}
						}
						
						//Rusticate
						try {
							CreateRusticateEntry rusticate = new CreateRusticateEntry();
							rusticate.createRusticateEntryStudent(stdNo, surName, otherNames, age, sex, borderStatus, entryClass, dispName);
						}
						catch(Exception ex) {
							//idTF.setText("rusticate entry Error: " + ex.getMessage());
							ex.printStackTrace();
							Alert alert = new Alert(Alert.AlertType.ERROR);
							alert.setContentText("Error: "+ ex.getMessage());
							Optional<ButtonType> result = alert.showAndWait();
							if(result.get() == ButtonType.OK) {
								alert.close();
							}
							else {
								alert.close();
							}
						}
						
						try {
							EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
							EntityManager entitymanager = emfactory.createEntityManager();
							entitymanager.getTransaction().begin();
							
							StudentClasses classes = entitymanager.find(StudentClasses.class, entryClass);
							
							classes.setStdList(stdNo);
							
							//classes.setTerm(term);
							
							entitymanager.getTransaction().commit();
							entitymanager.close();
							emfactory.close();
						}
						catch(Exception ex2) {
							ex2.printStackTrace();
						}
						
						//Debit std for ADMISSION-CHARGES-ONE-OFF billables...
						String classNo;
						String classLetter;
						String year = "";
						String term = "";
						String cid = "";
						LocalDate date = LocalDate.now();
						String studClass = "";
						Vector<StudentClasses> stdClassList = new Vector<>();
						try {
							EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
							EntityManager entitymanager = emfactory.createEntityManager();
							entitymanager.getTransaction().begin();
							
							Query query =
									entitymanager.createQuery("select e from StudentClasses e ");
							stdClassList = (Vector<StudentClasses>) query.getResultList();
							
							entitymanager.getTransaction().commit();
							entitymanager.close();
							emfactory.close();
							
						}
						catch(Exception e) {
							e.printStackTrace();
						}
						
						for(StudentClasses stdClass : stdClassList) {
							if(stdClass.getClassNo().equalsIgnoreCase("ADMISSION") && 
									stdClass.getClassLetter().equalsIgnoreCase("-CHARGES")) {
								classNo = stdClass.getClassNo();
								classLetter = stdClass.getClassLetter();
								year = stdClass.getYear();
								term = stdClass.getTerm();
								cid = classNo+classLetter+year+term;
								//date = stdClass.getEntryDate();
								studClass = classNo + classLetter;
							}
						}
						LinkedHashSet<String> itemIdList = new LinkedHashSet<>();
						try {
							EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
							EntityManager entitymanager = emfactory.createEntityManager();
							entitymanager.getTransaction().begin();
							
							StudentClasses item = entitymanager.find(StudentClasses.class, cid);
							
							itemIdList = item.getClassCostList();
							
							entitymanager.getTransaction().commit();
							entitymanager.close();
							emfactory.close();
							
						}
						catch(Exception e) {
							e.printStackTrace();
						}
						
						String stdName = otherNames + " " + surName;
						
						if(itemIdList.size() > 0) {
							String itemId = "", itemName = "", category = "", invId = "", GLAcctNo = "", GLAcctName = "";
							double uPrice = 0, tPrice = 0;
							int qty = 0;
							
							for(String itemID : itemIdList) {
								
								EntityManagerFactory emfactory2 = Persistence.createEntityManagerFactory("SchoolMgtSystem");
								EntityManager entitymanager2 = emfactory2.createEntityManager();
								entitymanager2.getTransaction().begin();
								
								DrugInformation item = entitymanager2.find(DrugInformation.class, itemID);
								
								try {
									itemId = itemID; //item.getItemIdNo();
									itemName = item.getNameDesc();
									category = item.getCategory();
									invId = stdNo + itemId; //+ year + term;	//stdNo + dateTime +  j;  stdNo + itemId + year + term;
									GLAcctNo = item.getIncomeAcctNo();
									GLAcctName = item.getIncomeAcctName();
									uPrice = item.getUnitPrice();
									tPrice = item.getTotalPrice();
									qty = item.getQty();
								}
								catch(Exception q) {
									q.printStackTrace();
								}
								
								entitymanager2.getTransaction().commit();
								entitymanager2.close();
								emfactory2.close();
								
								//the real deal
//								System.out.println("XZXZ: "+stdNo+stdName+ itemId+ uPrice+ qty+tPrice+ itemName+category+ 
//											invId+ GLAcctNo+GLAcctName+ dateTime);
								LocalDateTime dateTime = LocalDateTime.now();
								
								try {
									
									postBills2(stdNo, stdName, itemId, uPrice, qty, tPrice, itemName, category, 
											invId, GLAcctNo, GLAcctName, dateTime, date, invId);
									
									CreateInvoicing invoice = new CreateInvoicing();
									try {
										invoice.createInvoicing(invId, itemId, stdNo, stdName, itemName, 
												date, uPrice, tPrice, qty, dispName, category, year, term, studClass);
										
									}
									catch(Exception e) {
										//idTF.setText("save invoicing error: "+ e.getMessage());
										e.printStackTrace();
									}
									
									try {
										
										invoice.createBillingsInformation(invId, itemId, GLAcctNo, GLAcctName, itemName, date, 
												uPrice, tPrice, qty, dispName, category, year, term, studClass, stdNo);
										
										//idTF.setText(stdClass+" sucessfully billed...");
										
									}
									catch(Exception exx) {
										//idTF.setText("save billings error: "+ exx.getMessage());
										exx.printStackTrace();
										Alert alert = new Alert(Alert.AlertType.ERROR);
										alert.setContentText("Error: "+ exx.getMessage());
										Optional<ButtonType> result = alert.showAndWait();
										if(result.get() == ButtonType.OK) {
											alert.close();
										}
										else {
											alert.close();
										}
									}
									
								}
								catch(Exception ex) {
									//idTF.setText("post txn error: "+ ex.getMessage());
									//ex.printStackTrace();
									String str = ex.getMessage();
									//idTF.setText("Error: "+ str);
									Alert alert = new Alert(Alert.AlertType.ERROR);
									alert.setContentText("Error: "+ str);
									Optional<ButtonType> result = alert.showAndWait();
									if(result.get() == ButtonType.OK) {
										alert.close();
									}
									else {
										alert.close();
									}
								}
							}
						}
						else {
							//idTF.setText("item list empty...");
						
							Alert alert = new Alert(Alert.AlertType.INFORMATION);
							alert.setContentText("Item list empty... ");
							Optional<ButtonType> result = alert.showAndWait();
							if(result.get() == ButtonType.OK) {
								alert.close();
							}
							else {
								alert.close();
							}
						}
					}
					catch(Exception eError) {
						//idTF.setText("Error: "+ eError.getMessage());
						eError.printStackTrace();
						Alert alert = new Alert(Alert.AlertType.ERROR);
						alert.setContentText("Error: "+ eError.getMessage());
						Optional<ButtonType> result = alert.showAndWait();
						if(result.get() == ButtonType.OK) {
							alert.close();
						}
						else {
							alert.close();
						}
					}
					finally {
						disabilityTF.setValue("None"); 
						surNameTF.clear();
						otherNamesTF.clear();
						dateOfBirthTF.setValue(LocalDate.now());
						placeOfBirthTF.clear();
						sexTF.setValue("select");
						nationalityTF.setValue("NGN");
						stateTF.setValue("select");
						lgaTF.setValue("select");
						villageTF.clear(); 
						addressTF.clear();
						fatherNameTF.clear(); 
						fatherPhoneTF.clear(); 
						fatherOccupationTF.clear(); 
						fatherReligionTF.clear();
						motherNameTF.clear(); 
						motherPhoneTF.clear();
						motherOccupationTF.clear();
						motherReligionTF.clear();
						guardianNameTF.clear();
						guardianPhoneTF.clear();
						guardianOccupationTF.clear(); 
						guardianReligionTF.clear();
						previousSchoolTF.clear(); 
						lastClassTF.setValue("select");
						classSeekingTF.setValue("select");
						classOfferedTF.setValue("select"); 
						ifDisabledTF.clear();
						ICETF.clear();
						dateOfRegTF.setValue(LocalDate.now());
						stdEmailTF.clear();
						entryClassAssigned.setValue("select class"); 
						entryBorderStatus.setValue("select border or day");
						stdStatusCombo.setValue("select status");
					}
					
				}
				else {
					throw new Exception("These fields must not be null or have incorrect entries... StdNo, Surname, Othernames, BorderStatus,"
							+ "EntryClass, Status");
				}
				
			}
			catch(Exception e) {
				e.printStackTrace();
				String str = e.getMessage();
				//idTF.setText("Error: "+ str);
				Alert alert = new Alert(Alert.AlertType.ERROR);
				alert.setContentText("Error: "+ str);
				Optional<ButtonType> result = alert.showAndWait();
				if(result.get() == ButtonType.OK) {
					alert.close();
				}
				else {
					alert.close();
				}
			}
		}
		catch(Exception saveE) {
			saveE.printStackTrace();
			Alert alert = new Alert(Alert.AlertType.ERROR);
			alert.setContentText("Initialization Errors: "+ saveE.getMessage());
			Optional<ButtonType> result = alert.showAndWait();
			if(result.get() == ButtonType.OK) {
				alert.close();
			}
			else {
				alert.close();
			}
		}
	}
	

	//UpdateStudentController 
	@FXML
	public void updateStdButton(ActionEvent event) {
		String stdNo = idTF2.getText().toUpperCase();
		String surName = surNameTF2.getText().trim().toUpperCase();
		String otherNames = otherNamesTF2.getText().toUpperCase();
		String entryClass = entryClassAssigned2.getValue();
		String borderStatus = entryBorderStatus2.getValue();
		String status = stdStatusCombo2.getValue();
		
		try {
			if(stdNo.trim().length() != 0 && surName.trim().length() != 0 && otherNames.trim().length() != 0 && 
					entryClass.trim().length() != 0 && borderStatus.trim().length() != 0 && status.trim().length() != 0 && 
					dateOfBirthTF2.getValue().toString().trim().length() != 0 && 
					dateOfRegTF2.getValue().toString().trim().length() != 0 && 
					(status.trim().equals("Regular") || status.trim().equals("Deferred"))) {
				
				//Remove from old class
				String oldClassId;
				EntityManagerFactory emfactory1 = Persistence.createEntityManagerFactory("SchoolMgtSystem");
				EntityManager entitymanager1 = emfactory1.createEntityManager();
				entitymanager1.getTransaction().begin();
				
				Students stdOld = entitymanager1.find(Students.class, stdNo);
				
				oldClassId = stdOld.getEntryClassAssigned();
				
				entitymanager1.getTransaction().commit();
				
				entitymanager1.close();
				emfactory1.close();
				
				//remove
				EntityManagerFactory emfactory2 = Persistence.createEntityManagerFactory("SchoolMgtSystem");
				EntityManager entitymanager2 = emfactory2.createEntityManager();
				entitymanager2.getTransaction().begin();
				
				StudentClasses oldC = entitymanager2.find(StudentClasses.class, oldClassId);
				
				oldC.getStdList().remove(stdNo);
				
				entitymanager2.getTransaction().commit();
				
				entitymanager2.close();
				emfactory2.close();
				
				UpdateStudent student = new UpdateStudent();
				try {
					student.updateStudent(idTF2, disabilityTF2, surNameTF2, otherNamesTF2, dateOfBirthTF2.getValue(), 
							placeOfBirthTF2, sexTF2,nationalityTF2, stateTF2, lgaTF2, villageTF2, addressTF2, fatherNameTF2, 
							fatherPhoneTF2, fatherOccupationTF2, fatherReligionTF2, motherNameTF2, motherPhoneTF2, 
							motherOccupationTF2, motherReligionTF2, guardianNameTF2, guardianPhoneTF2, 
							guardianOccupationTF2, guardianReligionTF2, previousSchoolTF2, lastClassTF2,  
							classSeekingTF2, classOfferedTF2, ifDisabledTF2, ICETF2, LocalDate.now(), stdEmailTF2, dispName,
							entryClass, borderStatus, status);
					try {
						UpdateTransactions transaction = new UpdateTransactions();
						String name = otherNames +" "+ surName;
						String TID = stdNo + "1000";
						transaction.updateTransactions(TID, name, dateOfRegTF2.getValue(), dispName);
					}
					catch(Exception ex) {
						idTF2.setText("Transaction update Error: " + ex.getMessage());
					}
					
					try {
						UpdateAccountBalance bal = new UpdateAccountBalance();
						bal.updateAccountBalancePatient(stdNo, surName, otherNames, 0.0, dispName);
					}
					catch(Exception ex) {
						idTF2.setText("Account Balance Error: " + ex.getMessage());
					}
					
					//disc
					try {
						CreateDisciplinaryEntry disc = new CreateDisciplinaryEntry();
						disc.updateDisciplinaryEntryStudent(stdNo, surName, otherNames, dispName);
					}
					catch(Exception ex) {
						idTF2.setText("disc update Error: " + ex.getMessage());
					}
					
					//commendation
					try {
						CreateCommendationEntry commend = new CreateCommendationEntry();
						commend.updateCommendationEntryStudent(stdNo, surName, otherNames, dispName);
					}
					catch(Exception ex) {
						idTF2.setText("commend entry Error: " + ex.getMessage());
					}
					
					//Suspension
					try {
						CreateSuspensionEntry suspend = new CreateSuspensionEntry();
						suspend.updateSuspensionEntryStudent(stdNo, surName, otherNames, dispName);
					}
					catch(Exception ex) {
						idTF2.setText("suspend entry Error: " + ex.getMessage());
					}
					
					//Rusticate
					try {
						CreateRusticateEntry rusticate = new CreateRusticateEntry();
						rusticate.updateRusticateEntryStudent(stdNo, surName, otherNames, dispName);
					}
					catch(Exception ex) {
						idTF2.setText("rusticate entry Error: " + ex.getMessage());
					}
					
					try {
						EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
						EntityManager entitymanager = emfactory.createEntityManager();
						entitymanager.getTransaction().begin();
						
						StudentClasses classes = entitymanager.find(StudentClasses.class, entryClass);
						
						classes.setStdList(stdNo);
						
						//classes.setTerm(term);
						
						entitymanager.getTransaction().commit();
						entitymanager.close();
						emfactory.close();
					}
					catch(Exception ex2) {
						ex2.printStackTrace();
					}
					
//					//Debit std for ADMISSION-CHARGES-ONE-OFF billables...
//					String classNo = "";
//					String classLetter = "";
//					String year = "";
//					String term = "";
//					String cid = "";
//					LocalDate date = LocalDate.now();
//					String studClass = "";
//					Vector<StudentClasses> stdClassList = new Vector<>();
//					try {
//						EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
//						EntityManager entitymanager = emfactory.createEntityManager();
//						entitymanager.getTransaction().begin();
//						
//						Query query =
//								entitymanager.createQuery("select e from StudentClasses e ");
//						stdClassList = (Vector<StudentClasses>) query.getResultList();
//						
//						entitymanager.getTransaction().commit();
//						entitymanager.close();
//						emfactory.close();
//						
//					}
//					catch(Exception e) {
//						e.printStackTrace();
//					}
//					
//					for(StudentClasses stdClass : stdClassList) {
//						if(stdClass.getClassNo().equalsIgnoreCase("ADMISSION") && 
//								stdClass.getClassLetter().equalsIgnoreCase("-CHARGES")) {
//							classNo = stdClass.getClassNo();
//							classLetter = stdClass.getClassLetter();
//							year = stdClass.getYear();
//							term = stdClass.getTerm();
//							cid = classNo+classLetter+year+term;
//							date = stdClass.getEntryDate();
//							studClass = classNo + classLetter;
//						}
//					}
//					LinkedHashSet<String> itemIdList = new LinkedHashSet<>();
//					try {
//						EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
//						EntityManager entitymanager = emfactory.createEntityManager();
//						entitymanager.getTransaction().begin();
//						
//						StudentClasses item = entitymanager.find(StudentClasses.class, cid);
//						
//						itemIdList = item.getClassCostList();
//						
//						entitymanager.getTransaction().commit();
//						entitymanager.close();
//						emfactory.close();
//						
//					}
//					catch(Exception e) {
//						e.printStackTrace();
//					}
//					
//					String stdName = otherNames + " " + surName;
//					
//					if(itemIdList.size() > 0) {
//						String itemId = "", itemName = "", category = "", invId = "", GLAcctNo = "", GLAcctName = "";
//						double uPrice = 0, tPrice = 0;
//						int qty = 0;
//						
//						for(String itemID : itemIdList) {
//							
//							EntityManagerFactory emfactory2 = Persistence.createEntityManagerFactory("SchoolMgtSystem");
//							EntityManager entitymanager2 = emfactory2.createEntityManager();
//							entitymanager2.getTransaction().begin();
//							
//							DrugInformation item = entitymanager2.find(DrugInformation.class, itemID);
//							
//							try {
//								itemId = itemID; //item.getItemIdNo();
//								itemName = item.getNameDesc();
//								category = item.getCategory();
//								invId = stdNo + itemId; //+ year + term;	//stdNo + dateTime +  j;  stdNo + itemId + year + term;
//								GLAcctNo = item.getIncomeAcctNo();
//								GLAcctName = item.getIncomeAcctName();
//								uPrice = item.getUnitPrice();
//								tPrice = item.getTotalPrice();
//								qty = item.getQty();
//							}
//							catch(Exception q) {
//								q.printStackTrace();
//							}
//							
//							entitymanager2.getTransaction().commit();
//							entitymanager2.close();
//							emfactory2.close();
//							
//							//the real deal
////							System.out.println("XZXZ: "+stdNo+stdName+ itemId+ uPrice+ qty+tPrice+ itemName+category+ 
////										invId+ GLAcctNo+GLAcctName+ dateTime);
//							LocalDateTime dateTime = LocalDateTime.now();
//							
//							try {
//								
//								postBills2(stdNo, stdName, itemId, uPrice, qty, tPrice, itemName, category, 
//										invId, GLAcctNo, GLAcctName, dateTime, date, invId);
//								
//								CreateInvoicing invoice = new CreateInvoicing();
//								try {
//									invoice.createInvoicing(invId, itemId, stdNo, stdName, itemName, 
//											date, uPrice, tPrice, qty, dispName, category, year, term, studClass);
//									
//								}
//								catch(Exception e) {
//									//idTF.setText("save invoicing error: "+ e.getMessage());
//									e.printStackTrace();
//								}
//								
//								try {
//									
//									invoice.createBillingsInformation(invId, itemId, GLAcctNo, GLAcctName, itemName, date, 
//											uPrice, tPrice, qty, dispName, category, year, term, studClass, stdNo);
//									
//									//idTF.setText(stdClass+" sucessfully billed...");
//									
//								}
//								catch(Exception exx) {
//									idTF2.setText("save billings error: "+ exx.getMessage());
//								}
//								
//							}
//							catch(Exception ex) {
//								idTF2.setText("post txn error: "+ ex.getMessage());
//								//ex.printStackTrace();
//							}
//						}
//					}
//					else {
//						idTF2.setText("item list empty...");
//					}
					
					//update image table if exist
					DateTimeFormatter formatter = DateTimeFormatter.ofLocalizedDate(FormatStyle.MEDIUM);
					
					String name = surName+ ", "+otherNames;
					String dateImg = formatter.format(LocalDate.now());
					
					String jdbcUrl = dbURL;
					String username = dbUSR;
					String password = dbPWD;
					
					String sql = "UPDATE stdImages SET name = ?, date = ?, user = ? WHERE stdid = ?";
					
					try(Connection conn = DriverManager.getConnection(jdbcUrl, username, password);
							){						
						try(PreparedStatement stmt = conn.prepareStatement(sql);
								){
							stmt.setString(1, name);
							stmt.setString(2, dateImg);
							stmt.setString(3, dispName);
							stmt.setString(4, stdNo);
							
							stmt.executeUpdate();
							
						}
						catch(Exception io) {
							io.printStackTrace();
						}
					}
					catch(SQLException eq) {
						eq.printStackTrace();
					}
				}
				catch(Exception e) {
					e.printStackTrace();
				}
				//clear form
				disabilityTF2.setValue("None"); 
				surNameTF2.clear();
				otherNamesTF2.clear();
				dateOfBirthTF2.setValue(LocalDate.now());
				placeOfBirthTF2.clear();
				sexTF2.setValue("select");
				nationalityTF2.setValue("NGN");
				stateTF2.setValue("select");
				lgaTF2.setValue("select");
				villageTF2.clear(); 
				addressTF2.clear();
				fatherNameTF2.clear(); 
				fatherPhoneTF2.clear(); 
				fatherOccupationTF2.clear(); 
				fatherReligionTF2.clear();
				motherNameTF2.clear(); 
				motherPhoneTF2.clear();
				motherOccupationTF2.clear();
				motherReligionTF2.clear();
				guardianNameTF2.clear();
				guardianPhoneTF2.clear();
				guardianOccupationTF2.clear(); 
				guardianReligionTF2.clear();
				previousSchoolTF2.clear(); 
				lastClassTF2.setValue("select");
				classSeekingTF2.setValue("select");
				classOfferedTF2.setValue("select"); 
				ifDisabledTF2.clear();
				ICETF2.clear();
				dateOfRegTF2.setValue(LocalDate.now());
				stdEmailTF2.clear();
				entryClassAssigned2.setValue("select class"); 
				entryBorderStatus2.setValue("select border or day");
				stdStatusCombo2.setValue("select status");
			}
			else {
				Alert alert = new Alert(Alert.AlertType.ERROR);
				alert.setContentText("Error: Invalid entries or selections...");
				Optional<ButtonType> result = alert.showAndWait();
				if(result.get() == ButtonType.OK) {
					alert.close();
				}
				else {
					alert.close();
				}
			}
		}
		catch(Exception nullableE) {
			Alert alert = new Alert(Alert.AlertType.ERROR);
			alert.setContentText("Error: Invalid entries or selections... " + nullableE.getMessage());
			Optional<ButtonType> result = alert.showAndWait();
			if(result.get() == ButtonType.OK) {
				alert.close();
			}
			else {
				alert.close();
			}
		}
	}
	
	//populate createStudent from reg form
	@FXML private TextField retrieveFormNo;
	
	@FXML public void retrieveFormInfoButton(ActionEvent event) {
		
		try {
			int regFormNo = Integer.parseInt(retrieveFormNo.getText());
			
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			ProspectiveStudent std = entitymanager.find(ProspectiveStudent.class, regFormNo);
						
			if(std.getAdmissionStatus().equalsIgnoreCase("Admitted") && 
					(std.getClassOffered().length() == 10 || 
					std.getClassOffered().length() == 11)) {
				
				LocalDate localDate = std.getDateOfBirth();
				
				surNameTF.setText(std.getSurName());
				otherNamesTF.setText(std.getOtherNames());
				dateOfBirthTF.setValue(localDate); 
				placeOfBirthTF.setText(std.getPlaceOfBirth());
				sexTF.setValue(std.getSex());
				nationalityTF.setValue(std.getNationality()); 
				stateTF.setValue(std.getState());
				lgaTF.setValue(std.getLGA()); 
				villageTF.setText(std.getVillage());
				addressTF.setText(std.getAddress());
				fatherNameTF.setText(std.getFatherName()); 
				fatherPhoneTF.setText(std.getFatherPhone());
				fatherOccupationTF.setText(std.getFatherOccupation());
				fatherReligionTF.setText(std.getFatherReligion());
				motherNameTF.setText(std.getMotherName());
				motherPhoneTF.setText(std.getMotherPhone());
				motherOccupationTF.setText(std.getMotherOccupation()); 
				motherReligionTF.setText(std.getMotherReligion()); 
				guardianNameTF.setText(std.getGuardianName()); 
				guardianPhoneTF.setText(std.getGuardianPhone()); 
				guardianOccupationTF.setText(std.getGuardianOccupation());
				guardianReligionTF.setText(std.getGuardianReligion());
				previousSchoolTF.setText(std.getPrevSchool());
				lastClassTF.setValue(std.getLastClass());
				classSeekingTF.setValue(std.getClassSeeking());
				classOfferedTF.setValue(std.getClassOffered());
				//ifDisabledTF2.setText(std.getIfDisabled());
				//ICETF2.setText(std.getICE());
				dateOfRegTF.setValue(LocalDate.now());
				//disabilityTF2.setValue(std.getDisability());
				stdEmailTF.setText(std.getEmail());
				entryClassAssigned.setValue(std.getClassOffered()); 
				entryBorderStatus.setValue(std.getOnOffCampus());
				stdStatusCombo.setValue("Regular");
				
			}
			else {
				Alert alert = new Alert(Alert.AlertType.INFORMATION);
				alert.setContentText("This candidate has not yet been offered admission "
						+ "and/or assigned to a class!");
				Optional<ButtonType> result = alert.showAndWait();
				if(result.get() == ButtonType.OK) {
					alert.close();
				}
				else {
					alert.close();
				}
			}
			
			entitymanager.getTransaction().commit();
			
			entitymanager.close();
			emfactory.close();
		}
		catch(Exception e) {
			e.printStackTrace();
			Alert alert = new Alert(Alert.AlertType.ERROR);
			alert.setContentText("Error: " + e.getMessage() + "\n"
					+ "OR \n"
					+ "This candidate has not yet been offered admission " 
					+ "and/or assigned to a class!");
			Optional<ButtonType> result = alert.showAndWait();
			if(result.get() == ButtonType.OK) {
				alert.close();
			}
			else {
				alert.close();
			}
		}
	}
	
	DateTimeFormatter formatter = DateTimeFormatter.ofPattern("d-MMM-yyyy");
	@FXML
	public void searchStudent(ActionEvent even) {
		String id = idTF2.getText().toUpperCase();
		try {
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			Students std = entitymanager.find(Students.class, id);
			
			LocalDate localDate = std.getDateOfBirth();
			LocalDate localDate2 = std.getDateOfReg();
			
			surNameTF2.setText(std.getSurName());
			otherNamesTF2.setText(std.getOtherNames());
			dateOfBirthTF2.setValue(localDate); 
			placeOfBirthTF2.setText(std.getPlaceOfBirth());
			sexTF2.setValue(std.getSex());
			nationalityTF2.setValue(std.getNationality()); 
			stateTF2.setValue(std.getState());
			lgaTF2.setValue(std.getLga()); 
			villageTF2.setText(std.getVillage());
			addressTF2.setText(std.getAddress());
			fatherNameTF2.setText(std.getFatherName()); 
			fatherPhoneTF2.setText(std.getFatherPhone());
			fatherOccupationTF2.setText(std.getFatherOccupation());
			fatherReligionTF2.setText(std.getFatherReligion());
			motherNameTF2.setText(std.getMotherName());
			motherPhoneTF2.setText(std.getMotherPhone());
			motherOccupationTF2.setText(std.getMotherOccupation()); 
			motherReligionTF2.setText(std.getMotherReligion()); 
			guardianNameTF2.setText(std.getGuardianName()); 
			guardianPhoneTF2.setText(std.getGuardianPhone()); 
			guardianOccupationTF2.setText(std.getGuardianOccupation());
			guardianReligionTF2.setText(std.getGuardianReligion());
			previousSchoolTF2.setText(std.getPreviousSchool());
			lastClassTF2.setValue(std.getLastClass());
			classSeekingTF2.setValue(std.getClassSeeking());
			classOfferedTF2.setValue(std.getClassOffered());
			ifDisabledTF2.setText(std.getIfDisabled());
			ICETF2.setText(std.getICE());
			dateOfRegTF2.setValue(localDate2);
			disabilityTF2.setValue(std.getDisability());
			stdEmailTF2.setText(std.getEmail());
			entryClassAssigned2.setValue(std.getEntryClassAssigned()); 
			entryBorderStatus2.setValue(std.getEntryBorderStatus());
			stdStatusCombo2.setValue(std.getStatus());
			
			entitymanager.getTransaction().commit();
			
			entitymanager.close();
			emfactory.close();
		}
		catch(Exception e) {
			String str = e.getMessage();
			idTF2.setText("Error: "+ str);
		}
	}


	//DeleteStudentController 
	@FXML private TextField studentId;
	@FXML private TextField studentSurNameTF, studentOtherNamesTF;	
	
	@FXML public void DeleteButton(ActionEvent event) {
		
		//new Delete
		String stdNo = studentId.getText().trim().toUpperCase();
		double stdBal;
		String stdClassId;
		
		EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
		EntityManager entitymanager = emfactory.createEntityManager();
		entitymanager.getTransaction().begin();
		
		Students std = entitymanager.find(Students.class, stdNo);
		stdClassId = std.getEntryClassAssigned();
		
		AccountBalance bal = entitymanager.find(AccountBalance.class, stdNo);
		stdBal = bal.getBalance();
		
		entitymanager.getTransaction().commit();
		
		entitymanager.close();
		emfactory.close();	
		
		try {
			if(stdBal == 0) {
			
			Alert alert = new Alert(Alert.AlertType.CONFIRMATION);
			alert.setContentText("You are about to delete this student... "
					+ "Note that this action will delete the respective student's "
					+ "scoresheets and financial records and this process is irreversible..! "
					+ "Please take a backup of your database before proceeding.");
				Optional<ButtonType> result = alert.showAndWait();
				if(result.get() == ButtonType.OK) {
					
					//Delete std records
					//First Remove him from std class
					try {
						LinkedHashSet<String> logList = new LinkedHashSet<>();
						
						EntityManagerFactory emfactory2 = Persistence.createEntityManagerFactory("SchoolMgtSystem");
						EntityManager entitymanager2 = emfactory2.createEntityManager();
						entitymanager2.getTransaction().begin();
						
						StudentClasses stdClas = entitymanager2.find(StudentClasses.class, stdClassId);
						
						//Clear academic records if any
						if(stdClassId.contains("JSS")) {
							Vector<AnnualScoresTotal> annualScores = new Vector<>();
							Vector<AnnualScoreSheetsSummary> annualScoresSummary = new Vector<>();
							Vector<ScoreSheetsSummary> scoresSummary = new Vector<>();
							Vector<JssScoreSheets> scores = new Vector<>();
							
							annualScores = getAnnualScoresTotalByStdNo(entitymanager2, stdNo);
							annualScoresSummary = getAnnualScoreSheetsSummaryByStdNo(entitymanager2, stdNo);
							scoresSummary = getScoreSheetsSummaryByStdNo(entitymanager2, stdNo);
							scores = getJssScoreSheetsByStdNo(entitymanager2, stdNo);
									
							//AnnualScoresTotal
							for(AnnualScoresTotal ast : annualScores) {
								try {
									EntityManagerFactory emfactory3 = Persistence.createEntityManagerFactory("SchoolMgtSystem");
									EntityManager entitymanager3 = emfactory3.createEntityManager();
									entitymanager3.getTransaction().begin();
									
									AnnualScoresTotal stdAST = entitymanager3.find(AnnualScoresTotal.class, ast.getSumId());
									entitymanager3.remove(stdAST);
									
									entitymanager3.getTransaction().commit();
									
									entitymanager3.close();
									emfactory3.close();
									//log
									logList.add(stdNo+"'s AnnualScoresTotal scores entries cleared - SUCCESS!");
								}
								catch(Exception astExcept) {
									astExcept.printStackTrace();
									//log
									logList.add(stdNo+"'s AnnualScoresTotal scores entries cleared - FAILURE!");
								}
							}
							
							//AnnualScoreSheetsSummary
							for(AnnualScoreSheetsSummary ass : annualScoresSummary) {
								try {
									EntityManagerFactory emfactory3 = Persistence.createEntityManagerFactory("SchoolMgtSystem");
									EntityManager entitymanager3 = emfactory3.createEntityManager();
									entitymanager3.getTransaction().begin();
									
									AnnualScoreSheetsSummary stdASS = entitymanager3.find(AnnualScoreSheetsSummary.class, ass.getSumId());
									entitymanager3.remove(stdASS);
									
									entitymanager3.getTransaction().commit();
									
									entitymanager3.close();
									emfactory3.close();
									//log
									logList.add(stdNo+"'s AnnualScoreSheetSummary scores entries cleared - SUCCESS!");
								}
								catch(Exception assExcept) {
									assExcept.printStackTrace();
									//log
									logList.add(stdNo+"'s AnnualScoreSheetSummary scores entries cleared - FAILURE!");
								}
							}
							
							//ScoreSheetsSummary
							for(ScoreSheetsSummary sss : scoresSummary) {
								try {
									EntityManagerFactory emfactory3 = Persistence.createEntityManagerFactory("SchoolMgtSystem");
									EntityManager entitymanager3 = emfactory3.createEntityManager();
									entitymanager3.getTransaction().begin();
									
									ScoreSheetsSummary stdSS = entitymanager3.find(ScoreSheetsSummary.class, sss.getSumId());
									entitymanager3.remove(stdSS);
									
									entitymanager3.getTransaction().commit();
									
									entitymanager3.close();
									emfactory3.close();
									//log
									logList.add(stdNo+"'s ScoreSheetSummary scores entries cleared - SUCCESS!");
								}
								catch(Exception ssExcept) {
									ssExcept.printStackTrace();
									//log
									logList.add(stdNo+"'s ScoreSheetSummary scores entries cleared - FAILURE!");
								}
							}
							
							//JssScoreSheets
							for(JssScoreSheets sc : scores) {
								try {
									EntityManagerFactory emfactory3 = Persistence.createEntityManagerFactory("SchoolMgtSystem");
									EntityManager entitymanager3 = emfactory3.createEntityManager();
									entitymanager3.getTransaction().begin();
									
									JssScoreSheets stdScore = entitymanager3.find(JssScoreSheets.class, sc.getSId());
									entitymanager3.remove(stdScore);
									
									entitymanager3.getTransaction().commit();
									
									entitymanager3.close();
									emfactory3.close();
									//log
									logList.add(stdNo+"'s Jss scores entries cleared - SUCCESS!");
								}
								catch(Exception scExcept) {
									scExcept.printStackTrace();
									//log
									logList.add(stdNo+"'s Jss scores entries cleared - FAILURE!");
								}
							}
							
						}
						else if(stdClassId.contains("SSS")) {
							Vector<AnnualScoresTotal> annualScores = new Vector<>();
							Vector<AnnualScoreSheetsSummary> annualScoresSummary = new Vector<>();
							Vector<ScoreSheetsSummary> scoresSummary = new Vector<>();
							Vector<ScoreSheets> scores = new Vector<>();
							
							annualScores = getAnnualScoresTotalByStdNo(entitymanager2, stdNo);
							annualScoresSummary = getAnnualScoreSheetsSummaryByStdNo(entitymanager2, stdNo);
							scoresSummary = getScoreSheetsSummaryByStdNo(entitymanager2, stdNo);
							scores = getScoreSheetsByStdNo(entitymanager2, stdNo);
									
							//AnnualScoresTotal
							for(AnnualScoresTotal ast : annualScores) {
								try {
									EntityManagerFactory emfactory3 = Persistence.createEntityManagerFactory("SchoolMgtSystem");
									EntityManager entitymanager3 = emfactory3.createEntityManager();
									entitymanager3.getTransaction().begin();
									
									AnnualScoresTotal stdAST = entitymanager3.find(AnnualScoresTotal.class, ast.getSumId());
									entitymanager3.remove(stdAST);
									
									entitymanager3.getTransaction().commit();
									
									entitymanager3.close();
									emfactory3.close();
									//log
									logList.add(stdNo+"'s AnnualScoresTotal scores entries cleared - SUCCESS!");
								}
								catch(Exception astExcept) {
									astExcept.printStackTrace();
									//log
									logList.add(stdNo+"'s AnnualScoresTotal scores entries cleared - FAILURE!");
								}
							}
							
							//AnnualScoreSheetsSummary
							for(AnnualScoreSheetsSummary ass : annualScoresSummary) {
								try {
									EntityManagerFactory emfactory3 = Persistence.createEntityManagerFactory("SchoolMgtSystem");
									EntityManager entitymanager3 = emfactory3.createEntityManager();
									entitymanager3.getTransaction().begin();
									
									AnnualScoreSheetsSummary stdASS = entitymanager3.find(AnnualScoreSheetsSummary.class, ass.getSumId());
									entitymanager3.remove(stdASS);
									
									entitymanager3.getTransaction().commit();
									
									entitymanager3.close();
									emfactory3.close();
									//log
									logList.add(stdNo+"'s AnnualScoreSheetSummary scores entries cleared - SUCCESS!");
								}
								catch(Exception assExcept) {
									assExcept.printStackTrace();
									//log
									logList.add(stdNo+"'s AnnualScoreSheetSummary scores entries cleared - FAILURE!");
								}
							}
							
							//ScoreSheetsSummary
							for(ScoreSheetsSummary sss : scoresSummary) {
								try {
									EntityManagerFactory emfactory3 = Persistence.createEntityManagerFactory("SchoolMgtSystem");
									EntityManager entitymanager3 = emfactory3.createEntityManager();
									entitymanager3.getTransaction().begin();
									
									ScoreSheetsSummary stdSS = entitymanager3.find(ScoreSheetsSummary.class, sss.getSumId());
									entitymanager3.remove(stdSS);
									
									entitymanager3.getTransaction().commit();
									
									entitymanager3.close();
									emfactory3.close();
									//log
									logList.add(stdNo+"'s ScoreSheetSummary scores entries cleared - SUCCESS!");
								}
								catch(Exception ssExcept) {
									ssExcept.printStackTrace();
									//log
									logList.add(stdNo+"'s ScoreSheetSummary scores entries cleared - FAILURE!");
								}
							}
							
							//ScoreSheets
							for(ScoreSheets sc : scores) {
								try {
									EntityManagerFactory emfactory3 = Persistence.createEntityManagerFactory("SchoolMgtSystem");
									EntityManager entitymanager3 = emfactory3.createEntityManager();
									entitymanager3.getTransaction().begin();
									
									ScoreSheets stdScore = entitymanager3.find(ScoreSheets.class, sc.getSId());
									entitymanager3.remove(stdScore);
									
									entitymanager3.getTransaction().commit();
									
									entitymanager3.close();
									emfactory3.close();
									//log
									logList.add(stdNo+"'s SSS scores entries cleared - SUCCESS!");
								}
								catch(Exception scExcept) {
									scExcept.printStackTrace();
									//log
									logList.add(stdNo+"'s SSS scores entries cleared - FAILURE!");
								}
							}
							
						}
						else {
							Alert alert3 = new Alert(Alert.AlertType.INFORMATION);
							alert3.setContentText(stdNo +" is obviously in error class and thus has no academic"
									+ " records. StdClassId: "+stdClassId + ". Click OK to continue...");
							Optional<ButtonType> result3 = alert3.showAndWait();
							if(result3.get() == ButtonType.OK) {
								alert3.close();
							}
							else {
								alert3.close();
							}
							
							//log
							logList.add(stdNo+" obviously in error class - FAILURE!");
						}
						
						//Remove Disciplinary, Suspension, etc Records - created at creation of std
						//Disciplinary Entry
						try {
							EntityManagerFactory emfactory3 = Persistence.createEntityManagerFactory("SchoolMgtSystem");
							EntityManager entitymanager3 = emfactory3.createEntityManager();
							entitymanager3.getTransaction().begin();
							
							DisciplinaryEntry entry = entitymanager3.find(DisciplinaryEntry.class, stdNo);
							entitymanager3.remove(entry);
							
							entitymanager3.getTransaction().commit();
							
							entitymanager3.close();
							emfactory3.close();
							
							//log
							logList.add(stdNo+"'s disciplinary entry removed - SUCCESS!");
						}
						catch(Exception deExcept) {
							deExcept.printStackTrace();
							//log
							logList.add(stdNo+"'s disciplinary entry removed - FAILURE!");
						}
						
						//Commendation Entry
						try {
							EntityManagerFactory emfactory3 = Persistence.createEntityManagerFactory("SchoolMgtSystem");
							EntityManager entitymanager3 = emfactory3.createEntityManager();
							entitymanager3.getTransaction().begin();
							
							CommendationEntry entry = entitymanager3.find(CommendationEntry.class, stdNo);
							entitymanager3.remove(entry);
							
							entitymanager3.getTransaction().commit();
							
							entitymanager3.close();
							emfactory3.close();
							
							//log
							logList.add(stdNo+"'s commendation entry removed - SUCCESS!");
						}
						catch(Exception deExcept) {
							deExcept.printStackTrace();
							//log
							logList.add(stdNo+"'s commendation entry removed - FAILURE!");
						}
						
						//Suspension Entry
						try {
							EntityManagerFactory emfactory3 = Persistence.createEntityManagerFactory("SchoolMgtSystem");
							EntityManager entitymanager3 = emfactory3.createEntityManager();
							entitymanager3.getTransaction().begin();
							
							SuspensionEntry entry = entitymanager3.find(SuspensionEntry.class, stdNo);
							entitymanager3.remove(entry);
							
							entitymanager3.getTransaction().commit();
							
							entitymanager3.close();
							emfactory3.close();
							
							//log
							logList.add(stdNo+"'s suspension entry removed - SUCCESS!");
						}
						catch(Exception deExcept) {
							deExcept.printStackTrace();
							//log
							logList.add(stdNo+"'s suspension entry removed - FAILURE!");
						}
						
						//Rusticate Entry
						try {
							EntityManagerFactory emfactory3 = Persistence.createEntityManagerFactory("SchoolMgtSystem");
							EntityManager entitymanager3 = emfactory3.createEntityManager();
							entitymanager3.getTransaction().begin();
							
							RusticateEntry entry = entitymanager3.find(RusticateEntry.class, stdNo);
							entitymanager3.remove(entry);
							
							entitymanager3.getTransaction().commit();
							
							entitymanager3.close();
							emfactory3.close();
							
							//log
							logList.add(stdNo+"'s rusticate entry removed - SUCCESS!");
						}
						catch(Exception deExcept) {
							deExcept.printStackTrace();
							//log
							logList.add(stdNo+"'s rusticate entry removed - FAILURE!");
						}
						
						//Clear Financial Records - Remove AccountBalance, Billings, Invoicing
						//Leave out Transactions, TillTransactions, Cash, POS and Teller Transactions
						Vector<Transactions> stdTransactions = new Vector<>();
						Vector<TillTransactions> stdTillTransactions = new Vector<>();
						Vector<Invoicing> stdInvoicing = new Vector<>();
						Vector<BillingsInformation> stdBillingsInfo = new Vector<>();
						Vector<CashTransactions> stdCashTransactions = new Vector<>();
						Vector<TellerTransactions> stdTellerTransactions = new Vector<>();
						Vector<POSTransactions> stdPOSTransactions = new Vector<>();
						Vector<Tills> tillSet = new Vector<>();
						
						stdTransactions = getTransactionsByStdNo(entitymanager2, stdNo);
						stdTillTransactions = getTillTransactionsByStdNo(entitymanager2, stdNo);
						stdInvoicing = getInvoicingByStdNo(entitymanager2, stdNo);
						stdBillingsInfo = getBillingsInformationByStdNo(entitymanager2, stdNo);
						stdCashTransactions = getCashTransactionsByStdNo(entitymanager2, stdNo);
						stdTellerTransactions = getTellerTransactionsByStdNo(entitymanager2, stdNo);
						stdPOSTransactions = getPOSTransactionsByStdNo(entitymanager2, stdNo);
						tillSet = getTills(entitymanager2);
						
						//Transactions
						for(Transactions txn : stdTransactions) {
							try {
								EntityManagerFactory emfactory3 = Persistence.createEntityManagerFactory("SchoolMgtSystem");
								EntityManager entitymanager3 = emfactory3.createEntityManager();
								entitymanager3.getTransaction().begin();
								
								Transactions stdTxn = entitymanager3.find(Transactions.class, txn.getTID());
								entitymanager3.remove(stdTxn);
								
								entitymanager3.getTransaction().commit();
								
								entitymanager3.close();
								emfactory3.close();
								//log
								logList.add(stdNo+"'s Transactions entries cleared - SUCCESS!");
							}
							catch(Exception scExcept) {
								scExcept.printStackTrace();
								//log
								logList.add(stdNo+"'s Transactions entries cleared - FAILURE!");
							}
							
							//clear TTIDSet
							for(Tills till : tillSet) {
								try {
									EntityManagerFactory emfactory3 = Persistence.createEntityManagerFactory("SchoolMgtSystem");
									EntityManager entitymanager3 = emfactory3.createEntityManager();
									entitymanager3.getTransaction().begin();
									
									Tills stdTxn = entitymanager3.find(Tills.class, till.getTillAcctNo());
									stdTxn.getTTIDSet().remove(txn.getTID());
									
									entitymanager3.getTransaction().commit();
									
									entitymanager3.close();
									emfactory3.close();
									
									logList.add(stdNo+"'s TIDSet entries cleared - SUCCESS!");
									
								}
								catch(Exception scExcept) {
									scExcept.printStackTrace();
									//log
									logList.add(stdNo+"'s TIDSet entries cleared - FAILURE!");
								}
							}
							
						}
						
						//Till Transactions
						for(TillTransactions txn : stdTillTransactions) {
							try {
								EntityManagerFactory emfactory3 = Persistence.createEntityManagerFactory("SchoolMgtSystem");
								EntityManager entitymanager3 = emfactory3.createEntityManager();
								entitymanager3.getTransaction().begin();
								
								TillTransactions stdTxn = entitymanager3.find(TillTransactions.class, txn.getTTID());
								entitymanager3.remove(stdTxn);
								
								entitymanager3.getTransaction().commit();
								
								entitymanager3.close();
								emfactory3.close();
								//log
								logList.add(stdNo+"'s TillTransactions entries cleared - SUCCESS!");
							}
							catch(Exception scExcept) {
								scExcept.printStackTrace();
								//log
								logList.add(stdNo+"'s TillTransactions entries cleared - FAILURE!");
							}
							
							//clear TTIDSet
							for(Tills till : tillSet) {
								try {
									EntityManagerFactory emfactory3 = Persistence.createEntityManagerFactory("SchoolMgtSystem");
									EntityManager entitymanager3 = emfactory3.createEntityManager();
									entitymanager3.getTransaction().begin();
									
									Tills stdTxn = entitymanager3.find(Tills.class, till.getTillAcctNo());
									stdTxn.getTTIDSet().remove(txn.getTTID());
									
									entitymanager3.getTransaction().commit();
									
									entitymanager3.close();
									emfactory3.close();
									//log
									logList.add(stdNo+"'s TTIDSet entries cleared - SUCCESS!");
									
								}
								catch(Exception scExcept) {
									scExcept.printStackTrace();
									//log
									logList.add(stdNo+"'s TTIDSet entries cleared - FAILURE!");
								}
							}
							
						}
						
						//Invoicing
						for(Invoicing txn : stdInvoicing) {
							try {
								EntityManagerFactory emfactory3 = Persistence.createEntityManagerFactory("SchoolMgtSystem");
								EntityManager entitymanager3 = emfactory3.createEntityManager();
								entitymanager3.getTransaction().begin();
								
								Invoicing stdTxn = entitymanager3.find(Invoicing.class, txn.getInvoiceId());
								entitymanager3.remove(stdTxn);
								
								entitymanager3.getTransaction().commit();
								
								entitymanager3.close();
								emfactory3.close();
								//log
								logList.add(stdNo+"'s Invoicing entries cleared - SUCCESS!");
							}
							catch(Exception scExcept) {
								scExcept.printStackTrace();
								//log
								logList.add(stdNo+"'s Invoicing entries cleared - FAILURE!");
							}
						}
						
						//BillingsInformation
						for(BillingsInformation txn : stdBillingsInfo) {
							try {
								EntityManagerFactory emfactory3 = Persistence.createEntityManagerFactory("SchoolMgtSystem");
								EntityManager entitymanager3 = emfactory3.createEntityManager();
								entitymanager3.getTransaction().begin();
								
								BillingsInformation stdTxn = entitymanager3.find(BillingsInformation.class, txn.getBillingId());
								entitymanager3.remove(stdTxn);
								
								entitymanager3.getTransaction().commit();
								
								entitymanager3.close();
								emfactory3.close();
								//log
								logList.add(stdNo+"'s BillingsInformation entries cleared - SUCCESS!");
							}
							catch(Exception scExcept) {
								scExcept.printStackTrace();
								//log
								logList.add(stdNo+"'s BillingsInformation entries cleared - FAILURE!");
							}
						}
						
						//CashTransactions
						for(CashTransactions txn : stdCashTransactions) {
							try {
								EntityManagerFactory emfactory3 = Persistence.createEntityManagerFactory("SchoolMgtSystem");
								EntityManager entitymanager3 = emfactory3.createEntityManager();
								entitymanager3.getTransaction().begin();
								
								CashTransactions stdTxn = entitymanager3.find(CashTransactions.class, txn.getTID());
								entitymanager3.remove(stdTxn);
								
								entitymanager3.getTransaction().commit();
								
								entitymanager3.close();
								emfactory3.close();
								//log
								logList.add(stdNo+"'s CashTransactions entries cleared - SUCCESS!");
							}
							catch(Exception scExcept) {
								scExcept.printStackTrace();
								//log
								logList.add(stdNo+"'s CashTransactions entries cleared - FAILURE!");
							}
						}
						
						//TellerTransactions
						for(TellerTransactions txn : stdTellerTransactions) {
							try {
								EntityManagerFactory emfactory3 = Persistence.createEntityManagerFactory("SchoolMgtSystem");
								EntityManager entitymanager3 = emfactory3.createEntityManager();
								entitymanager3.getTransaction().begin();
								
								TellerTransactions stdTxn = entitymanager3.find(TellerTransactions.class, txn.getTID());
								entitymanager3.remove(stdTxn);
								
								entitymanager3.getTransaction().commit();
								
								entitymanager3.close();
								emfactory3.close();
								//log
								logList.add(stdNo+"'s TellerTransactions entries cleared - SUCCESS!");
							}
							catch(Exception scExcept) {
								scExcept.printStackTrace();
								//log
								logList.add(stdNo+"'s TellerTransactions entries cleared - FAILURE!");
							}
						}
						
						//POSTransactions
						for(POSTransactions txn : stdPOSTransactions) {
							try {
								EntityManagerFactory emfactory3 = Persistence.createEntityManagerFactory("SchoolMgtSystem");
								EntityManager entitymanager3 = emfactory3.createEntityManager();
								entitymanager3.getTransaction().begin();
								
								POSTransactions stdTxn = entitymanager3.find(POSTransactions.class, txn.getTID());
								entitymanager3.remove(stdTxn);
								
								entitymanager3.getTransaction().commit();
								
								entitymanager3.close();
								emfactory3.close();
								//log
								logList.add(stdNo+"'s POSTransactions entries cleared - SUCCESS!");
							}
							catch(Exception scExcept) {
								scExcept.printStackTrace();
								//log
								logList.add(stdNo+"'s POSTransactions entries cleared - FAILURE!");
							}
						}
						
						
						//remove std from class list
						stdClas.getStdList().remove(stdNo);
						logList.add(stdNo+" was removed from "+stdClassId + " - SUCCESS!");						
						
						
						entitymanager2.getTransaction().commit();
						entitymanager2.close();
						emfactory2.close();
						
						Vector<SchoolAttendance> attendVals = new Vector<>();
						//Remove Account Balance
						try {
							EntityManagerFactory emfactory3 = Persistence.createEntityManagerFactory("SchoolMgtSystem");
							EntityManager entitymanager3 = emfactory3.createEntityManager();
							entitymanager3.getTransaction().begin();
							
							attendVals = getSchoolAttendanceByStdId(entitymanager3, stdNo);
							
							AccountBalance stdTxn = entitymanager3.find(AccountBalance.class, stdNo);
							entitymanager3.remove(stdTxn);
							
							entitymanager3.getTransaction().commit();
							
							entitymanager3.close();
							emfactory3.close();
							
							logList.add(stdNo+"'s AccountBalance removed - SUCCESS!");
						}
						catch(Exception scExcept) {
							scExcept.printStackTrace();
							//log
							logList.add(stdNo+"'s AccountBalance removed - FAILURE!");
						}
					
						//Remove Attendance Records
						DeleteSchoolAttendance attendx = new DeleteSchoolAttendance();
						try {
							
							for(SchoolAttendance attend : attendVals) {
								attendx.deleteSchoolAttendance(attend.getSaId());
							}
							
							logList.add(stdNo+"'s Attendance cleared - SUCCESS!");
						}
						catch(Exception eAtt) {
							eAtt.printStackTrace();
							//log
							logList.add(stdNo+"'s Attendance cleared - FAILURE!");
						}
						
						//Remove std image
						String stdId = stdNo;
						
						String jdbcUrl = dbURL;
						String username = dbUSR;
						String password = dbPWD;
						
						String sql = "DELETE FROM stdImages WHERE stdid = ?";
						
						try(Connection conn = DriverManager.getConnection(jdbcUrl, username, password);
								){
							
							try(PreparedStatement stmt = conn.prepareStatement(sql);
									){
								stmt.setString(1, stdId);		
								
								stmt.execute();
								
								logList.add(stdNo+"'s Image removed - SUCCESS!");
							
								stmt.close();
								conn.close();
							}
							catch(SQLException io) {
								io.printStackTrace();
								logList.add(stdNo+"'s Image removed - FAILURE!");
							}
						}
						catch(SQLException eq) {
							eq.printStackTrace();
						}
						
						//Finally remove student entity
						try {
							EntityManagerFactory emfactory3 = Persistence.createEntityManagerFactory("SchoolMgtSystem");
							EntityManager entitymanager3 = emfactory3.createEntityManager();
							entitymanager3.getTransaction().begin();
							
							Students stdTxn = entitymanager3.find(Students.class, stdNo);
							entitymanager3.remove(stdTxn);
							
							entitymanager3.getTransaction().commit();
							
							entitymanager3.close();
							emfactory3.close();
							
							logList.add(stdNo+" removed - SUCCESS!");
						}
						catch(Exception scExcept) {
							scExcept.printStackTrace();
							//log
							logList.add(stdNo+" removed - FAILURE!");
						}
						
						//output the log
						String str = "";
						for(String st : logList) {
							str = str + st + "\n";
						}
						Alert alert4 = new Alert(Alert.AlertType.INFORMATION);
						alert4.setContentText(str);
						Optional<ButtonType> result4 = alert4.showAndWait();
						if(result4.get() == ButtonType.OK) {
							alert4.close();
						}
						else {
							alert4.close();
						}
						
					}
					catch(Exception realDealExcept) {
						realDealExcept.printStackTrace();
						Alert alert2 = new Alert(Alert.AlertType.ERROR);
						alert2.setContentText("Deletion Error: "+ realDealExcept.getMessage());
						Optional<ButtonType> result2 = alert2.showAndWait();
						if(result2.get() == ButtonType.OK) {
							alert2.close();
						}
						else {
							alert2.close();
						}
					}
					finally {
						studentSurNameTF.clear();
						studentOtherNamesTF.clear();
					}
				
				}
				else {
					alert.close();
				}
			}
			else {
				Alert alert = new Alert(Alert.AlertType.ERROR);
				alert.setContentText("Error: You cannot delete a student with a non-zero balance!");
				Optional<ButtonType> result = alert.showAndWait();
				if(result.get() == ButtonType.OK) {
					alert.close();
				}
				else {
					alert.close();
				}
			}
		}
		catch(Exception newDelExcept) {
			newDelExcept.printStackTrace();
			Alert alert = new Alert(Alert.AlertType.ERROR);
			alert.setContentText("Error: "+ newDelExcept.getMessage());
			Optional<ButtonType> result = alert.showAndWait();
			if(result.get() == ButtonType.OK) {
				alert.close();
			}
			else {
				alert.close();
			}
		}
	}
	
	//Delete std academic records
	@FXML public void deleteStdScoresButton(ActionEvent event) {
		//new Delete
		deleteAllStdScores();
	}
	
	//Delete Academic Records
	@FXML private TextField delScoresStdNo, delScoresStdNo2, delScoresStdNo3, delScoresStdNo4, 
		delScoresStdName, delScoresStdName2, delScoresStdName3, delScoresStdName4;
	@FXML private Label delScoresLabel, delScoresLabel2, delScoresLabel3, delScoresLabel4;
	@FXML private ComboBox<String> delScoresSession, delScoresSession2, delScoresSession3, 
		delScoresTerm, delScoresTerm2, delScoresTermSubject;
	
	@FXML public void delScoresInit2(MouseEvent event) {
		populateYear(delScoresSession2);
		delScoresTerm.setItems(termN);
	}
	
	@FXML public void delScoresInit3(MouseEvent event) {
		populateYear(delScoresSession);
	}
	
	@FXML public void delScoresInitSubj(MouseEvent event) {
		populateYear(delScoresSession3);
		delScoresTerm2.setItems(termN);
	}
	
	@FXML public void delScoresInitSubj2(MouseEvent event) {
		Vector<SubjectNames> userData3 = new Vector<>();
		ObservableList<String> subjCombo = FXCollections.observableArrayList();
		try {
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			Query query2 =
					entitymanager.createQuery("select e from SubjectNames e ");
			userData3 = (Vector<SubjectNames>) query2.getResultList();
			
			for(SubjectNames x : userData3) {
				if(!(subjCombo.contains(x.getSubjectName()))) {
					subjCombo.add(x.getSubjectName());
				}
			}
			
			delScoresTermSubject.setItems(subjCombo);
			
			entitymanager.getTransaction().commit();
			entitymanager.close();
			emfactory.close();
			
			new AutoCompleteComboBoxListener<>(delScoresTermSubject);
		}
		catch(Exception e) {
			e.printStackTrace();
		}
	}
	
	@FXML public void delScoresInitA(MouseEvent event) {
		try {
			delInitName(delScoresLabel, delScoresStdName, delScoresStdNo);
		}
		catch(Exception e) {
			e.printStackTrace();
		}
	}
	
	@FXML public void delScoresInitB(MouseEvent event) {
		try {
			delInitName(delScoresLabel2, delScoresStdName2, delScoresStdNo2);
		}
		catch(Exception e) {
			e.printStackTrace();
		}
	}
	
	@FXML public void delScoresInitC(MouseEvent event) {
		try {
			delInitName(delScoresLabel3, delScoresStdName3, delScoresStdNo3);
		}
		catch(Exception e) {
			e.printStackTrace();
		}
	}
	
	@FXML public void delScoresInitD(MouseEvent event) {
		try {
			delInitName(delScoresLabel4, delScoresStdName4, delScoresStdNo4);
		}
		catch(Exception e) {
			e.printStackTrace();
		}
	}
	
	public void delInitName(Label label, TextField txt, TextField id) {
		try {
			String stdNo = id.getText().trim().toUpperCase();
			
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			Students std = entitymanager.find(Students.class, stdNo);
			
			txt.setText(std.getSurName() + ", "+std.getOtherNames());
			
			entitymanager.getTransaction().commit();
			
			entitymanager.close();
			emfactory.close();
			label.setText(null);
		}
		catch(Exception e) {
			e.printStackTrace();
			label.setTextFill(Color.RED);
			label.setText("Init Error: "+ e.getLocalizedMessage());
			txt.clear();
		}
	}
	
	@FXML public void delScoresStdActionButton(ActionEvent event) {
		deleteAllStdScores();
	}
	
	@FXML public void delScoresStdAnnualButton(ActionEvent event) {
		try {
			String stdNo = delScoresStdNo2.getText().trim().toUpperCase();
			String year = delScoresSession.getValue();
			String stdClassId;
			
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			Students std = entitymanager.find(Students.class, stdNo);
			stdClassId = std.getEntryClassAssigned();
			
			entitymanager.getTransaction().commit();
			
			entitymanager.close();
			emfactory.close();	
			
			try {
				if(true) { //stdBal == 0) {
				
				Alert alert = new Alert(Alert.AlertType.CONFIRMATION);
				alert.setContentText("You are about to delete this student's academic records for the "+year+ " session. "
								+ "Please note that this action will delete all academic records for this "
								+ "student for the session and is irreversible! Ensure to take your backup before proceeding.");
					Optional<ButtonType> result = alert.showAndWait();
					if(result.get() == ButtonType.OK) {
						
						//Delete std records
						//First Remove him from std class
						try {
							LinkedHashSet<String> logList = new LinkedHashSet<>();
							
							EntityManagerFactory emfactory2 = Persistence.createEntityManagerFactory("SchoolMgtSystem");
							EntityManager entitymanager2 = emfactory2.createEntityManager();
							entitymanager2.getTransaction().begin();
													
							//Clear academic records if any
							if(stdClassId.contains("JSS")) {
								Vector<AnnualScoresTotal> annualScores = new Vector<>();
								Vector<AnnualScoreSheetsSummary> annualScoresSummary = new Vector<>();
								Vector<ScoreSheetsSummary> scoresSummary = new Vector<>();
								Vector<JssScoreSheets> scores = new Vector<>();
								
								annualScores = getAnnualScoresTotalByStdNoYear(entitymanager2, stdNo, year);
								annualScoresSummary = getAnnualScoreSheetsSummaryByStdNoYear(entitymanager2, stdNo, year);
								scoresSummary = getScoreSheetsSummaryByStdNoYear(entitymanager2, stdNo, year);
								scores = getJssScoreSheetsByStdNoYear(entitymanager2, stdNo, year);
										
								//AnnualScoresTotal
								for(AnnualScoresTotal ast : annualScores) {
									try {
										EntityManagerFactory emfactory3 = Persistence.createEntityManagerFactory("SchoolMgtSystem");
										EntityManager entitymanager3 = emfactory3.createEntityManager();
										entitymanager3.getTransaction().begin();
										
										AnnualScoresTotal stdAST = entitymanager3.find(AnnualScoresTotal.class, ast.getSumId());
										entitymanager3.remove(stdAST);
										
//										Students stdXX = entitymanager3.find(Students.class, stdNo);
//										stdXX.getAnnualScoresTotalIdSet().clear();
										
										entitymanager3.getTransaction().commit();
										
										entitymanager3.close();
										emfactory3.close();
										//log
										logList.add(stdNo+"'s AnnualScoresTotal scores entries cleared - SUCCESS!");
									}
									catch(Exception astExcept) {
										astExcept.printStackTrace();
										//log
										logList.add(stdNo+"'s AnnualScoresTotal scores entries cleared - FAILURE!");
									}
								}
								
								//AnnualScoreSheetsSummary
								for(AnnualScoreSheetsSummary ass : annualScoresSummary) {
									try {
										EntityManagerFactory emfactory3 = Persistence.createEntityManagerFactory("SchoolMgtSystem");
										EntityManager entitymanager3 = emfactory3.createEntityManager();
										entitymanager3.getTransaction().begin();
										
										AnnualScoreSheetsSummary stdASS = entitymanager3.find(AnnualScoreSheetsSummary.class, ass.getSumId());
										entitymanager3.remove(stdASS);
										
//										Students stdXX = entitymanager3.find(Students.class, stdNo);
//										stdXX.getAnnualSummaryIdSet().clear();
										
										entitymanager3.getTransaction().commit();
										
										entitymanager3.close();
										emfactory3.close();
										//log
										logList.add(stdNo+"'s AnnualScoreSheetSummary scores entries cleared - SUCCESS!");
									}
									catch(Exception assExcept) {
										assExcept.printStackTrace();
										//log
										logList.add(stdNo+"'s AnnualScoreSheetSummary scores entries cleared - FAILURE!");
									}
								}
								
								//ScoreSheetsSummary
								for(ScoreSheetsSummary sss : scoresSummary) {
									try {
										EntityManagerFactory emfactory3 = Persistence.createEntityManagerFactory("SchoolMgtSystem");
										EntityManager entitymanager3 = emfactory3.createEntityManager();
										entitymanager3.getTransaction().begin();
										
										ScoreSheetsSummary stdSS = entitymanager3.find(ScoreSheetsSummary.class, sss.getSumId());
										entitymanager3.remove(stdSS);
										
//										Students stdXX = entitymanager3.find(Students.class, stdNo);
//										stdXX.getSummaryIdSet().clear();
										
										entitymanager3.getTransaction().commit();
										
										entitymanager3.close();
										emfactory3.close();
										//log
										logList.add(stdNo+"'s ScoreSheetSummary scores entries cleared - SUCCESS!");
									}
									catch(Exception ssExcept) {
										ssExcept.printStackTrace();
										//log
										logList.add(stdNo+"'s ScoreSheetSummary scores entries cleared - FAILURE!");
									}
								}
								
								//JssScoreSheets
								for(JssScoreSheets sc : scores) {
									try {
										EntityManagerFactory emfactory3 = Persistence.createEntityManagerFactory("SchoolMgtSystem");
										EntityManager entitymanager3 = emfactory3.createEntityManager();
										entitymanager3.getTransaction().begin();
										
										JssScoreSheets stdScore = entitymanager3.find(JssScoreSheets.class, sc.getSId());
										entitymanager3.remove(stdScore);
										
//										Students stdXX = entitymanager3.find(Students.class, stdNo);
//										stdXX.getScores_sId().clear();
										
										entitymanager3.getTransaction().commit();
										
										entitymanager3.close();
										emfactory3.close();
										//log
										logList.add(stdNo+"'s Nurs scores entries cleared - SUCCESS!");
									}
									catch(Exception scExcept) {
										scExcept.printStackTrace();
										//log
										logList.add(stdNo+"'s Nurs scores entries cleared - FAILURE!");
									}
								}
								
							}
							else if(stdClassId.contains("SSS")) {
								Vector<AnnualScoresTotal> annualScores = new Vector<>();
								Vector<AnnualScoreSheetsSummary> annualScoresSummary = new Vector<>();
								Vector<ScoreSheetsSummary> scoresSummary = new Vector<>();
								Vector<ScoreSheets> scores = new Vector<>();
								
								annualScores = getAnnualScoresTotalByStdNoYear(entitymanager2, stdNo, year);
								annualScoresSummary = getAnnualScoreSheetsSummaryByStdNoYear(entitymanager2, stdNo, year);
								scoresSummary = getScoreSheetsSummaryByStdNoYear(entitymanager2, stdNo, year);
								scores = getScoreSheetsByStdNoYear(entitymanager2, stdNo, year);
										
								//AnnualScoresTotal
								for(AnnualScoresTotal ast : annualScores) {
									try {
										EntityManagerFactory emfactory3 = Persistence.createEntityManagerFactory("SchoolMgtSystem");
										EntityManager entitymanager3 = emfactory3.createEntityManager();
										entitymanager3.getTransaction().begin();
										
										AnnualScoresTotal stdAST = entitymanager3.find(AnnualScoresTotal.class, ast.getSumId());
										entitymanager3.remove(stdAST);
										
//										Students stdXX = entitymanager3.find(Students.class, stdNo);
//										stdXX.getAnnualScoresTotalIdSet().clear();
										
										entitymanager3.getTransaction().commit();
										
										entitymanager3.close();
										emfactory3.close();
										//log
										logList.add(stdNo+"'s AnnualScoresTotal scores entries cleared - SUCCESS!");
									}
									catch(Exception astExcept) {
										astExcept.printStackTrace();
										//log
										logList.add(stdNo+"'s AnnualScoresTotal scores entries cleared - FAILURE!");
									}
								}
								
								//AnnualScoreSheetsSummary
								for(AnnualScoreSheetsSummary ass : annualScoresSummary) {
									try {
										EntityManagerFactory emfactory3 = Persistence.createEntityManagerFactory("SchoolMgtSystem");
										EntityManager entitymanager3 = emfactory3.createEntityManager();
										entitymanager3.getTransaction().begin();
										
										AnnualScoreSheetsSummary stdASS = entitymanager3.find(AnnualScoreSheetsSummary.class, ass.getSumId());
										entitymanager3.remove(stdASS);
										
//										Students stdXX = entitymanager3.find(Students.class, stdNo);
//										stdXX.getAnnualSummaryIdSet().clear();
										
										entitymanager3.getTransaction().commit();
										
										entitymanager3.close();
										emfactory3.close();
										//log
										logList.add(stdNo+"'s AnnualScoreSheetSummary scores entries cleared - SUCCESS!");
									}
									catch(Exception assExcept) {
										assExcept.printStackTrace();
										//log
										logList.add(stdNo+"'s AnnualScoreSheetSummary scores entries cleared - FAILURE!");
									}
								}
								
								//ScoreSheetsSummary
								for(ScoreSheetsSummary sss : scoresSummary) {
									try {
										EntityManagerFactory emfactory3 = Persistence.createEntityManagerFactory("SchoolMgtSystem");
										EntityManager entitymanager3 = emfactory3.createEntityManager();
										entitymanager3.getTransaction().begin();
										
										ScoreSheetsSummary stdSS = entitymanager3.find(ScoreSheetsSummary.class, sss.getSumId());
										entitymanager3.remove(stdSS);
										
//										Students stdXX = entitymanager3.find(Students.class, stdNo);
//										stdXX.getSummaryIdSet().clear();
										
										entitymanager3.getTransaction().commit();
										
										entitymanager3.close();
										emfactory3.close();
										//log
										logList.add(stdNo+"'s ScoreSheetSummary scores entries cleared - SUCCESS!");
									}
									catch(Exception ssExcept) {
										ssExcept.printStackTrace();
										//log
										logList.add(stdNo+"'s ScoreSheetSummary scores entries cleared - FAILURE!");
									}
								}
								
								//ScoreSheets
								for(ScoreSheets sc : scores) {
									try {
										EntityManagerFactory emfactory3 = Persistence.createEntityManagerFactory("SchoolMgtSystem");
										EntityManager entitymanager3 = emfactory3.createEntityManager();
										entitymanager3.getTransaction().begin();
										
										ScoreSheets stdScore = entitymanager3.find(ScoreSheets.class, sc.getSId());
										entitymanager3.remove(stdScore);
										
//										Students stdXX = entitymanager3.find(Students.class, stdNo);
//										stdXX.getScores_sId().clear();
										
										entitymanager3.getTransaction().commit();
										
										entitymanager3.close();
										emfactory3.close();
										//log
										logList.add(stdNo+"'s PRY scores entries cleared - SUCCESS!");
									}
									catch(Exception scExcept) {
										scExcept.printStackTrace();
										//log
										logList.add(stdNo+"'s PRY scores entries cleared - FAILURE!");
									}
								}

							}
							else {
								Alert alert3 = new Alert(Alert.AlertType.INFORMATION);
								alert3.setContentText(stdNo +" is obviously in error class and thus has no academic"
										+ " records. StdClassId: "+stdClassId + ". Click OK to continue...");
								Optional<ButtonType> result3 = alert3.showAndWait();
								if(result3.get() == ButtonType.OK) {
									alert3.close();
								}
								else {
									alert3.close();
								}
								
								//log
								logList.add(stdNo+" obviously in error class - FAILURE!");
							}
							
							//output the log
							String str = "";
							for(String st : logList) {
								str = str + st + "\n";
							}
							Alert alert4 = new Alert(Alert.AlertType.INFORMATION);
							alert4.setContentText(str);
							Optional<ButtonType> result4 = alert4.showAndWait();
							if(result4.get() == ButtonType.OK) {
								alert4.close();
							}
							else {
								alert4.close();
							}
							
						}
						catch(Exception realDealExcept) {
							realDealExcept.printStackTrace();
							Alert alert2 = new Alert(Alert.AlertType.ERROR);
							alert2.setContentText("Deletion Error: "+ realDealExcept.getMessage());
							Optional<ButtonType> result2 = alert2.showAndWait();
							if(result2.get() == ButtonType.OK) {
								alert2.close();
							}
							else {
								alert2.close();
							}
						}
						finally {
							delScoresStdName2.clear();
						}
					
					}
					else {
						alert.close();
					}
				}

			}
			catch(Exception newDelExcept) {
				newDelExcept.printStackTrace();
				Alert alert = new Alert(Alert.AlertType.ERROR);
				alert.setContentText("Error: "+ newDelExcept.getMessage());
				Optional<ButtonType> result = alert.showAndWait();
				if(result.get() == ButtonType.OK) {
					alert.close();
				}
				else {
					alert.close();
				}
			}
		}
		catch(Exception eb) {
			eb.printStackTrace();
		}
	}
	
	@FXML public void delScoresStdTermButton(ActionEvent event) {
		try {
			String stdNo = delScoresStdNo3.getText().trim().toUpperCase();
			String year = delScoresSession2.getValue();
			String term = delScoresTerm.getValue();
			String stdClassId, classId;
			
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			Students std = entitymanager.find(Students.class, stdNo);
			stdClassId = std.getEntryClassAssigned();
						
			classId = getScoreSheetsSummaryByStdNoYearTermClassId(entitymanager, stdNo, 
					year, term);
			
			entitymanager.getTransaction().commit();
			
			entitymanager.close();
			emfactory.close();	
			
			//test for current class
			if(stdClassId.equals(classId) ) {
				
				try {
					if(true) { //stdBal == 0) {
					
					Alert alert = new Alert(Alert.AlertType.CONFIRMATION);
					alert.setContentText("You are about to delete this student's academic records for term "+term +" in the "+year+ " session. "
									+ "Please note that this action will delete all academic records for this "
									+ "student for the session/term and is irreversible! Ensure to take your backup before proceeding.");
						Optional<ButtonType> result = alert.showAndWait();
						if(result.get() == ButtonType.OK) {
							
							//Delete std records
							//First Remove him from std class
							try {
								LinkedHashSet<String> logList = new LinkedHashSet<>();
								
								EntityManagerFactory emfactory2 = Persistence.createEntityManagerFactory("SchoolMgtSystem");
								EntityManager entitymanager2 = emfactory2.createEntityManager();
								entitymanager2.getTransaction().begin();
														
								//Clear academic records if any
								if(stdClassId.contains("JSS")) {
									Vector<AnnualScoresTotal> annualScores = new Vector<>();
									Vector<AnnualScoreSheetsSummary> annualScoresSummary = new Vector<>();
									Vector<ScoreSheetsSummary> scoresSummary = new Vector<>();
									Vector<JssScoreSheets> scores = new Vector<>();
									
									annualScores = getAnnualScoresTotalByStdNoYear(entitymanager2, stdNo, year);
									annualScoresSummary = getAnnualScoreSheetsSummaryByStdNoYear(entitymanager2, stdNo, year);
									scoresSummary = getScoreSheetsSummaryByStdNoYearTerm(entitymanager2, stdNo, year, term);
									scores = getJssScoreSheetsByStdNoYearTerm(entitymanager2, stdNo, year, term);
									
									double termTotal = 0;
									for(ScoreSheetsSummary ssmm : scoresSummary) {
										termTotal = ssmm.getTotalScores();
									}
											
									//AnnualScoresTotal
									for(AnnualScoresTotal ast : annualScores) {
										try {
											EntityManagerFactory emfactory3 = Persistence.createEntityManagerFactory("SchoolMgtSystem");
											EntityManager entitymanager3 = emfactory3.createEntityManager();
											entitymanager3.getTransaction().begin();
											
											AnnualScoresTotal stdAST = entitymanager3.find(AnnualScoresTotal.class, ast.getSumId());
											
											if(term.equals("1")) {
												entitymanager3.remove(stdAST);
											}
											else {
												stdAST.setTotalScores(stdAST.getTotalScores() - termTotal);
											}
																				
											entitymanager3.getTransaction().commit();
											
											entitymanager3.close();
											emfactory3.close();
											//log
											logList.add(stdNo+"'s AnnualScoresTotal scores entries cleared - SUCCESS!");
										}
										catch(Exception astExcept) {
											astExcept.printStackTrace();
											//log
											logList.add(stdNo+"'s AnnualScoresTotal scores entries cleared - FAILURE!");
										}
									}
									
									//AnnualScoreSheetsSummary
									for(AnnualScoreSheetsSummary ass : annualScoresSummary) {
										try {
											EntityManagerFactory emfactory3 = Persistence.createEntityManagerFactory("SchoolMgtSystem");
											EntityManager entitymanager3 = emfactory3.createEntityManager();
											entitymanager3.getTransaction().begin();
											
											AnnualScoreSheetsSummary stdASS = entitymanager3.find(AnnualScoreSheetsSummary.class, ass.getSumId());
											
											if(term.equals("1")) {
												entitymanager3.remove(stdASS);
											}
											else if(term.equals("2")) {
												stdASS.setSecondTermTotal(0.0);
											}
											else if(term.equals("3")){
												stdASS.setThirdTermTotal(0.0);
											}
											else {
												//
											}
											
											entitymanager3.getTransaction().commit();
											
											entitymanager3.close();
											emfactory3.close();
											//log
											logList.add(stdNo+"'s AnnualScoreSheetSummary scores entries cleared - SUCCESS!");
										}
										catch(Exception assExcept) {
											assExcept.printStackTrace();
											//log
											logList.add(stdNo+"'s AnnualScoreSheetSummary scores entries cleared - FAILURE!");
										}
									}
									
									//ScoreSheetsSummary
									for(ScoreSheetsSummary sss : scoresSummary) {
										try {
											EntityManagerFactory emfactory3 = Persistence.createEntityManagerFactory("SchoolMgtSystem");
											EntityManager entitymanager3 = emfactory3.createEntityManager();
											entitymanager3.getTransaction().begin();
											
											ScoreSheetsSummary stdSS = entitymanager3.find(ScoreSheetsSummary.class, sss.getSumId());
											entitymanager3.remove(stdSS);
																				
											entitymanager3.getTransaction().commit();
											
											entitymanager3.close();
											emfactory3.close();
											//log
											logList.add(stdNo+"'s ScoreSheetSummary scores entries cleared - SUCCESS!");
										}
										catch(Exception ssExcept) {
											ssExcept.printStackTrace();
											//log
											logList.add(stdNo+"'s ScoreSheetSummary scores entries cleared - FAILURE!");
										}
									}
									
									//JssScoreSheets
									for(JssScoreSheets sc : scores) {
										try {
											EntityManagerFactory emfactory3 = Persistence.createEntityManagerFactory("SchoolMgtSystem");
											EntityManager entitymanager3 = emfactory3.createEntityManager();
											entitymanager3.getTransaction().begin();
											
											JssScoreSheets stdScore = entitymanager3.find(JssScoreSheets.class, sc.getSId());
											entitymanager3.remove(stdScore);
																				
											entitymanager3.getTransaction().commit();
											
											entitymanager3.close();
											emfactory3.close();
											//log
											logList.add(stdNo+"'s Nurs scores entries cleared - SUCCESS!");
										}
										catch(Exception scExcept) {
											scExcept.printStackTrace();
											//log
											logList.add(stdNo+"'s Nurs scores entries cleared - FAILURE!");
										}
									}
									
								}
								else if(stdClassId.contains("SSS")) {
									Vector<AnnualScoresTotal> annualScores = new Vector<>();
									Vector<AnnualScoreSheetsSummary> annualScoresSummary = new Vector<>();
									Vector<ScoreSheetsSummary> scoresSummary = new Vector<>();
									Vector<ScoreSheets> scores = new Vector<>();
									
									annualScores = getAnnualScoresTotalByStdNoYear(entitymanager2, stdNo, year);
									annualScoresSummary = getAnnualScoreSheetsSummaryByStdNoYear(entitymanager2, stdNo, year);
									scoresSummary = getScoreSheetsSummaryByStdNoYearTerm(entitymanager2, stdNo, year, term);
									scores = getScoreSheetsByStdNoYearTerm(entitymanager2, stdNo, year, term);
									
									double termTotal = 0;
									for(ScoreSheetsSummary ssmm : scoresSummary) {
										termTotal = ssmm.getTotalScores();
									}
											
									//AnnualScoresTotal
									for(AnnualScoresTotal ast : annualScores) {
										try {
											EntityManagerFactory emfactory3 = Persistence.createEntityManagerFactory("SchoolMgtSystem");
											EntityManager entitymanager3 = emfactory3.createEntityManager();
											entitymanager3.getTransaction().begin();
											
											AnnualScoresTotal stdAST = entitymanager3.find(AnnualScoresTotal.class, ast.getSumId());

											if(term.equals("1")) {
												entitymanager3.remove(stdAST);
											}
											else {
												stdAST.setTotalScores(stdAST.getTotalScores() - termTotal);
											}
																				
											entitymanager3.getTransaction().commit();
											
											entitymanager3.close();
											emfactory3.close();
											//log
											logList.add(stdNo+"'s AnnualScoresTotal scores entries cleared - SUCCESS!");
										}
										catch(Exception astExcept) {
											astExcept.printStackTrace();
											//log
											logList.add(stdNo+"'s AnnualScoresTotal scores entries cleared - FAILURE!");
										}
									}
									
									//AnnualScoreSheetsSummary
									for(AnnualScoreSheetsSummary ass : annualScoresSummary) {
										try {
											EntityManagerFactory emfactory3 = Persistence.createEntityManagerFactory("SchoolMgtSystem");
											EntityManager entitymanager3 = emfactory3.createEntityManager();
											entitymanager3.getTransaction().begin();
											
											AnnualScoreSheetsSummary stdASS = entitymanager3.find(AnnualScoreSheetsSummary.class, ass.getSumId());
											
											if(term.equals("1")) {
												entitymanager3.remove(stdASS);
											}
											else if(term.equals("2")) {
												stdASS.setSecondTermTotal(0.0);
											}
											else if(term.equals("3")){
												stdASS.setThirdTermTotal(0.0);
											}
											else {
												//
											}
											
											entitymanager3.getTransaction().commit();
											
											entitymanager3.close();
											emfactory3.close();
											//log
											logList.add(stdNo+"'s AnnualScoreSheetSummary scores entries cleared - SUCCESS!");
										}
										catch(Exception assExcept) {
											assExcept.printStackTrace();
											//log
											logList.add(stdNo+"'s AnnualScoreSheetSummary scores entries cleared - FAILURE!");
										}
									}
									
									//ScoreSheetsSummary
									for(ScoreSheetsSummary sss : scoresSummary) {
										try {
											EntityManagerFactory emfactory3 = Persistence.createEntityManagerFactory("SchoolMgtSystem");
											EntityManager entitymanager3 = emfactory3.createEntityManager();
											entitymanager3.getTransaction().begin();
											
											ScoreSheetsSummary stdSS = entitymanager3.find(ScoreSheetsSummary.class, sss.getSumId());
											entitymanager3.remove(stdSS);
																				
											entitymanager3.getTransaction().commit();
											
											entitymanager3.close();
											emfactory3.close();
											//log
											logList.add(stdNo+"'s ScoreSheetSummary scores entries cleared - SUCCESS!");
										}
										catch(Exception ssExcept) {
											ssExcept.printStackTrace();
											//log
											logList.add(stdNo+"'s ScoreSheetSummary scores entries cleared - FAILURE!");
										}
									}
									
									//ScoreSheets
									for(ScoreSheets sc : scores) {
										try {
											EntityManagerFactory emfactory3 = Persistence.createEntityManagerFactory("SchoolMgtSystem");
											EntityManager entitymanager3 = emfactory3.createEntityManager();
											entitymanager3.getTransaction().begin();
											
											ScoreSheets stdScore = entitymanager3.find(ScoreSheets.class, sc.getSId());
											entitymanager3.remove(stdScore);
																				
											entitymanager3.getTransaction().commit();
											
											entitymanager3.close();
											emfactory3.close();
											//log
											logList.add(stdNo+"'s PRY scores entries cleared - SUCCESS!");
										}
										catch(Exception scExcept) {
											scExcept.printStackTrace();
											//log
											logList.add(stdNo+"'s PRY scores entries cleared - FAILURE!");
										}
									}

								}
								else {
									Alert alert3 = new Alert(Alert.AlertType.INFORMATION);
									alert3.setContentText(stdNo +" is obviously in error class and thus has no academic"
											+ " records. StdClassId: "+stdClassId + ". Click OK to continue...");
									Optional<ButtonType> result3 = alert3.showAndWait();
									if(result3.get() == ButtonType.OK) {
										alert3.close();
									}
									else {
										alert3.close();
									}
									
									//log
									logList.add(stdNo+" obviously in error class - FAILURE!");
								}
								
								//output the log
								String str = "";
								for(String st : logList) {
									str = str + st + "\n";
								}
								Alert alert4 = new Alert(Alert.AlertType.INFORMATION);
								alert4.setContentText(str);
								Optional<ButtonType> result4 = alert4.showAndWait();
								if(result4.get() == ButtonType.OK) {
									alert4.close();
								}
								else {
									alert4.close();
								}
								
							}
							catch(Exception realDealExcept) {
								realDealExcept.printStackTrace();
								Alert alert2 = new Alert(Alert.AlertType.ERROR);
								alert2.setContentText("Deletion Error: "+ realDealExcept.getMessage());
								Optional<ButtonType> result2 = alert2.showAndWait();
								if(result2.get() == ButtonType.OK) {
									alert2.close();
								}
								else {
									alert2.close();
								}
							}
							finally {
								delScoresStdName2.clear();
								delScoresSession2.setValue("");
								delScoresTerm.setValue("");
							}
						
						}
						else {
							alert.close();
						}
					}

				}
				catch(Exception newDelExcept) {
					newDelExcept.printStackTrace();
					Alert alert = new Alert(Alert.AlertType.ERROR);
					alert.setContentText("Error: "+ newDelExcept.getMessage());
					Optional<ButtonType> result = alert.showAndWait();
					if(result.get() == ButtonType.OK) {
						alert.close();
					}
					else {
						alert.close();
					}
				}
				
			}
			else {
				Alert alert = new Alert(Alert.AlertType.ERROR);
				alert.setContentText("Illegal Action!: You can only delete scores for "
						+ "current class, term and year..!");
				alert.setHeaderText("Illegal Action!");
				Optional<ButtonType> result = alert.showAndWait();
				if(result.get() == ButtonType.OK) {
					alert.close();
				}
				else {
					alert.close();
				}
			}
			
		}
		catch(Exception edelx) {
			edelx.printStackTrace();
		}
	}
	
	public int getSubjectId(String subjectName) {
		Vector<SubjectNames> userData3 = new Vector<>();
		int subjCode = 0;
		try {
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			Query query2 =
					entitymanager.createQuery("select e from SubjectNames e ");
			userData3 = (Vector<SubjectNames>) query2.getResultList();
			
			entitymanager.getTransaction().commit();
			entitymanager.close();
			emfactory.close();
			
		}
		catch(Exception e) {
			e.printStackTrace();
		}
		
		if(subjectName.trim().length() != 0) {
			for(SubjectNames std : userData3) {
				if((std.getSubjectName().equals(subjectName))) {
					subjCode = std.getSubjectCode();
				}
			}
		}
		
		return subjCode;
	}
	
	//delete subject score
	@FXML public void delScoresStdTermSubjectButton(ActionEvent event) {
		int subjCodeDel = 0;
		try {
			String stdNo = delScoresStdNo4.getText().trim().toUpperCase();
			String year = delScoresSession3.getValue();
			String term = delScoresTerm2.getValue();
			String subjectName = delScoresTermSubject.getValue();
			subjCodeDel = getSubjectId(subjectName);
			String stdClassId, classId;
			
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			Students std = entitymanager.find(Students.class, stdNo);
			stdClassId = std.getEntryClassAssigned();
						
			classId = getScoreSheetsSummaryByStdNoYearTermClassId(entitymanager, stdNo, 
					year, term);
			
			entitymanager.getTransaction().commit();
			
			entitymanager.close();
			emfactory.close();	
			
			//test for current class
			if(stdClassId.equals(classId) ) {
				
				try {
					if(true) { //stdBal == 0) {
					
					Alert alert = new Alert(Alert.AlertType.CONFIRMATION);
					alert.setContentText("You are about to delete the following subject: "+subjectName+" "
							+ "from this student's academic records for term "+term +" in the "+year+ " session. "
									+ "Please note that this action will delete the subject's score entry for this "
									+ "student for the session/term and is irreversible! Ensure to take your backup before proceeding.");
						Optional<ButtonType> result = alert.showAndWait();
						if(result.get() == ButtonType.OK) {
							
							//Delete std records
							//First Remove him from std class
							try {
								LinkedHashSet<String> logList = new LinkedHashSet<>();
								
								EntityManagerFactory emfactory2 = Persistence.createEntityManagerFactory("SchoolMgtSystem");
								EntityManager entitymanager2 = emfactory2.createEntityManager();
								entitymanager2.getTransaction().begin();
														
								//Clear academic records if any
								if(stdClassId.contains("JSS")) {
									Vector<AnnualScoresTotal> annualScores = new Vector<>();
									Vector<AnnualScoreSheetsSummary> annualScoresSummary = new Vector<>();
									Vector<ScoreSheetsSummary> scoresSummary = new Vector<>();
									Vector<JssScoreSheets> scores = new Vector<>();
									
									annualScores = getAnnualScoresTotalByStdNoYear(entitymanager2, stdNo, year);
									annualScoresSummary = getAnnualScoreSheetsSummaryByStdNoYearSubject(entitymanager2, stdNo, year, 
											subjectName);
									scoresSummary = getScoreSheetsSummaryByStdNoYearTerm(entitymanager2, stdNo, year, term);
									scores = getJssScoreSheetsByStdNoYearTermSubject(entitymanager2, stdNo, year, term, subjectName);
									
									double subjectTotal = 0;
									for(JssScoreSheets jsheet : scores) {
										subjectTotal = jsheet.getTotal();
									}
									
									Vector<JssScoreSheets> scores2 = new Vector<>();
									scores2 = getJssScoreSheetsByStdNoYearTerm(entitymanager2, stdNo, year, term);
											
									//AnnualScoresTotal
									for(AnnualScoresTotal ast : annualScores) {
										try {
											EntityManagerFactory emfactory3 = Persistence.createEntityManagerFactory("SchoolMgtSystem");
											EntityManager entitymanager3 = emfactory3.createEntityManager();
											entitymanager3.getTransaction().begin();
											
											AnnualScoresTotal stdAST = entitymanager3.find(AnnualScoresTotal.class, ast.getSumId());
											
											if(term.equals("1") && scores2.size() == 1 && scores.firstElement().getSubjectName().equals(subjectName)) {
												entitymanager3.remove(stdAST);
											}
											else {
												stdAST.setTotalScores(stdAST.getTotalScores() - subjectTotal);
											}
																				
											entitymanager3.getTransaction().commit();
											
											entitymanager3.close();
											emfactory3.close();
											//log
											logList.add(stdNo+"'s AnnualScoresTotal scores entries cleared - SUCCESS!");
										}
										catch(Exception astExcept) {
											astExcept.printStackTrace();
											//log
											logList.add(stdNo+"'s AnnualScoresTotal scores entries cleared - FAILURE!");
										}
									}
									
									//AnnualScoreSheetsSummary
									for(AnnualScoreSheetsSummary ass : annualScoresSummary) {
										try {
											EntityManagerFactory emfactory3 = Persistence.createEntityManagerFactory("SchoolMgtSystem");
											EntityManager entitymanager3 = emfactory3.createEntityManager();
											entitymanager3.getTransaction().begin();
											
											AnnualScoreSheetsSummary stdASS = entitymanager3.find(AnnualScoreSheetsSummary.class, ass.getSumId());
											
											if(term.equals("1")) {
												entitymanager3.remove(stdASS);
											}
											else if(term.equals("2")) {
												stdASS.setSecondTermTotal(0.0);
											}
											else if(term.equals("3")){
												stdASS.setThirdTermTotal(0.0);
											}
											else {
												//
											}
											
											entitymanager3.getTransaction().commit();
											
											entitymanager3.close();
											emfactory3.close();
											//log
											logList.add(stdNo+"'s AnnualScoreSheetSummary scores entries cleared - SUCCESS!");
										}
										catch(Exception assExcept) {
											assExcept.printStackTrace();
											//log
											logList.add(stdNo+"'s AnnualScoreSheetSummary scores entries cleared - FAILURE!");
										}
									}
									
									//ScoreSheetsSummary
									for(ScoreSheetsSummary sss : scoresSummary) {
										try {
											EntityManagerFactory emfactory3 = Persistence.createEntityManagerFactory("SchoolMgtSystem");
											EntityManager entitymanager3 = emfactory3.createEntityManager();
											entitymanager3.getTransaction().begin();
											
											ScoreSheetsSummary stdSS = entitymanager3.find(ScoreSheetsSummary.class, sss.getSumId());
											
											if(term.equals("1") && scores2.size() == 1 && scores.firstElement().getSubjectName().equals(subjectName)) {
												entitymanager3.remove(stdSS);
											}
											else {
												stdSS.setTotalScores(stdSS.getTotalScores() - subjectTotal);
											}
																				
											entitymanager3.getTransaction().commit();
											
											entitymanager3.close();
											emfactory3.close();
											//log
											logList.add(stdNo+"'s ScoreSheetSummary scores entries cleared - SUCCESS!");
										}
										catch(Exception ssExcept) {
											ssExcept.printStackTrace();
											//log
											logList.add(stdNo+"'s ScoreSheetSummary scores entries cleared - FAILURE!");
										}
									}
									
									//JssScoreSheets
									for(JssScoreSheets sc : scores) {
										try {
											EntityManagerFactory emfactory3 = Persistence.createEntityManagerFactory("SchoolMgtSystem");
											EntityManager entitymanager3 = emfactory3.createEntityManager();
											entitymanager3.getTransaction().begin();
											
											JssScoreSheets stdScore = entitymanager3.find(JssScoreSheets.class, sc.getSId());
											entitymanager3.remove(stdScore);
																				
											entitymanager3.getTransaction().commit();
											
											entitymanager3.close();
											emfactory3.close();
											//log
											logList.add(stdNo+"'s "+subjectName+" scores entries cleared - SUCCESS!");
										}
										catch(Exception scExcept) {
											scExcept.printStackTrace();
											//log
											logList.add(stdNo+"'s "+subjectName+" scores entries cleared - FAILURE!");
										}
									}
									
								}
								else if(stdClassId.contains("SSS")) {
									Vector<AnnualScoresTotal> annualScores = new Vector<>();
									Vector<AnnualScoreSheetsSummary> annualScoresSummary = new Vector<>();
									Vector<ScoreSheetsSummary> scoresSummary = new Vector<>();
									Vector<ScoreSheets> scores = new Vector<>();
									
									annualScores = getAnnualScoresTotalByStdNoYear(entitymanager2, stdNo, year);
									annualScoresSummary = getAnnualScoreSheetsSummaryByStdNoYearSubject(entitymanager2, stdNo, year, 
											subjectName);
									scoresSummary = getScoreSheetsSummaryByStdNoYearTerm(entitymanager2, stdNo, year, term);
									scores = getScoreSheetsByStdNoYearTermSubject(entitymanager2, stdNo, year, term, subjectName);
									
									double subjectTotal = 0;
									for(ScoreSheets ssheet : scores) {
										subjectTotal = ssheet.getTotal();
									}
									
									Vector<ScoreSheets> scores2 = new Vector<>();
									scores2 = getScoreSheetsByStdNoYearTerm(entitymanager2, stdNo, year, term);
											
									//AnnualScoresTotal
									for(AnnualScoresTotal ast : annualScores) {
										try {
											EntityManagerFactory emfactory3 = Persistence.createEntityManagerFactory("SchoolMgtSystem");
											EntityManager entitymanager3 = emfactory3.createEntityManager();
											entitymanager3.getTransaction().begin();
											
											AnnualScoresTotal stdAST = entitymanager3.find(AnnualScoresTotal.class, ast.getSumId());

											if(term.equals("1") && scores2.size() == 1 && scores2.firstElement().getSubjectName().equals(subjectName)) {
												entitymanager3.remove(stdAST);
											}
											else {
												stdAST.setTotalScores(stdAST.getTotalScores() - subjectTotal);
											}
																				
											entitymanager3.getTransaction().commit();
											
											entitymanager3.close();
											emfactory3.close();
											//log
											logList.add(stdNo+"'s AnnualScoresTotal scores entries cleared - SUCCESS!");
										}
										catch(Exception astExcept) {
											astExcept.printStackTrace();
											//log
											logList.add(stdNo+"'s AnnualScoresTotal scores entries cleared - FAILURE!");
										}
									}
									
									//AnnualScoreSheetsSummary
									for(AnnualScoreSheetsSummary ass : annualScoresSummary) {
										try {
											EntityManagerFactory emfactory3 = Persistence.createEntityManagerFactory("SchoolMgtSystem");
											EntityManager entitymanager3 = emfactory3.createEntityManager();
											entitymanager3.getTransaction().begin();
											
											AnnualScoreSheetsSummary stdASS = entitymanager3.find(AnnualScoreSheetsSummary.class, ass.getSumId());
											
											if(term.equals("1")) {
												entitymanager3.remove(stdASS);
											}
											else if(term.equals("2")) {
												stdASS.setSecondTermTotal(0.0);
											}
											else if(term.equals("3")){
												stdASS.setThirdTermTotal(0.0);
											}
											else {
												//
											}
											
											entitymanager3.getTransaction().commit();
											
											entitymanager3.close();
											emfactory3.close();
											//log
											logList.add(stdNo+"'s AnnualScoreSheetSummary scores entries cleared - SUCCESS!");
										}
										catch(Exception assExcept) {
											assExcept.printStackTrace();
											//log
											logList.add(stdNo+"'s AnnualScoreSheetSummary scores entries cleared - FAILURE!");
										}
									}
									
									//ScoreSheetsSummary
									for(ScoreSheetsSummary sss : scoresSummary) {
										try {
											EntityManagerFactory emfactory3 = Persistence.createEntityManagerFactory("SchoolMgtSystem");
											EntityManager entitymanager3 = emfactory3.createEntityManager();
											entitymanager3.getTransaction().begin();
											
											ScoreSheetsSummary stdSS = entitymanager3.find(ScoreSheetsSummary.class, sss.getSumId());
											
											if(term.equals("1") && scores2.size() == 1 && scores.firstElement().getSubjectName().equals(subjectName)) {
												entitymanager3.remove(stdSS);
											}
											else {
												stdSS.setTotalScores(stdSS.getTotalScores() - subjectTotal);
											}
																															
											entitymanager3.getTransaction().commit();
											
											entitymanager3.close();
											emfactory3.close();
											//log
											logList.add(stdNo+"'s ScoreSheetSummary scores entries cleared - SUCCESS!");
										}
										catch(Exception ssExcept) {
											ssExcept.printStackTrace();
											//log
											logList.add(stdNo+"'s ScoreSheetSummary scores entries cleared - FAILURE!");
										}
									}
									
									//ScoreSheets
									for(ScoreSheets sc : scores) {
										try {
											EntityManagerFactory emfactory3 = Persistence.createEntityManagerFactory("SchoolMgtSystem");
											EntityManager entitymanager3 = emfactory3.createEntityManager();
											entitymanager3.getTransaction().begin();
											
											ScoreSheets stdScore = entitymanager3.find(ScoreSheets.class, sc.getSId());
											entitymanager3.remove(stdScore);
																				
											entitymanager3.getTransaction().commit();
											
											entitymanager3.close();
											emfactory3.close();
											//log
											logList.add(stdNo+"'s "+subjectName+" scores entries cleared - SUCCESS!");
										}
										catch(Exception scExcept) {
											scExcept.printStackTrace();
											//log
											logList.add(stdNo+"'s "+subjectName+" scores entries cleared - FAILURE!");
										}
									}

								}
								else {
									Alert alert3 = new Alert(Alert.AlertType.INFORMATION);
									alert3.setContentText(stdNo +" is obviously in error class and thus has no academic"
											+ " records. StdClassId: "+stdClassId + ". Click OK to continue...");
									Optional<ButtonType> result3 = alert3.showAndWait();
									if(result3.get() == ButtonType.OK) {
										alert3.close();
									}
									else {
										alert3.close();
									}
									
									//log
									logList.add(stdNo+" obviously in error class - FAILURE!");
								}
								
								//output the log
								String str = "";
								for(String st : logList) {
									str = str + st + "\n";
								}
								Alert alert4 = new Alert(Alert.AlertType.INFORMATION);
								alert4.setContentText(str);
								Optional<ButtonType> result4 = alert4.showAndWait();
								if(result4.get() == ButtonType.OK) {
									alert4.close();
								}
								else {
									alert4.close();
								}
								
							}
							catch(Exception realDealExcept) {
								realDealExcept.printStackTrace();
								Alert alert2 = new Alert(Alert.AlertType.ERROR);
								alert2.setContentText("Deletion Error: "+ realDealExcept.getMessage());
								Optional<ButtonType> result2 = alert2.showAndWait();
								if(result2.get() == ButtonType.OK) {
									alert2.close();
								}
								else {
									alert2.close();
								}
							}
							finally {
								delScoresStdName2.clear();
								delScoresSession2.setValue("");
								delScoresTerm.setValue("");
							}
						
						}
						else {
							alert.close();
						}
					}

				}
				catch(Exception newDelExcept) {
					newDelExcept.printStackTrace();
					Alert alert = new Alert(Alert.AlertType.ERROR);
					alert.setContentText("Error: "+ newDelExcept.getMessage());
					Optional<ButtonType> result = alert.showAndWait();
					if(result.get() == ButtonType.OK) {
						alert.close();
					}
					else {
						alert.close();
					}
				}
				
			}
			else {
				Alert alert = new Alert(Alert.AlertType.ERROR);
				alert.setContentText("Illegal Action!: You can only delete scores for "
						+ "current class, term and year..!");
				alert.setHeaderText("Illegal Action!");
				Optional<ButtonType> result = alert.showAndWait();
				if(result.get() == ButtonType.OK) {
					alert.close();
				}
				else {
					alert.close();
				}
			}
			
		}
		catch(Exception edelx) {
			edelx.printStackTrace();
		}
	}
	
	public void deleteAllStdScores() {
		String stdNo = studentId.getText().trim().toUpperCase();
		double stdBal;
		String stdClassId;
		String stdClassDel, stdTermDel, stdYearDel;
		
		EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
		EntityManager entitymanager = emfactory.createEntityManager();
		entitymanager.getTransaction().begin();
		
		Students std = entitymanager.find(Students.class, stdNo);
		stdClassId = std.getEntryClassAssigned();
		
		AccountBalance bal = entitymanager.find(AccountBalance.class, stdNo);
		stdBal = bal.getBalance();
		
		StudentClasses stdClax = entitymanager.find(StudentClasses.class, stdClassId);
		stdClassDel = stdClax.getClassNo()+stdClax.getClassLetter();
		stdTermDel = stdClax.getTerm();
		stdYearDel = stdClax.getYear();
		
		entitymanager.getTransaction().commit();
		
		entitymanager.close();
		emfactory.close();	
		
		try {
			if(true) { //stdBal == 0) {
			
			Alert alert = new Alert(Alert.AlertType.CONFIRMATION);
			alert.setContentText("You are about to delete this student's academic records. "
					//+ "for Session: "+stdYearDel+" Term: "+stdTermDel+ " StdClass: "+stdClassDel+". "
							+ "Please note that this action will delete all academic records for this "
							+ "student and will be irreversible!");
				Optional<ButtonType> result = alert.showAndWait();
				if(result.get() == ButtonType.OK) {
					
					//Delete std records
					//First Remove him from std class
					try {
						LinkedHashSet<String> logList = new LinkedHashSet<>();
						
						EntityManagerFactory emfactory2 = Persistence.createEntityManagerFactory("SchoolMgtSystem");
						EntityManager entitymanager2 = emfactory2.createEntityManager();
						entitymanager2.getTransaction().begin();
												
						//Clear academic records if any
						if(stdClassId.contains("JSS")) {
							Vector<AnnualScoresTotal> annualScores = new Vector<>();
							Vector<AnnualScoreSheetsSummary> annualScoresSummary = new Vector<>();
							Vector<ScoreSheetsSummary> scoresSummary = new Vector<>();
							Vector<JssScoreSheets> scores = new Vector<>();
							
							annualScores = getAnnualScoresTotalByStdNo(entitymanager2, stdNo);
							annualScoresSummary = getAnnualScoreSheetsSummaryByStdNo(entitymanager2, stdNo);
							scoresSummary = getScoreSheetsSummaryByStdNo(entitymanager2, stdNo);
							scores = getJssScoreSheetsByStdNo(entitymanager2, stdNo);
									
							//AnnualScoresTotal
							for(AnnualScoresTotal ast : annualScores) {
								try {
									EntityManagerFactory emfactory3 = Persistence.createEntityManagerFactory("SchoolMgtSystem");
									EntityManager entitymanager3 = emfactory3.createEntityManager();
									entitymanager3.getTransaction().begin();
									
									AnnualScoresTotal stdAST = entitymanager3.find(AnnualScoresTotal.class, ast.getSumId());
									entitymanager3.remove(stdAST);
									
									entitymanager3.getTransaction().commit();
									
									entitymanager3.close();
									emfactory3.close();
									//log
									logList.add(stdNo+"'s AnnualScoresTotal scores entries cleared - SUCCESS!");
								}
								catch(Exception astExcept) {
									astExcept.printStackTrace();
									//log
									logList.add(stdNo+"'s AnnualScoresTotal scores entries cleared - FAILURE!");
								}
							}
							
							//AnnualScoreSheetsSummary
							for(AnnualScoreSheetsSummary ass : annualScoresSummary) {
								try {
									EntityManagerFactory emfactory3 = Persistence.createEntityManagerFactory("SchoolMgtSystem");
									EntityManager entitymanager3 = emfactory3.createEntityManager();
									entitymanager3.getTransaction().begin();
									
									AnnualScoreSheetsSummary stdASS = entitymanager3.find(AnnualScoreSheetsSummary.class, ass.getSumId());
									entitymanager3.remove(stdASS);
									
									entitymanager3.getTransaction().commit();
									
									entitymanager3.close();
									emfactory3.close();
									//log
									logList.add(stdNo+"'s AnnualScoreSheetSummary scores entries cleared - SUCCESS!");
								}
								catch(Exception assExcept) {
									assExcept.printStackTrace();
									//log
									logList.add(stdNo+"'s AnnualScoreSheetSummary scores entries cleared - FAILURE!");
								}
							}
							
							//ScoreSheetsSummary
							for(ScoreSheetsSummary sss : scoresSummary) {
								try {
									EntityManagerFactory emfactory3 = Persistence.createEntityManagerFactory("SchoolMgtSystem");
									EntityManager entitymanager3 = emfactory3.createEntityManager();
									entitymanager3.getTransaction().begin();
									
									ScoreSheetsSummary stdSS = entitymanager3.find(ScoreSheetsSummary.class, sss.getSumId());
									entitymanager3.remove(stdSS);
									
									entitymanager3.getTransaction().commit();
									
									entitymanager3.close();
									emfactory3.close();
									//log
									logList.add(stdNo+"'s ScoreSheetSummary scores entries cleared - SUCCESS!");
								}
								catch(Exception ssExcept) {
									ssExcept.printStackTrace();
									//log
									logList.add(stdNo+"'s ScoreSheetSummary scores entries cleared - FAILURE!");
								}
							}
							
							//JssScoreSheets
							for(JssScoreSheets sc : scores) {
								try {
									EntityManagerFactory emfactory3 = Persistence.createEntityManagerFactory("SchoolMgtSystem");
									EntityManager entitymanager3 = emfactory3.createEntityManager();
									entitymanager3.getTransaction().begin();
									
									JssScoreSheets stdScore = entitymanager3.find(JssScoreSheets.class, sc.getSId());
									entitymanager3.remove(stdScore);
																		
									entitymanager3.getTransaction().commit();
									
									entitymanager3.close();
									emfactory3.close();
									//log
									logList.add(stdNo+"'s Nurs scores entries cleared - SUCCESS!");
								}
								catch(Exception scExcept) {
									scExcept.printStackTrace();
									//log
									logList.add(stdNo+"'s Nurs scores entries cleared - FAILURE!");
								}
							}
							
						}
						else if(stdClassId.contains("SSS")) {
							Vector<AnnualScoresTotal> annualScores = new Vector<>();
							Vector<AnnualScoreSheetsSummary> annualScoresSummary = new Vector<>();
							Vector<ScoreSheetsSummary> scoresSummary = new Vector<>();
							Vector<ScoreSheets> scores = new Vector<>();
							
							annualScores = getAnnualScoresTotalByStdNo(entitymanager2, stdNo);
							annualScoresSummary = getAnnualScoreSheetsSummaryByStdNo(entitymanager2, stdNo);
							scoresSummary = getScoreSheetsSummaryByStdNo(entitymanager2, stdNo);
							scores = getScoreSheetsByStdNo(entitymanager2, stdNo);
									
							//AnnualScoresTotal
							for(AnnualScoresTotal ast : annualScores) {
								try {
									EntityManagerFactory emfactory3 = Persistence.createEntityManagerFactory("SchoolMgtSystem");
									EntityManager entitymanager3 = emfactory3.createEntityManager();
									entitymanager3.getTransaction().begin();
									
									AnnualScoresTotal stdAST = entitymanager3.find(AnnualScoresTotal.class, ast.getSumId());
									entitymanager3.remove(stdAST);
																		
									entitymanager3.getTransaction().commit();
									
									entitymanager3.close();
									emfactory3.close();
									//log
									logList.add(stdNo+"'s AnnualScoresTotal scores entries cleared - SUCCESS!");
								}
								catch(Exception astExcept) {
									astExcept.printStackTrace();
									//log
									logList.add(stdNo+"'s AnnualScoresTotal scores entries cleared - FAILURE!");
								}
							}
							
							//AnnualScoreSheetsSummary
							for(AnnualScoreSheetsSummary ass : annualScoresSummary) {
								try {
									EntityManagerFactory emfactory3 = Persistence.createEntityManagerFactory("SchoolMgtSystem");
									EntityManager entitymanager3 = emfactory3.createEntityManager();
									entitymanager3.getTransaction().begin();
									
									AnnualScoreSheetsSummary stdASS = entitymanager3.find(AnnualScoreSheetsSummary.class, ass.getSumId());
									entitymanager3.remove(stdASS);
																		
									entitymanager3.getTransaction().commit();
									
									entitymanager3.close();
									emfactory3.close();
									//log
									logList.add(stdNo+"'s AnnualScoreSheetSummary scores entries cleared - SUCCESS!");
								}
								catch(Exception assExcept) {
									assExcept.printStackTrace();
									//log
									logList.add(stdNo+"'s AnnualScoreSheetSummary scores entries cleared - FAILURE!");
								}
							}
							
							//ScoreSheetsSummary
							for(ScoreSheetsSummary sss : scoresSummary) {
								try {
									EntityManagerFactory emfactory3 = Persistence.createEntityManagerFactory("SchoolMgtSystem");
									EntityManager entitymanager3 = emfactory3.createEntityManager();
									entitymanager3.getTransaction().begin();
									
									ScoreSheetsSummary stdSS = entitymanager3.find(ScoreSheetsSummary.class, sss.getSumId());
									entitymanager3.remove(stdSS);
																		
									entitymanager3.getTransaction().commit();
									
									entitymanager3.close();
									emfactory3.close();
									//log
									logList.add(stdNo+"'s ScoreSheetSummary scores entries cleared - SUCCESS!");
								}
								catch(Exception ssExcept) {
									ssExcept.printStackTrace();
									//log
									logList.add(stdNo+"'s ScoreSheetSummary scores entries cleared - FAILURE!");
								}
							}
							
							//ScoreSheets
							for(ScoreSheets sc : scores) {
								try {
									EntityManagerFactory emfactory3 = Persistence.createEntityManagerFactory("SchoolMgtSystem");
									EntityManager entitymanager3 = emfactory3.createEntityManager();
									entitymanager3.getTransaction().begin();
									
									ScoreSheets stdScore = entitymanager3.find(ScoreSheets.class, sc.getSId());
									entitymanager3.remove(stdScore);
																		
									entitymanager3.getTransaction().commit();
									
									entitymanager3.close();
									emfactory3.close();
									//log
									logList.add(stdNo+"'s PRY scores entries cleared - SUCCESS!");
								}
								catch(Exception scExcept) {
									scExcept.printStackTrace();
									//log
									logList.add(stdNo+"'s PRY scores entries cleared - FAILURE!");
								}
							}
							
						}
						else {
							Alert alert3 = new Alert(Alert.AlertType.INFORMATION);
							alert3.setContentText(stdNo +" is obviously in error class and thus has no academic"
									+ " records. StdClassId: "+stdClassId + ". Click OK to continue...");
							Optional<ButtonType> result3 = alert3.showAndWait();
							if(result3.get() == ButtonType.OK) {
								alert3.close();
							}
							else {
								alert3.close();
							}
							
							//log
							logList.add(stdNo+" obviously in error class - FAILURE!");
						}
						
						//output the log
						String str = "";
						for(String st : logList) {
							str = str + st + "\n";
						}
						Alert alert4 = new Alert(Alert.AlertType.INFORMATION);
						alert4.setContentText(str);
						Optional<ButtonType> result4 = alert4.showAndWait();
						if(result4.get() == ButtonType.OK) {
							alert4.close();
						}
						else {
							alert4.close();
						}
						
					}
					catch(Exception realDealExcept) {
						realDealExcept.printStackTrace();
						Alert alert2 = new Alert(Alert.AlertType.ERROR);
						alert2.setContentText("Deletion Error: "+ realDealExcept.getMessage());
						Optional<ButtonType> result2 = alert2.showAndWait();
						if(result2.get() == ButtonType.OK) {
							alert2.close();
						}
						else {
							alert2.close();
						}
					}
					finally {
						studentSurNameTF.clear();
						studentOtherNamesTF.clear();
					}
				
				}
				else {
					alert.close();
				}
			}
//			else {
//				Alert alert = new Alert(Alert.AlertType.ERROR);
//				alert.setContentText("Error: You cannot delete a student with a non-zero balance!");
//				Optional<ButtonType> result = alert.showAndWait();
//				if(result.get() == ButtonType.OK) {
//					alert.close();
//				}
//				else {
//					alert.close();
//				}
//			}
		}
		catch(Exception newDelExcept) {
			newDelExcept.printStackTrace();
			Alert alert = new Alert(Alert.AlertType.ERROR);
			alert.setContentText("Error: "+ newDelExcept.getMessage());
			Optional<ButtonType> result = alert.showAndWait();
			if(result.get() == ButtonType.OK) {
				alert.close();
			}
			else {
				alert.close();
			}
		}
	}
	
	@FXML
	public void ValidateStudent(ActionEvent event) {
		try {
			findStudent(studentId);
		}
		catch(Exception e) {
			String str = e.getMessage();
			studentId.setText("Error: "+ str);
			studentSurNameTF.clear();
			studentOtherNamesTF.clear();
		}
	}
	
	@FXML public void initDelete(MouseEvent event) {
		String stdNo = studentId.getText().toUpperCase();
		String sName, oNames;
		EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
		EntityManager entitymanager = emfactory.createEntityManager();
		entitymanager.getTransaction().begin();
		
		Students std = entitymanager.find(Students.class, stdNo);
		sName = std.getSurName();
		oNames = std.getOtherNames();
		
		studentSurNameTF.setText(sName);
		studentOtherNamesTF.setText(oNames);
		
		entitymanager.getTransaction().commit();
		
		entitymanager.close();
		emfactory.close();
	}
	
	public void findStudent(TextField id) {
		String sName, oNames;
		EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
		EntityManager entitymanager = emfactory.createEntityManager();
		entitymanager.getTransaction().begin();
		
		String id2 = id.getText();
		
		Students std = entitymanager.find(Students.class, id2);
		sName = std.getSurName();
		oNames = std.getOtherNames();
		
		studentSurNameTF.setText(sName);
		studentOtherNamesTF.setText(oNames);
		
		entitymanager.getTransaction().commit();
		
		entitymanager.close();
		emfactory.close();
	}
	
	//ScoreSheets Controller
	@FXML protected TextField stdId_TF;
	@FXML protected ComboBox<String> stdClass_TF, term_TF;
	@FXML protected ComboBox<String> subjectCode_TF;
	@FXML private TextField CA1_TF, CA2_TF, CA3_TF, examScore_TF, total_TF; // name_TF;
	@FXML private ComboBox<String> grade_TF, name_TF, subjectName_TF; //classLetter_TF;
	//@FXML private TextField subjectName_TF;
	@FXML private TextField sId_TF;
	@FXML private ComboBox<String> scoresYear_TF;
	@FXML private TextField ASS1_TF, ASS2_TF, ASS3_TF, PRJ1_TF, PRJ2_TF, PRJ3_TF;
	
	ObservableList<String> classL = FXCollections.observableArrayList("A","A'","B","B'","C","C'","D",
			"E","F","G","H","I","J","K","L");
	ObservableList<String> gradeL = FXCollections.observableArrayList("A","B","C","D",
			"E","F");
	ObservableList<String> stdClassN = FXCollections.observableArrayList("JSS1","JSS2","JSS3",
			"SSS1","SSS2","SSS3");
	ObservableList<String> termN = FXCollections.observableArrayList("1","2","3");
	ObservableList<String> termN2 = FXCollections.observableArrayList("All","1","2","3");
	ObservableList<String> subjectCodeN = FXCollections.observableArrayList("1","2","3","4","5",
			"6","7","8","9","10","11","12","13","14","15","16","17","19","20");
	ObservableList<String> years = FXCollections.observableArrayList("2017","2018","2019","2020",
			"2021","2022","2023","2024","2025","2026","2027","2028","2029",
			"2030","2031","2032","2033","2034","2035","2036","2037","2038","2039","2040",
			"2041","2042","2043","2044","2045","2046","2047","2048","2049","2050",
			"2051","2052","2053","2054","2055","2056","2057","2058","2059","2060",
			"2061","2062","2063","2064","2065","2066","2067","2068","2069","2070",
			"2071","2072","2073","2074","2075","2076","2077","2078","2079","2080",
			"2081","2082","2083","2084","2085","2086","2087","2088","2089","2090",
			"2091","2092","2093","2094","2095","2096","2097","2098","2099","2100");
	ObservableList<String> borderStatus = FXCollections.observableArrayList("Day","Border");
	ObservableList<String> nameCombo = FXCollections.observableArrayList();
	ObservableList<String> subjCombo = FXCollections.observableArrayList();
	 
	
	@FXML private Label CA1_LBL, CA2_LBL, CA3_LBL, ASS1_LBL, ASS2_LBL, ASS3_LBL, ASS4_LBL, ASS5_LBL, ASS6_LBL;
	
	@FXML
	public void initialize3(MouseEvent event) {
		
		//search by name
		Vector<Students> userData2 = new Vector<>();
		try {
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			Query query2 =
					entitymanager.createQuery("select e from Students e ");
			userData2 = (Vector<Students>) query2.getResultList();
			
			for(Students x : userData2) {
				if(!(nameCombo.contains(x.getOtherNames()+ " "+ x.getSurName()))) {
					nameCombo.add(x.getOtherNames()+ " "+ x.getSurName());
				}
			}
			
			name_TF.setItems(nameCombo);
			
			entitymanager.getTransaction().commit();
			entitymanager.close();
			emfactory.close();
			
			new AutoCompleteComboBoxListener<>(name_TF);
		}
		catch(Exception e) {
			e.printStackTrace();
		}
		
		if(!(name_TF.getValue().isEmpty())) {
			String name = name_TF.getValue();
			for(Students std : userData2) {
				if((std.getOtherNames()+ " " + std.getSurName()).equals(name)) {
					
					stdId_TF.setText(std.getId());
					
					String newClass = "";
					
					String id = std.getId();
					EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
					EntityManager entitymanager = emfactory.createEntityManager();
					entitymanager.getTransaction().begin();
					
					Students stdz = entitymanager.find(Students.class, id);
					
					newClass = stdz.getEntryClassAssigned();
					
					EntityManagerFactory emfactory2 = Persistence.createEntityManagerFactory("SchoolMgtSystem");
					EntityManager entitymanager2 = emfactory2.createEntityManager();
					entitymanager2.getTransaction().begin();
					
					StudentClasses stdClass = entitymanager2.find(StudentClasses.class, newClass);

					stdClass_TF.setValue(stdClass.getClassNo()+stdClass.getClassLetter());
					scoresYear_TF.setValue(stdClass.getYear());
					term_TF.setValue(stdClass.getTerm());
					
					entitymanager2.getTransaction().commit();
					
					entitymanager2.close();
					emfactory2.close();
					
					
					entitymanager.getTransaction().commit();
					
					entitymanager.close();
					emfactory.close();
				}
			}
		}
	}
	
	public void searchByName(TextField textField, ComboBox<String> comboName, ObservableList<String> observableList) {
		//search by name
		Vector<Students> userData2 = new Vector<>();
		try {
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			Query query2 =
					entitymanager.createQuery("select e from Students e ");
			userData2 = (Vector<Students>) query2.getResultList();
			
			for(Students x : userData2) {
				if(!(observableList.contains(x.getOtherNames()+ " "+ x.getSurName()))) {
					observableList.add(x.getOtherNames()+ " "+ x.getSurName());
				}
			}
			
			comboName.setItems(observableList);
			
			entitymanager.getTransaction().commit();
			entitymanager.close();
			emfactory.close();
			
			new AutoCompleteComboBoxListener<>(comboName);
		}
		catch(Exception e) {
			e.printStackTrace();
		}
		
		if(!(comboName.getValue().isEmpty())) {
			String name = comboName.getValue();
			for(Students std : userData2) {
				if((std.getOtherNames()+ " " + std.getSurName()).equals(name)) {
					
					textField.setText(std.getId());
				}
			}
		}
	}
	
	@FXML public void initialize3Subj(MouseEvent event) {
		
		
		//search by subject name
		Vector<SubjectNames> userData3 = new Vector<>();
		if(dispUserClass.equals("Teacher")) {
			String user = dispUserName;
			String staffId = "";
			
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			Query query2 =
					entitymanager.createQuery("select e from SubjectNames e ");
			userData3 = (Vector<SubjectNames>) query2.getResultList();
			
			Users usr = entitymanager.find(Users.class, user);
			
			staffId = usr.getUserStaffID();
			
			entitymanager.getTransaction().commit();
			entitymanager.close();
			emfactory.close();
			
			//assigned subjects
			LinkedHashSet<String> subCodeList = new LinkedHashSet<>();
			LinkedHashSet<String> subList = new LinkedHashSet<>();
			
			EntityManagerFactory emfactorys = Persistence.createEntityManagerFactory("SchoolMgtSystem");
			EntityManager entitymanagers = emfactorys.createEntityManager();
			entitymanagers.getTransaction().begin();
			
			AssignedSubjects sub = entitymanagers.find(AssignedSubjects.class, staffId);
			
			subCodeList = sub.getSubjectCodeList();
			subList = sub.getSubjectList();
			
			entitymanagers.getTransaction().commit();
			entitymanagers.close();
			emfactorys.close();
			
			for(String code : subCodeList) {
				EntityManagerFactory emfactoryy = Persistence.createEntityManagerFactory("SchoolMgtSystem");
				EntityManager entitymanagery = emfactoryy.createEntityManager();
				entitymanagery.getTransaction().begin();
				
				SubjectNames subName = entitymanagery.find(SubjectNames.class, Integer.parseInt(code));
				
				if(!(subjCombo.contains(subName.getSubjectName()))) {
					subjCombo.add(subName.getSubjectName());
				}
				
				entitymanagery.getTransaction().commit();
				entitymanagery.close();
				emfactoryy.close();
			}
			
			subjectName_TF.setItems(subjCombo);
			new AutoCompleteComboBoxListener<>(subjectName_TF);
			
			if(!(subjectName_TF.getValue().isEmpty())) {
				String name = subjectName_TF.getValue();
				for(SubjectNames std : userData3) {
					if((std.getSubjectName().equals(name))) {
						subjectCode_TF.setValue(String.valueOf(std.getSubjectCode()));
					}
				}
			}
			
		}
		else {
			
			subjectCode_TF.setItems(subjectCodeN);
			
			try {
				EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
				EntityManager entitymanager = emfactory.createEntityManager();
				entitymanager.getTransaction().begin();
				
				Query query2 =
						entitymanager.createQuery("select e from SubjectNames e ");
				userData3 = (Vector<SubjectNames>) query2.getResultList();
				
				for(SubjectNames x : userData3) {
					if(!(subjCombo.contains(x.getSubjectName()))) {
						subjCombo.add(x.getSubjectName());
					}
				}
				
				subjectName_TF.setItems(subjCombo);
				
				entitymanager.getTransaction().commit();
				entitymanager.close();
				emfactory.close();
				
				new AutoCompleteComboBoxListener<>(subjectName_TF);
			}
			catch(Exception e) {
				e.printStackTrace();
			}
			
			if(!(subjectName_TF.getValue().isEmpty())) {
				String name = subjectName_TF.getValue();
				for(SubjectNames std : userData3) {
					if((std.getSubjectName().equals(name))) {
						subjectCode_TF.setValue(String.valueOf(std.getSubjectCode()));
					}
				}
			}
		}
	}
		
	Tooltip tip1 = new Tooltip("score must be >= 0 and <= 10");
	Tooltip tip2 = new Tooltip("score must be >= 0 and <= 70");
	Tooltip tip3 = new Tooltip("score must be >= 0 and <= 5");
	
	@FXML 
	public void initialize4(MouseEvent event) {
		CA1_TF.setTooltip(tip1);
		CA2_TF.setTooltip(tip1);
		CA3_TF.setTooltip(tip1);
		examScore_TF.setTooltip(tip2);
		ASS1_TF.setTooltip(tip3);
		ASS2_TF.setTooltip(tip3);
		ASS3_TF.setTooltip(tip3);
		PRJ1_TF.setTooltip(tip3);
		PRJ2_TF.setTooltip(tip3);
		PRJ3_TF.setTooltip(tip3);
	}
	
	@FXML
	public void initialize5(MouseEvent event) {
		String cmpVal = stdClass_TF.getValue();
		try {
			if(cmpVal.contains("JSS")){  //.equals("JSS1") || cmpVal.equals("JSS2") || cmpVal.equals("JSS3")) {
				
				CA1_TF.setText(String.valueOf(0));
				CA2_TF.setText(String.valueOf(0));
				CA3_TF.setText(String.valueOf(0));
				
				CA1_LBL.setVisible(false);
				CA1_TF.setDisable(true);
				CA2_LBL.setVisible(false);
				CA2_TF.setDisable(true);
				CA3_LBL.setVisible(false);
				CA3_TF.setDisable(true);
				
				ASS1_LBL.setVisible(true);
				ASS1_TF.setDisable(false);
				ASS2_LBL.setVisible(true);
				PRJ1_TF.setDisable(false);
				ASS3_LBL.setVisible(true);
				ASS2_TF.setDisable(false);
				ASS4_LBL.setVisible(true);
				PRJ2_TF.setDisable(false);
				ASS5_LBL.setVisible(true);
				ASS3_TF.setDisable(false);
				ASS6_LBL.setVisible(true);
				PRJ3_TF.setDisable(false);
			}
			else {
				//
			}
			if (cmpVal.contains("SSS")) { //.equals("SSS1") || cmpVal.equals("SSS2") || cmpVal.equals("SSS3")){
				
				ASS1_TF.setText(String.valueOf(0));
				PRJ1_TF.setText(String.valueOf(0));
				ASS2_TF.setText(String.valueOf(0));
				PRJ2_TF.setText(String.valueOf(0));
				ASS3_TF.setText(String.valueOf(0));
				PRJ3_TF.setText(String.valueOf(0));
				
				ASS1_LBL.setVisible(false);
				ASS1_TF.setDisable(true);
				ASS2_LBL.setVisible(false);
				PRJ1_TF.setDisable(true);
				ASS3_LBL.setVisible(false);
				ASS2_TF.setDisable(true);
				ASS4_LBL.setVisible(false);
				PRJ2_TF.setDisable(true);
				ASS5_LBL.setVisible(false);
				ASS3_TF.setDisable(true);
				ASS6_LBL.setVisible(false);
				PRJ3_TF.setDisable(true);
				
				CA1_LBL.setVisible(true);
				CA1_TF.setDisable(false);
				CA2_LBL.setVisible(true);
				CA2_TF.setDisable(false);
				CA3_LBL.setVisible(true);
				CA3_TF.setDisable(false);
			}
			else {
				//
			}
			
			
			
			if((Double.parseDouble(CA1_TF.getText()) >= 0) && 
					(Double.parseDouble(CA1_TF.getText()) <= 10)) {
				//do nothing
			}
			else {
				CA1_TF.setText("invalid");
			}
					
			if((Double.parseDouble(CA2_TF.getText()) >= 0) && 
				(Double.parseDouble(CA2_TF.getText()) <= 10)){
				//do nothing
			}
			else {
				CA2_TF.setText("invalid");
			}
					
			if((Double.parseDouble(CA3_TF.getText()) >= 0) && 
				(Double.parseDouble(CA3_TF.getText()) <= 10)){
				//do nothing
			}
			else {
				CA3_TF.setText("invalid");
			}
					
			if((Double.parseDouble(examScore_TF.getText()) >= 0) && 
					(Double.parseDouble(examScore_TF.getText()) <= 70)) {
				//do nothing
			}
			else {
				examScore_TF.setText("invalid");
			}
			
			if((Double.parseDouble(ASS1_TF.getText()) >= 0) && 
					(Double.parseDouble(ASS1_TF.getText()) <= 5)) {
				//do nothing
			}
			else {
				ASS1_TF.setText("invalid");
			}
			if((Double.parseDouble(ASS2_TF.getText()) >= 0) && 
					(Double.parseDouble(ASS2_TF.getText()) <= 5)) {
				//do nothing
			}
			else {
				ASS2_TF.setText("invalid");
			}
			if((Double.parseDouble(ASS3_TF.getText()) >= 0) && 
					(Double.parseDouble(ASS3_TF.getText()) <= 5)) {
				//do nothing
			}
			else {
				ASS3_TF.setText("invalid");
			}
			if((Double.parseDouble(PRJ1_TF.getText()) >= 0) && 
					(Double.parseDouble(PRJ1_TF.getText()) <= 5)) {
				//do nothing
			}
			else {
				PRJ1_TF.setText("invalid");
			}
			if((Double.parseDouble(PRJ2_TF.getText()) >= 0) && 
					(Double.parseDouble(PRJ2_TF.getText()) <= 5)) {
				//do nothing
			}
			else {
				PRJ2_TF.setText("invalid");
			}
			if((Double.parseDouble(PRJ3_TF.getText()) >= 0) && 
					(Double.parseDouble(PRJ3_TF.getText()) <= 5)) {
				//do nothing
			}
			else {
				PRJ3_TF.setText("invalid");
			}
		}
		catch(Exception e) {
			e.printStackTrace();
		}
	}
		
	@FXML public void verifyIdButton(ActionEvent event) {

		verifyId(stdId_TF.getText());
	}
	
	@FXML public void computeTotalButton(ActionEvent event) {
		String stdClassVal = stdClass_TF.getValue();
		
		try {
			initialize5(null);
		}
		catch(Exception e) {
			e.printStackTrace();
		}
		if (stdClassVal.contains("JSS")) {  //|| stdClassVal.equals("JSS2") || stdClassVal.equals("JSS3")) {
			computeTotalAndGrade(Double.parseDouble(examScore_TF.getText()),
					stdId_TF.getText(),stdClassVal,term_TF.getValue(),
					Integer.parseInt(subjectCode_TF.getValue()),Double.parseDouble(ASS1_TF.getText()),
					Double.parseDouble(ASS2_TF.getText()), Double.parseDouble(ASS3_TF.getText()),
					Double.parseDouble(PRJ1_TF.getText()), Double.parseDouble(PRJ2_TF.getText()),
					Double.parseDouble(PRJ3_TF.getText()));
		}
		
		if (stdClassVal.contains("SSS")) { // || stdClassVal.equals("SSS2") || stdClassVal.equals("SSS3")) {
			computeTotalAndGrade(Double.parseDouble(CA1_TF.getText()),Double.parseDouble(CA2_TF.getText()),
					Double.parseDouble(CA3_TF.getText()),Double.parseDouble(examScore_TF.getText()),
					stdId_TF.getText(),stdClassVal,term_TF.getValue(),
					Integer.parseInt(subjectCode_TF.getValue()));
		}
		
	}
	
	public void computeTotalAndGrade(double exam, String stdId, String stdClass, 
			String term, int subjectCode, double ASS1, double ASS2,
			double ASS3, double PRJ1, double PRJ2, double PRJ3) {
		Double total = ASS1+ ASS2 + ASS3 + PRJ1 + PRJ2 + PRJ3 + exam;
		String str = String.valueOf(total);
		total_TF.setText(str);
		if(total >= 70.0) {
			grade_TF.setValue("A");
		}
		else if(total >= 60 && total < 70) {
			grade_TF.setValue("B");
		}
		else if (total >= 50 && total < 60) {
			grade_TF.setValue("C");
		}
		else if (total >= 40 && total < 50) {
			grade_TF.setValue("D");
		}
		else {
			grade_TF.setValue("E");
		}
		
	}
	
	public void computeTotalAndGrade(double CA1,double CA2,double CA3,double exam,
			String stdId, String stdClass, String term, int subjectCode) {
		Double total = CA1 + CA2 + CA3 + exam;
		String str = String.valueOf(total);
		total_TF.setText(str);
		if(total >= 70.0) {
			grade_TF.setValue("A");
		}
		else if(total >= 60 && total < 70) {
			grade_TF.setValue("B");
		}
		else if (total >= 50 && total < 60) {
			grade_TF.setValue("C");
		}
		else if (total >= 40 && total < 50) {
			grade_TF.setValue("D");
		}
		else {
			grade_TF.setValue("E");
		}
		
	}
	
	@FXML public void verifySubjectButton(ActionEvent event) {
		verifySubjectCode(Integer.parseInt(subjectCode_TF.getValue()));
	}
	
	@FXML public void verifyStdId(MouseEvent event) {
		verifyId(stdId_TF.getText());
	}
	
	@FXML private Button updateScoresBtn2, updateScoresBtn3, updateScoresBtnExam;
	@FXML public void verifyStdSubject(MouseEvent event) {
		//access level definition for teachers
		String stdNo = stdId_TF.getText();
		if(dispUserClass.equals("Teacher")) {
			deleteScoresBtn.setDisable(true);
			updateScoresBtn.setDisable(true);

		}
		else if(dispUserClass.equalsIgnoreCase("AdmissionOfficer")) {
			deleteScoresBtn.setDisable(true);
			updateScoresBtn.setDisable(true);
		}
		else {
			//
		}
		
		verifyId(stdNo);
		
		//search by name
		Vector<Students> userData2 = new Vector<>();
		try {
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			Query query2 =
					entitymanager.createQuery("select e from Students e ");
			userData2 = (Vector<Students>) query2.getResultList();
			
//			for(Students x : userData2) {
//				if(!(nameCombo.contains(x.getOtherNames()+ " "+ x.getSurName()))) {
//					nameCombo.add(x.getOtherNames()+ " "+ x.getSurName());
//				}
//			}
//			
//			name_TF.setItems(nameCombo);
			
			entitymanager.getTransaction().commit();
			entitymanager.close();
			emfactory.close();
			
//			new AutoCompleteComboBoxListener<>(name_TF);
		}
		catch(Exception e) {
			e.printStackTrace();
		}
		
		if(!(name_TF.getValue().isEmpty())) {
			String name = name_TF.getValue();
			for(Students std : userData2) {
				if((std.getOtherNames()+ " " + std.getSurName()).equals(name)) {
					stdId_TF.setText(std.getId());
					
					String newClass = "";
					
					String id = std.getId();
					EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
					EntityManager entitymanager = emfactory.createEntityManager();
					entitymanager.getTransaction().begin();
					
					Students stdz = entitymanager.find(Students.class, id);
					
					newClass = stdz.getEntryClassAssigned();
					
					EntityManagerFactory emfactory2 = Persistence.createEntityManagerFactory("SchoolMgtSystem");
					EntityManager entitymanager2 = emfactory2.createEntityManager();
					entitymanager2.getTransaction().begin();
					
					StudentClasses stdClass = entitymanager2.find(StudentClasses.class, newClass);

					stdClass_TF.setValue(stdClass.getClassNo()+stdClass.getClassLetter());
					scoresYear_TF.setValue(stdClass.getYear());
					term_TF.setValue(stdClass.getTerm());
					
					entitymanager2.getTransaction().commit();
					
					entitymanager2.close();
					emfactory2.close();
					
					
					entitymanager.getTransaction().commit();
					
					entitymanager.close();
					emfactory.close();
				}
			}
		}
		
		//search by subject name
		Vector<SubjectNames> userData3 = new Vector<>();
		try {
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			Query query2 =
					entitymanager.createQuery("select e from SubjectNames e ");
			userData3 = (Vector<SubjectNames>) query2.getResultList();
			
//			for(SubjectNames x : userData3) {
//				if(!(subjCombo.contains(x.getSubjectName()))) {
//					subjCombo.add(x.getSubjectName());
//				}
//			}
//			
//			subjectName_TF.setItems(subjCombo);
			
			entitymanager.getTransaction().commit();
			entitymanager.close();
			emfactory.close();
			
//			new AutoCompleteComboBoxListener<>(subjectName_TF);
			
		}
		catch(Exception e) {
			e.printStackTrace();
		}
		
		try {
			if(!(subjectName_TF.getValue().isEmpty())) {
				String name = subjectName_TF.getValue();
				for(SubjectNames std : userData3) {
					if((std.getSubjectName().equals(name))) {
						subjectCode_TF.setValue(String.valueOf(std.getSubjectCode()));
					}
				}
			}
		}
		catch(Exception fe) {
			fe.printStackTrace();
		}
		
		String stdClassVal = stdClass_TF.getValue();
		
		try {
			verifySubjectCode(Integer.parseInt(subjectCode_TF.getValue()));
			
			if(stdClassVal.contains("JSS")) { 
				
				CA1_TF.setText(String.valueOf(0));
				CA2_TF.setText(String.valueOf(0));
				CA3_TF.setText(String.valueOf(0));
				//examScore_TF.setText(String.valueOf(0));
				
				CA1_LBL.setVisible(false);
				CA1_TF.setDisable(true);
				CA2_LBL.setVisible(false);
				CA2_TF.setDisable(true);
				CA3_LBL.setVisible(false);
				CA3_TF.setDisable(true);
				
				ASS1_LBL.setVisible(true);
				ASS1_TF.setDisable(false);
				ASS2_LBL.setVisible(true);
				PRJ1_TF.setDisable(false);
				ASS3_LBL.setVisible(true);
				ASS2_TF.setDisable(false);
				ASS4_LBL.setVisible(true);
				PRJ2_TF.setDisable(false);
				ASS5_LBL.setVisible(true);
				ASS3_TF.setDisable(false);
				ASS6_LBL.setVisible(true);
				PRJ3_TF.setDisable(false);
				
				computeTotalAndGrade(Double.parseDouble(examScore_TF.getText()),
						stdId_TF.getText(),stdClassVal,term_TF.getValue(),
						Integer.parseInt(subjectCode_TF.getValue()),Double.parseDouble(ASS1_TF.getText()),
						Double.parseDouble(ASS2_TF.getText()), Double.parseDouble(ASS3_TF.getText()),
						Double.parseDouble(PRJ1_TF.getText()), Double.parseDouble(PRJ2_TF.getText()),
						Double.parseDouble(PRJ3_TF.getText()));
			}
			else {
				
				ASS1_TF.setText(String.valueOf(0));
				PRJ1_TF.setText(String.valueOf(0));
				ASS2_TF.setText(String.valueOf(0));
				PRJ2_TF.setText(String.valueOf(0));
				ASS3_TF.setText(String.valueOf(0));
				PRJ3_TF.setText(String.valueOf(0));
				//examScore_TF.setText(String.valueOf(0));
				
				ASS1_LBL.setVisible(false);
				ASS1_TF.setDisable(true);
				ASS2_LBL.setVisible(false);
				PRJ1_TF.setDisable(true);
				ASS3_LBL.setVisible(false);
				ASS2_TF.setDisable(true);
				ASS4_LBL.setVisible(false);
				PRJ2_TF.setDisable(true);
				ASS5_LBL.setVisible(false);
				ASS3_TF.setDisable(true);
				ASS6_LBL.setVisible(false);
				PRJ3_TF.setDisable(true);
				
				CA1_LBL.setVisible(true);
				CA1_TF.setDisable(false);
				CA2_LBL.setVisible(true);
				CA2_TF.setDisable(false);
				CA3_LBL.setVisible(true);
				CA3_TF.setDisable(false);
				
				computeTotalAndGrade(Double.parseDouble(CA1_TF.getText()),Double.parseDouble(CA2_TF.getText()),
						Double.parseDouble(CA3_TF.getText()),Double.parseDouble(examScore_TF.getText()),
						stdId_TF.getText(),stdClassVal,term_TF.getValue(),
						Integer.parseInt(subjectCode_TF.getValue()));
			}
		}
		catch(Exception sub) {
			sub.printStackTrace();
		}
		
	}
	
	@FXML public void saveScoresButton(ActionEvent event) {
		
		try {
			String idVerify = stdId_TF.getText().toUpperCase();
			String scoreYrVerify = scoresYear_TF.getValue().trim().toUpperCase();
			String termVerify = term_TF.getValue();
			String subjCodeV = subjectCode_TF.getValue();
			String subjNameV = subjectName_TF.getValue();

			String stdClassVal2 = stdClass_TF.getValue().trim().toUpperCase();
			
			String stdClassId = stdClassVal2+scoreYrVerify+termVerify;
//			String stdClassVal = getPrimeClassOnly(stdClassId, scoreYrVerify, termVerify, stdClassVal2);
			String stdClassVal = getPrimeClass(stdClassVal2);
			
			if(!idVerify.contains("ERROR") && !stdClassVal.contains("ERROR") && 
					!scoreYrVerify.contains("CLASS") && termVerify.trim().length() == 1 && 
					!subjCodeV.contains("select") && !subjNameV.contains("select")) {
				
				try {
					try {
						initialize5(null);
					}
					catch(Exception e) {
						e.printStackTrace();
					}
					verifyId(stdId_TF.getText());
					verifySubjectCode(Integer.parseInt(subjectCode_TF.getValue()));
					
					CreateScores scores = new CreateScores();
					
					String str2 = stdId_TF.getText();
					int numTail = 0;
					if(stdClassVal.contains("JSS")) {
						numTail = 1;
					}
					else if(stdClassVal.contains("SSS")){
						numTail = 2;
					}
					
					String str = stdId_TF.getText() + stdClassVal + term_TF.getValue()
							+ subjectCode_TF.getValue()+scoresYear_TF.getValue()+String.valueOf(numTail);
					
					sId_TF.setText(str);
					
					if(stdClassVal.contains("JSS")) { 
						
						String stdNumber = stdId_TF.getText();
						String stdTerm = term_TF.getValue();
						int subjectCode = Integer.parseInt(subjectCode_TF.getValue());
						double ASS1 = Double.parseDouble(ASS1_TF.getText()); 
						double ASS2 = Double.parseDouble(ASS2_TF.getText());
						double ASS3 = Double.parseDouble(ASS3_TF.getText());
						double PRJ1 = Double.parseDouble(PRJ1_TF.getText());
						double PRJ2 = Double.parseDouble(PRJ2_TF.getText());
						double PRJ3 = Double.parseDouble(PRJ3_TF.getText()); 
						double exam = Double.parseDouble(examScore_TF.getText()); 
						
						computeTotalAndGrade(exam, stdNumber, stdClassVal, stdTerm,
							subjectCode, ASS1, ASS2, ASS3, PRJ1, PRJ2, PRJ3);
						
						double total = Double.parseDouble(total_TF.getText());
						String grade = grade_TF.getValue();
						String name = name_TF.getValue(); 
						String subjectName = subjectName_TF.getValue();
						String sid = sId_TF.getText(); 
						String year = scoresYear_TF.getValue();
						
						try {
							if(stdId_TF.getText().trim().length() != 0 && stdClassVal.trim().length() != 0 && 
									term_TF.getValue().trim().length() != 0 && subjectCode_TF.getValue().trim().length() != 0 && 
									ASS1_TF.getText().trim().length() != 0 && ASS2_TF.getText().trim().length() != 0 &&
									ASS3_TF.getText().trim().length() != 0 && PRJ1_TF.getText().trim().length() != 0 &&
									PRJ2_TF.getText().trim().length() != 0 && PRJ3_TF.getText().trim().length() != 0 &&
									examScore_TF.getText().trim().length() != 0 && total_TF.getText().trim().length() != 0 &&
									grade_TF.getValue().trim().length() != 0 && name_TF.getValue().trim().length() != 0 &&
									subjectName_TF.getValue().trim().length() != 0 && scoresYear_TF.getValue().trim().length() != 0 && 
									!Double.isNaN(Double.parseDouble(ASS1_TF.getText().trim())) && 
									!Double.isNaN(Double.parseDouble(ASS2_TF.getText().trim())) && 
									!Double.isNaN(Double.parseDouble(ASS3_TF.getText().trim())) &&
									!Double.isNaN(Double.parseDouble(PRJ1_TF.getText().trim())) && 
									!Double.isNaN(Double.parseDouble(PRJ2_TF.getText().trim())) && 
									!Double.isNaN(Double.parseDouble(PRJ3_TF.getText().trim())) && 
									!Double.isNaN(Double.parseDouble(examScore_TF.getText().trim())) && 
									!Double.isNaN(Double.parseDouble(total_TF.getText().trim()))  && 
									Double.parseDouble(ASS1_TF.getText().trim()) >= 0 && Double.parseDouble(ASS1_TF.getText().trim()) <= 5 && 
									Double.parseDouble(ASS2_TF.getText().trim()) >= 0 && Double.parseDouble(ASS2_TF.getText().trim()) <= 5 && 
									Double.parseDouble(ASS3_TF.getText().trim()) >= 0 && Double.parseDouble(ASS3_TF.getText().trim()) <= 5 && 
									Double.parseDouble(PRJ1_TF.getText().trim()) >= 0 && Double.parseDouble(PRJ1_TF.getText().trim()) <= 5 && 
									Double.parseDouble(PRJ2_TF.getText().trim()) >= 0 && Double.parseDouble(PRJ2_TF.getText().trim()) <= 5 && 
									Double.parseDouble(PRJ3_TF.getText().trim()) >= 0 && Double.parseDouble(PRJ3_TF.getText().trim()) <= 5 && 
									Double.parseDouble(examScore_TF.getText().trim()) >= 0 && Double.parseDouble(examScore_TF.getText().trim()) <= 70 && 
									Double.parseDouble(total_TF.getText().trim()) >= 0 && Double.parseDouble(total_TF.getText().trim()) <= 100 ) {
								
								computeTotalAndGrade(Double.parseDouble(examScore_TF.getText()),
										stdId_TF.getText(),stdClassVal,term_TF.getValue(),
										Integer.parseInt(subjectCode_TF.getValue()),Double.parseDouble(ASS1_TF.getText()),
										Double.parseDouble(ASS2_TF.getText()), Double.parseDouble(ASS3_TF.getText()),
										Double.parseDouble(PRJ1_TF.getText()), Double.parseDouble(PRJ2_TF.getText()),
										Double.parseDouble(PRJ3_TF.getText()));
								
								scores.createJssScores(stdNumber, stdClassVal, stdTerm, subjectCode, ASS1, ASS2, ASS3, 
										PRJ1, PRJ2, PRJ3, exam, total, grade, name, subjectName, 
										sid, year, dispName);
								
								scores.createJssScoreSheetsSummary(stdNumber, name, stdClassVal, 
										stdTerm, total, year, dispName);
								
								scores.createJssAnnualScoreSheetsSummary(stdNumber, name, stdClassVal, subjectCode, 
										subjectName, total, year, stdTerm, dispName, stdTerm);
								
								scores.createJssAnnualScoresTotal(stdNumber, name, str, total, year, dispName, stdTerm);
								
								String sstdId = str2;
								String ssId = str;
								
								//CreateScores std = new CreateScores();
								//std.createScoresSID(sstdId, ssId);
							}
							else {
								
								throw new Exception("These fields must not be null and must have the right range of values... "
										+ "stdClass, term, subjectCode, ASS1, ASS2, "
										+ "PRJ1, PRJ2, PRJ3, examScore, total, "
										+ "grade,name, subjectName, scoresYear");
							}
						}
						catch(Exception nullable) {
							//sId_TF.setText(nullable.getMessage());
							
							Alert alert = new Alert(Alert.AlertType.ERROR);
							alert.setContentText("Error: "+ nullable.getMessage());
							Optional<ButtonType> result = alert.showAndWait();
							if(result.get() == ButtonType.OK) {
								alert.close();
							}
							else {
								alert.close();
							}
						}
					}
					
					else if(stdClassVal.contains("SSS")){
						
						String stdNumber = stdId_TF.getText(); 
						String stdTerm = term_TF.getValue();
						int subjectCode = Integer.parseInt(subjectCode_TF.getValue());
						double CA1 = Double.parseDouble(CA1_TF.getText());
						double CA2 = Double.parseDouble(CA2_TF.getText());
						double CA3 = Double.parseDouble(CA3_TF.getText());
						double exam = Double.parseDouble(examScore_TF.getText());
						
						computeTotalAndGrade(CA1, CA2, CA3, exam, stdNumber, stdClassVal, 
								stdTerm, subjectCode);
						
						double total = Double.parseDouble(total_TF.getText());  
						String grade = grade_TF.getValue();
						String name = name_TF.getValue();
						String subjectName = subjectName_TF.getValue(); 
						String sid = sId_TF.getText(); 
						String year = scoresYear_TF.getValue();
						
						try {
							if(stdId_TF.getText().trim().length() != 0 && stdClassVal.trim().length() != 0 && 
									term_TF.getValue().trim().length() != 0 && subjectCode_TF.getValue().trim().length() != 0 && 
									CA1_TF.getText().trim().length() != 0 && CA2_TF.getText().trim().length() != 0 &&
									CA3_TF.getText().trim().length() != 0 && 
									examScore_TF.getText().trim().length() != 0 && total_TF.getText().trim().length() != 0 &&
									grade_TF.getValue().trim().length() != 0 && name_TF.getValue().trim().length() != 0 &&
									subjectName_TF.getValue().trim().length() != 0 && scoresYear_TF.getValue().trim().length() != 0 && 
									!Double.isNaN(Double.parseDouble(CA1_TF.getText().trim())) && 
									!Double.isNaN(Double.parseDouble(CA2_TF.getText().trim())) && 
									!Double.isNaN(Double.parseDouble(CA3_TF.getText().trim())) &&
									!Double.isNaN(Double.parseDouble(examScore_TF.getText().trim())) && 
									!Double.isNaN(Double.parseDouble(total_TF.getText().trim()))  && 
									Double.parseDouble(CA1_TF.getText().trim()) >= 0 && Double.parseDouble(CA1_TF.getText().trim()) <= 10 && 
									Double.parseDouble(CA2_TF.getText().trim()) >= 0 && Double.parseDouble(CA2_TF.getText().trim()) <= 10 && 
									Double.parseDouble(CA3_TF.getText().trim()) >= 0 && Double.parseDouble(CA3_TF.getText().trim()) <= 10 && 
									Double.parseDouble(examScore_TF.getText().trim()) >= 0 && Double.parseDouble(examScore_TF.getText().trim()) <= 70 && 
									Double.parseDouble(total_TF.getText().trim()) >= 0 && Double.parseDouble(total_TF.getText().trim()) <= 100 ) {
								
								computeTotalAndGrade(Double.parseDouble(CA1_TF.getText()),Double.parseDouble(CA2_TF.getText()),
										Double.parseDouble(CA3_TF.getText()),Double.parseDouble(examScore_TF.getText()),
										stdId_TF.getText(),stdClassVal,term_TF.getValue(),
										Integer.parseInt(subjectCode_TF.getValue()));
								
								scores.createScores(stdNumber, stdClassVal, stdTerm, subjectCode, CA1, CA2, CA3, exam, 
										total, grade, name, subjectName, sid, year, dispName);
								
								scores.createScoreSheetsSummary(stdNumber, name, stdClassVal, stdTerm, total, year, dispName);
								
								scores.createAnnualScoreSheetsSummary(stdNumber, name, stdClassVal, subjectCode,
										subjectName, total, year, stdTerm, dispName, stdTerm);
								
								scores.createAnnualScoresTotal(stdNumber, name, stdClassVal, total, year, dispName, stdTerm);
								
								
								String sstdId = str2;
								String ssId = str;
								
								//CreateScores std = new CreateScores();
								//std.createScoresSID(sstdId, ssId);
							}
							else {
								throw new Exception("These fields must not be null and must have the right range of values..."
										+ "stdId, stdClass, term, subjectCode, CA1, CA2, "
										+ "CA3, examScore, total, "
										+ "grade,name, "
										+ "subjectName, scoresYear");
							}
						}
						catch(Exception nullable) {
							//sId_TF.setText(nullable.getMessage());
							
							Alert alert = new Alert(Alert.AlertType.ERROR);
							alert.setContentText("Error: "+ nullable.getMessage());
							Optional<ButtonType> result = alert.showAndWait();
							if(result.get() == ButtonType.OK) {
								alert.close();
							}
							else {
								alert.close();
							}
						}
					}
					
					stdClass_TF.setValue("select option");
					term_TF.setValue("select option");
					subjectCode_TF.setValue("select option");
					CA1_TF.setText(String.valueOf(0));
					CA2_TF.setText(String.valueOf(0));
					CA3_TF.setText(String.valueOf(0));
					ASS1_TF.setText(String.valueOf(0));
					ASS2_TF.setText(String.valueOf(0));
					ASS3_TF.setText(String.valueOf(0));
					PRJ1_TF.setText(String.valueOf(0));
					PRJ2_TF.setText(String.valueOf(0));
					PRJ3_TF.setText(String.valueOf(0));
					examScore_TF.setText(String.valueOf(0));
					total_TF.setText(String.valueOf(0));
					grade_TF.setValue("Grade");
					name_TF.setValue("select name");
					subjectName_TF.setValue("select subject");
					scoresYear_TF.setValue("select option");
				}
				catch(Exception e) {
					//sId_TF.setText("Error: "+e.getLocalizedMessage());
					//e.printStackTrace();
					Alert alert = new Alert(Alert.AlertType.ERROR);
					alert.setContentText("Error: "+ e.getMessage());
					Optional<ButtonType> result = alert.showAndWait();
					if(result.get() == ButtonType.OK) {
						alert.close();
					}
					else {
						alert.close();
					}
				}
				
			}
			else {
				Alert alert = new Alert(Alert.AlertType.ERROR);
				alert.setContentText("Error: select or enter correct parameters...");
				Optional<ButtonType> result = alert.showAndWait();
				if(result.get() == ButtonType.OK) {
					alert.close();
				}
				else {
					alert.close();
				}
			}
		}
		catch(Exception fte) {
			Alert alert = new Alert(Alert.AlertType.ERROR);
			alert.setContentText("Error: "+ fte.getMessage());
			Optional<ButtonType> result = alert.showAndWait();
			if(result.get() == ButtonType.OK) {
				alert.close();
			}
			else {
				alert.close();
			}
		}
	}
	
	
	public void verifyId(String stdId) {
		try {
			String sName, oNames, newClass;
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			Students std = entitymanager.find(Students.class, stdId);
			sName = std.getSurName();
			oNames = std.getOtherNames();
			
			name_TF.setValue(oNames+" "+sName);
			
			newClass = std.getEntryClassAssigned();
			
			EntityManagerFactory emfactory2 = Persistence.createEntityManagerFactory("SchoolMgtSystem");
			EntityManager entitymanager2 = emfactory2.createEntityManager();
			entitymanager2.getTransaction().begin();
			
			StudentClasses stdClass = entitymanager2.find(StudentClasses.class, newClass);

			stdClass_TF.setValue(stdClass.getClassNo()+stdClass.getClassLetter());
			scoresYear_TF.setValue(stdClass.getYear());
			term_TF.setValue(stdClass.getTerm());
			
			entitymanager2.getTransaction().commit();
			
			entitymanager2.close();
			emfactory2.close();
			
			
			entitymanager.getTransaction().commit();
			
			entitymanager.close();
			emfactory.close();
		}
		catch(Exception e) {
			//sId_TF.setText("Error: "+ e.getLocalizedMessage());
//			stdClass_TF.setValue("select class");
//			scoresYear_TF.setValue("select year");
//			term_TF.setValue("select term");
			e.printStackTrace();
			
		}
	}
	
	public void verifySubjectCode(Integer subCode) {
		try {
			String sbj;
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			SubjectNames subj = entitymanager.find(SubjectNames.class, subCode);
			sbj = subj.getSubjectName();
			
			subjectName_TF.setValue(sbj);
			
			entitymanager.getTransaction().commit();
			
			entitymanager.close();
			emfactory.close();
		}
		catch(Exception e) {
//			stdId_TF.setText("Error: "+ e.getMessage());
//			subjectName_TF.setValue("select subject");
			Alert alert = new Alert(Alert.AlertType.ERROR);
			alert.setContentText("Error: "+ e.getMessage()+" select a subject...");
			Optional<ButtonType> result = alert.showAndWait();
			if(result.get() == ButtonType.OK) {
				alert.close();
			}
			else {
				alert.close();
			}
		}
	}
	
	@FXML public void validateScoresButton(ActionEvent event) {
		
		String scoreYrVerify = scoresYear_TF.getValue().trim().toUpperCase();
		String termVerify = term_TF.getValue();

		String stdClassVal2 = stdClass_TF.getValue().trim().toUpperCase();
		
		String stdClassId = stdClassVal2+scoreYrVerify+termVerify;
//		String stdClassVal = getPrimeClassOnly(stdClassId, scoreYrVerify, termVerify, stdClassVal2);
		String stdClassVal = getPrimeClass(stdClassVal2);
		
		//String str2 = stdId_TF.getText();
		int numTail = 0;
		if(stdClassVal.contains("JSS")) {
			numTail = 1;
		}
		else if(stdClassVal.contains("SSS")) {
			numTail = 2;
		}
		
		String str = stdId_TF.getText() + stdClassVal + term_TF.getValue()
				+ subjectCode_TF.getValue()+scoresYear_TF.getValue()+String.valueOf(numTail);
		
		//sId_TF.setText(str);
		if(sId_TF.getText().trim().length() == 0) {
			sId_TF.setText(str);
		}
		else if(sId_TF.getText().trim().equalsIgnoreCase("Error: null")) {
			sId_TF.setText(str);
		}
		
		String idX = sId_TF.getText();
		if(idX.charAt(idX.length()-1) == '1') {
			try {
				EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
				EntityManager entitymanager = emfactory.createEntityManager();
				entitymanager.getTransaction().begin();
				
				JssScoreSheets scores = entitymanager.find(JssScoreSheets.class, idX);
				
				String stdClassIn = scores.getStdClass();
				
				String stdClassVal3 = getPrimeClassReverse(stdClassIn);
				
				stdId_TF.setText(scores.getStdId()); 
				stdClass_TF.setValue(stdClassVal3);
				term_TF.setValue(scores.getTerm());
				subjectCode_TF.setValue(String.valueOf(scores.getSubjectCode()));
				ASS1_TF.setText(String.valueOf(scores.getCA1())); 
				ASS2_TF.setText(String.valueOf(scores.getCA2())); 
				ASS3_TF.setText(String.valueOf(scores.getCA3()));
				PRJ1_TF.setText(String.valueOf(scores.getCA4()));
				PRJ2_TF.setText(String.valueOf(scores.getCA5()));
				PRJ3_TF.setText(String.valueOf(scores.getCA6()));
				examScore_TF.setText(String.valueOf(scores.getExamScore()));
				total_TF.setText(String.valueOf(scores.getTotal()));
				grade_TF.setValue(scores.getGrade());
				name_TF.setValue(scores.getName());
				subjectName_TF.setValue(scores.getSubjectName());
				scoresYear_TF.setValue(scores.getScoresYear());
				
				entitymanager.getTransaction().commit();
				
				entitymanager.close();
				emfactory.close();
			}
			catch(Exception e) {
				Alert alert = new Alert(Alert.AlertType.ERROR);
				alert.setContentText("Error: "+ e.getMessage());
				Optional<ButtonType> result = alert.showAndWait();
				if(result.get() == ButtonType.OK) {
					
					stdClass_TF.setValue("select option");
					term_TF.setValue("select option");
					subjectCode_TF.setValue("select option");
					grade_TF.setValue("Grade");
					
					CA1_TF.setText(String.valueOf(0));
					CA2_TF.setText(String.valueOf(0));
					CA3_TF.setText(String.valueOf(0));
					ASS1_TF.setText(String.valueOf(0));
					ASS2_TF.setText(String.valueOf(0));
					ASS3_TF.setText(String.valueOf(0));
					PRJ1_TF.setText(String.valueOf(0));
					PRJ2_TF.setText(String.valueOf(0));
					PRJ3_TF.setText(String.valueOf(0));
					examScore_TF.setText(String.valueOf(0));
					total_TF.setText(String.valueOf(0));
					
					name_TF.setValue("select name");
					subjectName_TF.setValue("select subject");
					scoresYear_TF.setValue("select option");
					
					alert.close();
				}
				else {
					alert.close();
				}
				
				//stdId_TF.setText("Error: "+ e.getMessage());
			}
		}
		else {
			try {
				EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
				EntityManager entitymanager = emfactory.createEntityManager();
				entitymanager.getTransaction().begin();
				
				ScoreSheets scores = entitymanager.find(ScoreSheets.class, idX);
				
				String stdClassIn = scores.getStdClass();
				
				stdId_TF.setText(scores.getStdId()); 
				stdClass_TF.setValue(stdClassIn);
				term_TF.setValue(scores.getTerm());
				subjectCode_TF.setValue(String.valueOf(scores.getSubjectCode()));
				CA1_TF.setText(String.valueOf(scores.getCA1()));
				CA2_TF.setText(String.valueOf(scores.getCA2()));
				CA3_TF.setText(String.valueOf(scores.getCA3()));
				examScore_TF.setText(String.valueOf(scores.getExamScore()));
				total_TF.setText(String.valueOf(scores.getTotal()));
				grade_TF.setValue(scores.getGrade());
				name_TF.setValue(scores.getName());
				subjectName_TF.setValue(scores.getSubjectName());
				scoresYear_TF.setValue(scores.getScoresYear());
				
				entitymanager.getTransaction().commit();
				
				entitymanager.close();
				emfactory.close();
			}
			catch(Exception e) {
				Alert alert = new Alert(Alert.AlertType.ERROR);
				alert.setContentText("Error: "+ e.getMessage());
				Optional<ButtonType> result = alert.showAndWait();
				if(result.get() == ButtonType.OK) {
					
					stdClass_TF.setValue("select option");
					term_TF.setValue("select option");
					subjectCode_TF.setValue("select option");
					grade_TF.setValue("Grade");
					
					CA1_TF.setText(String.valueOf(0));
					CA2_TF.setText(String.valueOf(0));
					CA3_TF.setText(String.valueOf(0));
					ASS1_TF.setText(String.valueOf(0));
					ASS2_TF.setText(String.valueOf(0));
					ASS3_TF.setText(String.valueOf(0));
					PRJ1_TF.setText(String.valueOf(0));
					PRJ2_TF.setText(String.valueOf(0));
					PRJ3_TF.setText(String.valueOf(0));
					examScore_TF.setText(String.valueOf(0));
					total_TF.setText(String.valueOf(0));
					
					name_TF.setValue("select name");
					subjectName_TF.setValue("select subject");
					scoresYear_TF.setValue("select option");
					
					alert.close();
				}
				else {
					alert.close();
				}
			}
		}
	}
	
	
	//2nd CA
	public void validateScoreSheets2ndCA() {
		
		String stdClassVal = stdClass_TF.getValue();
		
		//String str2 = stdId_TF.getText();
		int numTail = 0;
		if(stdClassVal.contains("JSS")) {
			numTail = 1;
		}
		else if(stdClassVal.contains("SSS")){
			numTail = 2;
		}
		
		String str = stdId_TF.getText() + stdClassVal + term_TF.getValue()
				+ subjectCode_TF.getValue()+scoresYear_TF.getValue()+String.valueOf(numTail);
		
		//sId_TF.setText(str);
		if(sId_TF.getText().trim().length() == 0) {
			sId_TF.setText(str);
		}
		else if(sId_TF.getText().trim().equalsIgnoreCase("Error: null")) {
			sId_TF.setText(str);
		}
		
		String idX = sId_TF.getText();
		if(idX.charAt(idX.length()-1) == '1') {
			try {
				EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
				EntityManager entitymanager = emfactory.createEntityManager();
				entitymanager.getTransaction().begin();
				
				JssScoreSheets scores = entitymanager.find(JssScoreSheets.class, idX);
				
				String stdClassIn = scores.getStdClass();
				
				stdId_TF.setText(scores.getStdId()); 
				stdClass_TF.setValue(stdClassIn);
				term_TF.setValue(scores.getTerm());
				subjectCode_TF.setValue(String.valueOf(scores.getSubjectCode()));
				ASS1_TF.setText(String.valueOf(scores.getCA1())); 
//				ASS2_TF.setText(String.valueOf(scores.getCA2())); 
				ASS3_TF.setText(String.valueOf(scores.getCA3()));
				PRJ1_TF.setText(String.valueOf(scores.getCA4()));
//				PRJ2_TF.setText(String.valueOf(scores.getCA5()));
				PRJ3_TF.setText(String.valueOf(scores.getCA6()));
				examScore_TF.setText(String.valueOf(scores.getExamScore()));
				total_TF.setText(String.valueOf(scores.getTotal()));
				grade_TF.setValue(scores.getGrade());
				name_TF.setValue(scores.getName());
				subjectName_TF.setValue(scores.getSubjectName());
				scoresYear_TF.setValue(scores.getScoresYear());
				
				entitymanager.getTransaction().commit();
				
				entitymanager.close();
				emfactory.close();
			}
			catch(Exception e) {
				Alert alert = new Alert(Alert.AlertType.ERROR);
				alert.setContentText("Error: "+ e.getMessage());
				Optional<ButtonType> result = alert.showAndWait();
				if(result.get() == ButtonType.OK) {
					
					stdClass_TF.setValue("select option");
					term_TF.setValue("select option");
					subjectCode_TF.setValue("select option");
					grade_TF.setValue("Grade");
					
					CA1_TF.setText(String.valueOf(0));
					CA2_TF.setText(String.valueOf(0));
					CA3_TF.setText(String.valueOf(0));
					ASS1_TF.setText(String.valueOf(0));
					ASS2_TF.setText(String.valueOf(0));
					ASS3_TF.setText(String.valueOf(0));
					PRJ1_TF.setText(String.valueOf(0));
					PRJ2_TF.setText(String.valueOf(0));
					PRJ3_TF.setText(String.valueOf(0));
					examScore_TF.setText(String.valueOf(0));
					total_TF.setText(String.valueOf(0));
					
					name_TF.setValue("select name");
					subjectName_TF.setValue("select subject");
					scoresYear_TF.setValue("select option");
					
					alert.close();
				}
				else {
					alert.close();
				}
			}
		}
		else {
			try {
				EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
				EntityManager entitymanager = emfactory.createEntityManager();
				entitymanager.getTransaction().begin();
				
				ScoreSheets scores = entitymanager.find(ScoreSheets.class, idX);
				
				String stdClassIn = scores.getStdClass();
				
				stdId_TF.setText(scores.getStdId()); 
				stdClass_TF.setValue(stdClassIn);
				term_TF.setValue(scores.getTerm());
				subjectCode_TF.setValue(String.valueOf(scores.getSubjectCode()));
				CA1_TF.setText(String.valueOf(scores.getCA1()));
//				CA2_TF.setText(String.valueOf(scores.getCA2()));
				CA3_TF.setText(String.valueOf(scores.getCA3()));
				examScore_TF.setText(String.valueOf(scores.getExamScore()));
				total_TF.setText(String.valueOf(scores.getTotal()));
				grade_TF.setValue(scores.getGrade());
				name_TF.setValue(scores.getName());
				subjectName_TF.setValue(scores.getSubjectName());
				scoresYear_TF.setValue(scores.getScoresYear());
				
				entitymanager.getTransaction().commit();
				
				entitymanager.close();
				emfactory.close();
			}
			catch(Exception e) {
				Alert alert = new Alert(Alert.AlertType.ERROR);
				alert.setContentText("Error: "+ e.getMessage());
				Optional<ButtonType> result = alert.showAndWait();
				if(result.get() == ButtonType.OK) {
					
					stdClass_TF.setValue("select option");
					term_TF.setValue("select option");
					subjectCode_TF.setValue("select option");
					grade_TF.setValue("Grade");
					
					CA1_TF.setText(String.valueOf(0));
					CA2_TF.setText(String.valueOf(0));
					CA3_TF.setText(String.valueOf(0));
					ASS1_TF.setText(String.valueOf(0));
					ASS2_TF.setText(String.valueOf(0));
					ASS3_TF.setText(String.valueOf(0));
					PRJ1_TF.setText(String.valueOf(0));
					PRJ2_TF.setText(String.valueOf(0));
					PRJ3_TF.setText(String.valueOf(0));
					examScore_TF.setText(String.valueOf(0));
					total_TF.setText(String.valueOf(0));
					
					name_TF.setValue("select name");
					subjectName_TF.setValue("select subject");
					scoresYear_TF.setValue("select option");
					
					alert.close();
				}
				else {
					alert.close();
				}
			}
		}
	}
	
	//third CA
	public void validateScoreSheets3rdCA() {
		String stdClassVal = stdClass_TF.getValue();
		
		//String str2 = stdId_TF.getText();
		int numTail = 0;
		if(stdClassVal.contains("JSS")) {
			numTail = 1;
		}
		else if(stdClassVal.contains("SSS")){
			numTail = 2;
		}
		
		String str = stdId_TF.getText() + stdClassVal + term_TF.getValue()
				+ subjectCode_TF.getValue()+scoresYear_TF.getValue()+String.valueOf(numTail);
		
		//sId_TF.setText(str);
		if(sId_TF.getText().trim().length() == 0) {
			sId_TF.setText(str);
		}
		else if(sId_TF.getText().trim().equalsIgnoreCase("Error: null")) {
			sId_TF.setText(str);
		}
		
		String idX = sId_TF.getText();
		if(idX.charAt(idX.length()-1) == '1') {
			try {
				EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
				EntityManager entitymanager = emfactory.createEntityManager();
				entitymanager.getTransaction().begin();
				
				JssScoreSheets scores = entitymanager.find(JssScoreSheets.class, idX);
				
				String stdClassIn = scores.getStdClass();
				
				stdId_TF.setText(scores.getStdId()); 
				stdClass_TF.setValue(stdClassIn);
				term_TF.setValue(scores.getTerm());
				subjectCode_TF.setValue(String.valueOf(scores.getSubjectCode()));
				ASS1_TF.setText(String.valueOf(scores.getCA1())); 
				ASS2_TF.setText(String.valueOf(scores.getCA2())); 
//				ASS3_TF.setText(String.valueOf(scores.getCA3()));
				PRJ1_TF.setText(String.valueOf(scores.getCA4()));
				PRJ2_TF.setText(String.valueOf(scores.getCA5()));
//				PRJ3_TF.setText(String.valueOf(scores.getCA6()));
				examScore_TF.setText(String.valueOf(scores.getExamScore()));
				total_TF.setText(String.valueOf(scores.getTotal()));
				grade_TF.setValue(scores.getGrade());
				name_TF.setValue(scores.getName());
				subjectName_TF.setValue(scores.getSubjectName());
				scoresYear_TF.setValue(scores.getScoresYear());
				
				entitymanager.getTransaction().commit();
				
				entitymanager.close();
				emfactory.close();
			}
			catch(Exception e) {
				Alert alert = new Alert(Alert.AlertType.ERROR);
				alert.setContentText("Error: "+ e.getMessage());
				Optional<ButtonType> result = alert.showAndWait();
				if(result.get() == ButtonType.OK) {
					
					stdClass_TF.setValue("select option");
					term_TF.setValue("select option");
					subjectCode_TF.setValue("select option");
					grade_TF.setValue("Grade");
					
					CA1_TF.setText(String.valueOf(0));
					CA2_TF.setText(String.valueOf(0));
					CA3_TF.setText(String.valueOf(0));
					ASS1_TF.setText(String.valueOf(0));
					ASS2_TF.setText(String.valueOf(0));
					ASS3_TF.setText(String.valueOf(0));
					PRJ1_TF.setText(String.valueOf(0));
					PRJ2_TF.setText(String.valueOf(0));
					PRJ3_TF.setText(String.valueOf(0));
					examScore_TF.setText(String.valueOf(0));
					total_TF.setText(String.valueOf(0));
					
					name_TF.setValue("select name");
					subjectName_TF.setValue("select subject");
					scoresYear_TF.setValue("select option");
					
					alert.close();
				}
				else {
					alert.close();
				}
			}
		}
		else {
			try {
				EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
				EntityManager entitymanager = emfactory.createEntityManager();
				entitymanager.getTransaction().begin();
				
				ScoreSheets scores = entitymanager.find(ScoreSheets.class, idX);
				
				String stdClassIn = scores.getStdClass();
				
				stdId_TF.setText(scores.getStdId()); 
				stdClass_TF.setValue(stdClassIn);
				term_TF.setValue(scores.getTerm());
				subjectCode_TF.setValue(String.valueOf(scores.getSubjectCode()));
				CA1_TF.setText(String.valueOf(scores.getCA1()));
				CA2_TF.setText(String.valueOf(scores.getCA2()));
//				CA3_TF.setText(String.valueOf(scores.getCA3()));
				examScore_TF.setText(String.valueOf(scores.getExamScore()));
				total_TF.setText(String.valueOf(scores.getTotal()));
				grade_TF.setValue(scores.getGrade());
				name_TF.setValue(scores.getName());
				subjectName_TF.setValue(scores.getSubjectName());
				scoresYear_TF.setValue(scores.getScoresYear());
				
				entitymanager.getTransaction().commit();
				
				entitymanager.close();
				emfactory.close();
			}
			catch(Exception e) {
				Alert alert = new Alert(Alert.AlertType.ERROR);
				alert.setContentText("Error: "+ e.getMessage());
				Optional<ButtonType> result = alert.showAndWait();
				if(result.get() == ButtonType.OK) {
					
					stdClass_TF.setValue("select option");
					term_TF.setValue("select option");
					subjectCode_TF.setValue("select option");
					grade_TF.setValue("Grade");
					
					CA1_TF.setText(String.valueOf(0));
					CA2_TF.setText(String.valueOf(0));
					CA3_TF.setText(String.valueOf(0));
					ASS1_TF.setText(String.valueOf(0));
					ASS2_TF.setText(String.valueOf(0));
					ASS3_TF.setText(String.valueOf(0));
					PRJ1_TF.setText(String.valueOf(0));
					PRJ2_TF.setText(String.valueOf(0));
					PRJ3_TF.setText(String.valueOf(0));
					examScore_TF.setText(String.valueOf(0));
					total_TF.setText(String.valueOf(0));
					
					name_TF.setValue("select name");
					subjectName_TF.setValue("select subject");
					scoresYear_TF.setValue("select option");
					
					alert.close();
				}
				else {
					alert.close();
				}
			}
		}
	}
	
	//exam entry
	public void validateScoreSheetsExam() {
		String stdClassVal = stdClass_TF.getValue();
		
		//String str2 = stdId_TF.getText();
		int numTail = 0;
		if(stdClassVal.contains("JSS")) {
			numTail = 1;
		}
		else if(stdClassVal.contains("SSS")){
			numTail = 2;
		}
		
		String str = stdId_TF.getText() + stdClassVal + term_TF.getValue()
				+ subjectCode_TF.getValue()+scoresYear_TF.getValue()+String.valueOf(numTail);
		
		//sId_TF.setText(str);
		if(sId_TF.getText().trim().length() == 0) {
			sId_TF.setText(str);
		}
		else if(sId_TF.getText().trim().equalsIgnoreCase("Error: null")) {
			sId_TF.setText(str);
		}
		
		String idX = sId_TF.getText();
		if(idX.charAt(idX.length()-1) == '1') {
			try {
				EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
				EntityManager entitymanager = emfactory.createEntityManager();
				entitymanager.getTransaction().begin();
				
				JssScoreSheets scores = entitymanager.find(JssScoreSheets.class, idX);
				
				String stdClassIn = scores.getStdClass();
				
				stdId_TF.setText(scores.getStdId()); 
				stdClass_TF.setValue(stdClassIn);
				term_TF.setValue(scores.getTerm());
				subjectCode_TF.setValue(String.valueOf(scores.getSubjectCode()));
				ASS1_TF.setText(String.valueOf(scores.getCA1())); 
				ASS2_TF.setText(String.valueOf(scores.getCA2())); 
				ASS3_TF.setText(String.valueOf(scores.getCA3()));
				PRJ1_TF.setText(String.valueOf(scores.getCA4()));
				PRJ2_TF.setText(String.valueOf(scores.getCA5()));
				PRJ3_TF.setText(String.valueOf(scores.getCA6()));
//				examScore_TF.setText(String.valueOf(scores.getExamScore()));
				total_TF.setText(String.valueOf(scores.getTotal()));
				grade_TF.setValue(scores.getGrade());
				name_TF.setValue(scores.getName());
				subjectName_TF.setValue(scores.getSubjectName());
				scoresYear_TF.setValue(scores.getScoresYear());
				
				entitymanager.getTransaction().commit();
				
				entitymanager.close();
				emfactory.close();
			}
			catch(Exception e) {
				Alert alert = new Alert(Alert.AlertType.ERROR);
				alert.setContentText("Error: "+ e.getMessage());
				Optional<ButtonType> result = alert.showAndWait();
				if(result.get() == ButtonType.OK) {
					
					stdClass_TF.setValue("select option");
					term_TF.setValue("select option");
					subjectCode_TF.setValue("select option");
					grade_TF.setValue("Grade");
					
					CA1_TF.setText(String.valueOf(0));
					CA2_TF.setText(String.valueOf(0));
					CA3_TF.setText(String.valueOf(0));
					ASS1_TF.setText(String.valueOf(0));
					ASS2_TF.setText(String.valueOf(0));
					ASS3_TF.setText(String.valueOf(0));
					PRJ1_TF.setText(String.valueOf(0));
					PRJ2_TF.setText(String.valueOf(0));
					PRJ3_TF.setText(String.valueOf(0));
					examScore_TF.setText(String.valueOf(0));
					total_TF.setText(String.valueOf(0));
					
					name_TF.setValue("select name");
					subjectName_TF.setValue("select subject");
					scoresYear_TF.setValue("select option");
					
					alert.close();
				}
				else {
					alert.close();
				}
			}
		}
		else {
			try {
				EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
				EntityManager entitymanager = emfactory.createEntityManager();
				entitymanager.getTransaction().begin();
				
				ScoreSheets scores = entitymanager.find(ScoreSheets.class, idX);
				
				String stdClassIn = scores.getStdClass();
				
				stdId_TF.setText(scores.getStdId()); 
				stdClass_TF.setValue(stdClassIn);
				term_TF.setValue(scores.getTerm());
				subjectCode_TF.setValue(String.valueOf(scores.getSubjectCode()));
				CA1_TF.setText(String.valueOf(scores.getCA1()));
				CA2_TF.setText(String.valueOf(scores.getCA2()));
				CA3_TF.setText(String.valueOf(scores.getCA3()));
//				examScore_TF.setText(String.valueOf(scores.getExamScore()));
				total_TF.setText(String.valueOf(scores.getTotal()));
				grade_TF.setValue(scores.getGrade());
				name_TF.setValue(scores.getName());
				subjectName_TF.setValue(scores.getSubjectName());
				scoresYear_TF.setValue(scores.getScoresYear());
				
				entitymanager.getTransaction().commit();
				
				entitymanager.close();
				emfactory.close();
			}
			catch(Exception e) {
				Alert alert = new Alert(Alert.AlertType.ERROR);
				alert.setContentText("Error: "+ e.getMessage());
				Optional<ButtonType> result = alert.showAndWait();
				if(result.get() == ButtonType.OK) {
					
					stdClass_TF.setValue("select option");
					term_TF.setValue("select option");
					subjectCode_TF.setValue("select option");
					grade_TF.setValue("Grade");
					
					CA1_TF.setText(String.valueOf(0));
					CA2_TF.setText(String.valueOf(0));
					CA3_TF.setText(String.valueOf(0));
					ASS1_TF.setText(String.valueOf(0));
					ASS2_TF.setText(String.valueOf(0));
					ASS3_TF.setText(String.valueOf(0));
					PRJ1_TF.setText(String.valueOf(0));
					PRJ2_TF.setText(String.valueOf(0));
					PRJ3_TF.setText(String.valueOf(0));
					examScore_TF.setText(String.valueOf(0));
					total_TF.setText(String.valueOf(0));
					
					name_TF.setValue("select name");
					subjectName_TF.setValue("select subject");
					scoresYear_TF.setValue("select option");
					
					alert.close();
				}
				else {
					alert.close();
				}
			}
		}
	}
	
	@FXML public void updateScoresButton(ActionEvent event) {
		
		String scoreYrVerify = scoresYear_TF.getValue().trim().toUpperCase();
		String termVerify = term_TF.getValue();

		String stdClassVal2 = stdClass_TF.getValue().trim().toUpperCase();
		
		String stdClassId = stdClassVal2+scoreYrVerify+termVerify;
//		String stdClassVal = getPrimeClassOnly(stdClassId, scoreYrVerify, termVerify, stdClassVal2);
		String stdClassVal = getPrimeClass(stdClassVal2);
		
		int numTail = 0;
		if(stdClassVal.contains("JSS")) {
			numTail = 1;
		}
		else if(stdClassVal.contains("SSS")){
			numTail = 2;
		}
		
		String str = stdId_TF.getText() + stdClassVal + term_TF.getValue()
				+ subjectCode_TF.getValue()+scoresYear_TF.getValue()+String.valueOf(numTail);
		
		if(sId_TF.getText().trim().length() == 0) {
			sId_TF.setText(str);
		}
		else if(!(sId_TF.getText().trim().contains(str))) {
			sId_TF.setText(str);
		}
		
		try {
			try {
				initialize5(null);
			}
			catch(Exception e) {
				e.printStackTrace();
			}
			UpdateScores scores = new UpdateScores();
			
			String stdNumber = stdId_TF.getText();
			String stdTerm = term_TF.getValue();
			int subjectCode = Integer.parseInt(subjectCode_TF.getValue());
			double ASS1 = Double.parseDouble(ASS1_TF.getText()); 
			double ASS2 = Double.parseDouble(ASS2_TF.getText());
			double ASS3 = Double.parseDouble(ASS3_TF.getText());
			double PRJ1 = Double.parseDouble(PRJ1_TF.getText());
			double PRJ2 = Double.parseDouble(PRJ2_TF.getText());
			double PRJ3 = Double.parseDouble(PRJ3_TF.getText()); 
			double exam = Double.parseDouble(examScore_TF.getText()); 
			double CA1 = Double.parseDouble(CA1_TF.getText());
			double CA2 = Double.parseDouble(CA2_TF.getText());
			double CA3 = Double.parseDouble(CA3_TF.getText());
			
			if(stdClassVal.contains("JSS")) {
				computeTotalAndGrade(exam, stdNumber, stdClassVal, stdTerm,
						subjectCode, ASS1, ASS2, ASS3, PRJ1, PRJ2, PRJ3);
			}
			else if(stdClassVal.contains("SSS")) {
				computeTotalAndGrade(CA1, CA2, CA3, exam, stdNumber, stdClassVal, 
						stdTerm, subjectCode);
			}
			
			double total = Double.parseDouble(total_TF.getText());
			String grade = grade_TF.getValue();
			String name = name_TF.getValue(); 
			String subjectName = subjectName_TF.getValue();
			String sid = sId_TF.getText(); 
			String year = scoresYear_TF.getValue();
			
			if(stdClassVal.contains("JSS")) {
				
				try {
					if(Double.parseDouble(ASS1_TF.getText()) >= 0 && Double.parseDouble(ASS1_TF.getText()) <= 5 && 
							Double.parseDouble(ASS2_TF.getText()) >= 0 && Double.parseDouble(ASS2_TF.getText()) <= 5 && 
							Double.parseDouble(ASS3_TF.getText()) >= 0 && Double.parseDouble(ASS3_TF.getText()) <= 5 &&
							Double.parseDouble(PRJ1_TF.getText()) >= 0 && Double.parseDouble(PRJ1_TF.getText()) <= 5 &&
							Double.parseDouble(PRJ2_TF.getText()) >= 0 && Double.parseDouble(PRJ2_TF.getText()) <= 5 &&
							Double.parseDouble(PRJ3_TF.getText()) >= 0 && Double.parseDouble(PRJ3_TF.getText()) <= 5 && 
							Double.parseDouble(examScore_TF.getText()) >= 0 && Double.parseDouble(examScore_TF.getText()) <= 70 && 
							Double.parseDouble(total_TF.getText()) >= 0 && Double.parseDouble(total_TF.getText()) <= 100) {
						
						try {
							
							computeTotalAndGrade(Double.parseDouble(examScore_TF.getText()),
									stdId_TF.getText(),stdClassVal,term_TF.getValue(),
									Integer.parseInt(subjectCode_TF.getValue()),Double.parseDouble(ASS1_TF.getText()),
									Double.parseDouble(ASS2_TF.getText()), Double.parseDouble(ASS3_TF.getText()),
									Double.parseDouble(PRJ1_TF.getText()), Double.parseDouble(PRJ2_TF.getText()),
									Double.parseDouble(PRJ3_TF.getText()));
							
							scores.updateJssScoreSheetsSummary(sid, CA1, CA2, CA3, ASS1, ASS2, ASS3,
									PRJ1, PRJ2, PRJ3, exam, total);
							
							scores.updateJssAnnualScoreSheetsSummary(sid, CA1, CA2, CA3, ASS1, ASS2, ASS3, 
									PRJ1, PRJ2, PRJ3, exam, stdTerm, total);
							
							scores.updateJssScoreSheets(sid, stdClassVal, stdTerm, ASS1, ASS2, ASS3, PRJ1,
									PRJ2, PRJ3, exam, total, grade, year);
							
							scores.updateJssAnnualScoresTotal(sid, CA1, CA2, CA3, ASS1, ASS2, ASS3, PRJ1,
									PRJ2, PRJ3, exam, total);
							
						}
						catch(Exception nullable2) {
							Alert alert = new Alert(Alert.AlertType.ERROR);
							alert.setContentText("Error: "+ nullable2.getMessage());
							Optional<ButtonType> result = alert.showAndWait();
							if(result.get() == ButtonType.OK) {
								alert.close();
							}
							else {
								alert.close();
							}
						}
						finally {
							stdClass_TF.setValue("select option");
							term_TF.setValue("select option");
							subjectCode_TF.setValue("select option");
							CA1_TF.setText(String.valueOf(0));
							CA2_TF.setText(String.valueOf(0));
							CA3_TF.setText(String.valueOf(0));
							ASS1_TF.setText(String.valueOf(0));
							ASS2_TF.setText(String.valueOf(0));
							ASS3_TF.setText(String.valueOf(0));
							PRJ1_TF.setText(String.valueOf(0));
							PRJ2_TF.setText(String.valueOf(0));
							PRJ3_TF.setText(String.valueOf(0));
							examScore_TF.setText(String.valueOf(0));
							total_TF.setText(String.valueOf(0));
							grade_TF.setValue("Grade");
							name_TF.setValue("select name");
							subjectName_TF.setValue("select subject");
							scoresYear_TF.setValue("select option");
						}
	
					}
					else {
						throw new Exception("Invalid Entries...");
					}
				}
				catch(Exception nullable) {
					
					Alert alert = new Alert(Alert.AlertType.ERROR);
					alert.setContentText("Error: "+ nullable.getMessage());
					Optional<ButtonType> result = alert.showAndWait();
					if(result.get() == ButtonType.OK) {
						alert.close();
					}
					else {
						alert.close();
					}
				}
			}
			else if(stdClassVal.contains("SSS")) {
				
				try {
					if(Double.parseDouble(CA1_TF.getText()) >= 0 && Double.parseDouble(CA1_TF.getText()) <= 10 && 
							Double.parseDouble(CA2_TF.getText()) >= 0 && Double.parseDouble(CA2_TF.getText()) <= 10 && 
							Double.parseDouble(CA3_TF.getText()) >= 0 && Double.parseDouble(CA3_TF.getText()) <= 10 && 
							Double.parseDouble(examScore_TF.getText()) >= 0 && Double.parseDouble(examScore_TF.getText()) <= 70 && 
							Double.parseDouble(total_TF.getText()) >= 0 && Double.parseDouble(total_TF.getText()) <= 100) {
						
						try {
							
							computeTotalAndGrade(Double.parseDouble(CA1_TF.getText()),Double.parseDouble(CA2_TF.getText()),
									Double.parseDouble(CA3_TF.getText()),Double.parseDouble(examScore_TF.getText()),
									stdId_TF.getText(),stdClassVal,term_TF.getValue(),
									Integer.parseInt(subjectCode_TF.getValue()));
							
							scores.updateScoreSheetsSummary(sid, CA1, CA2, CA3, ASS1, ASS2, ASS3, PRJ1, PRJ2,
									PRJ3, exam, total);
							
							scores.updateAnnualScoreSheetsSummary(sid, CA1, CA2, CA3, ASS1, ASS2, ASS3, PRJ1,
									PRJ2, PRJ3, exam, stdTerm, total);
							
							scores.updateScoreSheets(sid, stdClassVal, stdTerm, CA1, CA2, CA3, exam, total,
									grade, year);
							
							scores.updateAnnualScoresTotal(sid, CA1, CA2, CA3, ASS1, ASS2, ASS3, PRJ1, PRJ2,
									PRJ3, exam, total);
							
						}
						catch(Exception nullable2) {
							Alert alert = new Alert(Alert.AlertType.ERROR);
							alert.setContentText("Error: "+ nullable2.getMessage());
							Optional<ButtonType> result = alert.showAndWait();
							if(result.get() == ButtonType.OK) {
								alert.close();
							}
							else {
								alert.close();
							}
						}
						finally {
							stdClass_TF.setValue("select option");
							term_TF.setValue("select option");
							subjectCode_TF.setValue("select option");
							CA1_TF.setText(String.valueOf(0));
							CA2_TF.setText(String.valueOf(0));
							CA3_TF.setText(String.valueOf(0));
							ASS1_TF.setText(String.valueOf(0));
							ASS2_TF.setText(String.valueOf(0));
							ASS3_TF.setText(String.valueOf(0));
							PRJ1_TF.setText(String.valueOf(0));
							PRJ2_TF.setText(String.valueOf(0));
							PRJ3_TF.setText(String.valueOf(0));
							examScore_TF.setText(String.valueOf(0));
							total_TF.setText(String.valueOf(0));
							grade_TF.setValue("Grade");
							name_TF.setValue("select name");
							subjectName_TF.setValue("select subject");
							scoresYear_TF.setValue("select option");
						}
						
					}
					else {
						throw new Exception("Invalid entries...");
					}
				}
				catch(Exception nullable) {
					Alert alert = new Alert(Alert.AlertType.ERROR);
					alert.setContentText("Error: "+ nullable.getMessage());
					Optional<ButtonType> result = alert.showAndWait();
					if(result.get() == ButtonType.OK) {
						alert.close();
					}
					else {
						alert.close();
					}
				}
			}
			
		}
		catch(Exception e) {
			//sId_TF.setText("Error: "+ e.getMessage());
			
			Alert alert = new Alert(Alert.AlertType.ERROR);
			alert.setContentText("Error: "+ e.getMessage());
			Optional<ButtonType> result = alert.showAndWait();
			if(result.get() == ButtonType.OK) {
				alert.close();
			}
			else {
				alert.close();
			}
		}
	
	}
	
	//2nd CA Update
	@FXML public void updateScoresButton2ndCA(ActionEvent event) {
		
		validateScoreSheets2ndCA();
		
		String stdClassVal = stdClass_TF.getValue();
		
		int numTail = 0;
		if(stdClassVal.contains("JSS")) {
			numTail = 1;
		}
		else if (stdClassVal.contains("SSS")) {
			numTail = 2;
		}
		
		String str = stdId_TF.getText() + stdClassVal + term_TF.getValue()
				+ subjectCode_TF.getValue()+scoresYear_TF.getValue()+String.valueOf(numTail);
		
		if(sId_TF.getText().trim().length() == 0) {
			sId_TF.setText(str);
		}
		else if(!(sId_TF.getText().trim().contains(str))) {
			sId_TF.setText(str);
		}
		
		try {
			try {
				initialize5(null);
			}
			catch(Exception e) {
				e.printStackTrace();
			}
			UpdateScores scores = new UpdateScores();
			
			String stdNumber = stdId_TF.getText();
			String stdTerm = term_TF.getValue();
			int subjectCode = Integer.parseInt(subjectCode_TF.getValue());
			double ASS1 = Double.parseDouble(ASS1_TF.getText()); 
			double ASS2 = Double.parseDouble(ASS2_TF.getText());
			double ASS3 = Double.parseDouble(ASS3_TF.getText());
			double PRJ1 = Double.parseDouble(PRJ1_TF.getText());
			double PRJ2_2 = Double.parseDouble(PRJ2_TF.getText());
			double PRJ3 = Double.parseDouble(PRJ3_TF.getText()); 
			double exam = Double.parseDouble(examScore_TF.getText()); 
			double CA1 = Double.parseDouble(CA1_TF.getText());
			double CA2_2 = Double.parseDouble(CA2_TF.getText());
			double CA3 = Double.parseDouble(CA3_TF.getText());
			
			if(stdClassVal.contains("JSS")) {
				computeTotalAndGrade(exam, stdNumber, stdClassVal, stdTerm,
						subjectCode, ASS1, ASS2, ASS3, PRJ1, PRJ2_2, PRJ3);
			}
			else if(stdClassVal.contains("SSS")) {
				computeTotalAndGrade(CA1, CA2_2, CA3, exam, stdNumber, stdClassVal, 
						stdTerm, subjectCode);
			}
			
			double total = Double.parseDouble(total_TF.getText());
			String grade = grade_TF.getValue();
			String name = name_TF.getValue(); 
			String subjectName = subjectName_TF.getValue();
			String sid = sId_TF.getText(); 
			String year = scoresYear_TF.getValue();
			
			if(stdClassVal.contains("JSS")) {
				
				try {
					if(Double.parseDouble(ASS1_TF.getText()) >= 0 && Double.parseDouble(ASS1_TF.getText()) <= 5 && 
							Double.parseDouble(ASS2_TF.getText()) >= 0 && Double.parseDouble(ASS2_TF.getText()) <= 5 && 
							Double.parseDouble(ASS3_TF.getText()) >= 0 && Double.parseDouble(ASS3_TF.getText()) <= 5 &&
							Double.parseDouble(PRJ1_TF.getText()) >= 0 && Double.parseDouble(PRJ1_TF.getText()) <= 5 &&
							Double.parseDouble(PRJ2_TF.getText()) >= 0 && Double.parseDouble(PRJ2_TF.getText()) <= 5 &&
							Double.parseDouble(PRJ3_TF.getText()) >= 0 && Double.parseDouble(PRJ3_TF.getText()) <= 5 && 
							Double.parseDouble(examScore_TF.getText()) >= 0 && Double.parseDouble(examScore_TF.getText()) <= 70 && 
							Double.parseDouble(total_TF.getText()) >= 0 && Double.parseDouble(total_TF.getText()) <= 100) {
						
						try {
							
							//check for previous update
							
							double CA2 = 0, PRJ2 = 0;
							
							EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
							EntityManager entitymanager = emfactory.createEntityManager();
							entitymanager.getTransaction().begin();
							
							JssScoreSheets score = entitymanager.find(JssScoreSheets.class, str);
							
							CA2 = score.getCA2();
							PRJ2 = score.getCA5();
							
							entitymanager.getTransaction().commit();
							entitymanager.close();
							emfactory.close();
							
							if(CA2 == 0 && PRJ2 == 0) {
								computeTotalAndGrade(Double.parseDouble(examScore_TF.getText()),
										stdId_TF.getText(),stdClassVal,term_TF.getValue(),
										Integer.parseInt(subjectCode_TF.getValue()),Double.parseDouble(ASS1_TF.getText()),
										Double.parseDouble(ASS2_TF.getText()), Double.parseDouble(ASS3_TF.getText()),
										Double.parseDouble(PRJ1_TF.getText()), Double.parseDouble(PRJ2_TF.getText()),
										Double.parseDouble(PRJ3_TF.getText()));
								
								scores.updateJssScoreSheetsSummary(sid, CA1, CA2_2, CA3, ASS1, ASS2, ASS3, PRJ1, PRJ2_2, PRJ3, exam, total);
								
								scores.updateJssAnnualScoreSheetsSummary(sid, CA1, CA2_2, CA3, ASS1, ASS2, ASS3, PRJ1, PRJ2_2,
										PRJ3, exam, stdTerm, total);
								
								scores.updateJssScoreSheets(sid, stdClassVal, stdTerm, ASS1, ASS2, ASS3, PRJ1, PRJ2_2, PRJ3,
										exam, total, grade, year);
								
								scores.updateJssAnnualScoresTotal(sid, CA1, CA2_2, CA3, ASS1, ASS2, ASS3, PRJ1, PRJ2_2,
										PRJ3, exam, total);
								
//								scores.updateJssScoreSheetsSummary(sId_TF,CA1_TF, CA2_TF, CA3_TF,ASS1_TF, ASS2_TF, ASS3_TF, 
//										PRJ1_TF, PRJ2_TF, PRJ3_TF, examScore_TF, total_TF);
//								
//								scores.updateJssAnnualScoreSheetsSummary(sId_TF,CA1_TF, CA2_TF, CA3_TF,ASS1_TF, ASS2_TF, ASS3_TF, 
//										PRJ1_TF, PRJ2_TF, PRJ3_TF, examScore_TF, term_TF, total_TF);
//								
//								scores.updateJssScoreSheets(sId_TF, stdClassVal, term_TF, ASS1_TF, ASS2_TF, ASS3_TF, 
//										PRJ1_TF, PRJ2_TF, PRJ3_TF, examScore_TF, total_TF,  
//										grade_TF, scoresYear_TF);
//								
//								scores.updateJssAnnualScoresTotal(sId_TF,CA1_TF, CA2_TF, CA3_TF,ASS1_TF, ASS2_TF, ASS3_TF, 
//										PRJ1_TF, PRJ2_TF, PRJ3_TF, examScore_TF, total_TF);
							}
							else {
								Alert alert = new Alert(Alert.AlertType.ERROR);
								alert.setContentText("Error: Scores already exist for this entries ("+ 
								String.valueOf(CA2)+ ", "+ String.valueOf(PRJ2)+")");
								Optional<ButtonType> result = alert.showAndWait();
								if(result.get() == ButtonType.OK) {
									alert.close();
								}
								else {
									alert.close();
								}
							}
						}
						catch(Exception nullable2) {
							Alert alert = new Alert(Alert.AlertType.ERROR);
							alert.setContentText("Error: "+ nullable2.getMessage());
							Optional<ButtonType> result = alert.showAndWait();
							if(result.get() == ButtonType.OK) {
								alert.close();
							}
							else {
								alert.close();
							}
						}
						finally {
							stdClass_TF.setValue("select option");
							term_TF.setValue("select option");
							subjectCode_TF.setValue("select option");
							CA1_TF.setText(String.valueOf(0));
							CA2_TF.setText(String.valueOf(0));
							CA3_TF.setText(String.valueOf(0));
							ASS1_TF.setText(String.valueOf(0));
							ASS2_TF.setText(String.valueOf(0));
							ASS3_TF.setText(String.valueOf(0));
							PRJ1_TF.setText(String.valueOf(0));
							PRJ2_TF.setText(String.valueOf(0));
							PRJ3_TF.setText(String.valueOf(0));
							examScore_TF.setText(String.valueOf(0));
							total_TF.setText(String.valueOf(0));
							grade_TF.setValue("Grade");
							name_TF.setValue("select name");
							subjectName_TF.setValue("select subject");
							scoresYear_TF.setValue("select option");
						}
	
					}
					else {
						throw new Exception("Invalid Entries...");
					}
				}
				catch(Exception nullable) {
					
					Alert alert = new Alert(Alert.AlertType.ERROR);
					alert.setContentText("Error: "+ nullable.getMessage());
					Optional<ButtonType> result = alert.showAndWait();
					if(result.get() == ButtonType.OK) {
						alert.close();
					}
					else {
						alert.close();
					}
				}
			}
			else if(stdClassVal.contains("SSS")){
				
				try {
					if(Double.parseDouble(CA1_TF.getText()) >= 0 && Double.parseDouble(CA1_TF.getText()) <= 10 && 
							Double.parseDouble(CA2_TF.getText()) >= 0 && Double.parseDouble(CA2_TF.getText()) <= 10 && 
							Double.parseDouble(CA3_TF.getText()) >= 0 && Double.parseDouble(CA3_TF.getText()) <= 10 && 
							Double.parseDouble(examScore_TF.getText()) >= 0 && Double.parseDouble(examScore_TF.getText()) <= 70 && 
							Double.parseDouble(total_TF.getText()) >= 0 && Double.parseDouble(total_TF.getText()) <= 100) {
						
						try {
							
							//check for previous scores
							double CA2 = 0;
							
							EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
							EntityManager entitymanager = emfactory.createEntityManager();
							entitymanager.getTransaction().begin();
							
							ScoreSheets score = entitymanager.find(ScoreSheets.class, str);
							
							CA2 = score.getCA2();
							
							entitymanager.getTransaction().commit();
							entitymanager.close();
							emfactory.close();
							
							if(CA2 == 0) {
								computeTotalAndGrade(Double.parseDouble(CA1_TF.getText()),Double.parseDouble(CA2_TF.getText()),
										Double.parseDouble(CA3_TF.getText()),Double.parseDouble(examScore_TF.getText()),
										stdId_TF.getText(),stdClassVal,term_TF.getValue(),
										Integer.parseInt(subjectCode_TF.getValue()));
								
								scores.updateScoreSheetsSummary(sid, CA1, CA2_2, CA3, ASS1, ASS2, ASS3, PRJ1, PRJ2_2,
										PRJ3, exam, total);
								
								scores.updateAnnualScoreSheetsSummary(sid, CA1, CA2_2, CA3, ASS1, ASS2, ASS3, PRJ1,
										PRJ2_2, PRJ3, exam, stdTerm, total);
								
								scores.updateScoreSheets(sid, stdClassVal, stdTerm, CA1, CA2_2, CA3, exam,
										total, grade, year);
								
								scores.updateAnnualScoresTotal(sid, CA1, CA2_2, CA3, ASS1, ASS2, ASS3, PRJ1,
										PRJ2_2, PRJ3, exam, total);
								
//								scores.updateScoreSheetsSummary(sId_TF,CA1_TF, CA2_TF, CA3_TF,ASS1_TF, ASS2_TF, ASS3_TF, 
//										PRJ1_TF, PRJ2_TF, PRJ3_TF, examScore_TF, total_TF);
//								
//								scores.updateAnnualScoreSheetsSummary(sId_TF,CA1_TF, CA2_TF, CA3_TF,ASS1_TF, ASS2_TF, ASS3_TF, 
//										PRJ1_TF, PRJ2_TF, PRJ3_TF, examScore_TF, term_TF, total_TF);
//								
//								scores.updateScoreSheets(sId_TF, stdClassVal, term_TF, CA1_TF, CA2_TF, CA3_TF, examScore_TF, 
//										total_TF,
//										grade_TF, scoresYear_TF);
//								
//								scores.updateAnnualScoresTotal(sId_TF,CA1_TF, CA2_TF, CA3_TF,ASS1_TF, ASS2_TF, ASS3_TF, 
//										PRJ1_TF, PRJ2_TF, PRJ3_TF, examScore_TF, total_TF);
							}
							else {
								Alert alert = new Alert(Alert.AlertType.ERROR);
								alert.setContentText("Error: Score already exists for this entry ("+ 
								String.valueOf(CA2)+")");
								Optional<ButtonType> result = alert.showAndWait();
								if(result.get() == ButtonType.OK) {
									alert.close();
								}
								else {
									alert.close();
								}
							}
							
						}
						catch(Exception nullable2) {
							Alert alert = new Alert(Alert.AlertType.ERROR);
							alert.setContentText("Error: "+ nullable2.getMessage());
							Optional<ButtonType> result = alert.showAndWait();
							if(result.get() == ButtonType.OK) {
								alert.close();
							}
							else {
								alert.close();
							}
						}
						finally {
							stdClass_TF.setValue("select option");
							term_TF.setValue("select option");
							subjectCode_TF.setValue("select option");
							CA1_TF.setText(String.valueOf(0));
							CA2_TF.setText(String.valueOf(0));
							CA3_TF.setText(String.valueOf(0));
							ASS1_TF.setText(String.valueOf(0));
							ASS2_TF.setText(String.valueOf(0));
							ASS3_TF.setText(String.valueOf(0));
							PRJ1_TF.setText(String.valueOf(0));
							PRJ2_TF.setText(String.valueOf(0));
							PRJ3_TF.setText(String.valueOf(0));
							examScore_TF.setText(String.valueOf(0));
							total_TF.setText(String.valueOf(0));
							grade_TF.setValue("Grade");
							name_TF.setValue("select name");
							subjectName_TF.setValue("select subject");
							scoresYear_TF.setValue("select option");
						}
						
					}
					else {
						throw new Exception("Invalid entries...");
					}
				}
				catch(Exception nullable) {
					Alert alert = new Alert(Alert.AlertType.ERROR);
					alert.setContentText("Error: "+ nullable.getMessage());
					Optional<ButtonType> result = alert.showAndWait();
					if(result.get() == ButtonType.OK) {
						alert.close();
					}
					else {
						alert.close();
					}
				}
			}
			
		}
		catch(Exception e) {
			//sId_TF.setText("Error: "+ e.getMessage());
			
			Alert alert = new Alert(Alert.AlertType.ERROR);
			alert.setContentText("Error: "+ e.getMessage());
			Optional<ButtonType> result = alert.showAndWait();
			if(result.get() == ButtonType.OK) {
				alert.close();
			}
			else {
				alert.close();
			}
		}
	
	}
	
	//3rd CA Update
	@FXML public void updateScoresButton3rdCA(ActionEvent event) {
		
		validateScoreSheets3rdCA();
		
		String stdClassVal = stdClass_TF.getValue();
		
		int numTail = 0;
		if(stdClassVal.contains("JSS")) {
			numTail = 1;
		}
		else if(stdClassVal.contains("SSS")){
			numTail = 2;
		}
		
		String str = stdId_TF.getText() + stdClassVal + term_TF.getValue()
				+ subjectCode_TF.getValue()+scoresYear_TF.getValue()+String.valueOf(numTail);
		
		if(sId_TF.getText().trim().length() == 0) {
			sId_TF.setText(str);
		}
		else if(!(sId_TF.getText().trim().contains(str))) {
			sId_TF.setText(str);
		}
		
		try {
			try {
				initialize5(null);
			}
			catch(Exception e) {
				e.printStackTrace();
			}
			UpdateScores scores = new UpdateScores();
			
			String stdNumber = stdId_TF.getText();
			String stdTerm = term_TF.getValue();
			int subjectCode = Integer.parseInt(subjectCode_TF.getValue());
			double ASS1 = Double.parseDouble(ASS1_TF.getText()); 
			double ASS2 = Double.parseDouble(ASS2_TF.getText());
			double ASS3 = Double.parseDouble(ASS3_TF.getText());
			double PRJ1 = Double.parseDouble(PRJ1_TF.getText());
			double PRJ2 = Double.parseDouble(PRJ2_TF.getText());
			double PRJ3_3 = Double.parseDouble(PRJ3_TF.getText()); 
			double exam = Double.parseDouble(examScore_TF.getText()); 
			double CA1 = Double.parseDouble(CA1_TF.getText());
			double CA2 = Double.parseDouble(CA2_TF.getText());
			double CA3_3 = Double.parseDouble(CA3_TF.getText());
			
			if(stdClassVal.contains("JSS")) {
				computeTotalAndGrade(exam, stdNumber, stdClassVal, stdTerm,
						subjectCode, ASS1, ASS2, ASS3, PRJ1, PRJ2, PRJ3_3);
			}
			else if(stdClassVal.contains("SSS")) {
				computeTotalAndGrade(CA1, CA2, CA3_3, exam, stdNumber, stdClassVal, 
						stdTerm, subjectCode);
			}
			
			double total = Double.parseDouble(total_TF.getText());
			String grade = grade_TF.getValue();
			String name = name_TF.getValue(); 
			String subjectName = subjectName_TF.getValue();
			String sid = sId_TF.getText(); 
			String year = scoresYear_TF.getValue();
			
			if(stdClassVal.contains("JSS")) {
				
				try {
					if(Double.parseDouble(ASS1_TF.getText()) >= 0 && Double.parseDouble(ASS1_TF.getText()) <= 5 && 
							Double.parseDouble(ASS2_TF.getText()) >= 0 && Double.parseDouble(ASS2_TF.getText()) <= 5 && 
							Double.parseDouble(ASS3_TF.getText()) >= 0 && Double.parseDouble(ASS3_TF.getText()) <= 5 &&
							Double.parseDouble(PRJ1_TF.getText()) >= 0 && Double.parseDouble(PRJ1_TF.getText()) <= 5 &&
							Double.parseDouble(PRJ2_TF.getText()) >= 0 && Double.parseDouble(PRJ2_TF.getText()) <= 5 &&
							Double.parseDouble(PRJ3_TF.getText()) >= 0 && Double.parseDouble(PRJ3_TF.getText()) <= 5 && 
							Double.parseDouble(examScore_TF.getText()) >= 0 && Double.parseDouble(examScore_TF.getText()) <= 70 && 
							Double.parseDouble(total_TF.getText()) >= 0 && Double.parseDouble(total_TF.getText()) <= 100) {
						
						try {
							
							//check for exist values
							double CA3 = 0, PRJ3 = 0;
							
							EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
							EntityManager entitymanager = emfactory.createEntityManager();
							entitymanager.getTransaction().begin();
							
							JssScoreSheets score = entitymanager.find(JssScoreSheets.class, str);
							
							CA3 = score.getCA3();
							PRJ3 = score.getCA6();
							
							entitymanager.getTransaction().commit();
							entitymanager.close();
							emfactory.close();
							
							if(CA3 == 0 && PRJ3 == 0) {
								computeTotalAndGrade(Double.parseDouble(examScore_TF.getText()),
										stdId_TF.getText(),stdClassVal,term_TF.getValue(),
										Integer.parseInt(subjectCode_TF.getValue()),Double.parseDouble(ASS1_TF.getText()),
										Double.parseDouble(ASS2_TF.getText()), Double.parseDouble(ASS3_TF.getText()),
										Double.parseDouble(PRJ1_TF.getText()), Double.parseDouble(PRJ2_TF.getText()),
										Double.parseDouble(PRJ3_TF.getText()));
								
								scores.updateJssScoreSheetsSummary(sid, CA1, CA2, CA3_3, ASS1, ASS2, ASS3, PRJ1, PRJ2,
										PRJ3_3, exam, total);
								
								scores.updateJssAnnualScoreSheetsSummary(sid, CA1, CA2, CA3_3, ASS1, ASS2, ASS3, PRJ1,
										PRJ2, PRJ3_3, exam, stdTerm, total);
								
								scores.updateJssScoreSheets(sid, stdClassVal, stdTerm, ASS1, ASS2, ASS3, PRJ1, PRJ2,
										PRJ3_3, exam, total, grade, year);
								
								scores.updateJssAnnualScoresTotal(sid, CA1, CA2, CA3_3, ASS1, ASS2, ASS3, PRJ1,
										PRJ2, PRJ3_3, exam, total);
								
//								scores.updateJssScoreSheetsSummary(sId_TF,CA1_TF, CA2_TF, CA3_TF,ASS1_TF, ASS2_TF, ASS3_TF, 
//										PRJ1_TF, PRJ2_TF, PRJ3_TF, examScore_TF, total_TF);
//								
//								scores.updateJssAnnualScoreSheetsSummary(sId_TF,CA1_TF, CA2_TF, CA3_TF,ASS1_TF, ASS2_TF, ASS3_TF, 
//										PRJ1_TF, PRJ2_TF, PRJ3_TF, examScore_TF, term_TF, total_TF);
//								
//								scores.updateJssScoreSheets(sId_TF, stdClassVal, term_TF, ASS1_TF, ASS2_TF, ASS3_TF, 
//										PRJ1_TF, PRJ2_TF, PRJ3_TF, examScore_TF, total_TF,  
//										grade_TF, scoresYear_TF);
//								
//								scores.updateJssAnnualScoresTotal(sId_TF,CA1_TF, CA2_TF, CA3_TF,ASS1_TF, ASS2_TF, ASS3_TF, 
//										PRJ1_TF, PRJ2_TF, PRJ3_TF, examScore_TF, total_TF);
							}
							else {
								Alert alert = new Alert(Alert.AlertType.ERROR);
								alert.setContentText("Error: Scores already exist for this entries ("+ 
								String.valueOf(CA3)+ ", "+ String.valueOf(PRJ3)+")");
								Optional<ButtonType> result = alert.showAndWait();
								if(result.get() == ButtonType.OK) {
									alert.close();
								}
								else {
									alert.close();
								}
							}
						}
						catch(Exception nullable2) {
							Alert alert = new Alert(Alert.AlertType.ERROR);
							alert.setContentText("Error: "+ nullable2.getMessage());
							Optional<ButtonType> result = alert.showAndWait();
							if(result.get() == ButtonType.OK) {
								alert.close();
							}
							else {
								alert.close();
							}
						}
						finally {
							stdClass_TF.setValue("select option");
							term_TF.setValue("select option");
							subjectCode_TF.setValue("select option");
							CA1_TF.setText(String.valueOf(0));
							CA2_TF.setText(String.valueOf(0));
							CA3_TF.setText(String.valueOf(0));
							ASS1_TF.setText(String.valueOf(0));
							ASS2_TF.setText(String.valueOf(0));
							ASS3_TF.setText(String.valueOf(0));
							PRJ1_TF.setText(String.valueOf(0));
							PRJ2_TF.setText(String.valueOf(0));
							PRJ3_TF.setText(String.valueOf(0));
							examScore_TF.setText(String.valueOf(0));
							total_TF.setText(String.valueOf(0));
							grade_TF.setValue("Grade");
							name_TF.setValue("select name");
							subjectName_TF.setValue("select subject");
							scoresYear_TF.setValue("select option");
						}
	
					}
					else {
						throw new Exception("Invalid Entries...");
					}
				}
				catch(Exception nullable) {
					
					Alert alert = new Alert(Alert.AlertType.ERROR);
					alert.setContentText("Error: "+ nullable.getMessage());
					Optional<ButtonType> result = alert.showAndWait();
					if(result.get() == ButtonType.OK) {
						alert.close();
					}
					else {
						alert.close();
					}
				}
			} 
			else if(stdClassVal.contains("SSS")) {
				
				try {
					if(Double.parseDouble(CA1_TF.getText()) >= 0 && Double.parseDouble(CA1_TF.getText()) <= 10 && 
							Double.parseDouble(CA2_TF.getText()) >= 0 && Double.parseDouble(CA2_TF.getText()) <= 10 && 
							Double.parseDouble(CA3_TF.getText()) >= 0 && Double.parseDouble(CA3_TF.getText()) <= 10 && 
							Double.parseDouble(examScore_TF.getText()) >= 0 && Double.parseDouble(examScore_TF.getText()) <= 70 && 
							Double.parseDouble(total_TF.getText()) >= 0 && Double.parseDouble(total_TF.getText()) <= 100) {
						
						try {
							
							//check for exist values
							double CA3 = 0;
							
							EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
							EntityManager entitymanager = emfactory.createEntityManager();
							entitymanager.getTransaction().begin();
							
							ScoreSheets score = entitymanager.find(ScoreSheets.class, str);
							
							CA3 = score.getCA3();
							
							entitymanager.getTransaction().commit();
							entitymanager.close();
							emfactory.close();
							
							if(CA3 == 0) {
								computeTotalAndGrade(Double.parseDouble(CA1_TF.getText()),Double.parseDouble(CA2_TF.getText()),
										Double.parseDouble(CA3_TF.getText()),Double.parseDouble(examScore_TF.getText()),
										stdId_TF.getText(),stdClassVal,term_TF.getValue(),
										Integer.parseInt(subjectCode_TF.getValue()));
								
								scores.updateScoreSheetsSummary(sid, CA1, CA2, CA3_3, ASS1, ASS2, ASS3, PRJ1, PRJ2,
										PRJ3_3, exam, total);
								
								scores.updateAnnualScoreSheetsSummary(sid, CA1, CA2, CA3_3, ASS1, ASS2, ASS3, PRJ1, PRJ2,
										PRJ3_3, exam, stdTerm, total);
								
								scores.updateScoreSheets(sid, stdClassVal, stdTerm, CA1, CA2, CA3_3, exam,
										total, grade, year);
								
								scores.updateAnnualScoresTotal(sid, CA1, CA2, CA3_3, ASS1, ASS2, ASS3, PRJ1, PRJ2,
										PRJ3_3, exam, total);
								
//								scores.updateScoreSheetsSummary(sId_TF,CA1_TF, CA2_TF, CA3_TF,ASS1_TF, ASS2_TF, ASS3_TF, 
//										PRJ1_TF, PRJ2_TF, PRJ3_TF, examScore_TF, total_TF);
//								
//								scores.updateAnnualScoreSheetsSummary(sId_TF,CA1_TF, CA2_TF, CA3_TF,ASS1_TF, ASS2_TF, ASS3_TF, 
//										PRJ1_TF, PRJ2_TF, PRJ3_TF, examScore_TF, term_TF, total_TF);
//								
//								scores.updateScoreSheets(sId_TF, stdClassVal, term_TF, CA1_TF, CA2_TF, CA3_TF, examScore_TF, 
//										total_TF,
//										grade_TF, scoresYear_TF);
//								
//								scores.updateAnnualScoresTotal(sId_TF,CA1_TF, CA2_TF, CA3_TF,ASS1_TF, ASS2_TF, ASS3_TF, 
//										PRJ1_TF, PRJ2_TF, PRJ3_TF, examScore_TF, total_TF);
							}
							else {
								Alert alert = new Alert(Alert.AlertType.ERROR);
								alert.setContentText("Error: Scores already exist for this entries ("+ 
								String.valueOf(CA3)+ ")");
								Optional<ButtonType> result = alert.showAndWait();
								if(result.get() == ButtonType.OK) {
									alert.close();
								}
								else {
									alert.close();
								}
							}
						}
						catch(Exception nullable2) {
							Alert alert = new Alert(Alert.AlertType.ERROR);
							alert.setContentText("Error: "+ nullable2.getMessage());
							Optional<ButtonType> result = alert.showAndWait();
							if(result.get() == ButtonType.OK) {
								alert.close();
							}
							else {
								alert.close();
							}
						}
						finally {
							stdClass_TF.setValue("select option");
							term_TF.setValue("select option");
							subjectCode_TF.setValue("select option");
							CA1_TF.setText(String.valueOf(0));
							CA2_TF.setText(String.valueOf(0));
							CA3_TF.setText(String.valueOf(0));
							ASS1_TF.setText(String.valueOf(0));
							ASS2_TF.setText(String.valueOf(0));
							ASS3_TF.setText(String.valueOf(0));
							PRJ1_TF.setText(String.valueOf(0));
							PRJ2_TF.setText(String.valueOf(0));
							PRJ3_TF.setText(String.valueOf(0));
							examScore_TF.setText(String.valueOf(0));
							total_TF.setText(String.valueOf(0));
							grade_TF.setValue("Grade");
							name_TF.setValue("select name");
							subjectName_TF.setValue("select subject");
							scoresYear_TF.setValue("select option");
						}
						
					}
					else {
						throw new Exception("Invalid entries...");
					}
				}
				catch(Exception nullable) {
					Alert alert = new Alert(Alert.AlertType.ERROR);
					alert.setContentText("Error: "+ nullable.getMessage());
					Optional<ButtonType> result = alert.showAndWait();
					if(result.get() == ButtonType.OK) {
						alert.close();
					}
					else {
						alert.close();
					}
				}
			}
			
		}
		catch(Exception e) {
			//sId_TF.setText("Error: "+ e.getMessage());
			
			Alert alert = new Alert(Alert.AlertType.ERROR);
			alert.setContentText("Error: "+ e.getMessage());
			Optional<ButtonType> result = alert.showAndWait();
			if(result.get() == ButtonType.OK) {
				alert.close();
			}
			else {
				alert.close();
			}
		}
	
	}
	
	//exam entry update
	@FXML public void updateScoresButtonExam(ActionEvent event) {
		
		validateScoreSheetsExam();
		
		String stdClassVal = stdClass_TF.getValue();
		
		int numTail = 0;
		if(stdClassVal.contains("JSS")) {
			numTail = 1;
		}
		else if(stdClassVal.contains("SSS")) {
			numTail = 2;
		}
		
		String str = stdId_TF.getText() + stdClassVal + term_TF.getValue()
				+ subjectCode_TF.getValue()+scoresYear_TF.getValue()+String.valueOf(numTail);
		
		if(sId_TF.getText().trim().length() == 0) {
			sId_TF.setText(str);
		}
		else if(!(sId_TF.getText().trim().contains(str))) {
			sId_TF.setText(str);
		}
		
		try {
			try {
				initialize5(null);
			}
			catch(Exception e) {
				e.printStackTrace();
			}
			UpdateScores scores = new UpdateScores();
			
			String stdNumber = stdId_TF.getText();
			String stdTerm = term_TF.getValue();
			int subjectCode = Integer.parseInt(subjectCode_TF.getValue());
			double ASS1 = Double.parseDouble(ASS1_TF.getText()); 
			double ASS2 = Double.parseDouble(ASS2_TF.getText());
			double ASS3 = Double.parseDouble(ASS3_TF.getText());
			double PRJ1 = Double.parseDouble(PRJ1_TF.getText());
			double PRJ2 = Double.parseDouble(PRJ2_TF.getText());
			double PRJ3 = Double.parseDouble(PRJ3_TF.getText()); 
			double exam_2 = Double.parseDouble(examScore_TF.getText());
			double CA1 = Double.parseDouble(CA1_TF.getText());
			double CA2 = Double.parseDouble(CA2_TF.getText());
			double CA3 = Double.parseDouble(CA3_TF.getText());
			
			if(stdClassVal.contains("JSS")) {
				computeTotalAndGrade(exam_2, stdNumber, stdClassVal, stdTerm,
						subjectCode, ASS1, ASS2, ASS3, PRJ1, PRJ2, PRJ3);
			}
			else if(stdClassVal.contains("SSS")) {
				computeTotalAndGrade(CA1, CA2, CA3, exam_2, stdNumber, stdClassVal, 
						stdTerm, subjectCode);
			}
			
			double total = Double.parseDouble(total_TF.getText());
			String grade = grade_TF.getValue();
			String name = name_TF.getValue(); 
			String subjectName = subjectName_TF.getValue();
			String sid = sId_TF.getText(); 
			String year = scoresYear_TF.getValue();
			
			if(stdClassVal.contains("JSS")) {
				
				try {
					if(Double.parseDouble(ASS1_TF.getText()) >= 0 && Double.parseDouble(ASS1_TF.getText()) <= 5 && 
							Double.parseDouble(ASS2_TF.getText()) >= 0 && Double.parseDouble(ASS2_TF.getText()) <= 5 && 
							Double.parseDouble(ASS3_TF.getText()) >= 0 && Double.parseDouble(ASS3_TF.getText()) <= 5 &&
							Double.parseDouble(PRJ1_TF.getText()) >= 0 && Double.parseDouble(PRJ1_TF.getText()) <= 5 &&
							Double.parseDouble(PRJ2_TF.getText()) >= 0 && Double.parseDouble(PRJ2_TF.getText()) <= 5 &&
							Double.parseDouble(PRJ3_TF.getText()) >= 0 && Double.parseDouble(PRJ3_TF.getText()) <= 5 && 
							Double.parseDouble(examScore_TF.getText()) >= 0 && Double.parseDouble(examScore_TF.getText()) <= 70 && 
							Double.parseDouble(total_TF.getText()) >= 0 && Double.parseDouble(total_TF.getText()) <= 100) {
						
						try {
							
							//check for exist values
							double exam = 0;
							
							EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
							EntityManager entitymanager = emfactory.createEntityManager();
							entitymanager.getTransaction().begin();
							
							JssScoreSheets score = entitymanager.find(JssScoreSheets.class, str);
							
							exam = score.getExamScore();
							
							entitymanager.getTransaction().commit();
							entitymanager.close();
							emfactory.close();
							
							if(exam == 0) {
								computeTotalAndGrade(Double.parseDouble(examScore_TF.getText()),
										stdId_TF.getText(),stdClassVal,term_TF.getValue(),
										Integer.parseInt(subjectCode_TF.getValue()),Double.parseDouble(ASS1_TF.getText()),
										Double.parseDouble(ASS2_TF.getText()), Double.parseDouble(ASS3_TF.getText()),
										Double.parseDouble(PRJ1_TF.getText()), Double.parseDouble(PRJ2_TF.getText()),
										Double.parseDouble(PRJ3_TF.getText()));
								
								scores.updateJssScoreSheetsSummary(sid, CA1, CA2, CA3, ASS1, ASS2, ASS3, PRJ1, PRJ2, PRJ3,
										exam_2, total);
								
								scores.updateJssAnnualScoreSheetsSummary(sid, CA1, CA2, CA3, ASS1, ASS2, ASS3, PRJ1, PRJ2,
										PRJ3, exam_2, stdTerm, total);
								
								scores.updateJssScoreSheets(sid, stdClassVal, stdTerm, ASS1, ASS2, ASS3, PRJ1, PRJ2,
										PRJ3, exam_2, total, grade, year);
								
								scores.updateJssAnnualScoresTotal(sid, CA1, CA2, CA3, ASS1, ASS2, ASS3, PRJ1, PRJ2,
										PRJ3, exam_2, total);
								
//								scores.updateJssScoreSheetsSummary(sId_TF,CA1_TF, CA2_TF, CA3_TF,ASS1_TF, ASS2_TF, ASS3_TF, 
//										PRJ1_TF, PRJ2_TF, PRJ3_TF, examScore_TF, total_TF);
//								
//								scores.updateJssAnnualScoreSheetsSummary(sId_TF,CA1_TF, CA2_TF, CA3_TF,ASS1_TF, ASS2_TF, ASS3_TF, 
//										PRJ1_TF, PRJ2_TF, PRJ3_TF, examScore_TF, term_TF, total_TF);
//								
//								scores.updateJssScoreSheets(sId_TF, stdClassVal, term_TF, ASS1_TF, ASS2_TF, ASS3_TF, 
//										PRJ1_TF, PRJ2_TF, PRJ3_TF, examScore_TF, total_TF,  
//										grade_TF, scoresYear_TF);
//								
//								scores.updateJssAnnualScoresTotal(sId_TF,CA1_TF, CA2_TF, CA3_TF,ASS1_TF, ASS2_TF, ASS3_TF, 
//										PRJ1_TF, PRJ2_TF, PRJ3_TF, examScore_TF, total_TF);
							}
							else {
								Alert alert = new Alert(Alert.AlertType.ERROR);
								alert.setContentText("Error: Score already exists for this entry ("+ 
								String.valueOf(exam)+ ")");
								Optional<ButtonType> result = alert.showAndWait();
								if(result.get() == ButtonType.OK) {
									alert.close();
								}
								else {
									alert.close();
								}
							}
						}
						catch(Exception nullable2) {
							Alert alert = new Alert(Alert.AlertType.ERROR);
							alert.setContentText("Error: "+ nullable2.getMessage());
							Optional<ButtonType> result = alert.showAndWait();
							if(result.get() == ButtonType.OK) {
								alert.close();
							}
							else {
								alert.close();
							}
						}
						finally {
							stdClass_TF.setValue("select option");
							term_TF.setValue("select option");
							subjectCode_TF.setValue("select option");
							CA1_TF.setText(String.valueOf(0));
							CA2_TF.setText(String.valueOf(0));
							CA3_TF.setText(String.valueOf(0));
							ASS1_TF.setText(String.valueOf(0));
							ASS2_TF.setText(String.valueOf(0));
							ASS3_TF.setText(String.valueOf(0));
							PRJ1_TF.setText(String.valueOf(0));
							PRJ2_TF.setText(String.valueOf(0));
							PRJ3_TF.setText(String.valueOf(0));
							examScore_TF.setText(String.valueOf(0));
							total_TF.setText(String.valueOf(0));
							grade_TF.setValue("Grade");
							name_TF.setValue("select name");
							subjectName_TF.setValue("select subject");
							scoresYear_TF.setValue("select option");
						}
	
					}
					else {
						throw new Exception("Invalid Entries...");
					}
				}
				catch(Exception nullable) {
					
					Alert alert = new Alert(Alert.AlertType.ERROR);
					alert.setContentText("Error: "+ nullable.getMessage());
					Optional<ButtonType> result = alert.showAndWait();
					if(result.get() == ButtonType.OK) {
						alert.close();
					}
					else {
						alert.close();
					}
				}
			}
			else if(stdClassVal.contains("SSS")){
				
				try {
					if(Double.parseDouble(CA1_TF.getText()) >= 0 && Double.parseDouble(CA1_TF.getText()) <= 10 && 
							Double.parseDouble(CA2_TF.getText()) >= 0 && Double.parseDouble(CA2_TF.getText()) <= 10 && 
							Double.parseDouble(CA3_TF.getText()) >= 0 && Double.parseDouble(CA3_TF.getText()) <= 10 && 
							Double.parseDouble(examScore_TF.getText()) >= 0 && Double.parseDouble(examScore_TF.getText()) <= 70 && 
							Double.parseDouble(total_TF.getText()) >= 0 && Double.parseDouble(total_TF.getText()) <= 100) {
						
						try {
							
							//check for exist values
							double exam = 0;
							
							EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
							EntityManager entitymanager = emfactory.createEntityManager();
							entitymanager.getTransaction().begin();
							
							ScoreSheets score = entitymanager.find(ScoreSheets.class, str);
							
							exam = score.getExamScore();
							
							entitymanager.getTransaction().commit();
							entitymanager.close();
							emfactory.close();
							
							if(exam == 0) {
								computeTotalAndGrade(Double.parseDouble(CA1_TF.getText()),Double.parseDouble(CA2_TF.getText()),
										Double.parseDouble(CA3_TF.getText()),Double.parseDouble(examScore_TF.getText()),
										stdId_TF.getText(),stdClassVal,term_TF.getValue(),
										Integer.parseInt(subjectCode_TF.getValue()));
								
								scores.updateScoreSheetsSummary(sid, CA1, CA2, CA3, ASS1, ASS2, ASS3, PRJ1, PRJ2,
										PRJ3, exam_2, total);
								
								scores.updateAnnualScoreSheetsSummary(sid, CA1, CA2, CA3, ASS1, ASS2, ASS3,
										PRJ1, PRJ2, PRJ3, exam_2, stdTerm, total);
								
								scores.updateScoreSheets(sid, stdClassVal, stdTerm, CA1, CA2, CA3,
										exam_2, total, grade, year);
								
								scores.updateAnnualScoresTotal(sid, CA1, CA2, CA3, ASS1, ASS2, ASS3,
										PRJ1, PRJ2, PRJ3, exam_2, total);
								
//								scores.updateScoreSheetsSummary(sId_TF,CA1_TF, CA2_TF, CA3_TF,ASS1_TF, ASS2_TF, ASS3_TF, 
//										PRJ1_TF, PRJ2_TF, PRJ3_TF, examScore_TF, total_TF);
//								
//								scores.updateAnnualScoreSheetsSummary(sId_TF,CA1_TF, CA2_TF, CA3_TF,ASS1_TF, ASS2_TF, ASS3_TF, 
//										PRJ1_TF, PRJ2_TF, PRJ3_TF, examScore_TF, term_TF, total_TF);
//								
//								scores.updateScoreSheets(sId_TF, stdClassVal, term_TF, CA1_TF, CA2_TF, CA3_TF, examScore_TF, 
//										total_TF,
//										grade_TF, scoresYear_TF);
//								
//								scores.updateAnnualScoresTotal(sId_TF,CA1_TF, CA2_TF, CA3_TF,ASS1_TF, ASS2_TF, ASS3_TF, 
//										PRJ1_TF, PRJ2_TF, PRJ3_TF, examScore_TF, total_TF);
							}
							else {
								Alert alert = new Alert(Alert.AlertType.ERROR);
								alert.setContentText("Error: Score already exists for this entry ("+ 
								String.valueOf(exam)+ ")");
								Optional<ButtonType> result = alert.showAndWait();
								if(result.get() == ButtonType.OK) {
									alert.close();
								}
								else {
									alert.close();
								}
							}
						}
						catch(Exception nullable2) {
							Alert alert = new Alert(Alert.AlertType.ERROR);
							alert.setContentText("Error: "+ nullable2.getMessage());
							Optional<ButtonType> result = alert.showAndWait();
							if(result.get() == ButtonType.OK) {
								alert.close();
							}
							else {
								alert.close();
							}
						}
						finally {
							stdClass_TF.setValue("select option");
							term_TF.setValue("select option");
							subjectCode_TF.setValue("select option");
							CA1_TF.setText(String.valueOf(0));
							CA2_TF.setText(String.valueOf(0));
							CA3_TF.setText(String.valueOf(0));
							ASS1_TF.setText(String.valueOf(0));
							ASS2_TF.setText(String.valueOf(0));
							ASS3_TF.setText(String.valueOf(0));
							PRJ1_TF.setText(String.valueOf(0));
							PRJ2_TF.setText(String.valueOf(0));
							PRJ3_TF.setText(String.valueOf(0));
							examScore_TF.setText(String.valueOf(0));
							total_TF.setText(String.valueOf(0));
							grade_TF.setValue("Grade");
							name_TF.setValue("select name");
							subjectName_TF.setValue("select subject");
							scoresYear_TF.setValue("select option");
						}
						
					}
					else {
						throw new Exception("Invalid entries...");
					}
				}
				catch(Exception nullable) {
					Alert alert = new Alert(Alert.AlertType.ERROR);
					alert.setContentText("Error: "+ nullable.getMessage());
					Optional<ButtonType> result = alert.showAndWait();
					if(result.get() == ButtonType.OK) {
						alert.close();
					}
					else {
						alert.close();
					}
				}
			}
			
		}
		catch(Exception e) {
			//sId_TF.setText("Error: "+ e.getMessage());
			
			Alert alert = new Alert(Alert.AlertType.ERROR);
			alert.setContentText("Error: "+ e.getMessage());
			Optional<ButtonType> result = alert.showAndWait();
			if(result.get() == ButtonType.OK) {
				alert.close();
			}
			else {
				alert.close();
			}
		}
	
	}
	
	@FXML public void deleteScoresButton(ActionEvent event) {
		if(true) {
			Alert alert = new Alert(Alert.AlertType.CONFIRMATION);
			alert.setContentText("Are you sure you want to delete these scores...");
			Optional<ButtonType> result = alert.showAndWait();
			if(result.get() == ButtonType.OK) {
				String delVal = sId_TF.getText();
				String stdNo = stdId_TF.getText();
				
				try {
					DeleteScores scores = new DeleteScores();
					
					scores.deleteScoreSheetsSummary(sId_TF);
					
					scores.deleteAnnualScoresTotal(sId_TF);
					
					scores.deleteAnnualScoreSheetsSummary(sId_TF, term_TF);
					
					if(delVal.charAt(delVal.length()-1) == '1') {
						scores.deleteJssScores(sId_TF);
					}
					else {
						scores.deleteScores(sId_TF);
					}
					
					
					try {
						DeleteScores scores2 = new DeleteScores();
						scores2.deleteScores_SID(stdId_TF.getText(), sId_TF.getText());
					}
					catch(Exception e) {
						sId_TF.setText("Error Deleting scores from student set: "+ e.getMessage());
					}
					
					EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
					EntityManager entitymanager = emfactory.createEntityManager();
					entitymanager.getTransaction().begin();
					
					Students thisStd = entitymanager.find(Students.class, stdNo);
					
					//***
					//std.setScores_sId(sId);
					//thisStd.getScores_sId().remove(delVal);
					
					entitymanager.getTransaction().commit();
					
					entitymanager.close();
					emfactory.close();
					
					Alert alert2 = new Alert(Alert.AlertType.INFORMATION);
					alert2.setContentText("Success: "+ delVal + " deleted...");
					Optional<ButtonType> result2 = alert2.showAndWait();
					if(result2.get() == ButtonType.OK) {
						alert2.close();
					}
					else {
						alert2.close();
					}
					
				}
				catch(Exception e) {
					//sId_TF.setText("Error: "+ e.getMessage());
					Alert alert3 = new Alert(Alert.AlertType.ERROR);
					alert3.setContentText("Error: "+ e.getLocalizedMessage());
					Optional<ButtonType> result3 = alert3.showAndWait();
					if(result3.get() == ButtonType.OK) {
						alert3.close();
					}
					else {
						alert3.close();
					}
				}
				finally {
					//stdId_TF.clear(); 
					stdClass_TF.setValue("select option"); 
					term_TF.setValue("select option");
					subjectCode_TF.setValue("select option");
					CA1_TF.setText(String.valueOf(0));
					CA2_TF.setText(String.valueOf(0));
					CA3_TF.setText(String.valueOf(0));
					ASS1_TF.setText(String.valueOf(0));
					ASS2_TF.setText(String.valueOf(0));
					ASS3_TF.setText(String.valueOf(0));
					PRJ1_TF.setText(String.valueOf(0));
					PRJ2_TF.setText(String.valueOf(0));
					PRJ3_TF.setText(String.valueOf(0));
					examScore_TF.setText(String.valueOf(0));
					total_TF.setText(String.valueOf(0));
					grade_TF.setValue("Grade");
					name_TF.setValue("select name");
					subjectName_TF.setValue("select subject");
					scoresYear_TF.setValue("select option");
				}
			}
			else {
				alert.close();
			}
		}	
	}
	
	//Subjects Controller
	@FXML protected TextField subjectIdTF;
	@FXML protected ComboBox<String> subjectNameTF;
	@FXML protected TextField teacherNameTF;
	
	@FXML public void subjectComboInit(MouseEvent event) {
		//search by subject name
		Vector<SubjectNames> userData3 = new Vector<>();
		try {
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			Query query2 =
					entitymanager.createQuery("select e from SubjectNames e ");
			userData3 = (Vector<SubjectNames>) query2.getResultList();
			
			for(SubjectNames x : userData3) {
				if(!(subjCombo.contains(x.getSubjectName()))) {
					subjCombo.add(x.getSubjectName());
				}
			}
			
			subjectNameTF.setItems(subjCombo);
			
			entitymanager.getTransaction().commit();
			entitymanager.close();
			emfactory.close();
			
			new AutoCompleteComboBoxListener<>(subjectNameTF);
		}
		catch(Exception e) {
			e.printStackTrace();
		}
		
		if(!(subjectNameTF.getValue().trim().isEmpty())) {
			String name = subjectNameTF.getValue();
			for(SubjectNames std : userData3) {
				if((std.getSubjectName().equals(name))) {
					subjectIdTF.setText(String.valueOf(std.getSubjectCode()));
				}
			}
		}
	}
	
	public void saveButton(ActionEvent event) {
		CreateSubjects subj = new CreateSubjects();
		try {
			subj.createSubject(subjectIdTF, subjectNameTF, teacherNameTF);
			//subjectCodeN.add(Integer.parseInt(subjectIdTF.getText()));
		}
		catch(Exception e) {
			subjectIdTF.setText(e.getMessage());
		}
		
		subjectNameTF.setValue("select subject");
		teacherNameTF.clear();
	}
	
	public void updateSubjectButton(ActionEvent event) {
		UpdateSubjects update = new UpdateSubjects();
		update.updateSubjects(subjectIdTF, subjectNameTF, teacherNameTF);
		subjectNameTF.setValue("select subject");
		teacherNameTF.clear();}
	
	public void validateSubjectButton(ActionEvent event) {
		
		EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
		EntityManager entitymanager = emfactory.createEntityManager();
		entitymanager.getTransaction().begin();
		
		int id = Integer.parseInt(subjectIdTF.getText());
		
		try {
			SubjectNames validate = entitymanager.find(SubjectNames.class, id);
			
			subjectNameTF.setValue(validate.getSubjectName());
			teacherNameTF.setText(validate.getTeacher());
		}
		catch(Exception e) {
			subjectIdTF.setText("Error: "+ e.getMessage());	
			subjectNameTF.setValue("select subject");
			teacherNameTF.clear();
		}

		entitymanager.getTransaction().commit();
		entitymanager.close();
		emfactory.close();
	}
	
	public void deleteSubjectButton(ActionEvent event) {
		DeleteSubjects del = new DeleteSubjects();
		del.deleteSubject(subjectIdTF);
		subjectNameTF.setValue("select subject");
		teacherNameTF.clear();
	}
	
	//CreateUser Controller
	@FXML ComboBox<String> userName_TextField;
	@FXML TextField name_TextField;
	@FXML TextField userStaffID;
	@FXML PasswordField password_TextField;
	@FXML ComboBox<String> userClass_TextField;
	@FXML TextField dept_TextField;
	@FXML Label usersLabel;
	
	@FXML ObservableList<String> userClassification = FXCollections.observableArrayList("Admin",
			"Cashier","Teacher","AdmissionOfficer","SecurityOfficer","Dean","Sub-Dean","Bursar",
			"Boarding-Master","Counsellor","Vice-Principal","Principal","Computer-Operator");
	
	@FXML public void initialize9(MouseEvent event) {
		userClass_TextField.setItems(userClassification);
	}
	
	@FXML public void initialize9USR(MouseEvent event) {
		populateUsersCombo(userName_TextField);
	}
	
	public void populateUsersCombo(ComboBox<String> combo) {
		ObservableList<String> list = FXCollections.observableArrayList();
		try {
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			Vector<Users> userData = new Vector<>();
			Query queryX =
					entitymanager.createQuery("select e from Users e ");
			userData = (Vector<Users>) queryX.getResultList();
			
			for(Users x : userData) {
				if(!(list.contains(x.getUserName()))) {
					if(!x.getUserName().equals("") || !x.getUserName().contains("Error")) {
					
						list.add(x.getUserName());
					}
				}
			}
			
			combo.setItems(list);
			
			entitymanager.getTransaction().commit();
			entitymanager.close();
			emfactory.close();
			
			new AutoCompleteComboBoxListener<>(combo);
		}
		catch(Exception e) {
			e.printStackTrace();
		}
	}
	
	@FXML public void initializeUsersNameText(MouseEvent event) {
		String staffID = userStaffID.getText();
		
		EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
		EntityManager entitymanager = emfactory.createEntityManager();
		entitymanager.getTransaction().begin();
		
		Staff staff = entitymanager.find(Staff.class, staffID);
		
		name_TextField.setText(staff.getOtherNames()+" "+staff.getSurName());
		
		entitymanager.getTransaction().commit();
		entitymanager.close();
		emfactory.close();
	}
	
	@FXML 
	public void createUserButton(ActionEvent event) {
		initializeUsersNameText(null);
		try {
			CreateUser user = new CreateUser();
			user.createUser(userName_TextField.getValue().toUpperCase(), userStaffID, name_TextField, 
					AES.encrypt(userName_TextField.getValue(), secretKey), 
					userClass_TextField, dept_TextField);
		}
		catch(Exception e) {
			usersLabel.setText("Error: "+ e.getMessage());
		}
		finally {
			name_TextField.clear();
			password_TextField.clear();
			userClass_TextField.setValue("select option");;
			dept_TextField.clear();
			userStaffID.clear();
		}
	}
	
	@FXML 
	public void updateUserButton(ActionEvent event) {
		initializeUsersNameText(null);
		try {
			UpdateUser user = new UpdateUser();
			user.updateUser(userName_TextField, userStaffID, name_TextField, password_TextField, 
					userClass_TextField, dept_TextField);
		}
		catch(Exception e) {
			usersLabel.setText("Error: "+ e.getMessage());
		}
		finally {
			name_TextField.clear();
			password_TextField.clear();
			userClass_TextField.setValue("select option");;
			dept_TextField.clear();
			userStaffID.clear();
		}
	}
	
	@FXML public void verifyuserNameButton(ActionEvent event) {
		try {
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			String userName = userName_TextField.getValue();
			Users user = entitymanager.find(Users.class, userName);
			try {
				userStaffID.setText(user.getUserStaffID());
				name_TextField.setText(user.getName());
				userClass_TextField.setValue(user.getUserClass());
				dept_TextField.setText(user.getDept());
			}
			catch(Exception e) {
				usersLabel.setText("Error: "+e.getMessage());
				userStaffID.clear();
				name_TextField.clear();
				userClass_TextField.setValue("select option");
				dept_TextField.clear();
			}
			
			entitymanager.getTransaction().commit();
			
			entitymanager.close();
			emfactory.close();
		}
		catch(Exception e) {
			usersLabel.setText("Error: "+e.getMessage());
			userStaffID.clear();
			name_TextField.clear();
			userClass_TextField.setValue("select option");
			dept_TextField.clear();
		}
	}
	
	@FXML public void deleteUserNameButton(ActionEvent event) {
		DeleteUser user = new DeleteUser();
		try {
			user.deleteUser(userName_TextField);
		}
		catch(Exception e) {
			usersLabel.setText("Error: "+e.getLocalizedMessage());
		}
		finally {
			userStaffID.clear();
			name_TextField.clear();
			password_TextField.clear();
			userClass_TextField.setValue("select option");
			dept_TextField.clear();
		}
	}
	
	@FXML public void resetUserButton(ActionEvent event) {
		try {
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			String userName = userName_TextField.getValue();
			Users user = entitymanager.find(Users.class, userName);
			
			user.setPassword(AES.encrypt(user.getUserName(), secretKey));
			
			entitymanager.persist(user);
			entitymanager.getTransaction().commit();
			
			String userStr = user.getUserName();
			usersLabel.setText("Password reset for "+userStr+ " was successful...");
			
			entitymanager.close();
			emfactory.close();
			
		}
		catch(Exception e) {
			usersLabel.setText("Error: "+e.getMessage());
		}
		finally {
			userStaffID.clear();
			name_TextField.clear();
			userClass_TextField.setValue("select option");;
			dept_TextField.clear();
		}
	}
	
	//Password Change Controller
	@FXML TextField pwdUserName_TF;
	@FXML PasswordField pwdCurrent_TF;
	@FXML PasswordField pwdNew_TF;
	@FXML PasswordField pwdNewConfirm_TF;
	
	//admin password change
	@FXML TextField pwdUserName_TF2;
	@FXML PasswordField pwdCurrent_TF2;
	@FXML PasswordField pwdNew_TF2;
	@FXML PasswordField pwdNewConfirm_TF2;
	
	@FXML public void pwdChangeButton(ActionEvent event) {
		changePWD(pwdUserName_TF.getText(),pwdCurrent_TF.getText(),
				pwdNew_TF.getText(),pwdNewConfirm_TF.getText());
	}
	static String dispUserName2;
	
	@FXML public void pwdChangeButton2(ActionEvent event) {
		
		try {
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			String userName = pwdUserName_TF2.getText();
			
			Users user = entitymanager.find(Users.class, userName);
			
			if(pwdCurrent_TF2.getText().equals(AES.decrypt(user.getPassword(), secretKey))) {
				if(dispUserName2.equalsIgnoreCase(user.getUserName())) {
					if(pwdNew_TF2.getText().equals(pwdNewConfirm_TF2.getText())) {
						try {
							user.setPassword(AES.encrypt(pwdNew_TF2.getText(), secretKey));
							pwdUserName_TF2.setText("Password Change Successful!");
						}
						catch(Exception e) {
							pwdUserName_TF2.setText("Error: "+e.getLocalizedMessage());
						}
						finally {
							pwdCurrent_TF2.clear();
							pwdNew_TF2.clear();
							pwdNewConfirm_TF2.clear();
						}
					}
					else {
						pwdUserName_TF2.setText("New password and confirm password mismatch!");
					}
				}
				else {
					pwdUserName_TF2.setText("You can only change password for your username...");
				}
			}
			else {
				pwdUserName_TF2.setText("Wrong current password. Check that your capslock is not on...");
			}
			
			entitymanager.persist(user);
			entitymanager.getTransaction().commit();
			
			entitymanager.close();
			emfactory.close();
		}
		catch(Exception e) {
			pwdUserName_TF2.setText("Error: "+e.getMessage());
		}
	}
	
	public void changePWD(String userName, String currentPassword,
			String newPassword,String confirmPassword) {
		try {
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			Users user = entitymanager.find(Users.class, userName);
			
			if(currentPassword.equals(AES.decrypt(user.getPassword(), secretKey))) {
				if(dispUserName.equalsIgnoreCase(user.getUserName())) {
					if(newPassword.equals(confirmPassword)) {
						try {
							user.setPassword(AES.encrypt(newPassword, secretKey));
							pwdUserName_TF.setText("Password Change Successful!");
						}
						catch(Exception e) {
							pwdUserName_TF.setText("Error: "+e.getLocalizedMessage());
						}
						finally {
							pwdCurrent_TF.clear();
							pwdNew_TF.clear();
							pwdNewConfirm_TF.clear();
						}
					}
					else {
						pwdUserName_TF.setText("New password and confirm password mismatch!");
					}
				}
				else {
					pwdUserName_TF.setText("You can only change password for your username...");
				}
			}
			else {
				pwdUserName_TF.setText("Wrong current password. Check that your capslock is not on...");
			}
			
			entitymanager.persist(user);
			entitymanager.getTransaction().commit();
			
			entitymanager.close();
			emfactory.close();
		}
		catch(Exception e) {
			pwdUserName_TF.setText("Error: "+e.getMessage());
		}
	}
	
	//Student Payments Management Controller
	@FXML TextField paymentId_TF, stdId_fin_TF, stdName_fin_TF;
	@FXML ComboBox<String> description_fin_TF, academicYear_fin_TF, stdClass_fin_TF, stdTerm_fin_TF;
	@FXML TextField paymentBy_TF, receivedBy_TF;
	@FXML DatePicker date_fin_TF;
	@FXML TextField totalPaymentDue_TF, actualPaymentMade_TF, balanceDue_TF, receiptNo_TF;
	
	ObservableList<String> classNo = FXCollections.observableArrayList("select option","1","2","3","4",
			"5","6");
	//ObservableList<String> stdClassN3 = FXCollections.observableArrayList("select option","1","2","3","4","5","6");
	//ObservableList<String> termN3 = FXCollections.observableArrayList("select option","1","2","3");
	ObservableList<String> description = FXCollections.observableArrayList("select option","WAEC/SSCE","NECO",
			"School fees","PTA","ICT fee","Tuition","Boarding","Medical","JAMB",
			"Extra Lesson","Maintenance","Brakages","Excursion","Library",
			"Science Lab","Music Class","Sports");
	//ObservableList<String> years3 = FXCollections.observableArrayList("select",
			//"2017","2018","2019","2020","2021","2022","2023","2024","2025","2026","2027","2028","2029",
			//"2030","2031","2032","2033","2034","2035","2036","2037","2038","2039","2040");
	
	@FXML public void initialize7(MouseEvent event) {
		academicYear_fin_TF.setItems(years);
		description_fin_TF.setItems(description);
		stdClass_fin_TF.setItems(classNo);
		stdTerm_fin_TF.setItems(termN);
	}
	
	@FXML
	public void createStdPaymentProfile(ActionEvent event) {
		String stdId_x = stdId_fin_TF.getText();
		verifyId2(stdId_x);
		
		String termStr = stdTerm_fin_TF.getValue();
		if(termStr.equals("1")) {
			String PIDStr = stdId_fin_TF.getText()+academicYear_fin_TF.getValue()+"0001";
			receiptNo_TF.setText("0001");
			paymentId_TF.setText(PIDStr);
			try {
				CreateStudentPayment pay = new CreateStudentPayment();
				pay.createStudentPayment(paymentId_TF, stdId_fin_TF, stdName_fin_TF, 
						description_fin_TF, academicYear_fin_TF, stdClass_fin_TF, 
						stdTerm_fin_TF, paymentBy_TF, receivedBy_TF, date_fin_TF.getValue(), 
						totalPaymentDue_TF, actualPaymentMade_TF, balanceDue_TF, 
						receiptNo_TF, dispName);
				try {
					//CreateStudentPayment pay2 = new CreateStudentPayment();
					pay.createPID(stdId_x, PIDStr);
				}
				catch(Exception ex) {
					paymentId_TF.setText("createPID error: "+ex.getLocalizedMessage());
				}
			}
			catch(Exception e) {
				paymentId_TF.setText("CreatePayment error: " + e.getLocalizedMessage());
			}
			finally { 
				stdId_fin_TF.clear();
				stdName_fin_TF.clear();
				description_fin_TF.setValue("select option");
				academicYear_fin_TF.setValue("select option");
				stdClass_fin_TF.setValue("select option");
				stdTerm_fin_TF.setValue("select option");
				paymentBy_TF.clear(); 
				receivedBy_TF.clear();
				date_fin_TF.setValue(LocalDate.now());
				totalPaymentDue_TF.clear();
				actualPaymentMade_TF.clear();
				balanceDue_TF.clear(); 
				receiptNo_TF.clear();
			}
		}
		else if(termStr.equals("2")) {
			String PIDStr = stdId_fin_TF.getText()+academicYear_fin_TF.getValue()+"0002";
			receiptNo_TF.setText("0002");
			paymentId_TF.setText(PIDStr);
			try {
				CreateStudentPayment pay = new CreateStudentPayment();
				pay.createStudentPayment(paymentId_TF, stdId_fin_TF, stdName_fin_TF, 
						description_fin_TF, academicYear_fin_TF, stdClass_fin_TF, 
						stdTerm_fin_TF, paymentBy_TF, receivedBy_TF, date_fin_TF.getValue(), 
						totalPaymentDue_TF, actualPaymentMade_TF, balanceDue_TF, 
						receiptNo_TF, dispName);
				try {
					//CreateStudentPayment pay2 = new CreateStudentPayment();
					pay.createPID(stdId_x, PIDStr);
				}
				catch(Exception ex) {
					paymentId_TF.setText("createPID error: "+ex.getLocalizedMessage());
				}
			}
			catch(Exception e) {
				paymentId_TF.setText("CreatePayment error: " + e.getLocalizedMessage());
			}
			finally { 
				stdId_fin_TF.clear();
				stdName_fin_TF.clear();
				description_fin_TF.setValue("select option");
				academicYear_fin_TF.setValue("select option");
				stdClass_fin_TF.setValue("select option");
				stdTerm_fin_TF.setValue("select option");
				paymentBy_TF.clear(); 
				receivedBy_TF.clear();
				date_fin_TF.setValue(LocalDate.now());
				totalPaymentDue_TF.clear();
				actualPaymentMade_TF.clear();
				balanceDue_TF.clear(); 
				receiptNo_TF.clear();
			}
		}
		
		
		else {
			String PIDStr = stdId_fin_TF.getText()+academicYear_fin_TF.getValue()+"0003";
			receiptNo_TF.setText("0003");
			paymentId_TF.setText(PIDStr);
			try {
				CreateStudentPayment pay = new CreateStudentPayment();
				pay.createStudentPayment(paymentId_TF, stdId_fin_TF, stdName_fin_TF, 
						description_fin_TF, academicYear_fin_TF, stdClass_fin_TF, 
						stdTerm_fin_TF, paymentBy_TF, receivedBy_TF, date_fin_TF.getValue(), 
						totalPaymentDue_TF, actualPaymentMade_TF, balanceDue_TF, 
						receiptNo_TF, dispName);
				try {
					//CreateStudentPayment pay2 = new CreateStudentPayment();
					pay.createPID(stdId_x, PIDStr);
				}
				catch(Exception ex) {
					paymentId_TF.setText("createPID error: "+ex.getLocalizedMessage());
				}
			}
			catch(Exception e) {
				paymentId_TF.setText("CreatePayment error: " + e.getLocalizedMessage());
			}
			finally { 
				stdId_fin_TF.clear();
				stdName_fin_TF.clear();
				description_fin_TF.setValue("select option");
				academicYear_fin_TF.setValue("select option");
				stdClass_fin_TF.setValue("select option");
				stdTerm_fin_TF.setValue("select option");
				paymentBy_TF.clear(); 
				receivedBy_TF.clear();
				date_fin_TF.setValue(LocalDate.now());
				totalPaymentDue_TF.clear();
				actualPaymentMade_TF.clear();
				balanceDue_TF.clear(); 
				receiptNo_TF.clear();
			}
		}
	}
	
	public void verifyId2(String stdId) {
		try {
			String sName, oNames;
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			Students std = entitymanager.find(Students.class, stdId);
			sName = std.getSurName();
			oNames = std.getOtherNames();
			
			stdName_fin_TF.setText(oNames+" "+sName);
			
			entitymanager.getTransaction().commit();
			
			entitymanager.close();
			emfactory.close();
		}
		catch(Exception e) {
			stdName_fin_TF.setText("Verify Id Error: "+ e.getLocalizedMessage());;
		}
	}
	
	@FXML
	public void verifyStdIdentification(ActionEvent event) {
		try {
			String stdId_x = stdId_fin_TF.getText();
			verifyId2(stdId_x);
		}
		catch(Exception e) {
			stdId_fin_TF.setText("Validate ID error: "+e.getMessage());
		}
	}
	
	@FXML
	public void validateStdPaymentProfile(ActionEvent event) {
		String str = paymentId_TF.getText();
		try {
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			StudentPayments pay = entitymanager.find(StudentPayments.class, str);
			
			LocalDate localDate = pay.getDate_fin();
			 
			stdId_fin_TF.setText(String.valueOf(pay.getStdId_fin()));
			stdName_fin_TF.setText(pay.getStdName_fin());
			description_fin_TF.setValue(pay.getDescription_fin());
			academicYear_fin_TF.setValue(pay.getAcademicYear_fin());
			stdClass_fin_TF.setValue(String.valueOf(pay.getStdClass_fin()));
			stdTerm_fin_TF.setValue(String.valueOf(pay.getStdTerm_fin()));
			paymentBy_TF.setText(pay.getPaymentBy());
			receivedBy_TF.setText(pay.getReceivedBy());
			date_fin_TF.setValue(localDate);
			totalPaymentDue_TF.setText(String.valueOf(pay.getTotalPaymentDue())); 
			actualPaymentMade_TF.setText(String.valueOf(pay.getActualPaymentMade())); 
			balanceDue_TF.setText(String.valueOf(pay.getBalanceDue())); 
			
			LinkedHashSet<String> newSet = pay.getReceiptNoSet();
			for(String e : newSet) {
				if (paymentId_TF.getText().contains(e)) {
					receiptNo_TF.setText(e);
				}
			}
			
			entitymanager.getTransaction().commit();
			
			entitymanager.close();
			emfactory.close();
		}
		catch(Exception e) {
			paymentId_TF.setText("Validate Error: "+ e.getLocalizedMessage());
			stdId_fin_TF.clear();
			stdName_fin_TF.clear();
			description_fin_TF.setValue("select option");
			academicYear_fin_TF.setValue("select option");
			stdClass_fin_TF.setValue("select option");
			stdTerm_fin_TF.setValue("select option");
			paymentBy_TF.clear();
			receivedBy_TF.clear();
			date_fin_TF.setValue(LocalDate.now());
			totalPaymentDue_TF.clear(); 
			actualPaymentMade_TF.clear();
			balanceDue_TF.clear();
		}
	}
	
	@FXML public void validateLastPayment(MouseEvent event) {
		String stdNo = stdId_fin_TF.getText();
		
		EntityManagerFactory emfactory1 = Persistence.createEntityManagerFactory("SchoolMgtSystem");
		EntityManager entitymanager1 = emfactory1.createEntityManager();
		entitymanager1.getTransaction().begin();
		
		Students std = entitymanager1.find(Students.class, stdNo);
		
		LinkedHashSet<String> paySet = std.getPaymentIdSet();
		LinkedHashSet<String> paySet2 = new LinkedHashSet<>();
		for(String e: paySet) {
			if(e.contains(stdNo)) {
				paySet2.add(e);
			}
		}
		
		String str = (String) paySet2.toArray()[paySet2.size()-1];
		
		try {
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			StudentPayments pay = entitymanager.find(StudentPayments.class, str);
			
			LocalDate localDate = pay.getDate_fin();
			 
			//stdId_fin_TF.setText(String.valueOf(pay.getStdId_fin()));
			stdName_fin_TF.setText(pay.getStdName_fin());
			description_fin_TF.setValue(pay.getDescription_fin());
			academicYear_fin_TF.setValue(pay.getAcademicYear_fin());
			stdClass_fin_TF.setValue(String.valueOf(pay.getStdClass_fin()));
			stdTerm_fin_TF.setValue(String.valueOf(pay.getStdTerm_fin()));
			paymentBy_TF.setText(pay.getPaymentBy());
			receivedBy_TF.setText(pay.getReceivedBy());
			date_fin_TF.setValue(localDate);
			totalPaymentDue_TF.setText(String.valueOf(pay.getTotalPaymentDue())); 
			actualPaymentMade_TF.setText(String.valueOf(0.0)); 
			balanceDue_TF.setText(String.valueOf(pay.getBalanceDue())); 
			
//			Set<String> newSet = pay.getReceiptNoSet();
//			for(String e : newSet) {
//				if (paymentId_TF.getText().contains(e)) {
//					receiptNo_TF.setText(e);
//				}
//			}
			LinkedHashSet<String> receipt = new LinkedHashSet<>();
			receipt = pay.getReceiptNoSet();
			
			receiptNo_TF.setText((String)receipt.toArray()[receipt.size()-1]);
			
			entitymanager.getTransaction().commit();
			
			entitymanager.close();
			emfactory.close();
		}
		catch(Exception e) {
			paymentId_TF.setText("Validate Error: "+ e.getLocalizedMessage());
			//stdId_fin_TF.clear();
			stdName_fin_TF.clear();
			description_fin_TF.setValue("select option");
			academicYear_fin_TF.setValue("select option");
			stdClass_fin_TF.setValue("select option");
			stdTerm_fin_TF.setValue("select option");
			paymentBy_TF.clear();
			receivedBy_TF.clear();
			date_fin_TF.setValue(LocalDate.now());
			totalPaymentDue_TF.clear(); 
			actualPaymentMade_TF.clear();
			balanceDue_TF.clear();
		}
		
		entitymanager1.getTransaction().commit();
		
		entitymanager1.close();
		emfactory1.close();
	}
	
	@FXML
	public void updateStdPaymentProfile(ActionEvent event) {
		try {
			UpdateStudentPayment update = new UpdateStudentPayment();
			update.updateStudentPayment(paymentId_TF, academicYear_fin_TF, 
					stdClass_fin_TF, stdTerm_fin_TF, description_fin_TF, 
					actualPaymentMade_TF, paymentBy_TF, receivedBy_TF, date_fin_TF.getValue());
		}
		catch(Exception e) {
			paymentId_TF.setText("Update Error: "+e.getMessage());
		}
		finally {
			stdId_fin_TF.clear();
			stdName_fin_TF.clear();
			description_fin_TF.setValue("select option");
			academicYear_fin_TF.setValue("select option");
			stdClass_fin_TF.setValue("select option");
			stdTerm_fin_TF.setValue("select option");
			paymentBy_TF.clear();
			receivedBy_TF.clear();
			date_fin_TF.setValue(LocalDate.now());
			totalPaymentDue_TF.clear(); 
			actualPaymentMade_TF.clear();
			balanceDue_TF.clear();
		}
	}
	
	@FXML
	public void addStdPaymentProfile(ActionEvent event) {
		String stdId_x = stdId_fin_TF.getText();
		String returnedPID = stdId_fin_TF.getText()+academicYear_fin_TF.getValue()+receiptNo_TF.getText();
		verifyId2(stdId_x);
		try {
			CreateStudentPayment pay = new CreateStudentPayment();
			pay.addStudentPayment(paymentId_TF, stdId_fin_TF, stdName_fin_TF, 
					description_fin_TF, academicYear_fin_TF, stdClass_fin_TF, 
					stdTerm_fin_TF, paymentBy_TF, receivedBy_TF, date_fin_TF.getValue(), 
					totalPaymentDue_TF, actualPaymentMade_TF, balanceDue_TF, 
					receiptNo_TF, dispName);
			try {
				EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
				EntityManager entitymanager = emfactory.createEntityManager();
				entitymanager.getTransaction().begin();
				
				Students std = entitymanager.find(Students.class, stdId_x);
				
				LinkedHashSet<String> PID = std.getPaymentIdSet();
				if(!(PID.contains(returnedPID))) {
					std.setPaymentIdSet(returnedPID);
				}
				
				entitymanager.persist(std);
				entitymanager.getTransaction().commit();
				
				entitymanager.close();
				emfactory.close();
			}
			catch(Exception e) {
				paymentId_TF.setText("Returned PID Error: "+ e.getMessage());
			}
			try {
				//CreateStudentPayment pay2 = new CreateStudentPayment();
				pay.createPID(stdId_x, paymentId_TF.getText());
				paymentId_TF.setText(returnedPID);
			}
			catch(Exception ex) {
				paymentId_TF.setText("createPID error: "+ex.getLocalizedMessage());
			}
		}
		catch(Exception e) {
			stdId_fin_TF.setText("CreatePayment error: " + e.getLocalizedMessage());
		}
		finally { 
			stdId_fin_TF.clear();
			stdName_fin_TF.clear();
			description_fin_TF.setValue("select option");
			academicYear_fin_TF.setValue("select option");
			stdClass_fin_TF.setValue("select option");
			stdTerm_fin_TF.setValue("select option");
			paymentBy_TF.clear(); 
			receivedBy_TF.clear();
			date_fin_TF.setValue(LocalDate.now());
			totalPaymentDue_TF.clear();
			actualPaymentMade_TF.clear();
			balanceDue_TF.clear(); 
			receiptNo_TF.clear();
		}
	}
	
	@FXML 
	public void deleteStdPaymentButton(ActionEvent event) {
		try {
			DeleteStudentPayment delete = new DeleteStudentPayment();
			delete.deleteStudentPayment(paymentId_TF.getText());
			try {
				delete.deletePID(stdId_fin_TF.getText(), paymentId_TF.getText());
			}
			catch(Exception ex) {
				paymentId_TF.setText("Error deleting PID from Students: "+ex.getMessage());
			}
		}
		catch(Exception e) {
			paymentId_TF.setText("Delete Error: "+e.getLocalizedMessage());
		}
		finally { 
			stdId_fin_TF.clear();
			stdName_fin_TF.clear();
			description_fin_TF.setValue("select option");
			academicYear_fin_TF.setValue("select option");
			stdClass_fin_TF.setValue("select option");
			stdTerm_fin_TF.setValue("select option");
			paymentBy_TF.clear(); 
			receivedBy_TF.clear();
			date_fin_TF.setValue(LocalDate.now());
			totalPaymentDue_TF.clear();
			actualPaymentMade_TF.clear();
			balanceDue_TF.clear(); 
			receiptNo_TF.clear();
		}
	}
	
	//Student Payments History Controller
	@FXML private TextField stdIdPayHist_TF;
	@FXML private Label sexPayHist_TF, numberOfTxnPayHist_TF, agePayHist_TF, classPayHist_TF2, termPayHist_TF2, sessionPayHist_TF;
	@FXML private Label totalPaymentsHist_TF, totalBalanceDue_TF, namePayHist_TF;
	@FXML private ComboBox<String> classPayHist_TF, yearPayHist_TF, termPayHist_TF;
	@FXML TableView<PaymentsDataTable> paymentsDataTable;
	@FXML TableColumn<PaymentsDataTable,String> descriptionPayCol,
		paymentPayCol, totalPayDueCol, payByPayCol, receivedByPayCol, receiptNoPayCol, datePayCol;
	
	@FXML private Button returnStdPayHistButton;
	@FXML private Button stdPayHistButton;
	
	@FXML public void initialize8(MouseEvent event) {
		classPayHist_TF.setItems(stdClassN); //classPayHist_TF.setItems(classNo);
		yearPayHist_TF.setItems(years);
		termPayHist_TF.setItems(termN);
	}
	
	@SuppressWarnings({ "rawtypes", "unchecked" })
	@FXML public void generateStdPayHistoryButton(ActionEvent event) {
		String classStr = classPayHist_TF.getValue();
		int classInt;
		if(classStr.equals("JSS1")) {
			classInt = 1;
		}
		else if(classStr.equals("JSS2")) {
			classInt = 2;
		}
		else if(classStr.equals("JSS3")) {
			classInt = 3;
		}
		else if(classStr.equals("SSS1")) {
			classInt = 4;
		}
		else if(classStr.equals("SSS2")) {
			classInt = 5;
		}
		else {
			classInt = 6;
		}
		
		try{
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory
					("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			Students std = entitymanager.find(Students.class, stdIdPayHist_TF.getText());
			
			namePayHist_TF.setText(std.getOtherNames()+" "+std.getSurName());
			sexPayHist_TF.setText(std.getSex());
			LocalDate dateAgeStr2 = std.getDateOfBirth();
			LocalDate currentDateStr = LocalDate.now();
			int diffDateStr = currentDateStr.getYear() - dateAgeStr2.getYear();
			agePayHist_TF.setText(String.valueOf(diffDateStr));
			
			LinkedHashSet<String> items = std.getPaymentIdSet();
			
			ObservableList<PaymentsDataTable> data = FXCollections.observableArrayList();
			
			double totalPayments = 0;
			double netTotalDebt = 0;
			
					for(String item : items) {
						if(!(item.equals(null)) && 
								item.contains(stdIdPayHist_TF.getText()+yearPayHist_TF.getValue())) {
							try {
								EntityManagerFactory emf = Persistence.createEntityManagerFactory
										("SchoolMgtSystem");
								EntityManager entitymgr = emf.createEntityManager();
								entitymgr.getTransaction().begin();
								
								StudentPayments pay = entitymgr.find(StudentPayments.class, item);
								
								LinkedHashSet<String> set = pay.getReceiptNoSet();
								
								for(String e : set) {
									if(item.contains(e) && item.contains(yearPayHist_TF.getValue())) {
										try {
											if(Integer.parseInt(termPayHist_TF.getValue()) == (pay.getStdTerm_fin())
													&& yearPayHist_TF.getValue().equals(pay.getAcademicYear_fin())
													&& classInt == pay.getStdClass_fin()
													&& stdIdPayHist_TF.getText().equals(pay.getStdId_fin())) {
												data.add(
														new PaymentsDataTable(//pay.getStdName_fin(),
														pay.getDescription_fin(),
														String.valueOf(pay.getActualPaymentMade()),
														String.valueOf(pay.getBalanceDue()),
														pay.getPaymentBy(),
														pay.getReceivedBy(),
														e,
														String.valueOf(pay.getDate_fin())
														));
												totalPayments += pay.getActualPaymentMade();
												netTotalDebt = pay.getVirtualTotalDue();
											}
											else {
												//do nothing
											}
										}
										catch(Exception except) {
											namePayHist_TF.setText("You must specify term, class and year for your trasaction history"
													+ except.getMessage());
										}
										finally {
											String stdClass;
											int stdClass2;
											termPayHist_TF2.setText(String.valueOf(pay.getStdTerm_fin()));
											if (pay.getStdClass_fin() == 1) {
												stdClass2 = 1;
												stdClass = String.valueOf("JSS"+stdClass2);
											}
											else if(pay.getStdClass_fin() == 2) {
												stdClass2 = 2;
												stdClass = String.valueOf("JSS"+stdClass2);
											}
											else if(pay.getStdClass_fin() == 3) {
												stdClass2 = 3;
												stdClass = String.valueOf("JSS"+stdClass2);
											}
											else if(pay.getStdClass_fin() == 4) {
												stdClass2 = 1;
												stdClass = String.valueOf("SSS"+stdClass2);
											}
											else if(pay.getStdClass_fin() == 5) {
												stdClass2 = 2;
												stdClass = String.valueOf("SSS"+stdClass2);
											}
											else {
												stdClass2 = 3;
												stdClass = String.valueOf("SSS"+stdClass2);
											}
											classPayHist_TF2.setText(stdClass);
											
											sessionPayHist_TF.setText(pay.getAcademicYear_fin());
										}
									}
								}
								
								entitymgr.getTransaction().commit();
								entitymgr.close();
								emf.close();
							}
							catch(Exception er) {
								//namePayHist_TF.setText("Error Pay TH: " + er.getMessage());
								er.printStackTrace();
							}
						}
					}
		
			int dataSize = data.size();
			numberOfTxnPayHist_TF.setText(String.valueOf(dataSize - 1));
			
			DecimalFormat fm = new DecimalFormat("#0,000.00");
			double netBalanceDue = netTotalDebt - totalPayments;
			String totalPay = fm.format(totalPayments);
			String totalDue = fm.format(netBalanceDue);
			totalPaymentsHist_TF.setText(totalPay);
			totalBalanceDue_TF.setText(totalDue);
					
			//namePayCol.setCellValueFactory(new PropertyValueFactory("namePay_Data"));
			descriptionPayCol.setCellValueFactory(new PropertyValueFactory("descriptionPay_Data"));
			paymentPayCol.setCellValueFactory(new PropertyValueFactory("paymentPay_Data"));
			totalPayDueCol.setCellValueFactory(new PropertyValueFactory("payByPay_Data"));
			payByPayCol.setCellValueFactory(new PropertyValueFactory("receivedByPay_Data"));
			receivedByPayCol.setCellValueFactory(new PropertyValueFactory("receiptNoPay_Data"));
			receiptNoPayCol.setCellValueFactory(new PropertyValueFactory("datePay_Data"));
			datePayCol.setCellValueFactory(new PropertyValueFactory("totalPayDue_Data"));
			
			paymentsDataTable.setItems(data);
			
			entitymanager.getTransaction().commit();
			entitymanager.close();
			emfactory.close();
			
		}
		catch(Exception e) {
			stdIdPayHist_TF.setText("Error: " + e.getLocalizedMessage());
			paymentsDataTable.setItems(null);
			namePayHist_TF.setText(null);
			sexPayHist_TF.setText(null);
			agePayHist_TF.setText(null);
			classPayHist_TF2.setText(null);
			termPayHist_TF2.setText(null);
			sessionPayHist_TF.setText(null);
			numberOfTxnPayHist_TF.setText(null);
			totalPaymentsHist_TF.setText(null);
			totalBalanceDue_TF.setText(null);
		}
	}
	
	@FXML private Button printJobHistoryButton, generateStdHistoryButton;
	@FXML SplitPane printPane3;
	
	@FXML public void printStdHistoryButton(ActionEvent event) {
		generateStdHistoryButton.setVisible(false);
		returnStdPayHistButton.setVisible(false);
		printJobHistoryButton.setVisible(false);
		yearPayHist_TF.setVisible(false);
		termPayHist_TF.setVisible(false);
		classPayHist_TF.setVisible(false);
		try {
			printNode(printPane3);
		}
		catch(Exception exception) {
			namePayHist_TF.setText("Print Error: "+ exception.getLocalizedMessage());
		}
		finally {
			generateStdHistoryButton.setVisible(true);
			returnStdPayHistButton.setVisible(true);
			printJobHistoryButton.setVisible(true);
			yearPayHist_TF.setVisible(true);
			termPayHist_TF.setVisible(true);
			classPayHist_TF.setVisible(true);
		}
	}
	
	//Kusaki SSS Result
	//Generate Results Controller
	@FXML private TableView<ScoresDataTable> scoresDataTable;	
	@FXML private Label studentName_txtTF, classOfStudentTF, classEnrolSizeTF, age_LBL, term_LBL, session_LBL;
	@FXML private Label attendanceTF, totalPossibleAttendanceTF, totalScore_txtTF, classSizeTF;
	@FXML private Label maximumScoreTF, avgScoreTF, positionInClassTF, sexOfStudentTF, stdResultClassAvgTF,
		numberOfDaysInTermTF, noDaysTermSSS, noPresentsTermSSS, noAbsentsTermSSS;
	@FXML private ImageView imageViewSSSResult;
	@FXML private ComboBox<String> resultTermTF, yearOfResultTF;
	@FXML private TableColumn<ScoresDataTable,String> subjectsCol, CA1Col, CA2Col, CA3Col, examCol, totalCol, gradeCol;
	@FXML private TableColumn<ScoresDataTable,String> positionCol, classAvgCol, classHighestCol, classLowestCol, remarksCol;
	
	@FXML private TextField studentNumberTF; 
	@FXML private Button generateStdResultsButton;
	
	@FXML public void SSSinitialize6(MouseEvent event) {
		resultTermTF.setItems(termN);
		//yearOfResultTF.setItems(years);
		populateYear(yearOfResultTF);
	}
	
	@SuppressWarnings({ "rawtypes", "unchecked" })
	@FXML
	public void generateResultsActionButton(ActionEvent event) {
		String stdNo = studentNumberTF.getText().trim().toUpperCase();
		String term = resultTermTF.getValue();
		String year = yearOfResultTF.getValue();
		LinkedList<String> DataSet = new LinkedList<>();
		LinkedList<String> Behaviour = new LinkedList<>();
		LinkedList<String> Skills = new LinkedList<>();
		Vector<ScoreSheets> SID_elements = new Vector<>();
		
		Behaviour.add("Punctuality");
		Behaviour.add("Attendance at class");
		Behaviour.add("Attentiveness at class");
		Behaviour.add("Carrying out Assignment");
		Behaviour.add("Participation in sch activities");
		Behaviour.add("Neatness");
		Behaviour.add("Honesty");
		Behaviour.add("Self control");
		Behaviour.add("Relationship with others");
		Behaviour.add("Helping others");
		Behaviour.add("Games sports");
		Behaviour.add("Handling of Tools Lab Workshop");
		
		Skills.add("Handwriting");
		Skills.add("Verbal Fluency");
		Skills.add("Games");
		Skills.add("Sports");
		Skills.add("Handling Tools");
		Skills.add("Drawing and Painting");
		Skills.add("Musical Skills");
		
		String stdClassVal;
		
		try{
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory
					("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			Students std = entitymanager.find(Students.class, stdNo);
			
			//String stdClassId = std.getEntryClassAssigned();
			
			noDaysTermSSS.setText(String.valueOf(getAcademicTermNoSchoolDays(entitymanager, term, year) - 
					getAcademicHolidayTotal(entitymanager, year, term))); 
			noPresentsTermSSS.setText(String.valueOf(getSchoolAttendancePresents(entitymanager, stdNo, year, term))); 
			noAbsentsTermSSS.setText(String.valueOf(getSchoolAttendanceAbsents(entitymanager, stdNo, year, term)));
			
			studentName_txtTF.setText(std.getSurName()+", "+std.getOtherNames());
			sexOfStudentTF.setText(std.getSex());
			
			LocalDate dateAgeStr2 = std.getDateOfBirth();
			LocalDate currentDateStr = LocalDate.now();
			int diffDateStr = currentDateStr.getYear() - dateAgeStr2.getYear();
			age_LBL.setText(String.valueOf(diffDateStr));
			
			EntityManagerFactory emfactory33 = Persistence.createEntityManagerFactory
					("SchoolMgtSystem");
			EntityManager entitymanager33 = emfactory33.createEntityManager();
			entitymanager33.getTransaction().begin();
							
			stdClassVal = getStudentClassByStdNoYearTerm(entitymanager33, stdNo, year, term);
			
			entitymanager33.getTransaction().commit();
			entitymanager33.close();
			emfactory33.close();
			
			if(stdClassVal.contains("SSS")) {
				
				DecimalFormat fm = new DecimalFormat("#.00");
				
				
				//LinkedHashSet<String> elements = std.getScores_sId();
				
				ObservableList<ScoresDataTable> data = FXCollections.observableArrayList();
				ObservableList<BehaviourDataTable> dataBehaviour = FXCollections.observableArrayList();
				ObservableList<SkillsDataTable> dataSkills = FXCollections.observableArrayList();
				LinkedHashSet<String> elements2 = new LinkedHashSet<>();
				
				Vector<ScoreSheets> Data2 = new Vector<>();
				Vector<ScoreSheetsSummary> DataPosition = new Vector<>();
				Vector<ScoreSheetsSummary> myClassSize = new Vector<>();
				
				// try this for classAvg, classHighest and classLowest
				Vector<ScoreSheets> DataX = new Vector<>();
				
				//query for class position
				DataPosition = getScoreSheetSummaryYearTerm(entitymanager, year, term);
				
//				String stdClassValQ = getPrimeClassOnly(stdClassId, year, term, stdClassVal);
				String stdClassValQ = getPrimeClass(stdClassVal);
				
				DataX = getScoreSheetsByClassYearTerm(entitymanager, stdClassValQ, year, term);
				
				try {
					
					SID_elements = getScoreSheetsByStdNoClassYearTerm(entitymanager, stdNo, stdClassValQ, 
							year, term);
				}
				catch(Exception sssEx) {
					sssEx.printStackTrace();
				}
				
				for(ScoreSheets sheet : SID_elements) {
					//System.out.println("SID_SID: "+ sheet.getSId());
					elements2.add(sheet.getSId());
				}
				
				for(String e : elements2) {
					if(!(e.equals(null)) && 
							e.charAt(String.valueOf(e).length()-1) == '2' &&
							e.contains(stdClassValQ+term) &&
							e.contains(year)) {
						LinkedList<String> DataSet2 = new LinkedList<>();
						try {
							EntityManagerFactory emf = Persistence.createEntityManagerFactory
									("SchoolMgtSystem");
							EntityManager entitymgr = emf.createEntityManager();
							entitymgr.getTransaction().begin();
							
							ScoreSheets scores = entitymgr.find(ScoreSheets.class, e);
							
							if(scores.getScoresYear().equals(year)) {
								//String stdClassVal = scores.getStdClass();
								
								classOfStudentTF.setText(getPrimeClassReverse(stdClassVal));
								term_LBL.setText(scores.getTerm());
								session_LBL.setText(scores.getScoresYear());
								
//								// try this for classAvg, classHighest and classLowest
//								Vector<ScoreSheets> DataX = new Vector<>();
//								
//								DataX = getScoreSheetsByClassYearTerm(entitymanager, stdClassVal, year, term);
								
								Vector<ScoreSheets> testData = DataX;
								int countx = 0;
								int county = 0;
								double sumx = 0;
								double sumPlus = 0;
								
								LinkedList<Double> tempList = new LinkedList<>();
								for(ScoreSheets test : testData) {
									if(test.getSubjectName().equals(scores.getSubjectName()) &&
											test.getStdClass().equals(scores.getStdClass()) && 
											test.getTerm().equals(scores.getTerm()) &&
											test.getScoresYear().equals(scores.getScoresYear())) {
										sumx = sumx + test.getTotal();
										tempList.add(test.getTotal());
										countx = countx + 1;
									}
									
									if(test.getStdId().equals(stdNo) &&
											test.getStdClass().equals(scores.getStdClass()) && 
											test.getTerm().equals(scores.getTerm()) &&
											test.getScoresYear().equals(scores.getScoresYear())) {
										sumPlus = sumPlus + test.getTotal();
										county = county + 1;
									}
								}
							
								tempList.sort(null);
								double classHighest = (double) tempList.toArray()[tempList.size()-1];
								double classLowest = (double)tempList.toArray()[0];
								double averageX = sumx/countx;
								String avgX = fm.format(averageX);
								String classHighestX = fm.format(classHighest);
								String classLowestX = fm.format(classLowest);
								
								Data2 = DataX; 
								int position = 0;
								int classPos = 1;
								double myTotal = 0;
								double myTotal2 = 0;
							
								for (ScoreSheets s : Data2) {						
									if(s.getSubjectName().equals(scores.getSubjectName())&&
											s.getStdClass().equals(scores.getStdClass()) &&
											s.getTerm().equals(scores.getTerm()) &&
											s.getScoresYear().equals(scores.getScoresYear())) {
										int subjCode = s.getSubjectCode();
										
										/*Try JDBC Begings per subject*/
										
										String stdClassX2 = stdClassValQ;
										//String stdClassLetter;
										
//										EntityManagerFactory emfactoryz2 = Persistence.createEntityManagerFactory
//												("SchoolMgtSystem");
//										EntityManager entitymanagerz2 = emfactoryz2.createEntityManager();
//										entitymanagerz2.getTransaction().begin();
//										
//										ScoreSheets sumz2 = entitymanagerz2.find(ScoreSheets.class, e);
//										
//										stdClassX2 = sumz2.getStdClass();
//										
//										entitymanagerz2.getTransaction().commit();
//										entitymanagerz2.close();
//										emfactoryz2.close();
										
										
										
										final String JDBC_Driver2 = "com.mysql.jdbc.Driver";
										final String DB_URL2 = dbURL;
										final String DB_User2 = dbUSR;
										final String DB_PWD2 = dbPWD;
										
										
										Connection conn2 = null;
										//Statement stmt = null;
										PreparedStatement stmt2 = null;
										
										try {
											Class.forName(JDBC_Driver2);
											conn2 = DriverManager.getConnection(DB_URL2, DB_User2, DB_PWD2);
											//stmt = conn.createStatement();
											
											String sql;
											sql = "SELECT *, 1+(SELECT count(*) from scoresheets a "
													+ "WHERE a.STDCLASS = ? and "
													+ "a.TERM = ? and "
													+ "a.SCORESYEAR = ? and "
													+ "a.SUBJECTCODE = ? and "
													+ "a.TOTAL > b.TOTAL) as POSITION, TOTAL FROM scoresheets b "
													+ "where "
													+ "b.STDCLASS = ? and "
													+ "b.TERM = ? and "
													+ "b.SCORESYEAR = ? and "
													+ "b.SUBJECTCODE = ? "
													+ "order by TOTAL desc";
											
											stmt2 = conn2.prepareStatement(sql);
											
//											int term22 = Integer.parseInt(term);
//											int year22 = Integer.parseInt(year);
										
											stmt2.setString(1, stdClassX2);
											stmt2.setString(2, term);
											stmt2.setString(3, year);
											stmt2.setInt(4, subjCode);
										
											stmt2.setString(5, stdClassX2);
											stmt2.setString(6, term);
											stmt2.setString(7, year);
											stmt2.setInt(8, subjCode);
											
											ResultSet rs2 = stmt2.executeQuery();
											
											
											while(rs2.next()) {
												DataSet2.add(rs2.getString("POSITION"));
											}
											rs2.close();
											stmt2.close();
											conn2.close();
										}
										catch(SQLException es) {
											studentNumberTF.setText("Error JDBC: "+ es.getSQLState());
										}
										catch(Exception es2) {
											studentNumberTF.setText("Error JDBC: "+ es2.getMessage());
										}
										finally {
											try {
												if(stmt2 != null ) {
													stmt2.close();
												}
											}
											catch(SQLException ces) {
												studentNumberTF.setText("Error JDBC: "+ ces.getSQLState());
											}
											try {
												if(conn2 != null ) {
													conn2.close();
												}
											}
											catch(Exception ces2) {
												studentNumberTF.setText("JDBC: "+ces2.getMessage());
											}
											
										}
										
										/*Try JDBC Ends per subject*/
										
										if(s.getStdId().equals(stdNo) ) {
											
											String remarks;
											
											// Insert here
												
											if(resultTermTF.getValue().equals(scores.getTerm())
													&& yearOfResultTF.getValue().equals(scores.getScoresYear())) {
												String subPos;
												int subPos2 = Integer.parseInt(DataSet2.get(position));
												if(subPos2 == 1 || subPos2 == 21 || subPos2 == 31 || subPos2 == 41 || subPos2 == 51 || subPos2 == 61) {
													subPos = String.valueOf(subPos2)+"st";
												}
												else if(subPos2 == 2|| subPos2 == 22 || subPos2 == 32 || subPos2 == 42 || subPos2 == 52 || subPos2 == 62) {
													subPos = String.valueOf(subPos2)+"nd";
												}
												else if(subPos2 == 3|| subPos2 == 23 || subPos2 == 33 || subPos2 == 43 || subPos2 == 53 || subPos2 == 63) {
													subPos = String.valueOf(subPos2)+"rd";
												}
												else {
													subPos = String.valueOf(subPos2)+"th";
												}
												try {
													
													if(scores.getGrade().equals("A")) {
														remarks = "Excellent";
														if(s.getTotal() == myTotal) {
															
															data.add(
																new ScoresDataTable(scores.getSubjectName(),
																String.valueOf(scores.getCA1()),
																String.valueOf(scores.getCA2()),
																String.valueOf(scores.getCA3()),
																String.valueOf(scores.getExamScore()),
																String.valueOf(scores.getTotal()),
																scores.getGrade(),
																subPos, 
																avgX,
																classHighestX,
																classLowestX,
																remarks
																));
														}
														else {
			
															data.add(
																new ScoresDataTable(scores.getSubjectName(),
																String.valueOf(scores.getCA1()),
																String.valueOf(scores.getCA2()),
																String.valueOf(scores.getCA3()),
																String.valueOf(scores.getExamScore()),
																String.valueOf(scores.getTotal()),
																scores.getGrade(),
																subPos, 
																avgX,
																classHighestX,
																classLowestX,
																remarks
																));
														}
													}
													else if(scores.getGrade().equals("B")) {
														remarks = "Very Good";
														if(s.getTotal() == myTotal) {
															data.add(
																new ScoresDataTable(scores.getSubjectName(),
																String.valueOf(scores.getCA1()),
																String.valueOf(scores.getCA2()),
																String.valueOf(scores.getCA3()),
																String.valueOf(scores.getExamScore()),
																String.valueOf(scores.getTotal()),
																scores.getGrade(),
																subPos, 
																avgX,
																classHighestX,
																classLowestX,
																remarks
																));
														}
														else {
			
															data.add(
																new ScoresDataTable(scores.getSubjectName(),
																String.valueOf(scores.getCA1()),
																String.valueOf(scores.getCA2()),
																String.valueOf(scores.getCA3()),
																String.valueOf(scores.getExamScore()),
																String.valueOf(scores.getTotal()),
																scores.getGrade(),
																subPos, 
																avgX,
																classHighestX,
																classLowestX,
																remarks
																));
														}
													}
													else if(scores.getGrade().equals("C")) {
														remarks = "Good";
														
														if(s.getTotal() == myTotal) {
														
															data.add(
																new ScoresDataTable(scores.getSubjectName(),
																String.valueOf(scores.getCA1()),
																String.valueOf(scores.getCA2()),
																String.valueOf(scores.getCA3()),
																String.valueOf(scores.getExamScore()),
																String.valueOf(scores.getTotal()),
																scores.getGrade(),
																subPos, 
																avgX,
																classHighestX,
																classLowestX,
																remarks
																));
														}
														else {
			
															data.add(
																new ScoresDataTable(scores.getSubjectName(),
																String.valueOf(scores.getCA1()),
																String.valueOf(scores.getCA2()),
																String.valueOf(scores.getCA3()),
																String.valueOf(scores.getExamScore()),
																String.valueOf(scores.getTotal()),
																scores.getGrade(),
																subPos, 
																avgX,
																classHighestX,
																classLowestX,
																remarks
																));
															}
														}
													else if(scores.getGrade().equals("D")) {
														remarks = "Fair";
														if(s.getTotal() == myTotal) {
														
															data.add(
																new ScoresDataTable(scores.getSubjectName(),
																String.valueOf(scores.getCA1()),
																String.valueOf(scores.getCA2()),
																String.valueOf(scores.getCA3()),
																String.valueOf(scores.getExamScore()),
																String.valueOf(scores.getTotal()),
																scores.getGrade(),
																subPos, 
																avgX,
																classHighestX,
																classLowestX,
																remarks
																));
														}
														else {
			
															data.add(
																new ScoresDataTable(scores.getSubjectName(),
																String.valueOf(scores.getCA1()),
																String.valueOf(scores.getCA2()),
																String.valueOf(scores.getCA3()),
																String.valueOf(scores.getExamScore()),
																String.valueOf(scores.getTotal()),
																scores.getGrade(),
																subPos, 
																avgX,
																classHighestX,
																classLowestX,
																remarks
																));
														}
													}
													
													else {
														remarks = "Fail";
														if(s.getTotal() == myTotal) {
								
															data.add(
																new ScoresDataTable(scores.getSubjectName(),
																String.valueOf(scores.getCA1()),
																String.valueOf(scores.getCA2()),
																String.valueOf(scores.getCA3()),
																String.valueOf(scores.getExamScore()),
																String.valueOf(scores.getTotal()),
																scores.getGrade(),
																subPos, 
																avgX,
																classHighestX,
																classLowestX,
																remarks
																));
														}
														else {
			
															data.add(
																new ScoresDataTable(scores.getSubjectName(),
																String.valueOf(scores.getCA1()),
																String.valueOf(scores.getCA2()),
																String.valueOf(scores.getCA3()),
																String.valueOf(scores.getExamScore()),
																String.valueOf(scores.getTotal()),
																scores.getGrade(),
																subPos, 
																avgX,
																classHighestX,
																classLowestX,
																remarks
																));
														}
													}
												}
											catch(Exception except) {
												studentNumberTF.setText("You must specify term and year for your result"
														+ except.getMessage());
											}
										}
									}
										
										//End insert here
										
									else {
										// do nothing STDID
									}

									position++;
									myTotal = s.getTotal();
									
								}
								else {
									// do nothing
								}
							}
							
							/*Try JDBC Begings for class position */
							
							String stdClassX = stdClassValQ;
//							String stdSumID = stdNo+year+term;
//							EntityManagerFactory emfactoryz = Persistence.createEntityManagerFactory
//									("SchoolMgtSystem");
//							EntityManager entitymanagerz = emfactoryz.createEntityManager();
//							entitymanagerz.getTransaction().begin();
//							
//							ScoreSheetsSummary sumz = entitymanagerz.find(ScoreSheetsSummary.class, stdSumID);
//							
//							stdClassX = sumz.getStudentClass();
//							
//							entitymanagerz.getTransaction().commit();
//							entitymanagerz.close();
//							emfactoryz.close();
							
							
							
							final String JDBC_Driver = "com.mysql.jdbc.Driver";
							final String DB_URL = dbURL;
							final String DB_User = dbUSR;
							final String DB_PWD = dbPWD;
							
							
							Connection conn = null;
							//Statement stmt = null;
							PreparedStatement stmt = null;
							
							try {
								Class.forName(JDBC_Driver);
								conn = DriverManager.getConnection(DB_URL, DB_User, DB_PWD);
								//stmt = conn.createStatement();
								
								String sql;
								sql = "SELECT *, 1+(SELECT count(*) from scoresheetssummary a "
										+ "WHERE a.STUDENTCLASS = ? and "
										+ "a.STUDENTTERM = ? and "
										+ "a.ACADEMICYEAR = ? and "
										+ "a.TOTALSCORES > b.totalscores) as POSITION, "
										+ "TOTALSCORES "
										+ "FROM scoresheetssummary b "
										+ "where b.STUDENTCLASS = ? and "
										+ "b.STUDENTTERM = ? and "
										+ "b.ACADEMICYEAR = ? "
										+ "order by TOTALSCORES desc";
								
								stmt = conn.prepareStatement(sql);
								
//								int term2 = Integer.parseInt(term);
//								int year2 = Integer.parseInt(year);
								stmt = conn.prepareStatement(sql);
								stmt.setString(1, stdClassX);
								stmt.setString(2, term);
								stmt.setString(3, year);
								stmt.setString(4, stdClassX);
								stmt.setString(5, term);
								stmt.setString(6, year);
								
								
								
								ResultSet rs = stmt.executeQuery();
								
								
								while(rs.next()) {
									DataSet.add(rs.getString("POSITION"));
								}
								rs.close();
								stmt.close();
								conn.close();
							}
							catch(SQLException es) {
								studentNumberTF.setText("Error JDBC: "+ es.getSQLState());
							}
							catch(Exception es2) {
								studentNumberTF.setText("Error JDBC: "+ es2.getMessage());
							}
							finally {
								try {
									if(stmt != null ) {
										stmt.close();
									}
								}
								catch(SQLException ces) {
									studentNumberTF.setText("Error JDBC: "+ ces.getSQLState());
								}
								try {
									if(conn != null ) {
										conn.close();
									}
								}
								catch(Exception ces2) {
									studentNumberTF.setText("JDBC: "+ces2.getMessage());
								}
								
							}
							
							/*Try JDBC Ends for class position*/
							
							//query for class position
//							
//							Query query2 =
//									entitymanager.createQuery("select e from ScoreSheetsSummary e "
//											+ "order by e.totalScores  DESC");
//							DataPosition = (Vector<ScoreSheetsSummary>)query2.getResultList();
							
//							DataPosition = getScoreSheetSummaryYearTerm(entitymanager, year, term);
							
							int count = 0;
							int count2 = 0;
							int termCount = 0;
							String termNo = "0";
							LinkedHashSet<String> setTermUnique = new LinkedHashSet<>();
							
							for(ScoreSheetsSummary ex : DataPosition) {
								if(ex.getStudentTerm().equals(term) &&
										ex.getAcademicYear().equals(year) &&
										ex.getStudentClass().equals(scores.getStdClass())) {
									myClassSize.add(ex);
									count2 = count2 + 1;
								}
								setTermUnique.add(ex.getAcademicYear()+ex.getStudentTerm());
								count = count + 1;
							}
							
							for(String ter : setTermUnique) {
								if(!(ter.equals(termNo))) {
									termCount = termCount + 1;
								}
								else {
									termCount = termCount + 0;
								}
								termNo = ter;
							}
							
							int countxx = 0;
							
							for(ScoreSheetsSummary elem : DataPosition) {
								if(elem.getStudentClass().equals(scores.getStdClass()) &&
										elem.getStudentTerm().equals(scores.getTerm()) &&
										elem.getAcademicYear().equals(scores.getScoresYear())) {
									
									if(elem.getStudentName().equals(scores.getName())&&
									elem.getStudentId().equals(stdNo) &&
									elem.getStudentTerm().equals(term) &&
									elem.getAcademicYear().equals(year)){
										
										//try using jdbc begins
									
										String classPosz;
										int classPosz2 = Integer.parseInt(DataSet.get(classPos-1));
										if(classPosz2 == 1 || classPosz2 == 21 || classPosz2 == 31 || classPosz2 == 41 || classPosz2 == 51 || classPosz2 == 61) {
											classPosz = String.valueOf(classPosz2)+"st";
										}
										else if(classPosz2 == 2|| classPosz2 == 22 || classPosz2 == 32 || classPosz2 == 42 || classPosz2 == 52 || classPosz2 == 62) {
											classPosz = String.valueOf(classPosz2)+"nd";
										}
										else if(classPosz2 == 3|| classPosz2 == 23 || classPosz2 == 33 || classPosz2 == 43 || classPosz2 == 53 || classPosz2 == 63) {
											classPosz = String.valueOf(classPosz2)+"rd";
										}
										else {
											classPosz = String.valueOf(classPosz2)+"th";
										}
										
										positionInClassTF.setText(classPosz);
										
										//try using jdbc ends
										
									}
									else {
										if(elem.getTotalScores() ==  myTotal2) {
											countxx = countxx + 1;
										}
										classPos = classPos + 1;
										myTotal2 = elem.getTotalScores();
									}
								}
								else {
									//
								}
							}
							
							double myClassAvg = 0;
							for(ScoreSheetsSummary avg : myClassSize) {
								if(avg.getAcademicYear().equals(year) &&
										avg.getStudentTerm().equals(term)&&
										avg.getStudentClass().equals(scores.getStdClass())) {
									myClassAvg = myClassAvg + avg.getTotalScores();
								}
								
							}
							
							classEnrolSizeTF.setText(String.valueOf(count2));
							classSizeTF.setText(String.valueOf(count2));
							}
						
							entitymgr.getTransaction().commit();
							entitymgr.close();
							emf.close();
						}
					
					catch(Exception er) {
						studentNumberTF.setText("Error Scores: " + er.getMessage());
					}
				}
			}
					
			double totalScoresResult = 0;
			double avgScoresResult = 0;
			int dataSize = data.size();
			
			for(ScoresDataTable datum : data) {
				totalScoresResult += Double.parseDouble(datum.getTotal_Data());
			}
			
			avgScoresResult = totalScoresResult/dataSize;
			String averageScoreResult = fm.format(avgScoresResult);
			totalScore_txtTF.setText(String.valueOf(fm.format(totalScoresResult)));
			avgScoreTF.setText(averageScoreResult);
					
			subjectsCol.setCellValueFactory(new PropertyValueFactory("subjectName_Data"));
			CA1Col.setCellValueFactory(new PropertyValueFactory("CA1_Data"));
			CA2Col.setCellValueFactory(new PropertyValueFactory("CA2_Data"));
			CA3Col.setCellValueFactory(new PropertyValueFactory("CA3_Data"));
			examCol.setCellValueFactory(new PropertyValueFactory("exam_Data"));
			totalCol.setCellValueFactory(new PropertyValueFactory("total_Data"));
			gradeCol.setCellValueFactory(new PropertyValueFactory("grade_Data"));
			positionCol.setCellValueFactory(new PropertyValueFactory("position_Data"));
			classAvgCol.setCellValueFactory(new PropertyValueFactory("classAvg_Data"));
			classHighestCol.setCellValueFactory(new PropertyValueFactory("classHighest_Data"));
			classLowestCol.setCellValueFactory(new PropertyValueFactory("classLowest_Data"));
			remarksCol.setCellValueFactory(new PropertyValueFactory("remark_Data"));
			
			//colouring grade base on scores
			gradeCol.setCellFactory(new Callback<TableColumn<ScoresDataTable,String>,TableCell<ScoresDataTable,String>>(){
				public TableCell call(TableColumn param) {
					return new TableCell<ScoresDataTable,String>(){
						@Override
						public void updateItem(String item, boolean empty) {
							super.updateItem(item,empty);
							if(!(isEmpty())) {
								if(item.equals("E")) {
									this.setTextFill(Color.RED);
								}
								setText(item);
							}
						}
					};
				}
			});
			
			totalCol.setCellFactory(new Callback<TableColumn<ScoresDataTable,String>,TableCell<ScoresDataTable,String>>(){
				public TableCell call(TableColumn param) {
					return new TableCell<ScoresDataTable,String>(){
						@Override
						public void updateItem(String item, boolean empty) {
							super.updateItem(item,empty);
							if(!(isEmpty())) {
								if(Double.parseDouble(item) < 40) {
									this.setTextFill(Color.RED);
								}
								setText(item);
							}
						}
					};
				}
			});
			
			scoresDataTable.setItems(data);
					
			entitymanager.getTransaction().commit();
			entitymanager.close();
			emfactory.close();
			
			for(String str : Behaviour) {
				dataBehaviour.add(new BehaviourDataTable(str));
			}
			
			behaviourCol.setCellValueFactory(new PropertyValueFactory("behaviour_Data"));
			
			behaviourDataTable.setItems(dataBehaviour);
			
			for(String str : Skills) {
				dataSkills.add(new SkillsDataTable(str));
			}
			
			skillsCol.setCellValueFactory(new PropertyValueFactory("skills_Data"));
			
			skillsDataTable.setItems(dataSkills);
			}
			else {
				Alert alert = new Alert(Alert.AlertType.ERROR);
				alert.setContentText("Please use the JSS Result template for Junior Students...");
				Optional<ButtonType> result = alert.showAndWait();
				if(result.get() == ButtonType.OK) {
					alert.close();
				}
				else {
					alert.close();
				}
			}
		}
		catch(Exception e) {
			studentNumberTF.setText("Error: " + e.getLocalizedMessage());
			scoresDataTable.setItems(null);
			studentName_txtTF.setText(null);
			sexOfStudentTF.setText(null);
			age_LBL.setText(null);
			classOfStudentTF.setText(null);
			term_LBL.setText(null);
			session_LBL.setText(null);
			classEnrolSizeTF.setText(null);
			totalScore_txtTF.setText(null);
			avgScoreTF.setText(null);
			positionInClassTF.setText(null);
			classSizeTF.setText(null);
		}
			
		//view image
		try {
			String stdId = stdNo;
			
			String jdbcUrl = dbURL;
			String username = dbUSR;
			String password = dbPWD;
			
			String sql = "SELECT * FROM stdImages WHERE stdid = ?";
			
			try(Connection conn = DriverManager.getConnection(jdbcUrl, username, password);
					){
				
				try(PreparedStatement stmt = conn.prepareStatement(sql);
						){
					stmt.setString(1, stdId);		
					
					ResultSet result = stmt.executeQuery();
					
					
					if(result.next()) {
						InputStream imageStream = result.getBinaryStream("image");
						Image img = new Image(imageStream);
						imageViewSSSResult.setImage(img);
					}
					else {
						imageViewSSSResult.setImage(null);
					}
				
					result.close();
					stmt.close();
					conn.close();
				}
				catch(SQLException io) {
					studentNumberTF.setText(io.getMessage());
					imageViewSSSResult.setImage(null);
				}
			}
			catch(SQLException eq) {
				studentNumberTF.setText(eq.getMessage());
				imageViewSSSResult.setImage(null);
			}
		}
		catch(Exception e) {
			studentNumberTF.setText(e.getMessage());
			imageViewSSSResult.setImage(null);
		}	
				
	}
		
	//print SSS student results
	@FXML private Button printJobResultButton;
	@FXML private SplitPane printPane2;
	@FXML public void printStdResultButton(ActionEvent even) {
		generateStdResultsButton.setVisible(false);
		returnStdResultsButton2.setVisible(false);
		printJobResultButton.setVisible(false);
		yearOfResultTF.setVisible(false);
		resultTermTF.setVisible(false);
		try {
			printNode(printPane2);
		}
		catch(Exception exception) {
			studentNumberTF.setText("Print Error: "+ exception.getLocalizedMessage());
		}
		finally {
			generateStdResultsButton.setVisible(true);
			returnStdResultsButton2.setVisible(true);
			printJobResultButton.setVisible(true);
			yearOfResultTF.setVisible(true);
			resultTermTF.setVisible(true);
		}
	}
	
	
	public static void printNode(final SplitPane printPane) throws NoSuchMethodException, 
		InstantiationException, IllegalAccessException, InvocationTargetException {
		
	    	Printer printer = Printer.getDefaultPrinter();
	    	PageLayout pageLayout
	        	= printer.createPageLayout(Paper.A4, PageOrientation.LANDSCAPE, Printer.MarginType.HARDWARE_MINIMUM);
	    //PrinterAttributes attr = printer.getPrinterAttributes();
		    PrinterJob job = PrinterJob.createPrinterJob();
		    double scaleX
		        = pageLayout.getPrintableWidth() / printPane.getBoundsInParent().getWidth();
		    double scaleY
		        = pageLayout.getPrintableHeight() / printPane.getBoundsInParent().getHeight();
		    Scale scale = new Scale(scaleX, scaleY);
		    printPane.getTransforms().add(scale);
	
		    if (job != null && job.showPrintDialog(printPane.getScene().getWindow())) {
		    	boolean success = job.printPage(pageLayout, printPane);
		    	if (success) {
		    		job.endJob();
	
		    	}
		    }
		    printPane.getTransforms().remove(scale);
	  }
	
	public static void printNode(final BorderPane printPane) throws NoSuchMethodException, 
	InstantiationException, IllegalAccessException, InvocationTargetException {
	
    	Printer printer = Printer.getDefaultPrinter();
    	PageLayout pageLayout
        	= printer.createPageLayout(Paper.A4, PageOrientation.LANDSCAPE, Printer.MarginType.HARDWARE_MINIMUM);
    //PrinterAttributes attr = printer.getPrinterAttributes();
	    PrinterJob job = PrinterJob.createPrinterJob();
	    double scaleX
	        = pageLayout.getPrintableWidth() / printPane.getBoundsInParent().getWidth();
	    double scaleY
	        = pageLayout.getPrintableHeight() / printPane.getBoundsInParent().getHeight();
	    Scale scale = new Scale(scaleX, scaleY);
	    printPane.getTransforms().add(scale);

	    if (job != null && job.showPrintDialog(printPane.getScene().getWindow())) {
	    	boolean success = job.printPage(pageLayout, printPane);
	    	if (success) {
	    		job.endJob();

	    	}
	    }
	    printPane.getTransforms().remove(scale);
  }
	
	public static void printNode(final VBox printPane) throws NoSuchMethodException, 
	InstantiationException, IllegalAccessException, InvocationTargetException {
	
    	Printer printer = Printer.getDefaultPrinter();
    	PageLayout pageLayout
        	= printer.createPageLayout(Paper.A4, PageOrientation.LANDSCAPE, Printer.MarginType.HARDWARE_MINIMUM);
    //PrinterAttributes attr = printer.getPrinterAttributes();
	    PrinterJob job = PrinterJob.createPrinterJob();
	    double scaleX
	        = pageLayout.getPrintableWidth() / printPane.getBoundsInParent().getWidth();
	    double scaleY
	        = pageLayout.getPrintableHeight() / printPane.getBoundsInParent().getHeight();
	    Scale scale = new Scale(scaleX, scaleY);
	    printPane.getTransforms().add(scale);

	    if (job != null && job.showPrintDialog(printPane.getScene().getWindow())) {
	    	boolean success = job.printPage(pageLayout, printPane);
	    	if (success) {
	    		job.endJob();

	    	}
	    }
	    printPane.getTransforms().remove(scale);
  }
		
	//print JSS student results
	@FXML private Button JSS_PrintResultBtn, JSS_SpoolResultButton;
	@FXML private SplitPane printPane4;
	@FXML public void JSS_PrintResultButton(ActionEvent even) {
		returntoKusakiGrtHomeJSS.setVisible(false);
		JSS_PrintResultBtn.setVisible(false);
		JSS_SpoolResultButton.setVisible(false);
		yearJSS_LBL.setVisible(false);
		termJSS_LBL.setVisible(false);
		try {
			printNode(printPane4);
		}
		catch(Exception exception) {
			studentNumberTF.setText("Print Error: "+ exception.getLocalizedMessage());
		}
		finally {
			returntoKusakiGrtHomeJSS.setVisible(true);
			JSS_PrintResultBtn.setVisible(true);
			JSS_SpoolResultButton.setVisible(true);
			yearJSS_LBL.setVisible(true);
			termJSS_LBL.setVisible(true);
		}
	}
	
	//JssNew Print
	@FXML private Button JSSNew_PrintResultBtn;
	@FXML public void JSSNew_PrintResultButton(ActionEvent even) {
		returntoKusakiGrtHomeJSS.setVisible(false);
		JSSNew_PrintResultBtn.setVisible(false);
		JSSNew_SpoolResultButton.setVisible(false);
		yearJSS_LBLNew.setVisible(false);
		termJSS_LBLNew.setVisible(false);
		try {
			printNode(printPane4New);
		}
		catch(Exception exception) {
			idNoJSSNew_LBL.setText("Print Error: "+ exception.getLocalizedMessage());
		}
		finally {
			returntoKusakiGrtHomeJSS.setVisible(true);
			JSSNew_PrintResultBtn.setVisible(true);
			JSSNew_SpoolResultButton.setVisible(true);
			yearJSS_LBLNew.setVisible(true);
			termJSS_LBLNew.setVisible(true);
		}
	}
			 
	 //Kusaki JSS Result
	//Generate Results Controller
	@FXML private TableView<JssScoresDataTable> jssScoresDataTable;	
	@FXML private TableView<BehaviourDataTable> behaviourDataTable;	
	@FXML private TableColumn<BehaviourDataTable,String> behaviourCol;
	@FXML private TableView<SkillsDataTable> skillsDataTable;	
	@FXML private TableColumn<SkillsDataTable,String> skillsCol;
	@FXML private Label nameJSS_LBL, classJSS_LBL, noInClassJSS_LBL, ageJSS_LBL, stdTermJSS_LBL, sessionJSS_LBL;
	@FXML private Label sexJSS_LBL, totalScoreJSS_LBL, avgJSS_LBL, overAllPositionJSS_LBL, outOfJSS_LBL, 
		daysInTermJss, presentsInTermJss, absentsInTermJss;
	@FXML private ImageView imageViewJSSResult;
	
	@FXML private ComboBox<String> termJSS_LBL, yearJSS_LBL;
	
	@FXML
	TableColumn<JssScoresDataTable,String> JSSsubjectCol, JSSCA1Col, JSSCA2Col, JSSCA3Col, 
		JSSCA4Col, JSSCA5Col, JSSCA6Col, JSSexamCol, 
		JSStotalCol, JSSgradeCol, JSSpositionCol, JSSclassAvgCol, JSSclassHighestCol, JSSclassLowestCol, 
		JSSremarksCol;
	
	@FXML private TextField idNoJSS_LBL; 
	//@FXML private Button JSS_SpoolResultButton;
	
	@FXML public void JSS_initialize(MouseEvent event) {
		termJSS_LBL.setItems(termN);
		//yearJSS_LBL.setItems(years);
		populateYear(yearJSS_LBL);
	}
	
	@SuppressWarnings({ "rawtypes", "unchecked" })
	@FXML
	public void JSS_SpoolResultActionButton(ActionEvent event) {
		String stdNo = idNoJSS_LBL.getText().trim().toUpperCase();
		String term = termJSS_LBL.getValue();
		String year = yearJSS_LBL.getValue();
		LinkedList<String> DataSet = new LinkedList<>();
		Vector<JssScoreSheets> SID_elements = new Vector<>();
		
		LinkedList<String> Behaviour = new LinkedList<>();
		LinkedList<String> Skills = new LinkedList<>();
		Behaviour.add("Punctuality");
		Behaviour.add("Attendance at class");
		Behaviour.add("Attentiveness at class");
		Behaviour.add("Carrying out Assignment");
		Behaviour.add("Participation in sch activities");
		Behaviour.add("Neatness");
		Behaviour.add("Honesty");
		Behaviour.add("Self control");
		Behaviour.add("Relationship with others");
		Behaviour.add("Helping others");
		Behaviour.add("Games sports");
		Behaviour.add("Handling of Tools Lab Workshop");
		
		Skills.add("Handwriting");
		Skills.add("Verbal Fluency");
		Skills.add("Games");
		Skills.add("Sports");
		Skills.add("Handling Tools");
		Skills.add("Drawing and Painting");
		Skills.add("Musical Skills");
		
		String stdClassVal;
		
		try{
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory
					("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			Students std = entitymanager.find(Students.class, stdNo);
			
			//String stdClassId = std.getEntryClassAssigned();
			
			//days in term, presents and absents
			daysInTermJss.setText(String.valueOf(getAcademicTermNoSchoolDays(entitymanager, term, year) - 
				getAcademicHolidayTotal(entitymanager, year, term)));
			presentsInTermJss.setText(String.valueOf(
				getSchoolAttendancePresents(entitymanager, stdNo, year, term)));
			absentsInTermJss.setText(String.valueOf(
				getSchoolAttendanceAbsents(entitymanager, stdNo, year, term)));
			
			EntityManagerFactory emfactory33 = Persistence.createEntityManagerFactory
					("SchoolMgtSystem");
			EntityManager entitymanager33 = emfactory33.createEntityManager();
			entitymanager33.getTransaction().begin();
						
			stdClassVal = getStudentClassByStdNoYearTerm(entitymanager33, stdNo, year, term);
			
			entitymanager33.getTransaction().commit();
			entitymanager33.close();
			emfactory33.close();
			
			nameJSS_LBL.setText(std.getSurName()+", "+std.getOtherNames());
			sexJSS_LBL.setText(std.getSex());
			
			LocalDate dateAgeStr2 = std.getDateOfBirth();
			LocalDate currentDateStr = LocalDate.now();
			int diffDateStr = currentDateStr.getYear() - dateAgeStr2.getYear();
			ageJSS_LBL.setText(String.valueOf(diffDateStr));
			
			DecimalFormat fm = new DecimalFormat("#.00");
			
			if(stdClassVal.contains("JSS")) {
				
				//***
				//LinkedHashSet<String> elements = std.getScores_sId();
				
				ObservableList<JssScoresDataTable> data = FXCollections.observableArrayList();
				ObservableList<BehaviourDataTable> dataBehaviour = FXCollections.observableArrayList();
				ObservableList<SkillsDataTable> dataSkills = FXCollections.observableArrayList();
				
				Vector<JssScoreSheets> Data2 = new Vector<>();
				Vector<ScoreSheetsSummary> DataPosition = new Vector<>();
				Vector<ScoreSheetsSummary> myClassSize = new Vector<>();
				
				// try this for classAvg, classHighest and classLowest
				Vector<JssScoreSheets> DataX = new Vector<>();
				
//				String stdClass2 = getPrimeClassOnly(stdClassId, year, term, stdClassVal);
				String stdClass2 = getPrimeClass(stdClassVal);
				
				try {
					DataX = (Vector<JssScoreSheets>) getJssScoreSheetsByClassYearTerm(entitymanager, stdClass2, 
							year, term);
				}
				catch(Exception jssE) {
					jssE.printStackTrace();
				}
				
				LinkedHashSet<String> elements2 = new LinkedHashSet<>();
				
				try {
					
					SID_elements = getJssScoreSheetsByStdNoClassYearTerm(entitymanager, stdNo, stdClass2, 
							year, term);
				}
				catch(Exception jssEx) {
					jssEx.printStackTrace();
				}
				
				for(JssScoreSheets sheet : SID_elements) {
					//System.out.println("SID_SID: "+ sheet.getSId());
					elements2.add(sheet.getSId());
				}
				
				//query for class position
				
				try {
					DataPosition = getScoreSheetSummaryYearTerm(entitymanager, year, term);
				}
				catch(Exception jssE2) {
					jssE2.printStackTrace();
				}
							
				for(String e : elements2) {
					if(!(String.valueOf(e).equals(null)) && 
							String.valueOf(e).charAt(String.valueOf(e).length()-1) == '1' && 
							e.contains(stdClass2+term) && 
							e.contains(year)){
								
						LinkedList<String> DataSet2 = new LinkedList<>();
						try {
							EntityManagerFactory emf = Persistence.createEntityManagerFactory
									("SchoolMgtSystem");
							EntityManager entitymgr = emf.createEntityManager();
							entitymgr.getTransaction().begin();
							
							JssScoreSheets scores = entitymgr.find(JssScoreSheets.class, e);
													
							if(scores.getScoresYear().equals(year)) {
								//String stdClassVal = scores.getStdClass();
								
								classJSS_LBL.setText(getPrimeClassReverse(stdClassVal));
								stdTermJSS_LBL.setText(term);
								sessionJSS_LBL.setText(scores.getScoresYear());
								
//								// try this for classAvg, classHighest and classLowest
//								Vector<JssScoreSheets> DataX = new Vector<>();
//								
//								try {
//									DataX = (Vector<JssScoreSheets>) getJssScoreSheetsByClassYearTerm(entitymanager, stdClassVal, 
//											year, term);
//								}
//								catch(Exception jssE) {
//									jssE.printStackTrace();
//								}
								
								Vector<JssScoreSheets> testData = DataX;
								int countx = 0;
								int county = 0;
								double sumx = 0;
								double sumPlus = 0;
							
								LinkedList<Double> tempList = new LinkedList<>();
							
								for(JssScoreSheets test : testData) {
									
									if(test.getSubjectName().equals(scores.getSubjectName())&&
											test.getStdClass().equals(scores.getStdClass()) && 
											test.getTerm().equals(scores.getTerm()) &&
											test.getScoresYear().equals(scores.getScoresYear())) {
										sumx = sumx + test.getTotal();
										tempList.add(test.getTotal());
										countx = countx + 1;
									}
									
									if(test.getStdId().equals(stdNo) &&
											test.getStdClass().equals(scores.getStdClass()) && 
											test.getTerm().equals(scores.getTerm()) &&
											test.getScoresYear().equals(scores.getScoresYear())) {
										sumPlus = sumPlus + test.getTotal();
										county = county + 1;
									}
								}
								
								tempList.sort(null);
								double classHighest = (double) tempList.toArray()[tempList.size()-1];
								double classLowest = (double)tempList.toArray()[0];
								double averageX = sumx/countx;
								String avgX = fm.format(averageX);
								String classHighestX = fm.format(classHighest);
								String classLowestX = fm.format(classLowest);
								
								Data2 = DataX; 
								int position = 1;
								int classPos = 1;
								double myTotal = 0;
								double myTotal2 = 0;
							
								for (JssScoreSheets s : Data2) {						
									if(s.getSubjectName().equals(scores.getSubjectName())&&
											s.getStdClass().equals(scores.getStdClass()) &&
											s.getTerm().equals(scores.getTerm()) &&
											s.getScoresYear().equals(scores.getScoresYear())) {
										int subjCode = s.getSubjectCode();
										
										//Try JDBC Begings per subject
										
										String stdClassX2 = stdClass2;
										
										final String JDBC_Driver2 = "com.mysql.jdbc.Driver";
										final String DB_URL2 = dbURL;
										final String DB_User2 = dbUSR;
										final String DB_PWD2 = dbPWD;
										
										
										Connection conn2 = null;
										PreparedStatement stmt2 = null;
										
										try {
											Class.forName(JDBC_Driver2);
											conn2 = DriverManager.getConnection(DB_URL2, DB_User2, DB_PWD2);
											
											String sql;
											sql = "SELECT *, 1+(SELECT count(*) from JssScoreSheets a "
													+ "WHERE a.STDCLASS = ? and "
													+ "a.TERM = ? and "
													+ "a.SCORESYEAR = ? and "
													+ "a.SUBJECTCODE = ? and "
													+ "a.TOTAL > b.TOTAL) as POSITION, TOTAL FROM JssScoreSheets b "
													+ "where "
													+ "b.STDCLASS = ? and "
													+ "b.TERM = ? and "
													+ "b.SCORESYEAR = ? and "
													+ "b.SUBJECTCODE = ? "
													+ "order by TOTAL desc";
											
											stmt2 = conn2.prepareStatement(sql);
																					
											stmt2.setString(1, stdClassX2);
											stmt2.setString(2, term);
											stmt2.setString(3, year);
											stmt2.setInt(4, subjCode);
										
											stmt2.setString(5, stdClassX2);
											stmt2.setString(6, term);
											stmt2.setString(7, year);
											stmt2.setInt(8, subjCode);
											
											ResultSet rs2 = stmt2.executeQuery();
											
											
											while(rs2.next()) {
												DataSet2.add(rs2.getString("POSITION"));
											}
											rs2.close();
											stmt2.close();
											conn2.close();
										}
										catch(SQLException es) {
											idNoJSS_LBL.setText("Error JDBC: "+ es.getSQLState());
										}
										catch(Exception es2) {
											idNoJSS_LBL.setText("Error JDBC: "+ es2.getMessage());
										}
										finally {
											try {
												if(stmt2 != null ) {
													stmt2.close();
												}
											}
											catch(SQLException ces) {
												idNoJSS_LBL.setText("Error JDBC: "+ ces.getSQLState());
											}
											try {
												if(conn2 != null ) {
													conn2.close();
												}
											}
											catch(Exception ces2) {
												idNoJSS_LBL.setText("JDBC: "+ces2.getMessage());
											}
											
										}
										
										//Try JDBC Ends per subject
										
										if(s.getStdId().equals(stdNo) ) {
											
											String remarks;
											
											// Insert here
												
											if(termJSS_LBL.getValue().equals(scores.getTerm())
													&& yearJSS_LBL.getValue().equals(scores.getScoresYear())) {
												String subPos;
												int subPos2 = Integer.parseInt(DataSet2.get(position-1));
												if(subPos2 == 1 || subPos2 == 21 || subPos2 == 31 || subPos2 == 41 || subPos2 == 51 
														|| subPos2 == 61 || subPos2 == 71 || subPos2 == 81 || subPos2 == 91 
														|| subPos2 == 101 || subPos2 == 121 || subPos2 == 131 || subPos2 == 141 
														|| subPos2 == 151 || subPos2 == 161 || subPos2 == 171 || subPos2 == 181) {
													subPos = String.valueOf(subPos2)+"st";
												}
												else if(subPos2 == 2|| subPos2 == 22 || subPos2 == 32 || subPos2 == 42 || subPos2 == 52 
														|| subPos2 == 62 || subPos2 == 72 || subPos2 == 82 || subPos2 == 92 
														|| subPos2 == 102 || subPos2 == 122 || subPos2 == 132 || subPos2 == 142 
														|| subPos2 == 152 || subPos2 == 162 || subPos2 == 172 || subPos2 == 182) {
													subPos = String.valueOf(subPos2)+"nd";
												}
												else if(subPos2 == 3|| subPos2 == 23 || subPos2 == 33 || subPos2 == 43 || subPos2 == 53 
														|| subPos2 == 63 || subPos2 == 73 || subPos2 == 83 || subPos2 == 93 
														|| subPos2 == 103 || subPos2 == 123 || subPos2 == 133 || subPos2 == 143 
														|| subPos2 == 153 || subPos2 == 163 || subPos2 == 173 || subPos2 == 183) {
													subPos = String.valueOf(subPos2)+"rd";
												}
												else {
													subPos = String.valueOf(subPos2)+"th";
												}
												try {
													
													if(scores.getGrade().equals("A")) {
														remarks = "Excellent";
														if(s.getTotal() == myTotal) {
															
															data.add(
																new JssScoresDataTable(scores.getSubjectName(),
																String.valueOf(scores.getCA1()),
																String.valueOf(scores.getCA2()),
																String.valueOf(scores.getCA3()),
																String.valueOf(scores.getCA4()),
																String.valueOf(scores.getCA5()),
																String.valueOf(scores.getCA6()),
																String.valueOf(scores.getExamScore()),
																String.valueOf(scores.getTotal()),
																scores.getGrade(),
																subPos, 
																avgX,
																classHighestX,
																classLowestX,
																remarks
																));
														}
														else {
			
															data.add(
																new JssScoresDataTable(scores.getSubjectName(),
																String.valueOf(scores.getCA1()),
																String.valueOf(scores.getCA2()),
																String.valueOf(scores.getCA3()),
																String.valueOf(scores.getCA4()),
																String.valueOf(scores.getCA5()),
																String.valueOf(scores.getCA6()),
																String.valueOf(scores.getExamScore()),
																String.valueOf(scores.getTotal()),
																scores.getGrade(),
																subPos, 
																avgX,
																classHighestX,
																classLowestX,
																remarks
																));
														}
													}
													else if(scores.getGrade().equals("B")) {
														remarks = "Very Good";
														if(s.getTotal() == myTotal) {
													
															data.add(
																new JssScoresDataTable(scores.getSubjectName(),
																String.valueOf(scores.getCA1()),
																String.valueOf(scores.getCA2()),
																String.valueOf(scores.getCA3()),
																String.valueOf(scores.getCA4()),
																String.valueOf(scores.getCA5()),
																String.valueOf(scores.getCA6()),
																String.valueOf(scores.getExamScore()),
																String.valueOf(scores.getTotal()),
																scores.getGrade(),
																subPos, 
																avgX,
																classHighestX,
																classLowestX,
																remarks
																));
														}
														else {
			
															data.add(
																new JssScoresDataTable(scores.getSubjectName(),
																String.valueOf(scores.getCA1()),
																String.valueOf(scores.getCA2()),
																String.valueOf(scores.getCA3()),
																String.valueOf(scores.getCA4()),
																String.valueOf(scores.getCA5()),
																String.valueOf(scores.getCA6()),
																String.valueOf(scores.getExamScore()),
																String.valueOf(scores.getTotal()),
																scores.getGrade(),
																subPos, 
																avgX,
																classHighestX,
																classLowestX,
																remarks
																));
														}
													}
													else if(scores.getGrade().equals("C")) {
														remarks = "Good";
														
														if(s.getTotal() == myTotal) {
														
															data.add(
																new JssScoresDataTable(scores.getSubjectName(),
																String.valueOf(scores.getCA1()),
																String.valueOf(scores.getCA2()),
																String.valueOf(scores.getCA3()),
																String.valueOf(scores.getCA4()),
																String.valueOf(scores.getCA5()),
																String.valueOf(scores.getCA6()),
																String.valueOf(scores.getExamScore()),
																String.valueOf(scores.getTotal()),
																scores.getGrade(),
																subPos, 
																avgX,
																classHighestX,
																classLowestX,
																remarks
																));
														}
														else {
			
															data.add(
																new JssScoresDataTable(scores.getSubjectName(),
																String.valueOf(scores.getCA1()),
																String.valueOf(scores.getCA2()),
																String.valueOf(scores.getCA3()),
																String.valueOf(scores.getCA4()),
																String.valueOf(scores.getCA5()),
																String.valueOf(scores.getCA6()),
																String.valueOf(scores.getExamScore()),
																String.valueOf(scores.getTotal()),
																scores.getGrade(),
																subPos, 
																avgX,
																classHighestX,
																classLowestX,
																remarks
																));
															}
														}
													else if(scores.getGrade().equals("D")) {
														remarks = "Fair";
														if(s.getTotal() == myTotal) {
														
															data.add(
																new JssScoresDataTable(scores.getSubjectName(),
																String.valueOf(scores.getCA1()),
																String.valueOf(scores.getCA2()),
																String.valueOf(scores.getCA3()),
																String.valueOf(scores.getCA4()),
																String.valueOf(scores.getCA5()),
																String.valueOf(scores.getCA6()),
																String.valueOf(scores.getExamScore()),
																String.valueOf(scores.getTotal()),
																scores.getGrade(),
																subPos, 
																avgX,
																classHighestX,
																classLowestX,
																remarks
																));
														}
														else {
			
															data.add(
																new JssScoresDataTable(scores.getSubjectName(),
																String.valueOf(scores.getCA1()),
																String.valueOf(scores.getCA2()),
																String.valueOf(scores.getCA3()),
																String.valueOf(scores.getCA4()),
																String.valueOf(scores.getCA5()),
																String.valueOf(scores.getCA6()),
																String.valueOf(scores.getExamScore()),
																String.valueOf(scores.getTotal()),
																scores.getGrade(),
																subPos, 
																avgX,
																classHighestX,
																classLowestX,
																remarks
																));
														}
													}
													
													else {
														remarks = "Fail";
														if(s.getTotal() == myTotal) {
								
															data.add(
																new JssScoresDataTable(scores.getSubjectName(),
																String.valueOf(scores.getCA1()),
																String.valueOf(scores.getCA2()),
																String.valueOf(scores.getCA3()),
																String.valueOf(scores.getCA4()),
																String.valueOf(scores.getCA5()),
																String.valueOf(scores.getCA6()),
																String.valueOf(scores.getExamScore()),
																String.valueOf(scores.getTotal()),
																scores.getGrade(),
																subPos, 
																avgX,
																classHighestX,
																classLowestX,
																remarks
																));
														}
														else {
			
															data.add(
																new JssScoresDataTable(scores.getSubjectName(),
																String.valueOf(scores.getCA1()),
																String.valueOf(scores.getCA2()),
																String.valueOf(scores.getCA3()),
																String.valueOf(scores.getCA4()),
																String.valueOf(scores.getCA5()),
																String.valueOf(scores.getCA6()),
																String.valueOf(scores.getExamScore()),
																String.valueOf(scores.getTotal()),
																scores.getGrade(),
																subPos, 
																avgX,
																classHighestX,
																classLowestX,
																remarks
																));
														}
													}
												}
											catch(Exception except) {
												idNoJSS_LBL.setText("You must specify term and year for your result"
														+ except.getMessage());
											}
										}
									}
										
										//End insert here
										
									else {
										// do nothing STDID
									}

									position++;
									myTotal = s.getTotal();
									
								}
								else {
									// do nothing
								}
							}
							
							//Try JDBC Begings for class position 
							
							String stdClassX = stdClass2;
							
							final String JDBC_Driver = "com.mysql.jdbc.Driver";
							final String DB_URL = dbURL;
							final String DB_User = dbUSR;
							final String DB_PWD = dbPWD;
							
							
							Connection conn = null;
							//Statement stmt = null;
							PreparedStatement stmt = null;
							
							try {
								Class.forName(JDBC_Driver);
								conn = DriverManager.getConnection(DB_URL, DB_User, DB_PWD);
								//stmt = conn.createStatement();
								
								String sql;
								sql = "SELECT *, 1+(SELECT count(*) from scoresheetssummary a "
										+ "WHERE a.STUDENTCLASS = ? and "
										+ "a.STUDENTTERM = ? and "
										+ "a.ACADEMICYEAR = ? and "
										+ "a.TOTALSCORES > b.totalscores) as POSITION, "
										+ "TOTALSCORES "
										+ "FROM scoresheetssummary b "
										+ "where b.STUDENTCLASS = ? and "
										+ "b.STUDENTTERM = ? and "
										+ "b.ACADEMICYEAR = ? "
										+ "order by TOTALSCORES desc";
								
								stmt = conn.prepareStatement(sql);
								
								int term2 = Integer.parseInt(term);
								int year2 = Integer.parseInt(year);
								stmt = conn.prepareStatement(sql);
								stmt.setString(1, stdClassX);
								stmt.setInt(2, term2);
								stmt.setInt(3, year2);
								stmt.setString(4, stdClassX);
								stmt.setInt(5, term2);
								stmt.setInt(6, year2);
								
								ResultSet rs = stmt.executeQuery();
								
								while(rs.next()) {
									DataSet.add(rs.getString("POSITION"));
								}
								rs.close();
								stmt.close();
								conn.close();
							}
							catch(SQLException es) {
								idNoJSS_LBL.setText("Error JDBC: "+ es.getSQLState());
							}
							catch(Exception es2) {
								idNoJSS_LBL.setText("Error JDBC: "+ es2.getMessage());
							}
							finally {
								try {
									if(stmt != null ) {
										stmt.close();
									}
								}
								catch(SQLException ces) {
									idNoJSS_LBL.setText("Error JDBC: "+ ces.getSQLState());
								}
								try {
									if(conn != null ) {
										conn.close();
									}
								}
								catch(Exception ces2) {
									idNoJSS_LBL.setText("JDBC: "+ces2.getMessage());
								}
								
							}
							
							//Try JDBC Ends for class position
							
//							//query for class position
//							
//							try {
//								DataPosition = getScoreSheetSummaryYearTerm(entitymanager, year, term);
//							}
//							catch(Exception jssE2) {
//								jssE2.printStackTrace();
//							}
							
							int count = 0;
							int count2 = 0;
							int termCount = 0;
							int termNo = 0;
							LinkedHashSet<String> setTermUnique = new LinkedHashSet<>();
							
							for(ScoreSheetsSummary ex : DataPosition) {
								if(ex.getStudentTerm().equals(term) &&
										ex.getAcademicYear().equals(year) &&
										ex.getStudentClass().equals(scores.getStdClass())) {
									myClassSize.add(ex);
									count2 = count2 + 1;
								}
								setTermUnique.add(ex.getAcademicYear()+ex.getStudentTerm());
								count = count + 1;
							}
							
							for(String ter : setTermUnique) {
								if(!(Integer.parseInt(ter) == termNo)) {
									termCount = termCount + 1;
								}
								else {
									termCount = termCount + 0;
								}
								termNo = Integer.parseInt(ter);
							}
							
							int countxx = 0;
							
							for(ScoreSheetsSummary elem : DataPosition) {
								if(elem.getStudentClass().equals(scores.getStdClass()) &&
										elem.getStudentTerm().equals(scores.getTerm()) &&
										elem.getAcademicYear().equals(scores.getScoresYear())) {
									
									if(elem.getStudentName().equals(scores.getName())&&
									elem.getStudentId().equals(stdNo) &&
									elem.getStudentTerm().equals(term) &&
									elem.getAcademicYear().equals(year)){
										
										//try using jdbc begins
									
										String classPosz;
										int classPosz2 = Integer.parseInt(DataSet.get(classPos-1));
										if(classPosz2 == 1 || classPosz2 == 21 || classPosz2 == 31 || classPosz2 == 41 
												|| classPosz2 == 51 || classPosz2 == 61 || classPosz2 == 71 || classPosz2 == 81 
												|| classPosz2 == 91 || classPosz2 == 101 || classPosz2 == 121 
												|| classPosz2 == 131 || classPosz2 == 141 || classPosz2 == 151 
												|| classPosz2 == 161 || classPosz2 == 171 || classPosz2 == 181) {
											classPosz = String.valueOf(classPosz2)+"st";
										}
										else if(classPosz2 == 2|| classPosz2 == 22 || classPosz2 == 32 || classPosz2 == 42 
												|| classPosz2 == 52 || classPosz2 == 62 || classPosz2 == 72 || classPosz2 == 82 
												|| classPosz2 == 92 || classPosz2 == 102 || classPosz2 == 122 || classPosz2 == 132 
												|| classPosz2 == 142 || classPosz2 == 152 || classPosz2 == 162 || classPosz2 == 172 
												|| classPosz2 == 182) {
											classPosz = String.valueOf(classPosz2)+"nd";
										}
										else if(classPosz2 == 3|| classPosz2 == 23 || classPosz2 == 33 || classPosz2 == 43 
												|| classPosz2 == 53 || classPosz2 == 63 || classPosz2 == 73 || classPosz2 == 83 
												|| classPosz2 == 93 || classPosz2 == 103 || classPosz2 == 123 || classPosz2 == 133 
												|| classPosz2 == 143 || classPosz2 == 153 || classPosz2 == 163 || classPosz2 == 173 
												|| classPosz2 == 183) {
											classPosz = String.valueOf(classPosz2)+"rd";
										}
										else {
											classPosz = String.valueOf(classPosz2)+"th";
										}
										
										overAllPositionJSS_LBL.setText(classPosz);
										
										//try using jdbc ends
										
									}
									else {
										if(elem.getTotalScores() ==  myTotal2) {
											countxx = countxx + 1;
										}
										classPos = classPos + 1;
										myTotal2 = elem.getTotalScores();
									}
								}
								else {
									//
								}
							}
							
							double myClassAvg = 0;
							for(ScoreSheetsSummary avg : myClassSize) {
								if(avg.getAcademicYear().equals(year) &&
										avg.getStudentTerm().equals(term)&&
										avg.getStudentClass().equals(scores.getStdClass())) {
									myClassAvg = myClassAvg + avg.getTotalScores();
								}
								
							}
							
							noInClassJSS_LBL.setText(String.valueOf(count2));
							outOfJSS_LBL.setText(String.valueOf(count2));
							}
						
							entitymgr.getTransaction().commit();
							entitymgr.close();
							emf.close();
						}
					
						catch(Exception er) {
							idNoJSS_LBL.setText("Error Scores: " + er.getMessage());
							//er.printStackTrace();
						}
					}
				}
					
			double totalScoresResult = 0;
			double avgScoresResult = 0;
			int dataSize = data.size();
			
			for(JssScoresDataTable datum : data) {
				totalScoresResult += Double.parseDouble(datum.getTotal_Data());
			}
			
			avgScoresResult = totalScoresResult/dataSize;
			String averageScoreResult = fm.format(avgScoresResult);
			totalScoreJSS_LBL.setText(String.valueOf(fm.format(totalScoresResult)));
			avgJSS_LBL.setText(averageScoreResult);
					
			JSSsubjectCol.setCellValueFactory(new PropertyValueFactory("subjectName_Data"));
			JSSCA1Col.setCellValueFactory(new PropertyValueFactory("CA1_Data"));
			JSSCA2Col.setCellValueFactory(new PropertyValueFactory("CA2_Data"));
			JSSCA3Col.setCellValueFactory(new PropertyValueFactory("CA3_Data"));
			JSSCA4Col.setCellValueFactory(new PropertyValueFactory("CA4_Data"));
			JSSCA5Col.setCellValueFactory(new PropertyValueFactory("CA5_Data"));
			JSSCA6Col.setCellValueFactory(new PropertyValueFactory("CA6_Data"));
			JSSexamCol.setCellValueFactory(new PropertyValueFactory("exam_Data"));
			JSStotalCol.setCellValueFactory(new PropertyValueFactory("total_Data"));
			JSSgradeCol.setCellValueFactory(new PropertyValueFactory("grade_Data"));
			JSSpositionCol.setCellValueFactory(new PropertyValueFactory("position_Data"));
			JSSclassAvgCol.setCellValueFactory(new PropertyValueFactory("classAvg_Data"));
			JSSclassHighestCol.setCellValueFactory(new PropertyValueFactory("classHighest_Data"));
			JSSclassLowestCol.setCellValueFactory(new PropertyValueFactory("classLowest_Data"));
			JSSremarksCol.setCellValueFactory(new PropertyValueFactory("remark_Data"));
			
			//colouring grade
			JSSgradeCol.setCellFactory(new Callback<TableColumn<JssScoresDataTable,String>,TableCell<JssScoresDataTable,String>>(){
				public TableCell call(TableColumn param) {
					return new TableCell<JssScoresDataTable,String>(){
						@Override
						public void updateItem(String item, boolean empty) {
							super.updateItem(item,empty);
							if(!(isEmpty())) {
								if(item.equals("E")) {
									this.setTextFill(Color.RED);
								}
								setText(item);
							}
						}
					};
				}
			});
			
			JSStotalCol.setCellFactory(new Callback<TableColumn<JssScoresDataTable,String>,TableCell<JssScoresDataTable,String>>(){
				public TableCell call(TableColumn param) {
					return new TableCell<JssScoresDataTable,String>(){
						@Override
						public void updateItem(String item, boolean empty) {
							super.updateItem(item,empty);
							if(!(isEmpty())) {
								if(Double.parseDouble(item) < 40) {
									this.setTextFill(Color.RED);
								}
								setText(item);
							}
						}
					};
				}
			});
			
			jssScoresDataTable.setItems(data);
					
			entitymanager.getTransaction().commit();
			entitymanager.close();
			emfactory.close();
			
			for(String str : Behaviour) {
				dataBehaviour.add(new BehaviourDataTable(str));
			}
			
			behaviourCol.setCellValueFactory(new PropertyValueFactory("behaviour_Data"));
			
			behaviourDataTable.setItems(dataBehaviour);
			
			for(String str : Skills) {
				dataSkills.add(new SkillsDataTable(str));
			}
			
			skillsCol.setCellValueFactory(new PropertyValueFactory("skills_Data"));
			
			skillsDataTable.setItems(dataSkills);
			}
			else {
				Alert alert = new Alert(Alert.AlertType.ERROR);
				alert.setContentText("Please use the SSS Result template for Senior Students...");
				Optional<ButtonType> result = alert.showAndWait();
				if(result.get() == ButtonType.OK) {
					alert.close();
				}
				else {
					alert.close();
				}
			}
		
		}
		catch(Exception e) {
			idNoJSS_LBL.setText("Error: " + e.getLocalizedMessage());
			jssScoresDataTable.setItems(null);
			nameJSS_LBL.setText(null);
			sexJSS_LBL.setText(null);
			ageJSS_LBL.setText(null);
			classJSS_LBL.setText(null);
			stdTermJSS_LBL.setText(null);
			sessionJSS_LBL.setText(null);
			noInClassJSS_LBL.setText(null);
			totalScoreJSS_LBL.setText(null);
			avgJSS_LBL.setText(null);
			overAllPositionJSS_LBL.setText(null);
			outOfJSS_LBL.setText(null);
		}
		
		//view image
		try {
			String stdId = stdNo;
			
			String jdbcUrl = dbURL;
			String username = dbUSR;
			String password = dbPWD;
			
			String sql = "SELECT * FROM stdImages WHERE stdid = ?";
			
			try(Connection conn = DriverManager.getConnection(jdbcUrl, username, password);
					){
				
				try(PreparedStatement stmt = conn.prepareStatement(sql);
						){
					stmt.setString(1, stdId);		
					
					ResultSet result = stmt.executeQuery();
					
					
					if(result.next()) {
						InputStream imageStream = result.getBinaryStream("image");
						Image img = new Image(imageStream);
						imageViewJSSResult.setImage(img);
					}
					else {
						imageViewJSSResult.setImage(null);
					}
				
					result.close();
					stmt.close();
					conn.close();
				}
				catch(SQLException io) {
					idNoJSS_LBL.setText(io.getMessage());
					imageViewJSSResult.setImage(null);
				}
			}
			catch(SQLException eq) {
				idNoJSS_LBL.setText(eq.getMessage());
				imageViewJSSResult.setImage(null);
			}
		}
		catch(Exception e) {
			idNoJSS_LBL.setText(e.getMessage());
			imageViewJSSResult.setImage(null);
		}
				
	}
		
	//Annual Result
	@FXML public void annual_initialize(MouseEvent event) {
		//yearAnnual_LBL.setItems(years);
		populateYear(yearAnnual_LBL);
	}
	
	//Generate Annual Results Controller
	@FXML private TableView<AnnualScoresDataTable> annualScoresDataTable;	
	@FXML private Label nameAnnual_LBL, classAnnual_LBL, noInClassAnnual_LBL, ageAnnual_LBL, stdTermAnnual_LBL, 
		sessionAnnual_LBL, noSchoolDaysAnnual, noPresentsAnnual, noAbsentsAnnual;
	@FXML private Label sexAnnual_LBL, totalScoreAnnual_LBL, avgAnnual_LBL, overAllPositionAnnual_LBL, 
		outOfAnnual_LBL, annualCadre_LBL;
	@FXML private ComboBox<String> yearAnnual_LBL;
	
	@FXML
	TableColumn<AnnualScoresDataTable,String> annualSubjectCol, annualFirstTermCol, annualSecondTermCol, 
		annualThirdTermCol, annualTotalCol, annualClassAvgCol, annualClassHighestCol,  
		annualClassLowestCol, annualGradeCol, annualPositionCol, annualRemarksCol; 
	
	@FXML private TextField idNoAnnual_LBL; 
	
	@SuppressWarnings({ "rawtypes", "unchecked" })
	@FXML
	public void annual_SpoolResultActionButton(ActionEvent event) {
		
		String stdNo = idNoAnnual_LBL.getText().trim().toUpperCase();
		String year = yearAnnual_LBL.getValue();
		LinkedList<String> DataSet = new LinkedList<>();
		DecimalFormat fm = new DecimalFormat("#.00");
		
		ObservableList<AnnualScoresDataTable> data = FXCollections.observableArrayList();
		
		Vector<AnnualScoresTotal> DataPosition = new Vector<>();
		
		String stdClassVal;
		
		try{
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory
					("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			Students std = entitymanager.find(Students.class, stdNo);
			
			//String stdClassId = std.getEntryClassAssigned();
			noSchoolDaysAnnual.setText(String.valueOf(getAcademicSessionSchoolDays(entitymanager, year)));
			noPresentsAnnual.setText(String.valueOf(getSchoolAttendancePresentsYear(entitymanager, stdNo, year)));
			noAbsentsAnnual.setText(String.valueOf(getSchoolAttendanceAbsentsYear(entitymanager, stdNo, year)));
			
			nameAnnual_LBL.setText(std.getOtherNames()+" "+std.getSurName());
			sexAnnual_LBL.setText(std.getSex());
			
			LocalDate dateAgeStr2 = std.getDateOfBirth();
			LocalDate currentDateStr = LocalDate.now();
			int diffDateStr = currentDateStr.getYear() - dateAgeStr2.getYear();
			ageAnnual_LBL.setText(String.valueOf(diffDateStr));
			
			EntityManagerFactory emfactory33 = Persistence.createEntityManagerFactory
					("SchoolMgtSystem");
			EntityManager entitymanager33 = emfactory33.createEntityManager();
			entitymanager33.getTransaction().begin();
			
			stdClassVal = getStudentClassByStdNoYear(entitymanager33, stdNo, year);
			
			entitymanager33.getTransaction().commit();
			entitymanager33.close();
			emfactory33.close();
						
			LinkedHashSet<String> annualScoreSummary2 = new LinkedHashSet<>();
			LinkedHashSet<String> annualScoresSet2 = new LinkedHashSet<>();
			
			Vector<AnnualScoreSheetsSummary> AnnualScoreSheetsData = new Vector<>();
			Vector<AnnualScoresTotal> AnnualScoresTotalData = new Vector<>();
			
			//Annual
			Vector<AnnualScoreSheetsSummary> AnnualData = new Vector<>();
			
			String stdClass2 = getPrimeClass(stdClassVal);
			
			try {
				AnnualScoreSheetsData = getAnnualScoreSheetSummaryByStdClassYear(entitymanager, stdNo, 
						stdClass2, year);
						
				AnnualScoresTotalData = getAnnualScoresTotalByStdClassYear(entitymanager, stdNo, 
						stdClass2, year);
			}
			catch(Exception anualee) {
				anualee.printStackTrace();
			}
			
			for(AnnualScoreSheetsSummary sheet : AnnualScoreSheetsData) {
				annualScoreSummary2.add(sheet.getSumId());
			}
			
			for(AnnualScoresTotal sheet : AnnualScoresTotalData) {
				annualScoresSet2.add(sheet.getSumId());
			}
			
			AnnualData = getAnnualScoresSheetsSumByClassYear(entitymanager, stdClass2, year);
			
			for (String ass : annualScoreSummary2) {
				
				double firstTermScore = 0, secondTermScore = 0, thirdTermScore = 0, annualTotalScore = 0,
						annualClassAvgScore = 0, annualClassHighestScore = 0, annualClassLowestScore = 0;
				String annualGradeStr, annualRemarkStr, subjectStr = "";
					
				if(ass.contains(stdNo+year)) {
					
					try {
						EntityManagerFactory emfactory1 = Persistence.createEntityManagerFactory
								("SchoolMgtSystem");
						EntityManager entitymanager1 = emfactory1.createEntityManager();
						entitymanager1.getTransaction().begin();
						
						AnnualScoreSheetsSummary summary = entitymanager1.find(AnnualScoreSheetsSummary.class, ass);
						
						if(summary.getAcademicYear().equals(year) && 
								summary.getStudentId().equals(stdNo)) {
							
							subjectStr = summary.getSubjectName();
							firstTermScore = summary.getFirstTermTotal();
							secondTermScore = summary.getSecondTermTotal();
							thirdTermScore = summary.getThirdTermTotal();
							annualTotalScore = summary.getTotalScores();
						}
						
						entitymanager1.getTransaction().commit();
						entitymanager1.close();
						emfactory1.close();
					}
					catch(Exception ex) {
						idNoAnnual_LBL.setText("Set Scores Error: "+ ex.getMessage());
					}
					
					annualClassAvgScore = annualTotalScore/3.0;
					String annualAvgStr = fm.format(annualClassAvgScore);
					String firstTerm = fm.format(firstTermScore);
					String secondTerm = fm.format(secondTermScore);
					String thirdTerm = fm.format(thirdTermScore);
					String annualTotalStr = fm.format(annualTotalScore);
					
					String stdClass = stdClass2;
					int subjCode = 0;
					
					//Let's get highest and lowest scores
					LinkedList<Double> tempList = new LinkedList<>();
					LinkedList<Double> tempList2 = new LinkedList<>();
					try {
						EntityManagerFactory emfactory2 = Persistence.createEntityManagerFactory
								("SchoolMgtSystem");
						EntityManager entitymanager2 = emfactory2.createEntityManager();
						entitymanager2.getTransaction().begin();
						
						AnnualScoreSheetsSummary scores = entitymanager2.find(AnnualScoreSheetsSummary.class, ass);
						
						if(scores.getAcademicYear().equals(year) &&
								scores.getStudentId().equalsIgnoreCase(stdNo) && 
								scores.getStudentClass().equals(stdClass2)) {
							
							
							String myClass = scores.getStudentClass();
							String myClassStr = "";
							myClassStr = myClass;
							//stdClass = scores.getStudentClass();
							
							subjCode = scores.getSubjectCode();
							
							classAnnual_LBL.setText(getPrimeClassReverse(stdClassVal));
							sessionAnnual_LBL.setText(scores.getAcademicYear());
							if(myClassStr.contains("JSS")) {
								annualCadre_LBL.setText("ANNUAL ASSESSMENT SUMMARY (JSS)");
							}
							else {
								annualCadre_LBL.setText("ANNUAL ASSESSMENT SUMMARY (SSS)");
							}
							
							for(AnnualScoreSheetsSummary annual : AnnualData) {
								
								if(annual.getAcademicYear().equals(scores.getAcademicYear()) && 
										scores.getAcademicYear().equals(year) &&
										annual.getAcademicYear().equals(year) &&
										annual.getStudentClass().equals(scores.getStudentClass()) && 
										annual.getSubjectCode() == scores.getSubjectCode() ) {
									if(scores.getAcademicYear().equals(year)) {
										tempList.add(annual.getTotalScores());
										tempList2.add(annual.getTotalScores());
									}
								}
								
							}
							
//							for(double doub : tempList) {
//								System.out.println("ZZZ: "+doub);
//								System.out.println("LAST: "+tempList.getLast());
//								System.out.println("FIRST: "+tempList.getFirst());
//							}
							
							tempList.sort(null);
							annualClassHighestScore = tempList.getLast();
							//annualClassHighestScore = tempList.get(tempList.size()-1);
							annualClassLowestScore = tempList.getFirst();
							//annualClassLowestScore = tempList.get(0);
						}
						
						entitymanager2.getTransaction().commit();
						entitymanager2.close();
						emfactory2.close();
					}
					catch(Exception ex) {
						ex.printStackTrace();
						idNoAnnual_LBL.setText("Highest et Lowest Scores Error: "+ ex.getMessage());
					}
					
					String annualHighest = fm.format(annualClassHighestScore/3.0);
					String annualLowest = fm.format(annualClassLowestScore/3.0);
					
					if(Double.parseDouble(annualAvgStr) >= 70) {
						annualGradeStr = "A";
						annualRemarkStr = "Excellent";
					}
					else if(Double.parseDouble(annualAvgStr) >= 60 && Double.parseDouble(annualAvgStr) < 70) {
						annualGradeStr = "B";
						annualRemarkStr = "Very Good";
					}
					else if(Double.parseDouble(annualAvgStr) >= 50 && Double.parseDouble(annualAvgStr) < 60) {
						annualGradeStr = "C";
						annualRemarkStr = "Good";
					}
					else if(Double.parseDouble(annualAvgStr) >= 40 && Double.parseDouble(annualAvgStr) < 50) {
						annualGradeStr = "D";
						annualRemarkStr = "Fair";
					}
					else {
						annualGradeStr = "E";
						annualRemarkStr = "Fail";
					}
					
					LinkedList<String> DataSet2 = new LinkedList<>();
					//query for subject position
					
					final String JDBC_Driver2 = "com.mysql.jdbc.Driver";
					final String DB_URL2 = dbURL;
					final String DB_User2 = dbUSR;
					final String DB_PWD2 = dbPWD;
					
					
					Connection conn2 = null;
					PreparedStatement stmt2 = null;
					
					try {
						Class.forName(JDBC_Driver2);
						conn2 = DriverManager.getConnection(DB_URL2, DB_User2, DB_PWD2);
						
						String sql;
						sql = "SELECT *, 1+(SELECT count(*) from annualscoresheetssummary a "
								+ "WHERE "
								+ "a.studentclass = ? and "
								+ "a.academicyear = ? and "
								+ "a.SUBJECTCODE = ? and "
								+ "a.TOTALSCORES > b.TOTALSCORES) as POSITION, TOTALSCORES "
								+ "FROM annualscoresheetssummary b "
								+ "where "
								+ "b.studentclass = ? and "
								+ "b.academicyear = ? and "
								+ "b.SUBJECTCODE = ? "
								+ "order by TOTALSCORES desc;";
						
						stmt2 = conn2.prepareStatement(sql);
						
						//int year22 = Integer.parseInt(year);
					
						stmt2.setString(1, stdClass);
						stmt2.setString(2, year);
						stmt2.setInt(3, subjCode);
					
						stmt2.setString(4, stdClass);
						stmt2.setString(5, year);
						stmt2.setInt(6, subjCode);
						
						ResultSet rs2 = stmt2.executeQuery();
						
						
						while(rs2.next()) {
							DataSet2.add(rs2.getString("POSITION"));
						}
						rs2.close();
						stmt2.close();
						conn2.close();
					}
					catch(SQLException es) {
						idNoAnnual_LBL.setText("Error JDBC: "+ es.getSQLState());
					}
					catch(Exception es2) {
						idNoAnnual_LBL.setText("Error JDBC: "+ es2.getMessage());
					}
					finally {
						try {
							if(stmt2 != null ) {
								stmt2.close();
							}
						}
						catch(SQLException ces) {
							idNoAnnual_LBL.setText("Error JDBC: "+ ces.getSQLState());
						}
						try {
							if(conn2 != null ) {
								conn2.close();
							}
						}
						catch(Exception ces2) {
							idNoAnnual_LBL.setText("JDBC: "+ces2.getMessage());
						}
						
					}
					
//					int classSize = DataSet2.size();
//					outOfAnnual_LBL.setText(String.valueOf(classSize));
//					noInClassAnnual_LBL.setText(String.valueOf(classSize));
					
					//subject position
					int position = 0;
					try {
						EntityManagerFactory emfactory3 = Persistence.createEntityManagerFactory
								("SchoolMgtSystem");
						EntityManager entitymanager3 = emfactory3.createEntityManager();
						entitymanager3.getTransaction().begin();
						
						AnnualScoreSheetsSummary scores = entitymanager3.find(AnnualScoreSheetsSummary.class, ass);
						
						
						for(AnnualScoreSheetsSummary annual : AnnualData) {
							if(annual.getSubjectCode() == scores.getSubjectCode() && 
									annual.getStudentClass().equals(scores.getStudentClass()) && 
									annual.getAcademicYear().equals(scores.getAcademicYear())) {
								if(annual.getStudentId().equals(stdNo)) {
									if(year.equals(scores.getAcademicYear()) ) {
										String subPos;
										int subPos2 = Integer.parseInt(DataSet2.get(position));
										if(subPos2 == 1 || subPos2 == 21 || subPos2 == 31 || subPos2 == 41 || subPos2 == 51 || subPos2 == 61) {
											subPos = String.valueOf(subPos2)+"st";
										}
										else if(subPos2 == 2|| subPos2 == 22 || subPos2 == 32 || subPos2 == 42 || subPos2 == 52 || subPos2 == 62) {
											subPos = String.valueOf(subPos2)+"nd";
										}
										else if(subPos2 == 3|| subPos2 == 23 || subPos2 == 33 || subPos2 == 43 || subPos2 == 53 || subPos2 == 63) {
											subPos = String.valueOf(subPos2)+"rd";
										}
										else {
											subPos = String.valueOf(subPos2)+"th";
										}
										try {	
											data.add(
												new AnnualScoresDataTable(
												subjectStr,
												firstTerm,
												secondTerm,
												thirdTerm,
												annualTotalStr,
												annualAvgStr,
												annualHighest,
												annualLowest,
												annualGradeStr,
												subPos, 
												annualRemarkStr
												));
										}
									catch(Exception except) {
										idNoAnnual_LBL.setText("You must specify term and year for your result"
												+ except.getMessage());
										}
									}
									else {
										//
									}
								}
								else {
									//
								}
								position++;
							}
						}
						
						
						entitymanager3.getTransaction().commit();
						entitymanager3.close();
						emfactory3.close();
					}
					catch(Exception exc) {
						idNoAnnual_LBL.setText("Subject Position and Data set Error: "+ exc.getMessage());
					}
				}
				
			} // ass ends
			
			//overall class position
			int classPos = 1;
			int year2 = Integer.parseInt(year);
			String stdClassXXX = stdClass2;
			String ass2 = stdNo+year;
			
//			EntityManagerFactory emfactory1 = Persistence.createEntityManagerFactory
//					("SchoolMgtSystem");
//			EntityManager entitymanager1 = emfactory1.createEntityManager();
//			entitymanager1.getTransaction().begin();
//			
//			AnnualScoresTotal annualSum = entitymanager1.find(AnnualScoresTotal.class, ass2);
//			
//			stdClassXXX = annualSum.getStudentClass();
//			
//			entitymanager1.getTransaction().commit();
//			entitymanager1.close();
//			emfactory1.close();
			
			final String JDBC_Driver = "com.mysql.jdbc.Driver";
			final String DB_URL = dbURL;
			final String DB_User = dbUSR;
			final String DB_PWD = dbPWD;
			
			
			Connection conn = null;
			//Statement stmt = null;
			PreparedStatement stmt = null;
			
			try {
				Class.forName(JDBC_Driver);
				conn = DriverManager.getConnection(DB_URL, DB_User, DB_PWD);
				//stmt = conn.createStatement();
				
				String sql;
				sql = "SELECT *, 1+(SELECT count(*) from annualscorestotal a "
						+ "WHERE "
						+ "a.studentclass = ? and "
						+ "a.academicyear = ? and "
						+ "a.TOTALSCORES > b.TOTALSCORES) as POSITION, TOTALSCORES "
						+ "FROM annualScoresTotal b "
						+ "where "
						+ "b.studentclass = ? and "
						+ "b.academicyear = ? "
						+ "order by TOTALSCORES desc;";
				
				stmt = conn.prepareStatement(sql);
				
				stmt = conn.prepareStatement(sql);
				
				stmt.setString(1, stdClassXXX);
				stmt.setInt(2, year2);
				stmt.setString(3, stdClassXXX);
				stmt.setInt(4, year2);
				
				ResultSet rs = stmt.executeQuery();
				
				while(rs.next()) {
					DataSet.add(rs.getString("POSITION"));
				}
				rs.close();
				stmt.close();
				conn.close();
			}
			catch(SQLException es) {
				idNoAnnual_LBL.setText("Error JDBC: "+ es.getSQLState());
			}
			catch(Exception es2) {
				idNoAnnual_LBL.setText("Error JDBC: "+ es2.getMessage());
			}
			finally {
				try {
					if(stmt != null ) {
						stmt.close();
					}
				}
				catch(SQLException ces) {
					idNoAnnual_LBL.setText("Error JDBC: "+ ces.getSQLState());
				}
				try {
					if(conn != null ) {
						conn.close();
					}
				}
				catch(Exception ces2) {
					idNoAnnual_LBL.setText("JDBC: "+ces2.getMessage());
				}
			}
			
//			Query query2 =
//					entitymanager.createQuery("select e from AnnualScoresTotal e "
//							+ "order by e.totalScores  DESC");
//			DataPosition = (Vector<AnnualScoresTotal>)query2.getResultList();
			
			DataPosition = getAnnualScoresTotalByClassYear(entitymanager, stdClass2, year);
			
			int classSize = DataPosition.size(); //DataSet2.size();
			outOfAnnual_LBL.setText(String.valueOf(classSize));
			noInClassAnnual_LBL.setText(String.valueOf(classSize));
			
			for(String annualSet : annualScoresSet2) {
				EntityManagerFactory emfactoryx = Persistence.createEntityManagerFactory
						("SchoolMgtSystem");
				EntityManager entitymanagerx = emfactoryx.createEntityManager();
				entitymanagerx.getTransaction().begin();
				
				AnnualScoresTotal annualST = entitymanagerx.find(AnnualScoresTotal.class, annualSet);
				
				
				for(AnnualScoresTotal annual : DataPosition) {
					if(annual.getStudentClass().equals(annualST.getStudentClass()) &&
							annual.getAcademicYear().equals(annualST.getAcademicYear()) && 
							annual.getAcademicYear().equals(year)) {
						
						if(annual.getStudentName().equals(annualST.getStudentName()) &&
								annual.getStudentId().equals(stdNo) &&
								annual.getAcademicYear().equals(annualST.getAcademicYear()) && 
								annual.getAcademicYear().equals(year)){
							
						
							String classPosz;
							int classPosz2 = Integer.parseInt(DataSet.get(classPos-1));
							if(classPosz2 == 1 || classPosz2 == 21 || classPosz2 == 31 || classPosz2 == 41 || classPosz2 == 51 || classPosz2 == 61) {
								classPosz = String.valueOf(classPosz2)+"st";
							}
							else if(classPosz2 == 2|| classPosz2 == 22 || classPosz2 == 32 || classPosz2 == 42 || classPosz2 == 52 || classPosz2 == 62) {
								classPosz = String.valueOf(classPosz2)+"nd";
							}
							else if(classPosz2 == 3|| classPosz2 == 23 || classPosz2 == 33 || classPosz2 == 43 || classPosz2 == 53 || classPosz2 == 63) {
								classPosz = String.valueOf(classPosz2)+"rd";
							}
							else {
								classPosz = String.valueOf(classPosz2)+"th";
							}
							
							overAllPositionAnnual_LBL.setText(classPosz);
							
						}
						else {
								//
							}
							classPos = classPos + 1;
						}
					//}

					else {
						//
					}
					
				}
				
				entitymanagerx.getTransaction().commit();
				entitymanagerx.close();
				emfactoryx.close();
			}
			
			double totalScoresResult = 0;
			int dataSize = data.size();
			
			for(AnnualScoresDataTable datum : data) {
				totalScoresResult += Double.parseDouble(datum.getAnnualTotal_Data());
			}
			String annualTotals = fm.format(totalScoresResult);
			String avgTotals = fm.format(totalScoresResult/(dataSize*3));
			
			totalScoreAnnual_LBL.setText(annualTotals);
			avgAnnual_LBL.setText(avgTotals);
			
			
			annualSubjectCol.setCellValueFactory(new PropertyValueFactory("subjectName_Data"));
			annualFirstTermCol.setCellValueFactory(new PropertyValueFactory("firstTerm_Data"));
			annualSecondTermCol.setCellValueFactory(new PropertyValueFactory("secondTerm_Data"));
			annualThirdTermCol.setCellValueFactory(new PropertyValueFactory("thirdTerm_Data"));
			annualTotalCol.setCellValueFactory(new PropertyValueFactory("annualTotal_Data"));
			annualClassAvgCol.setCellValueFactory(new PropertyValueFactory("annualClassAvg_Data"));
			annualClassHighestCol.setCellValueFactory(new PropertyValueFactory("annualClassHighest_Data"));
			annualClassLowestCol.setCellValueFactory(new PropertyValueFactory("annualClassLowest_Data"));
			annualGradeCol.setCellValueFactory(new PropertyValueFactory("annualGrade_Data"));
			annualPositionCol.setCellValueFactory(new PropertyValueFactory("annualPosition_Data"));
			annualRemarksCol.setCellValueFactory(new PropertyValueFactory("annualRemark_Data"));
			
			annualScoresDataTable.setItems(data);
			
			entitymanager.getTransaction().commit();
			entitymanager.close();
			emfactory.close();
		}		
				
		catch(Exception e) {
			idNoAnnual_LBL.setText("Error: " + e.getLocalizedMessage());
			annualScoresDataTable.setItems(null);
			nameAnnual_LBL.setText(null);
			sexAnnual_LBL.setText(null);
			ageAnnual_LBL.setText(null);
			classAnnual_LBL.setText(null);
			sessionAnnual_LBL.setText(null);
			noInClassAnnual_LBL.setText(null);
			totalScoreAnnual_LBL.setText(null);
			avgAnnual_LBL.setText(null);
			overAllPositionAnnual_LBL.setText(null);
			outOfAnnual_LBL.setText(null);
		}		
	}
	
	
	//print Annual student results
	@FXML private Button annual_PrintResultBtn, annual_SpoolResultButton;
	@FXML private SplitPane printPane5;
	@FXML public void annual_PrintResultButton(ActionEvent even) {
		returntoKusakiGrtHomeAnnual.setVisible(false);
		annual_PrintResultBtn.setVisible(false);
		annual_SpoolResultButton.setVisible(false);
		yearAnnual_LBL.setVisible(false);
		try {
			printNode(printPane5);
		}
		catch(Exception exception) {
			idNoAnnual_LBL.setText("Print Error: "+ exception.getLocalizedMessage());
		}
		finally {
			returntoKusakiGrtHomeAnnual.setVisible(true);
			annual_PrintResultBtn.setVisible(true);
			annual_SpoolResultButton.setVisible(true);
			yearAnnual_LBL.setVisible(true);
		}
	}
	
	//Staff Information Controller
	@FXML private Button staffInfoButton, returnStaffInfoButton;
	
	@FXML TextField staffEmpNo, surNameStaff, otherNamesStaff, placeOfBirthStaff,
		emailStaff, nextOfKinStaff, villageStaff, phone1Staff, phone2Staff,
		staffSpecialization, staffQualification;
	
	@FXML ComboBox<String> staffSex, disabilityStaff, maritalStatusStaff, formMasterOf1, 
		designationStaff, teacherSubjectsCombo, nationalityStaff, stateStaff, lgaStaff;
	
	@FXML DatePicker staffDOB, staffDOR, staffDOQ;
	
	@FXML TextArea addressStaff, ifDisabledStaff;
	
	ObservableList<String> maritalStatus = FXCollections.observableArrayList("Married", "Single", 
			"Divorced", "Separated","Rather not say");
	ObservableList<String> designation = FXCollections.observableArrayList("Principal", "Proprietor", 
			"Administrator", "Rector","Vice Principal","Deputy Rector","Dean","Deputy Dean","HOD","Teacher",
			"Non-Teacher","Burser","Cashier","Not Listed");
	ObservableList<String> subjCombo2 = FXCollections.observableArrayList();
	ObservableList<String> stffClassLst = FXCollections.observableArrayList();
	
	@FXML public void initializeStaffCombo(MouseEvent event) {
		staffSex.setItems(sex);
		disabilityStaff.setItems(disable);
		maritalStatusStaff.setItems(maritalStatus);
		designationStaff.setItems(designation);
	}
	
	@FXML public void initializeStaffComboZ(MouseEvent event) {
		populateStdClassesCombo2(stffClassLst, formMasterOf1);
	}
	
	@FXML public void staffInitCountry(MouseEvent event) {
		populateCountries(nationalityStaff);
	}
	
	@FXML public void staffInitState(MouseEvent event) {
		populateStates(stateStaff);
	}
	
	@FXML public void staffInitLGA(MouseEvent event) {
		populateLGAs(lgaStaff);
	}
	
	@FXML public void initializeStaffCombo2(MouseEvent event) {
		
		Vector<SubjectNames> userData3 = new Vector<>();
		try {
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			Query query2 =
					entitymanager.createQuery("select e from SubjectNames e ");
			userData3 = (Vector<SubjectNames>) query2.getResultList();
			
			for(SubjectNames x : userData3) {
				if(!(subjCombo2.contains(x.getSubjectName()))) {
					subjCombo2.add(x.getSubjectName());
				}
			}
			
			teacherSubjectsCombo.setItems(subjCombo2);
			
			entitymanager.getTransaction().commit();
			entitymanager.close();
			emfactory.close();
			
			new AutoCompleteComboBoxListener<>(teacherSubjectsCombo);
		}
		catch(Exception e) {
			e.printStackTrace();
		}
		
	}
	
	@FXML TableView<AssignedSubjectsDataTable> assignedSubjectsDataTable;
	@FXML TableColumn<AssignedSubjectsDataTable,String> assSubjCodeCol, assSubjNameCol;
	
	@FXML public void addSubjectToStaffButton(ActionEvent event) {
		LocalDate date = LocalDate.now();
		
		try {
			String staffNo = staffEmpNo.getText().toUpperCase();
			String subjectName = teacherSubjectsCombo.getValue();
			
			if(staffNo.trim().length() != 0 && subjectName.trim().length() != 0) {
				
				String subjectCodeStr = "";
				Vector<SubjectNames> userData3 = new Vector<>();
				
				EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
				EntityManager entitymanager = emfactory.createEntityManager();
				entitymanager.getTransaction().begin();
				
				Query query2 =
						entitymanager.createQuery("select e from SubjectNames e ");
				userData3 = (Vector<SubjectNames>) query2.getResultList();
				
				entitymanager.getTransaction().commit();
				entitymanager.close();
				emfactory.close();
				
				if(!(teacherSubjectsCombo.getValue().isEmpty())) {
					String name = teacherSubjectsCombo.getValue();
					for(SubjectNames std : userData3) {
						if((std.getSubjectName().equals(name))) {
							subjectCodeStr = String.valueOf(std.getSubjectCode());
						}
					}
				}
				
				try {
					CreateAssignedSubject subj = new CreateAssignedSubject();
					subj.addAssignedSubject(staffNo, subjectCodeStr, subjectName, date, dispName);
					
					//populate table
					populateSubjectsAssignedTable(staffNo, assignedSubjectsDataTable, assSubjCodeCol, assSubjNameCol);
					
				}
				catch(Exception e2) {
					Alert alert = new Alert(Alert.AlertType.ERROR);
					alert.setContentText("Error: create database table or populate table error. "+ e2.getMessage());
					Optional<ButtonType> result = alert.showAndWait();
					if(result.get() == ButtonType.OK) {
						alert.close();
					}
					else {
						alert.close();
					}
				}
			}
			else {
				throw new Exception("Please ensure you have entered the right value for staff Id "
						+ "and that the subject has been selected.");
			}
		}
		catch(Exception e) {
			Alert alert = new Alert(Alert.AlertType.ERROR);
			alert.setContentText("Error: Invalid values. "+ e.getMessage());
			Optional<ButtonType> result = alert.showAndWait();
			if(result.get() == ButtonType.OK) {
				alert.close();
			}
			else {
				alert.close();
			}
		}
		
	}
	
	//fecth subjects
	@FXML public void fetchSubjectsButton(ActionEvent event) {
		try {
			String staffNo = staffEmpNo.getText().toUpperCase();
			
			if(staffNo.trim().length() != 0) {
					
					//populate table
					populateSubjectsAssignedTable(staffNo, assignedSubjectsDataTable, assSubjCodeCol, assSubjNameCol);

			}
			else {
				throw new Exception("Please ensure you have entered the right value for staff Id "
						+ "and that the subject has been selected.");
			}
		}
		catch(Exception e) {
			Alert alert = new Alert(Alert.AlertType.ERROR);
			alert.setContentText("Error: Invalid values. "+ e.getMessage());
			Optional<ButtonType> result = alert.showAndWait();
			if(result.get() == ButtonType.OK) {
				alert.close();
			}
			else {
				alert.close();
			}
		}
	}
	
	//remove subject from list
	@FXML public void removeSubjectFromStaffButton(ActionEvent event) {
		LocalDate date = LocalDate.now();
		
		try {
			String staffNo = staffEmpNo.getText().toUpperCase();
			String subjectName = teacherSubjectsCombo.getValue();
			
			if(staffNo.trim().length() != 0 && subjectName.trim().length() != 0) {
				
				String subjectCodeStr = "";
				Vector<SubjectNames> userData3 = new Vector<>();
				
				EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
				EntityManager entitymanager = emfactory.createEntityManager();
				entitymanager.getTransaction().begin();
				
				Query query2 =
						entitymanager.createQuery("select e from SubjectNames e ");
				userData3 = (Vector<SubjectNames>) query2.getResultList();
				
				entitymanager.getTransaction().commit();
				entitymanager.close();
				emfactory.close();
				
				if(!(teacherSubjectsCombo.getValue().isEmpty())) {
					String name = teacherSubjectsCombo.getValue();
					for(SubjectNames std : userData3) {
						if((std.getSubjectName().equals(name))) {
							subjectCodeStr = String.valueOf(std.getSubjectCode());
						}
					}
				}
				
				try {
					CreateAssignedSubject subj = new CreateAssignedSubject();
					subj.removeAssignedSubject(staffNo, subjectCodeStr, subjectName, date, dispName);
					
					//populate table
					populateSubjectsAssignedTable(staffNo, assignedSubjectsDataTable, assSubjCodeCol, assSubjNameCol);
					
				}
				catch(Exception e2) {
					Alert alert = new Alert(Alert.AlertType.ERROR);
					alert.setContentText("Error: deleting database table or populating table error. "+ e2.getMessage());
					Optional<ButtonType> result = alert.showAndWait();
					if(result.get() == ButtonType.OK) {
						alert.close();
					}
					else {
						alert.close();
					}
				}
			}
			else {
				throw new Exception("Please ensure you have entered the right value for staff Id "
						+ "and that the subject has been selected.");
			}
		}
		catch(Exception e) {
			Alert alert = new Alert(Alert.AlertType.ERROR);
			alert.setContentText("Error: Invalid values. "+ e.getMessage());
			Optional<ButtonType> result = alert.showAndWait();
			if(result.get() == ButtonType.OK) {
				alert.close();
			}
			else {
				alert.close();
			}
		}
		
	}
	
	//populate assigned subject list table
	public void populateSubjectsAssignedTable(String staffId, //String subjectCode, String subjectName,
		TableView<AssignedSubjectsDataTable> assignedSubjectsDataTable,
		TableColumn<AssignedSubjectsDataTable,String> assSubjCodeCol, 
		TableColumn<AssignedSubjectsDataTable,String> assSubjNameCol){
		
		LinkedHashSet<String> subjectList = new LinkedHashSet<>();
		LinkedHashSet<String> subjectCodeList = new LinkedHashSet<>();
		ObservableList<AssignedSubjectsDataTable> data = FXCollections.observableArrayList();
	
		try {
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			AssignedSubjects subj = entitymanager.find(AssignedSubjects.class, staffId);
			
			subjectCodeList = subj.getSubjectCodeList();			
			subjectList = subj.getSubjectList();
			
			entitymanager.getTransaction().commit();
			entitymanager.close();
			emfactory.close();
			
			String subjectCode = "", subjectName = "";

			if(subjectCodeList.size() > 0) {
				for(String code: subjectCodeList) {
					
					EntityManagerFactory emfactoryx = Persistence.createEntityManagerFactory("SchoolMgtSystem");
					EntityManager entitymanagerx = emfactoryx.createEntityManager();
					entitymanagerx.getTransaction().begin();
					
					SubjectNames subj2 = entitymanagerx.find(SubjectNames.class, Integer.parseInt(code));
					
					subjectCode = code;
					subjectName = subj2.getSubjectName();
					
					entitymanagerx.getTransaction().commit();
					entitymanagerx.close();
					emfactoryx.close();
					
					data.add(new AssignedSubjectsDataTable(subjectCode, subjectName));
				}
			}
			else {
				assignedSubjectsDataTable.setItems(null);
			}
			
					
			assSubjCodeCol.setCellValueFactory(new PropertyValueFactory("subjectCode_Data"));
			assSubjNameCol.setCellValueFactory(new PropertyValueFactory("subjectName_Data"));
					
			assignedSubjectsDataTable.setItems(data);
					
			}
		catch(Exception ex3) {
			ex3.printStackTrace();
			assignedSubjectsDataTable.setItems(null);
		}
	}
	
	@FXML public void findStaff(ActionEvent event) {
		String empNo = staffEmpNo.getText().toUpperCase();
		try {
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			Staff staff = entitymanager.find(Staff.class, empNo);
			
			surNameStaff.setText(staff.getSurName());
			otherNamesStaff.setText(staff.getOtherNames());
			placeOfBirthStaff.setText(staff.getPlaceOfBirth());
			nationalityStaff.setValue(staff.getNationality());
			emailStaff.setText(staff.getEmail()); 
			nextOfKinStaff.setText(staff.getNextOfKin());
			stateStaff.setValue(staff.getState());
			lgaStaff.setValue(staff.getLga());
			villageStaff.setText(staff.getVillage());
			phone1Staff.setText(staff.getPhone1());
			phone2Staff.setText(staff.getPhone2());
			staffSpecialization.setText(staff.getSpecialization());
			staffQualification.setText(staff.getQualification());
			addressStaff.setText(staff.getAddress()); 
			ifDisabledStaff.setText(staff.getIfDisabled());
			staffSex.setValue(staff.getSex()); 
			disabilityStaff.setValue(staff.getDisabled());
			maritalStatusStaff.setValue(staff.getMaritalStatus());
//			StringBuilder sb = new StringBuilder(staff.getFormMaster());
//			String val1 = sb.deleteCharAt(staff.getFormMaster().length()-1).toString();
//			char val2 = staff.getFormMaster().charAt(staff.getFormMaster().length()-1);
			formMasterOf1.setValue(staff.getFormMaster());
			designationStaff.setValue(staff.getDesignation());
			
			LocalDate dob2 = staff.getDob();
			LocalDate dor2 = staff.getDor();
			LocalDate doq2 = staff.getDateOfQualification();
			staffDOB.setValue(dob2);
			staffDOR.setValue(dor2);
			staffDOQ.setValue(doq2);
			
			entitymanager.getTransaction().commit();
			entitymanager.close();
			emfactory.close();
		}
		catch(Exception e) {
			staffEmpNo.setText("Staff Search Error: "+ e.getMessage());
			addressStaff.clear();
			ifDisabledStaff.clear();
			surNameStaff.clear();
			otherNamesStaff.clear(); 
			placeOfBirthStaff.clear(); 
			nationalityStaff.setValue("NGN");
			emailStaff.clear(); 
			nextOfKinStaff.clear(); 
			stateStaff.setValue(""); 
			lgaStaff.setValue(""); 
			villageStaff.clear(); 
			phone1Staff.clear();
			phone2Staff.clear();
			staffSpecialization.clear();
			staffQualification.clear();
			staffSex.setValue("select option");
			disabilityStaff.setValue("select option");
			maritalStatusStaff.setValue("select option");
			designationStaff.setValue("select option");
			formMasterOf1.setValue("select option");
			staffDOB.setValue(LocalDate.now());
			staffDOR.setValue(LocalDate.now());
			staffDOQ.setValue(LocalDate.now());
		}
	}
	
	@FXML public void updateStaffButton(ActionEvent event) {
		String empNo = staffEmpNo.getText().toUpperCase();
		String surName = surNameStaff.getText();
		String otherNames = otherNamesStaff.getText();
		String placeOfBirth = placeOfBirthStaff.getText();
		String nationality = nationalityStaff.getValue();
		String email = emailStaff.getText();
		String nextOfKin = nextOfKinStaff.getText();
		String state = stateStaff.getValue();
		String lga = lgaStaff.getValue();
		String village = villageStaff.getText();
		String phone1 = phone1Staff.getText();
		String phone2 = phone2Staff.getText();
		String formMaster = formMasterOf1.getValue();
		String specialization = staffSpecialization.getText();
		String qualification = staffQualification.getText();
		String sex = staffSex.getValue();
		String disability = disabilityStaff.getValue();
		String maritalStatus = maritalStatusStaff.getValue();
		String designation = designationStaff.getValue();
		String address = addressStaff.getText();
		String ifDisabled = ifDisabledStaff.getText();
		try {
			UpdateStaff staff = new UpdateStaff();
			staff.updateStaff(empNo, surName, otherNames, staffDOB.getValue(), sex, formMaster, placeOfBirth, 
					nationality, maritalStatus, designation, address, state, lga, village, email, phone1, phone2, 
					disability, ifDisabled, nextOfKin, staffDOR.getValue(), specialization, qualification, 
					staffDOQ.getValue(), dispName);
			
		}
		catch(Exception e) {
			staffEmpNo.setText("UpdateStaff Error: "+e.getMessage());
		}
		finally {
			addressStaff.clear();
			ifDisabledStaff.clear();
			surNameStaff.clear();
			otherNamesStaff.clear(); 
			placeOfBirthStaff.clear(); 
			nationalityStaff.setValue("NGN");;
			emailStaff.clear(); 
			nextOfKinStaff.clear(); 
			stateStaff.setValue("");; 
			lgaStaff.setValue("");
			villageStaff.clear(); 
			phone1Staff.clear();
			phone2Staff.clear();
			staffSpecialization.clear();
			staffQualification.clear();
			staffSex.setValue("select option");
			disabilityStaff.setValue("select option");
			maritalStatusStaff.setValue("select option");
			designationStaff.setValue("select option");
			formMasterOf1.setValue("select option");
			staffDOB.setValue(LocalDate.now());
			staffDOR.setValue(LocalDate.now());
			staffDOQ.setValue(LocalDate.now());
		}
	}
	
	@FXML public void saveStaffButton(ActionEvent event) {
		
		LocalDate date = LocalDate.now();
		
		try {
			
			String empNo = staffEmpNo.getText().toUpperCase();
			String surName = surNameStaff.getText();
			String otherNames = otherNamesStaff.getText();
			String placeOfBirth = placeOfBirthStaff.getText();
			String nationality = nationalityStaff.getValue();
			String email = emailStaff.getText();
			String nextOfKin = nextOfKinStaff.getText();
			String state = stateStaff.getValue();
			String lga = lgaStaff.getValue();
			String village = villageStaff.getText();
			String phone1 = phone1Staff.getText();
			String phone2 = phone2Staff.getText();
			String formMaster = formMasterOf1.getValue();
			String specialization = staffSpecialization.getText();
			String qualification = staffQualification.getText();
			String sex = staffSex.getValue();
			String disability = disabilityStaff.getValue();
			String maritalStatus = maritalStatusStaff.getValue();
			String designation = designationStaff.getValue();
			String address = addressStaff.getText();
			String ifDisabled = ifDisabledStaff.getText();
			
			if(empNo.trim().length() != 0 && !empNo.contains("null") && 
					surName.trim().length() != 0 &&
					otherNames.trim().length() != 0 && 
					staffDOB.getValue().toString().trim().length() != 0 && 
					staffDOR.getValue().toString().trim().length() != 0 && 
					staffDOQ.getValue().toString().trim().length() != 0) {
				try {
					CreateStaff staff = new CreateStaff();
					staff.createStaff(empNo, surName, otherNames, staffDOB.getValue(), sex, formMaster, placeOfBirth, 
							nationality, maritalStatus, designation, address, state, lga, village, email, phone1, phone2, 
							disability, ifDisabled, nextOfKin, staffDOR.getValue(), specialization, qualification, 
							staffDOQ.getValue(), dispName);
					
					CreateAssignedSubject assign = new CreateAssignedSubject();
					assign.createAssignedSubject(empNo, surName, otherNames, date, dispName);
					
				}
				catch(Exception e) {
					staffEmpNo.setText("CreateStaff Error: "+e.getMessage());
				}
				finally {
					addressStaff.clear();
					ifDisabledStaff.clear();
					surNameStaff.clear();
					otherNamesStaff.clear(); 
					placeOfBirthStaff.clear(); 
					nationalityStaff.setValue("NGN");
					emailStaff.clear(); 
					nextOfKinStaff.clear(); 
					stateStaff.setValue("");
					lgaStaff.setValue("");
					villageStaff.clear(); 
					phone1Staff.clear();
					phone2Staff.clear();
					staffSpecialization.clear();
					staffQualification.clear();
					staffSex.setValue("select option");
					disabilityStaff.setValue("select option");
					maritalStatusStaff.setValue("select option");
					designationStaff.setValue("select option");
					formMasterOf1.setValue("select option");
					staffDOB.setValue(LocalDate.now());
					staffDOR.setValue(LocalDate.now());
					staffDOQ.setValue(LocalDate.now());
				}
			}
			else {
				throw new Exception("Invalid Staff Parameters Entries...");
			}
			
		}
		catch(Exception newE) {
			Alert alert = new Alert(Alert.AlertType.ERROR);
			alert.setContentText(newE.getMessage() + ": Invalid staff parameters selected...");
			alert.setHeaderText("INVALID ENTRIES");
			Optional<ButtonType> result = alert.showAndWait();
			if(result.get() == ButtonType.OK) {
				alert.close();
			}
			else {
				alert.close();
			}
		}
	}
	
	//Delete Staff
	@SuppressWarnings("unchecked")
	@FXML public void deleteStaff(ActionEvent event) {
		
		String empNo = staffEmpNo.getText().toUpperCase();
		
		if(empNo.equals(staffEmpNo.getText().toUpperCase())) {
			Alert alert = new Alert(Alert.AlertType.CONFIRMATION);
			alert.setContentText("You are about to delete this user... "
					+ "Note that this action will delete the respective staff's "
					+ "user login profile and this process is irreversible!");
			Optional<ButtonType> result = alert.showAndWait();
			if(result.get() == ButtonType.OK) {
				Vector<Users> UserAcct = new Vector<>();
				try{
					EntityManagerFactory emfactory = Persistence.createEntityManagerFactory
							("SchoolMgtSystem");
					EntityManager entitymanager = emfactory.createEntityManager();
					entitymanager.getTransaction().begin();
					
					Query query =
							entitymanager.createQuery("select e from Users e");
					UserAcct = (Vector<Users>) query.getResultList();
					
					entitymanager.close();
					emfactory.close();
					
					for (Users str : UserAcct) {
						if(str.getUserStaffID().equals(empNo)) {
							String userName = str.getUserName();
							DeleteUser user = new DeleteUser();
							user.deleteUser(userName);
						}
					}
				}
				catch(Exception ex) {
					staffEmpNo.setText("Delete User Error: "+ ex.getLocalizedMessage());
				}
				
				try {
					DeleteStaff staff = new DeleteStaff();
					staff.deleteStaff(empNo);
					
				}
				catch(Exception e) {
					staffEmpNo.setText("DeleteStaff Error: "+e.getMessage());
				}
				finally {
					addressStaff.clear();
					ifDisabledStaff.clear();
					surNameStaff.clear();
					otherNamesStaff.clear(); 
					placeOfBirthStaff.clear(); 
					nationalityStaff.setValue("NGN");
					emailStaff.clear(); 
					nextOfKinStaff.clear(); 
					stateStaff.setValue(""); 
					lgaStaff.setValue("");
					villageStaff.clear(); 
					phone1Staff.clear();
					phone2Staff.clear();
					staffSpecialization.clear();
					staffQualification.clear();
					staffSex.setValue("select option");
					disabilityStaff.setValue("select option");
					maritalStatusStaff.setValue("select option");
					designationStaff.setValue("select option");
					formMasterOf1.setValue("select option");
					staffDOB.setValue(LocalDate.now());
					staffDOR.setValue(LocalDate.now());
					staffDOQ.setValue(LocalDate.now());
				}
			}
			else {
				alert.close();
			}
		}
	}
	
	//Class Terminal Result Controller
	@FXML private Button generateReportsButton, returnGenerateReportsButton, termClassSpoolBtn, 
		returnGenReportHome, termClass_PrintResultBtn, terminalClassResultBtn, genExcelBtn;
	@FXML private ComboBox<String> termClass_Combo, termClassLetter_Combo, termYear_Combo, termTerm_Combo;
	@FXML private Label termClass_LBL, termSession_LBL, termTerm_LBL, termNoInClass_LBL, termClassTotal_LBL;
	@FXML TableView<TerminalClassDataTable> terminalClassDataTable;
	@FXML TableColumn<TerminalClassDataTable,String> termSNoCol, termStdIdCol, termNameCol, termClassAvgCol,
		termClassHighestCol, termClassLowestCol, termTotalCol, termPositionCol;
	@FXML TextField termError_TF;
	
	@FXML public void terminal_initialize(MouseEvent event) {
		termClass_Combo.setItems(stdClassN);
		termClassLetter_Combo.setItems(classL);
		//termYear_Combo.setItems(years);
		populateYear(termYear_Combo);
		termTerm_Combo.setItems(termN);
		termError_TF.setVisible(false);
	}
	
	@SuppressWarnings({ "unchecked", "rawtypes" })
	@FXML public void termClassSpoolButton(ActionEvent event) {
		termError_TF.setVisible(false);
		String year = termYear_Combo.getValue();
		String term = termTerm_Combo.getValue();
		String stdClass = termClass_Combo.getValue()+termClassLetter_Combo.getValue();
		DecimalFormat fm = new DecimalFormat("#000.00");
		
		ObservableList<TerminalClassDataTable> data = FXCollections.observableArrayList();
		LinkedList<String> DataPosition = new LinkedList<>();
		
		String stdClassId = stdClass+year+term;
//		String stdClass2 = getPrimeClassOnly(stdClassId, year, term, stdClass);
		String stdClass2 = getPrimeClass(stdClass);
		
		try{
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory
					("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			Vector<ScoreSheetsSummary> TerminalData = new Vector<>();
//			Query query =
//					entitymanager.createQuery("select e from ScoreSheetsSummary e "
//							+ "order by e.totalScores DESC");
//			TerminalData = (Vector<ScoreSheetsSummary>) query.getResultList();
			
			TerminalData = getScoreSheetSummaryYearTermClass(entitymanager, year, term, stdClass2);
			
			LinkedList<Double> tempList = new LinkedList<>();
			LinkedList<Double> tempList2 = new LinkedList<>();
			
			for (ScoreSheetsSummary scores : TerminalData) {
				if(scores.getAcademicYear().equals(year) && 
						scores.getStudentTerm().equals(term) && 
						scores.getStudentClass().equals(stdClass2)) {
					termClass_LBL.setText(stdClass);
					termSession_LBL.setText(year);
					termTerm_LBL.setText(term);
					
					tempList.add(scores.getTotalScores());
					tempList2.add(scores.getTotalScores());
				}
			}
			
			double totalTerm = 0;
			termNoInClass_LBL.setText(String.valueOf(tempList.size()));
			for(double doub : tempList) {
				totalTerm = totalTerm + doub;
			}
			termClassTotal_LBL.setText(String.valueOf(totalTerm));
			
			tempList.sort(null);
			String classLowest = fm.format(tempList.getFirst());
			String classHighest = fm.format(tempList.getLast());
			String classAvg = fm.format(totalTerm/tempList.size());
			
			final String JDBC_Driver = "com.mysql.jdbc.Driver";
			final String DB_URL = dbURL;
			final String DB_User = dbUSR;
			final String DB_PWD = dbPWD;
			
			
			Connection conn = null;
			PreparedStatement stmt = null;
			
			try {
				Class.forName(JDBC_Driver);
				conn = DriverManager.getConnection(DB_URL, DB_User, DB_PWD);
				
				String sql;
				sql = "SELECT *, 1+(SELECT count(*) from scoresheetssummary a "
						+ "WHERE a.STUDENTCLASS = ? and "
						+ "a.ACADEMICYEAR = ? and "
						+ "a.STUDENTTERM = ? and "
						+ "a.TOTALSCORES > b.totalscores) as POSITION, TOTALSCORES "
						+ "FROM scoresheetssummary b "
						+ "where b.STUDENTCLASS = ? and "
						+ "b.ACADEMICYEAR = ? and "
						+ "b.STUDENTTERM = ? "
						+ "order by TOTALSCORES desc;";
				
				stmt = conn.prepareStatement(sql);
				
				stmt = conn.prepareStatement(sql);
				
				int yearX = Integer.parseInt(year);
				int termX = Integer.parseInt(term);
				
				stmt.setString(1, stdClass2);
				stmt.setString(2, year);
				stmt.setString(3, term);
				stmt.setString(4, stdClass2);
				stmt.setString(5, year);
				stmt.setString(6, term);
				
				ResultSet rs = stmt.executeQuery();
				
				while(rs.next()) {
					DataPosition.add(rs.getString("POSITION"));
				}
				rs.close();
				stmt.close();
				conn.close();
			}
			catch(SQLException es) {
				termError_TF.setVisible(true);
				termError_TF.setText("Error JDBC: "+ es.getSQLState());
			}
			catch(Exception es2) {
				termError_TF.setVisible(true);
				termError_TF.setText("Error JDBC: "+ es2.getMessage());
			}
			finally {
				try {
					if(stmt != null ) {
						stmt.close();
					}
				}
				catch(SQLException ces) {
					termError_TF.setVisible(true);
					termError_TF.setText("Error JDBC: "+ ces.getSQLState());
				}
				try {
					if(conn != null ) {
						conn.close();
					}
				}
				catch(Exception ces2) {
					termError_TF.setVisible(true);
					termError_TF.setText("JDBC: "+ces2.getMessage());
				}
			}
			
			int count = 0;
			int position = 0;
			for(ScoreSheetsSummary scores : TerminalData) {
				for(ScoreSheetsSummary score : TerminalData) {
					if(scores.getStudentClass().equals(stdClass2) && 
							scores.getStudentClass().equals(score.getStudentClass()) && 
							scores.getAcademicYear().equals(year) && 
							scores.getAcademicYear().equals(score.getAcademicYear()) && 
							scores.getStudentTerm().equals(term) && 
							scores.getStudentTerm().equals(score.getStudentTerm())) {
						if(scores.getStudentId().equals(score.getStudentId())) {
							count = count + 1;
							String positionX = DataPosition.get(position);
							if(positionX.charAt(positionX.length()-1) == '1') {
								positionX = positionX + "st";
							}
							else if(positionX.charAt(positionX.length()-1) == '2') {
								positionX = positionX + "nd";
							}
							else if(positionX.charAt(positionX.length()-1) == '3') {
								positionX = positionX + "rd";
							}
							else {
								positionX = positionX + "th";
							}
							String countX = String.valueOf(count);
							String studentIDX = String.valueOf(scores.getStudentId());
							String totalScoreX = fm.format(scores.getTotalScores());
									
							data.add(new TerminalClassDataTable(
								countX,
								studentIDX,
								scores.getStudentName(),
								classAvg,
								classHighest,
								classLowest,
								totalScoreX,
								positionX		
								));
							position++;
						}
						else {
							//
						}
					}
				}
				
			}
			
			termSNoCol.setCellValueFactory(new PropertyValueFactory("sNo_Data"));
			termStdIdCol.setCellValueFactory(new PropertyValueFactory("studentID_Data"));
			termNameCol.setCellValueFactory(new PropertyValueFactory("name_Data"));
			termClassAvgCol.setCellValueFactory(new PropertyValueFactory("classAvg_Data"));
			termClassHighestCol.setCellValueFactory(new PropertyValueFactory("classHighest_Data"));
			termClassLowestCol.setCellValueFactory(new PropertyValueFactory("classLowest_Data"));
			termTotalCol.setCellValueFactory(new PropertyValueFactory("totalScores_Data"));
			termPositionCol.setCellValueFactory(new PropertyValueFactory("position_Data"));
			
			terminalClassDataTable.setItems(data);
			
			entitymanager.getTransaction().commit();
			entitymanager.clear();
			emfactory.close();	
		}
		catch(Exception e) {
			termError_TF.setVisible(true);
			termError_TF.setText("Error: "+ e.getMessage());
			termClass_LBL.setText(null);
			termSession_LBL.setText(null);
			termTerm_LBL.setText(null);
			termNoInClass_LBL.setText(null);
			termClassTotal_LBL.setText(null);
			terminalClassDataTable.setItems(null);
		}
	}
	
	@FXML SplitPane printPaneTerminalClass;
	@FXML public void termClass_PrintResultButton(ActionEvent event) {
		termError_TF.setVisible(false);
		termYear_Combo.setVisible(false);
		termTerm_Combo.setVisible(false);
		termClass_Combo.setVisible(false);
		termClassLetter_Combo.setVisible(false);
		termClassSpoolBtn.setVisible(false);
		returnGenReportHome.setVisible(false);
		genExcelBtn.setVisible(false);
		termClass_PrintResultBtn.setVisible(false);
		
		try {
			printNode(printPaneTerminalClass);
		}
		catch(Exception exception) {
			termError_TF.setVisible(true);
			termError_TF.setText("Print Error: "+ exception.getLocalizedMessage());
		}
		finally {
			termError_TF.setVisible(false);
			termYear_Combo.setVisible(true);
			termTerm_Combo.setVisible(true);
			termClass_Combo.setVisible(true);
			termClassLetter_Combo.setVisible(true);
			termClassSpoolBtn.setVisible(true);
			returnGenReportHome.setVisible(true);
			genExcelBtn.setVisible(true);
			termClass_PrintResultBtn.setVisible(true);
		}
	}
	
	@FXML public void genExcelButton(ActionEvent event) {
		
		Workbook workbook = new HSSFWorkbook();
		Sheet spreadSheet = workbook.createSheet("sample");
		Row row = spreadSheet.createRow(0);
		
		for(int j = 0; j < terminalClassDataTable.getColumns().size(); j++) {
			row.createCell(j).setCellValue(terminalClassDataTable.getColumns().get(j).getText());
		}
		
		for(int i = 0; i < terminalClassDataTable.getItems().size(); i++) {
			row = spreadSheet.createRow(i + 1);
			for(int j = 0; j < terminalClassDataTable.getColumns().size(); j++) {
				if(terminalClassDataTable.getColumns().get(j).getCellData(i) != null) {
					row.createCell(j).setCellValue(terminalClassDataTable.getColumns().get(j).getCellData(i).toString());
				}
				else {
					row.createCell(j).setCellValue("");
				}
			}
		}
		
		String txt = termClass_LBL.getText()+termSession_LBL.getText()+termTerm_LBL.getText()+".xls";
		String filePath = "C:\\workbook\\"+txt;
		
		try {
			FileOutputStream fileOut = new FileOutputStream(filePath);
			try {
				workbook.write(fileOut);
				fileOut.close();
				termError_TF.setVisible(true);
				termError_TF.setText(filePath);
			} catch (IOException e2) {
				termError_TF.setVisible(true);
				termError_TF.setText("Write Error: "+ e2.getMessage());
			}
		} catch (FileNotFoundException e) {
			termError_TF.setVisible(true);
			termError_TF.setText("File Error: "+ e.getMessage());
		}
	}
	
	// Annual Class Results Controller
	@FXML private Button genAnnualClassSummary, annualClassSpoolBtn, returnAnnualGenRptHome, genExcelBtnAnnual,
		annualClass_PrintResultBtn;
	@FXML private ComboBox<String> annualClass_Combo, annualClassLetter_Combo, annualYear_Combo;
	@FXML private Label annualClass_LBL, annualSession_LBL, annualTerm_LBL, annualNoInClass_LBL, annualClassTotal_LBL;
	@FXML TableView<AnnualClassDataTable> annualClassDataTable;
	@FXML TableColumn<AnnualClassDataTable,String> annuallySNoCol, annuallyStdIdCol, annuallyNameCol, annuallyFirstCol,
	annuallySecondCol, annuallyThirdCol, annuallyTotalCol, annuallyAvgCol, annuallyPercentCol, annuallyPositionCol;
	@FXML TextField annualError_TF;
	
	@FXML public void annually_initialize(MouseEvent event) {
		annualClass_Combo.setItems(stdClassN);
		annualClassLetter_Combo.setItems(classL);
		//annualYear_Combo.setItems(years);
		populateYear(annualYear_Combo);
		annualError_TF.setVisible(false);
	}
	
	@SuppressWarnings({ "rawtypes", "unchecked" })
	@FXML public void annualClassSpoolButton(ActionEvent event) {
		annualError_TF.setVisible(false);
		String year = annualYear_Combo.getValue();
		String stdClassZ = annualClass_Combo.getValue()+annualClassLetter_Combo.getValue();
		String stdClass = getPrimeClass(stdClassZ);
		DecimalFormat fm = new DecimalFormat("#000.00");
		
		ObservableList<AnnualClassDataTable> data = FXCollections.observableArrayList();
		LinkedList<String> DataPosition = new LinkedList<>();
		
		try{
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory
					("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			Vector<AnnualScoresTotal> AnnualData = new Vector<>();
			Vector<ScoreSheetsSummary> TerminalData = new Vector<>();
			
			Query query2 =
					entitymanager.createQuery("select e from AnnualScoresTotal e "
							+ "order by e.totalScores DESC");
			AnnualData = (Vector<AnnualScoresTotal>) query2.getResultList();
			
			Query query =
					entitymanager.createQuery("select e from ScoreSheetsSummary e");
			TerminalData = (Vector<ScoreSheetsSummary>) query.getResultList();
			
			LinkedList<Double> tempList2 = new LinkedList<>();
			
			for (AnnualScoresTotal scores : AnnualData) {
				if(scores.getAcademicYear().equals(year) && 
						scores.getStudentClass().equals(stdClass)) {
					annualClass_LBL.setText(stdClassZ);
					annualSession_LBL.setText(year);
					
					tempList2.add(scores.getTotalScores());
				}				
			}
			
			double totalTerm = 0;
			annualNoInClass_LBL.setText(String.valueOf(tempList2.size()));
			for(double doub : tempList2) {
				totalTerm = totalTerm + doub;
			}
			annualClassTotal_LBL.setText(String.valueOf(totalTerm));
			
			final String JDBC_Driver = "com.mysql.jdbc.Driver";
			final String DB_URL = dbURL;
			final String DB_User = dbUSR;
			final String DB_PWD = dbPWD;
			
			
			Connection conn = null;
			PreparedStatement stmt = null;
			
			try {
				Class.forName(JDBC_Driver);
				conn = DriverManager.getConnection(DB_URL, DB_User, DB_PWD);
				
				String sql;
				sql = "SELECT *, 1+(SELECT count(*) from annualscorestotal a "
						+ "WHERE "
						+ "a.studentclass = ? and "
						+ "a.academicyear = ? and "
						+ "a.TOTALSCORES > b.TOTALSCORES) as POSITION, TOTALSCORES "
						+ "FROM annualScoresTotal b "
						+ "where "
						+ "b.studentclass = ? and "
						+ "b.academicyear = ? "
						+ "order by TOTALSCORES desc;";
				
				stmt = conn.prepareStatement(sql);
				
				stmt = conn.prepareStatement(sql);
				
				//int yearX = Integer.parseInt(year);
				
				stmt.setString(1, stdClass);
				stmt.setString(2, year);
				stmt.setString(3, stdClass);
				stmt.setString(4, year);
				
				ResultSet rs = stmt.executeQuery();
				
				while(rs.next()) {
					DataPosition.add(rs.getString("POSITION"));
				}
				rs.close();
				stmt.close();
				conn.close();
			}
			catch(SQLException es) {
				annualError_TF.setVisible(true);
				annualError_TF.setText("Error JDBC: "+ es.getSQLState());
			}
			catch(Exception es2) {
				annualError_TF.setVisible(true);
				annualError_TF.setText("Error JDBC: "+ es2.getMessage());
			}
			finally {
				try {
					if(stmt != null ) {
						stmt.close();
					}
				}
				catch(SQLException ces) {
					annualError_TF.setVisible(true);
					annualError_TF.setText("Error JDBC: "+ ces.getSQLState());
				}
				try {
					if(conn != null ) {
						conn.close();
					}
				}
				catch(Exception ces2) {
					annualError_TF.setVisible(true);
					annualError_TF.setText("JDBC: "+ces2.getMessage());
				}
			}
			
			int count = 0;
			int position = 0;
			for(AnnualScoresTotal scores : AnnualData) {
				LinkedList<Double> tempList = new LinkedList<>();
				double firstScore = 0, secondScore = 0, thirdScore = 0;
				for(ScoreSheetsSummary score : TerminalData) {
					if(scores.getStudentClass().equals(stdClass) && 
							scores.getStudentClass().equals(score.getStudentClass()) && 
							scores.getAcademicYear().equals(year) && 
							scores.getAcademicYear().equals(score.getAcademicYear()) && 
							scores.getStudentId().equals(score.getStudentId())) {
						//tempList.add(score.getTotalScores());
						if(score.getStudentTerm().equals("1")) {
							firstScore = firstScore + score.getTotalScores();
							tempList.add(score.getTotalScores());
						}
						else if(score.getStudentTerm().equals("2")) {
							secondScore = secondScore + score.getTotalScores();
							tempList.add(score.getTotalScores());
						}
						else {
							thirdScore = thirdScore + score.getTotalScores();
							tempList.add(score.getTotalScores());
						}
					}
				}
				
				for(AnnualScoresTotal total : AnnualData) {
					if(scores.getStudentClass().equals(stdClass) && 
							scores.getStudentClass().equals(total.getStudentClass()) && 
							scores.getAcademicYear().equals(year) && 
							scores.getAcademicYear().equals(total.getAcademicYear())) {
						if(scores.getStudentId().equals( total.getStudentId())) {
							count = count + 1;
							String positionX = DataPosition.get(position);
							if(positionX.charAt(positionX.length()-1) == '1') {
								positionX = positionX + "st";
							}
							else if(positionX.charAt(positionX.length()-1) == '2') {
								positionX = positionX + "nd";
							}
							else if(positionX.charAt(positionX.length()-1) == '3') {
								positionX = positionX + "rd";
							}
							else {
								positionX = positionX + "th";
							}
							String countX = String.valueOf(count);
							String studentIDX = String.valueOf(scores.getStudentId());
							String totalScoreX = fm.format(scores.getTotalScores());
							String firstScoreX = fm.format(firstScore);
							String secondScoreX = fm.format(secondScore);
							String thirdScoreX = fm.format(thirdScore);
							String avgX = fm.format(scores.getTotalScores()/3);
							String percentageX;
							
							if(stdClass.contains("JSS1")) {
								annuallyPercentCol.setText("5%");
								percentageX = fm.format(((0.05)*(Double.parseDouble(avgX))));
							}
							else if(stdClass.contains("JSS2")) {
								annuallyPercentCol.setText("12.5%");
								percentageX = fm.format(((0.125)*(Double.parseDouble(avgX))));
							}
							else if(stdClass.contains("SSS")) {
								annuallyPercentCol.setText("15%");
								percentageX = fm.format(((0.15)*(Double.parseDouble(avgX))));
							}
							else {
								annuallyPercentCol.setText("100%");
								percentageX = avgX;
							}
									
							data.add(new AnnualClassDataTable(
								countX,
								studentIDX,
								scores.getStudentName(),
								firstScoreX,
								secondScoreX,
								thirdScoreX,
								totalScoreX,
								avgX,
								percentageX,
								positionX		
								));
							position++;
						}
						else {
							//
						}
					}
				}
				
			}
			
			annuallySNoCol.setCellValueFactory(new PropertyValueFactory("sNo_Data"));
			annuallyStdIdCol.setCellValueFactory(new PropertyValueFactory("studentID_Data"));
			annuallyNameCol.setCellValueFactory(new PropertyValueFactory("name_Data"));
			annuallyFirstCol.setCellValueFactory(new PropertyValueFactory("first_Data"));
			annuallySecondCol.setCellValueFactory(new PropertyValueFactory("second_Data"));
			annuallyThirdCol.setCellValueFactory(new PropertyValueFactory("third_Data"));
			annuallyTotalCol.setCellValueFactory(new PropertyValueFactory("totalScores_Data"));
			annuallyAvgCol.setCellValueFactory(new PropertyValueFactory("avg_Data"));
			annuallyPercentCol.setCellValueFactory(new PropertyValueFactory("percentage_Data"));
			annuallyPositionCol.setCellValueFactory(new PropertyValueFactory("position_Data"));
			
			annualClassDataTable.setItems(data);
			
			entitymanager.getTransaction().commit();
			entitymanager.clear();
			emfactory.close();	
		}
		catch(Exception e) {
			annualError_TF.setVisible(true);
			annualError_TF.setText("Error: "+ e.getMessage());
			annualClass_LBL.setText(null);
			annualSession_LBL.setText(null);
			annualNoInClass_LBL.setText(null);
			annualClassTotal_LBL.setText(null);
			annualClassDataTable.setItems(null);
		}
	}
	
	@FXML SplitPane printPaneAnnualClass;
	@FXML public void annualClass_PrintResultButton(ActionEvent event) {
		annualError_TF.setVisible(false);
		annualYear_Combo.setVisible(false);
		annualClass_Combo.setVisible(false);
		annualClassLetter_Combo.setVisible(false);
		annualClassSpoolBtn.setVisible(false);
		returnAnnualGenRptHome.setVisible(false);
		genExcelBtnAnnual.setVisible(false);
		annualClass_PrintResultBtn.setVisible(false);
		
		try {
			printNode(printPaneAnnualClass);
		}
		catch(Exception exception) {
			annualError_TF.setVisible(true);
			annualError_TF.setText("Print Error: "+ exception.getLocalizedMessage());
		}
		finally {
			annualError_TF.setVisible(false);
			annualYear_Combo.setVisible(true);
			annualClass_Combo.setVisible(true);
			annualClassLetter_Combo.setVisible(true);
			annualClassSpoolBtn.setVisible(true);
			returnAnnualGenRptHome.setVisible(true);
			genExcelBtnAnnual.setVisible(true);
			annualClass_PrintResultBtn.setVisible(true);
		}
	}
	
	@FXML public void genExcelButtonAnnual(ActionEvent event) {
		
		Workbook workbook = new HSSFWorkbook();
		Sheet spreadSheet = workbook.createSheet("sample");
		Row row = spreadSheet.createRow(0);
		
		for(int j = 0; j < annualClassDataTable.getColumns().size(); j++) {
			row.createCell(j).setCellValue(annualClassDataTable.getColumns().get(j).getText());
		}
		
		for(int i = 0; i < annualClassDataTable.getItems().size(); i++) {
			row = spreadSheet.createRow(i + 1);
			for(int j = 0; j < annualClassDataTable.getColumns().size(); j++) {
				if(annualClassDataTable.getColumns().get(j).getCellData(i) != null) {
					row.createCell(j).setCellValue(annualClassDataTable.getColumns().get(j).getCellData(i).toString());
				}
				else {
					row.createCell(j).setCellValue("");
				}
			}
		}
		
		String txt = annualClass_LBL.getText()+annualSession_LBL.getText()+".xls";
		String filePath = "C:\\workbook\\"+txt;
		
		try {
			FileOutputStream fileOut = new FileOutputStream(filePath);
			try {
				workbook.write(fileOut);
				fileOut.close();
				annualError_TF.setVisible(true);
				annualError_TF.setText(filePath);
			} catch (IOException e2) {
				annualError_TF.setVisible(true);
				annualError_TF.setText("Write Error: "+ e2.getMessage());
			}
		} catch (FileNotFoundException e) {
			annualError_TF.setVisible(true);
			annualError_TF.setText("File Error: "+ e.getMessage());
		}
	}
	
	//Terminal Class Result by Subject Controller
	@FXML private Button termSubjectClassSpoolBtn, returnSubjectGenReportHome, termSubjectClass_PrintResultBtn, 
		terminalSubjectClassResultBtn, genSubjectExcelBtn;
	@FXML private ComboBox<String> termSubjectClass_Combo, termSubjectClassLetter_Combo, termSubjectYear_Combo, 
		termSubjectTerm_Combo;
	@FXML private Label termSubjectClass_LBL, termSubjectSession_LBL, termSubjectTerm_LBL, termSubjectNoInClass_LBL, 
		termSubjectClassTotal_LBL;
	@FXML TableView<TerminalSubjectClassDataTable> terminalSubjectClassDataTable;
	@FXML TableColumn<TerminalSubjectClassDataTable,String> termSubjectSNoCol, termSubjectStdIdCol, 
		termSubjectNameCol,termSubjectSubjectsCol, termSubjectGradeCol, termSubjectRemarkCol,
		termSubjectTotalCol, termSubjectPositionCol;
	@FXML TextField termSubjectError_TF;
	
	@FXML public void terminalSubject_initialize(MouseEvent event) {
		termSubjectError_TF.setText(String.valueOf(0));
		termSubjectClass_Combo.setItems(stdClassN);
		termSubjectClassLetter_Combo.setItems(classL);
		//termSubjectYear_Combo.setItems(years);
		populateYear(termSubjectYear_Combo);
		termSubjectTerm_Combo.setItems(termN);
		termSubjectError_TF.setVisible(false);
	}
	

	@SuppressWarnings({ "unchecked", "rawtypes" })
	@FXML public void termSubjectClassSpoolButton(ActionEvent event) {
		termSubjectError_TF.setVisible(false);
		String year = termSubjectYear_Combo.getValue();
		String term = termSubjectTerm_Combo.getValue();
		String classLetter = termSubjectClassLetter_Combo.getValue();
		String stdClass2 = termSubjectClass_Combo.getValue()+classLetter;
		DecimalFormat fm = new DecimalFormat("#.00");
		
		String stdClassId = stdClass2+year+term;
//		String stdClass = getPrimeClassOnly(stdClassId, year, term, stdClass2);
		String stdClass = getPrimeClass(stdClass2);
		
//		LinkedHashSet<String> stdList = new LinkedHashSet<>();
//		EntityManagerFactory emfactoryzz = Persistence.createEntityManagerFactory
//		("SchoolMgtSystem");
//		EntityManager entitymanagerzz = emfactoryzz.createEntityManager();
//		entitymanagerzz.getTransaction().begin();
//
//		StudentClasses stdCX = entitymanagerzz.find(StudentClasses.class, stdClassId);
//		stdList = stdCX.getStdList();
//
//		entitymanagerzz.getTransaction().commit();
//		entitymanagerzz.close();
//		emfactoryzz.close();
		
		ObservableList<TerminalSubjectClassDataTable> data = FXCollections.observableArrayList();
		
		LinkedList<String> DataPosition = new LinkedList<>();
		LinkedList<String> DataStudentId = new LinkedList<>();
		LinkedList<String> DataName = new LinkedList<>();
		LinkedList<String> DataSubject = new LinkedList<>();
		LinkedList<String> DataTotalScores = new LinkedList<>();
		LinkedList<String> DataCount = new LinkedList<>();
		Vector<SubjectNames> subjectData = new Vector<>();
		//Vector<ScoreSheetsSummary> TermData = new Vector<>();
		
		try {
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory
			("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
	
			Query query =
			entitymanager.createQuery("select e from SubjectNames e ");
			subjectData = (Vector<SubjectNames>) query.getResultList();
			
//			Query query2 =
//			entitymanager.createQuery("select e from ScoreSheetsSummary e");
//			TermData = (Vector<ScoreSheetsSummary>) query2.getResultList();
	
			entitymanager.getTransaction().commit();
			entitymanager.close();
			emfactory.close();
			
			for(SubjectNames subject : subjectData) {
				int subjCode = subject.getSubjectCode();
				
//				for(String stde : stdList) {
//					
//				}
				
				final String JDBC_Driver = "com.mysql.jdbc.Driver";
				final String DB_URL = dbURL;
				final String DB_User = dbUSR;
				final String DB_PWD = dbPWD;
				
				
				Connection conn = null;
				PreparedStatement stmt = null;
				
				try {
					Class.forName(JDBC_Driver);
					conn = DriverManager.getConnection(DB_URL, DB_User, DB_PWD);
					
					String sql;
					if(term.equals("1")) {
						sql = "SELECT *, 1+(SELECT count(*) from annualscoresheetssummary a "
								+ "WHERE a.STUDENTCLASS = ? and "
								+ "a.ACADEMICYEAR = ? and "
								+ "a.SUBJECTCODE = ? and "
								+ "a.firstTermTotal > b.firstTermTotal) as POSITION, firstTermTotal "
								+ "FROM annualscoresheetssummary b "
								+ "where b.STUDENTCLASS = ? and "
								+ "b.ACADEMICYEAR = ? and "
								+ "b.SUBJECTCODE = ? "
								+ "order by firstTermTotal desc;";
					}
					else if(term.equals("2")) {
						sql = "SELECT *, 1+(SELECT count(*) from annualscoresheetssummary a "
								+ "WHERE a.STUDENTCLASS = ? and "
								+ "a.ACADEMICYEAR = ? and "
								+ "a.SUBJECTCODE = ? and "
								+ "a.secondTermTotal > b.secondTermTotal) as POSITION, secondTermTotal "
								+ "FROM annualscoresheetssummary b "
								+ "where b.STUDENTCLASS = ? and "
								+ "b.ACADEMICYEAR = ? and "
								+ "b.SUBJECTCODE = ? "
								+ "order by secondTermTotal desc;";
					}
					else {
						sql = "SELECT *, 1+(SELECT count(*) from annualscoresheetssummary a "
								+ "WHERE a.STUDENTCLASS = ? and "
								+ "a.ACADEMICYEAR = ? and "
								+ "a.SUBJECTCODE = ? and "
								+ "a.thirdTermTotal > b.thirdTermTotal) as POSITION, thirdTermTotal "
								+ "FROM annualscoresheetssummary b "
								+ "where b.STUDENTCLASS = ? and "
								+ "b.ACADEMICYEAR = ? and "
								+ "b.SUBJECTCODE = ? "
								+ "order by thirdTermTotal desc;";
					}
					
					stmt = conn.prepareStatement(sql);
					
					String yearX = year;
					
					stmt.setString(1, stdClass);
					stmt.setString(2, yearX);
					stmt.setInt(3, subjCode);
					stmt.setString(4, stdClass);
					stmt.setString(5, yearX);
					stmt.setInt(6, subjCode);
					
					ResultSet rs = stmt.executeQuery();
					
					while(rs.next()) {
						DataPosition.add(rs.getString("POSITION"));
						DataStudentId.add(rs.getString("STUDENTID"));
						DataName.add(rs.getString("STUDENTNAME"));
						DataSubject.add(rs.getString("SUBJECTNAME"));
						if(term.equals("1")) {
							DataTotalScores.add(rs.getString("FIRSTTERMTOTAL"));
						}
						else if(term.equals("2")) {
							DataTotalScores.add(rs.getString("SECONDTERMTOTAL"));
						}
						else {
							DataTotalScores.add(rs.getString("THIRDTERMTOTAL"));
						}
					}
					rs.close();
					stmt.close();
					conn.close();
				}
				catch(SQLException es) {
					termSubjectError_TF.setVisible(true);
					termSubjectError_TF.setText("Error JDBC: "+ es.getSQLState());
				}
				catch(Exception es2) {
					termSubjectError_TF.setVisible(true);
					termSubjectError_TF.setText("Error JDBC: "+ es2.getMessage());
				}
				finally {
					try {
						if(stmt != null ) {
							stmt.close();
						}
					}
					catch(SQLException ces) {
						termSubjectError_TF.setVisible(true);
						termSubjectError_TF.setText("Error JDBC: "+ ces.getSQLState());
					}
					try {
						if(conn != null ) {
							conn.close();
						}
					}
					catch(Exception ces2) {
						termSubjectError_TF.setVisible(true);
						termSubjectError_TF.setText("JDBC: "+ces2.getMessage());
					}
				}
			}
			
			for(int i = 1; i <= DataPosition.size(); i++) {
				String remark;
				int sNo = i;
				String countX = String.valueOf(sNo);
				String stdIdX = DataStudentId.get(i-1);
				String nameX = DataName.get(i-1);
				String subjectX = DataSubject.get(i-1);
				String totalX = DataTotalScores.get(i-1);
				double total = Double.parseDouble(totalX);
				String gradeStr = gradeSum(total);
				
				System.out.println("GRADE_: "+gradeStr);
				
				if(total >= 70) {
					//grade = "A";
					remark = "Excellent";
				}
				else if(total >= 60 && total < 70) {
					//grade = "B";
					remark = "Very Good";
				}
				else if(total >= 50 && total < 60) {
					//grade = "C";
					remark = "Good";
				}
				else if(total >= 40 && total < 50) {
					//grade = "D";
					remark = "Fair";
				}
				else {
					//grade = "E";
					remark = "Fail";
				}
				
				String positionX = DataPosition.get(i-1);
				
				if(positionX.charAt(positionX.length()-1) == '1' && Integer.parseInt(positionX) != 11) {
				positionX = positionX + "st";
				}
				else if(positionX.charAt(positionX.length()-1) == '2' && Integer.parseInt(positionX) != 12) {
					positionX = positionX + "nd";
				}
				else if(positionX.charAt(positionX.length()-1) == '3' && Integer.parseInt(positionX) != 13) {
					positionX = positionX + "rd";
				}
				else {
					positionX = positionX + "th";
				}	
				
				data.add(new TerminalSubjectClassDataTable(
					countX,
					stdIdX,
					nameX,
					subjectX,
					totalX,
					gradeStr,
					positionX,
					remark
					));
			}
			
			termSubjectSNoCol.setCellValueFactory(new PropertyValueFactory("sNo_Data"));
			termSubjectStdIdCol.setCellValueFactory(new PropertyValueFactory("studentID_Data"));
			termSubjectNameCol.setCellValueFactory(new PropertyValueFactory("name_Data"));
			termSubjectSubjectsCol.setCellValueFactory(new PropertyValueFactory("subject_Data"));
			termSubjectTotalCol.setCellValueFactory(new PropertyValueFactory("totalScores_Data"));
			termSubjectGradeCol.setCellFactory(new PropertyValueFactory("grade_Data"));
			termSubjectPositionCol.setCellValueFactory(new PropertyValueFactory("position_Data"));
			termSubjectRemarkCol.setCellValueFactory(new PropertyValueFactory("remark_Data"));
				
			terminalSubjectClassDataTable.setItems(data);
			
			double classTot = 0;
			for(TerminalSubjectClassDataTable datum : data) {
				classTot = classTot + Double.parseDouble(datum.getTotalScores_Data());
			}
			
			termSubjectClassTotal_LBL.setText(fm.format(classTot));
			
			termSubjectClass_LBL.setText(stdClass);
			termSubjectSession_LBL.setText(year);
			termSubjectTerm_LBL.setText(term);
			
			final String JDBC_Driver2 = "com.mysql.jdbc.Driver";
			final String DB_URL2 = dbURL;
			final String DB_User2 = dbUSR;
			final String DB_PWD2 = dbPWD;
			
			
			Connection conn2 = null;
			PreparedStatement stmt2 = null;
			
			try {
				Class.forName(JDBC_Driver2);
				conn2 = DriverManager.getConnection(DB_URL2, DB_User2, DB_PWD2);
				
				String sql;
				if(term.equals("1")) {
					sql = "SELECT * from scoresheetssummary a "
							+ "WHERE a.STUDENTCLASS = ? and "
							+ "a.ACADEMICYEAR = ? and "
							+ "a.STUDENTTERM = 1;";
				}
				else if(term.equals("2")) {
					sql = "SELECT * from scoresheetssummary a "
							+ "WHERE a.STUDENTCLASS = ? and "
							+ "a.ACADEMICYEAR = ? and "
							+ "a.STUDENTTERM = 2;";
				}
				else {
					sql = "SELECT * from scoresheetssummary a "
							+ "WHERE a.STUDENTCLASS = ? and "
							+ "a.ACADEMICYEAR = ? and "
							+ "a.STUDENTTERM = 3;";
				}
				
				stmt2 = conn2.prepareStatement(sql);
				
				int yearX = Integer.parseInt(year);
				
				stmt2.setString(1, stdClass);
				stmt2.setInt(2, yearX);
				
				ResultSet rs = stmt2.executeQuery();
				
				while(rs.next()) {
					DataCount.add(rs.getString("STUDENTNAME"));
				}
				rs.close();
				stmt2.close();
				conn2.close();
			}
			catch(SQLException es) {
				termSubjectError_TF.setVisible(true);
				termSubjectError_TF.setText("Error JDBC: "+ es.getSQLState());
			}
			catch(Exception es2) {
				termSubjectError_TF.setVisible(true);
				termSubjectError_TF.setText("Error JDBC: "+ es2.getMessage());
			}
			finally {
				try {
					if(stmt2 != null ) {
						stmt2.close();
					}
				}
				catch(SQLException ces) {
					termSubjectError_TF.setVisible(true);
					termSubjectError_TF.setText("Error JDBC: "+ ces.getSQLState());
				}
				try {
					if(conn2 != null ) {
						conn2.close();
					}
				}
				catch(Exception ces2) {
					termSubjectError_TF.setVisible(true);
					termSubjectError_TF.setText("JDBC: "+ces2.getMessage());
				}
			}
			
			termSubjectNoInClass_LBL.setText(String.valueOf(DataCount.size()));

		}
		catch(Exception e) {
			termSubjectError_TF.setVisible(true);
			termSubjectError_TF.setText("Error: " + e.getLocalizedMessage());
			termSubjectClass_LBL.setText(null);
			termSubjectSession_LBL.setText(null);
			termSubjectTerm_LBL.setText(null);
			termSubjectNoInClass_LBL.setText(null);
			termSubjectClassTotal_LBL.setText(null);
			terminalSubjectClassDataTable.setItems(null);
		}
	}
	
	@FXML SplitPane printPaneTerminalSubjectClass;
	@FXML public void termSubjectClass_PrintResultButton(ActionEvent event) {
		termSubjectError_TF.setVisible(false);
		termSubjectYear_Combo.setVisible(false);
		termSubjectTerm_Combo.setVisible(false);
		termSubjectClass_Combo.setVisible(false);
		termSubjectClassLetter_Combo.setVisible(false);
		termSubjectClassSpoolBtn.setVisible(false);
		returnSubjectGenReportHome.setVisible(false);
		genSubjectExcelBtn.setVisible(false);
		termSubjectClass_PrintResultBtn.setVisible(false);
		
		try {
			printNode(printPaneTerminalSubjectClass);
		}
		catch(Exception exception) {
			termSubjectError_TF.setVisible(true);
			termSubjectError_TF.setText("Print Error: "+ exception.getLocalizedMessage());
		}
		finally {
			termSubjectError_TF.setVisible(false);
			termSubjectYear_Combo.setVisible(true);
			termSubjectTerm_Combo.setVisible(true);
			termSubjectClass_Combo.setVisible(true);
			termSubjectClassLetter_Combo.setVisible(true);
			termSubjectClassSpoolBtn.setVisible(true);
			returnSubjectGenReportHome.setVisible(true);
			genSubjectExcelBtn.setVisible(true);
			termSubjectClass_PrintResultBtn.setVisible(true);
		}
	}
	
	@FXML public void genSubjectExcelButton(ActionEvent event) {
		
		Workbook workbook = new HSSFWorkbook();
		Sheet spreadSheet = workbook.createSheet("worksheet");
		Row row = spreadSheet.createRow(0);
		
		for(int j = 0; j < terminalSubjectClassDataTable.getColumns().size(); j++) {
			row.createCell(j).setCellValue(terminalSubjectClassDataTable.getColumns().get(j).getText());
		}
		
		for(int i = 0; i < terminalSubjectClassDataTable.getItems().size(); i++) {
			row = spreadSheet.createRow(i + 1);
			for(int j = 0; j < terminalSubjectClassDataTable.getColumns().size(); j++) {
				if(terminalSubjectClassDataTable.getColumns().get(j).getCellData(i) != null) {
					row.createCell(j).setCellValue(terminalSubjectClassDataTable.getColumns().get(j).getCellData(i).toString());
				}
				else {
					row.createCell(j).setCellValue("");
				}
			}
		}
		
		String txt = termSubjectClass_LBL.getText()+termSubjectSession_LBL.getText()+termSubjectTerm_LBL.getText()+"BySubject"+".xls";
		String filePath = "C:\\workbook\\"+txt;
		
		try {
			FileOutputStream fileOut = new FileOutputStream(filePath);
			try {
				workbook.write(fileOut);
				fileOut.close();
				termSubjectError_TF.setVisible(true);
				termSubjectError_TF.setText(filePath);
			} catch (IOException e2) {
				termSubjectError_TF.setVisible(true);
				termSubjectError_TF.setText("Write Error: "+ e2.getMessage());
			}
		} catch (FileNotFoundException e) {
			termSubjectError_TF.setVisible(true);
			termSubjectError_TF.setText("File Error: "+ e.getMessage());
		}
	}
	
	//Annual Class Result by Subject Controller
	@FXML private Button annualClassSummBySubjBtn, returnAnnualSubjectGenReportHome, annualSubjectClassSpoolBtn,
		genAnnualSubjectExcelBtn, annualSubjectClass_PrintResultBtn;
	@FXML private ComboBox<String> annualSubjectClass_Combo, annualSubjectClassLetter_Combo, annualSubjectYear_Combo;
	@FXML private Label annualSubjectClass_LBL, annualSubjectSession_LBL, annualSubjectTerm_LBL, annualSubjectNoInClass_LBL, 
		annualSubjectClassTotal_LBL;
	@FXML TableView<AnnualSubjectClassDataTable> annualSubjectClassDataTable;
	@FXML TableColumn<AnnualSubjectClassDataTable,String> annualSubjectSNoCol, annualSubjectStdIdCol, 
		annualSubjectNameCol, annualSubjectSubjectsCol, annualPercentageSubjCol, annualSubjectRemarkCol,
		annualTotalSubCol, annualPositionSubjCol, annualFirstSubjCol, annualSecondSubCol,
		annualThirdSubCol, annualAverageSubjCol;
	@FXML TextField annualSubjectError_TF;
	
	@FXML public void annualSubject_initialize(MouseEvent event) {
		annualSubjectClass_Combo.setItems(stdClassN);
		annualSubjectClassLetter_Combo.setItems(classL);
		//annualSubjectYear_Combo.setItems(years);
		populateYear(annualSubjectYear_Combo);
		annualSubjectError_TF.setVisible(false);
	}
	
	@SuppressWarnings({ "unchecked", "rawtypes" })
	@FXML public void annualSubjectClassSpoolButton(ActionEvent event) {
	
		String year = annualSubjectYear_Combo.getValue();
		String classLetter = annualSubjectClassLetter_Combo.getValue();
		String stdClassZ = annualSubjectClass_Combo.getValue()+classLetter;
		String stdClass = getPrimeClass(stdClassZ);
		DecimalFormat fm = new DecimalFormat("#.00");
		
		ObservableList<AnnualSubjectClassDataTable> data = FXCollections.observableArrayList();
		
		LinkedList<String> DataPosition = new LinkedList<>();
		LinkedList<String> DataStudentId = new LinkedList<>();
		LinkedList<String> DataName = new LinkedList<>();
		LinkedList<String> DataSubject = new LinkedList<>();
		LinkedList<String> DataTotalScores = new LinkedList<>();
		LinkedList<String> DataCount = new LinkedList<>();
		LinkedList<String> FirstTermScore = new LinkedList<>();
		LinkedList<String> SecondTermScore = new LinkedList<>();
		LinkedList<String> ThirdTermScore = new LinkedList<>();
		Vector<SubjectNames> subjectData = new Vector<>();
//		Vector<ScoreSheetsSummary> TermData = new Vector<>();
		
		try {
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory
			("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
	
			Query query =
			entitymanager.createQuery("select e from SubjectNames e ");
			subjectData = (Vector<SubjectNames>) query.getResultList();
			
//			Query query2 =
//			entitymanager.createQuery("select e from ScoreSheetsSummary e");
//			TermData = (Vector<ScoreSheetsSummary>) query2.getResultList();
	
			entitymanager.getTransaction().commit();
			entitymanager.close();
			emfactory.close();
			
			for(SubjectNames subject : subjectData) {
				int subjCode = subject.getSubjectCode();
				
				final String JDBC_Driver = "com.mysql.jdbc.Driver";
				final String DB_URL = dbURL;
				final String DB_User = dbUSR;
				final String DB_PWD = dbPWD;
				
				
				Connection conn = null;
				PreparedStatement stmt = null;
				
				try {
					Class.forName(JDBC_Driver);
					conn = DriverManager.getConnection(DB_URL, DB_User, DB_PWD);
					
					String sql;
					sql = "SELECT *, 1+(SELECT count(*) from annualscoresheetssummary a "
							+ "WHERE a.STUDENTCLASS = ? and "
							+ "a.ACADEMICYEAR = ? and "
							+ "a.SUBJECTCODE = ? and "
							+ "a.TOTALSCORES > b.TOTALSCORES) as POSITION, TOTALSCORES "
							+ "FROM annualscoresheetssummary b "
							+ "where b.STUDENTCLASS = ? and "
							+ "b.ACADEMICYEAR = ? and "
							+ "b.SUBJECTCODE = ? "
							+ "order by TOTALSCORES desc;";
					
					stmt = conn.prepareStatement(sql);
					
					int yearX = Integer.parseInt(year);
					
					stmt.setString(1, stdClass);
					stmt.setInt(2, yearX);
					stmt.setInt(3, subjCode);
					stmt.setString(4, stdClass);
					stmt.setInt(5, yearX);
					stmt.setInt(6, subjCode);
					
					ResultSet rs = stmt.executeQuery();
					
					while(rs.next()) {
						DataPosition.add(rs.getString("POSITION"));
						DataStudentId.add(rs.getString("STUDENTID"));
						DataName.add(rs.getString("STUDENTNAME"));
						DataSubject.add(rs.getString("SUBJECTNAME"));
						FirstTermScore.add(rs.getString("FIRSTTERMTOTAL"));
						SecondTermScore.add(rs.getString("SECONDTERMTOTAL"));
						ThirdTermScore.add(rs.getString("THIRDTERMTOTAL"));
						DataTotalScores.add(rs.getString("TOTALSCORES"));
					}
					rs.close();
					stmt.close();
					conn.close();
				}
				catch(SQLException es) {
					annualSubjectError_TF.setVisible(true);
					annualSubjectError_TF.setText("Error JDBC: "+ es.getSQLState());
				}
				catch(Exception es2) {
					annualSubjectError_TF.setVisible(true);
					annualSubjectError_TF.setText("Error JDBC: "+ es2.getMessage());
				}
				finally {
					try {
						if(stmt != null ) {
							stmt.close();
						}
					}
					catch(SQLException ces) {
						annualSubjectError_TF.setVisible(true);
						annualSubjectError_TF.setText("Error JDBC: "+ ces.getSQLState());
					}
					try {
						if(conn != null ) {
							conn.close();
						}
					}
					catch(Exception ces2) {
						annualSubjectError_TF.setVisible(true);
						annualSubjectError_TF.setText("JDBC: "+ces2.getMessage());
					}
				}
			}
			
			try {
				for(int i = 1; i <= DataPosition.size(); i++) {
					
					int sNo = i;
					String countX = String.valueOf(sNo);
					String stdIdX = DataStudentId.get(i-1);
					String nameX = DataName.get(i-1);
					String subjectX = DataSubject.get(i-1);
					String firstTermScore = FirstTermScore.get(i-1);
					String secondTermScore = SecondTermScore.get(i-1);
					String thirdTermScore = ThirdTermScore.get(i-1);
					String totalX = DataTotalScores.get(i-1);
					double total = Double.parseDouble(totalX);
					String AvgX = fm.format(total/3.0);
					double avg = Double.parseDouble(AvgX);
					String percentage = "";
					
					//grade = gradeSum(avg);
					
					
					if(stdClass.contains("JSS1")) {
						annualPositionSubjCol.setText("5%");
						percentage = fm.format(((0.05)*(Double.parseDouble(AvgX))));
					}
					else if(stdClass.contains("JSS2")) {
						annualPositionSubjCol.setText("12.5%");
						percentage = fm.format(((0.125)*(Double.parseDouble(AvgX))));
					}
					else if(stdClass.contains("SSS")) {
						annualPositionSubjCol.setText("15%");
						//double percent = ((0.15)*(Double.parseDouble(AvgX)));
						percentage = fm.format(((0.15)*(Double.parseDouble(AvgX))));
					}
					else {
						annualPercentageSubjCol.setText("100%");
						percentage = AvgX;
					}
					
					String positionX = DataPosition.get(i-1);
					
					if(positionX.charAt(positionX.length()-1) == '1') {
					positionX = positionX + "st";
					}
					else if(positionX.charAt(positionX.length()-1) == '2') {
						positionX = positionX + "nd";
					}
					else if(positionX.charAt(positionX.length()-1) == '3') {
						positionX = positionX + "rd";
					}
					else {
						positionX = positionX + "th";
					}	
					
					data.add(new AnnualSubjectClassDataTable(
						countX,
						stdIdX,
						nameX,
						subjectX,
						firstTermScore,
						secondTermScore,
						thirdTermScore,
						totalX,
						AvgX,
						//percentage,
						positionX,
						percentage
						));
				}
				
				annualSubjectSNoCol.setCellValueFactory(new PropertyValueFactory("sNo_Data"));
				annualSubjectStdIdCol.setCellValueFactory(new PropertyValueFactory("studentID_Data"));
				annualSubjectNameCol.setCellValueFactory(new PropertyValueFactory("name_Data"));
				annualSubjectSubjectsCol.setCellValueFactory(new PropertyValueFactory("subject_Data"));
				annualFirstSubjCol.setCellValueFactory(new PropertyValueFactory("first_Data"));
				annualSecondSubCol.setCellValueFactory(new PropertyValueFactory("second_Data"));
				annualThirdSubCol.setCellValueFactory(new PropertyValueFactory("third_Data"));
				annualTotalSubCol.setCellValueFactory(new PropertyValueFactory("totalScores_Data"));
				annualAverageSubjCol.setCellValueFactory(new PropertyValueFactory("avg_Data"));
				annualPercentageSubjCol.setCellFactory(new PropertyValueFactory("percentage_Data"));
				annualPositionSubjCol.setCellValueFactory(new PropertyValueFactory("position_Data"));
				
				annualSubjectClassDataTable.setItems(data);
				
			}
			catch(Exception exec) {
				exec.printStackTrace();
				annualSubjectError_TF.setVisible(true);
				annualSubjectError_TF.setText("data.add Error: " + exec.getLocalizedMessage());
			}
			
//			try {
//				annualSubjectSNoCol.setCellValueFactory(new PropertyValueFactory("sNo_Data"));
//				annualSubjectStdIdCol.setCellValueFactory(new PropertyValueFactory("studentID_Data"));
//				annualSubjectNameCol.setCellValueFactory(new PropertyValueFactory("name_Data"));
//				annualSubjectSubjectsCol.setCellValueFactory(new PropertyValueFactory("subject_Data"));
//				annualFirstSubjCol.setCellValueFactory(new PropertyValueFactory("first_Data"));
//				annualSecondSubCol.setCellValueFactory(new PropertyValueFactory("second_Data"));
//				annualThirdSubCol.setCellValueFactory(new PropertyValueFactory("third_Data"));
//				annualTotalSubCol.setCellValueFactory(new PropertyValueFactory("totalScores_Data"));
//				annualAverageSubjCol.setCellValueFactory(new PropertyValueFactory("avg_Data"));
//				annualGradeSubjCol.setCellFactory(new PropertyValueFactory("grade_Data"));
//				annualPositionSubjCol.setCellValueFactory(new PropertyValueFactory("position_Data"));
//				
//				annualSubjectClassDataTable.setItems(data);
//			}
//			catch(Exception exe) {
//				annualSubjectError_TF.setVisible(true);
//				annualSubjectError_TF.setText("Set Cell Factory Error: " + exe.getLocalizedMessage());
//			}
			
//			try {	
//				annualSubjectClassDataTable.setItems(data);
//			}
//			catch(Exception e) {
//				annualSubjectError_TF.setVisible(true);
//				annualSubjectError_TF.setText("Set Data Error: " + e.getLocalizedMessage());
//			}
				
			double classTot = 0;
			for(AnnualSubjectClassDataTable datum : data) {
				classTot = classTot + Double.parseDouble(datum.getTotalScores_Data());
			}
			
			annualSubjectClassTotal_LBL.setText(fm.format(classTot));
			
			annualSubjectClass_LBL.setText(stdClassZ);
			annualSubjectSession_LBL.setText(year);
			
			final String JDBC_Driver2 = "com.mysql.jdbc.Driver";
			final String DB_URL2 = dbURL;
			final String DB_User2 = dbUSR;
			final String DB_PWD2 = dbPWD;
			
			
			Connection conn2 = null;
			PreparedStatement stmt2 = null;
			
			try {
				Class.forName(JDBC_Driver2);
				conn2 = DriverManager.getConnection(DB_URL2, DB_User2, DB_PWD2);
				
				String sql;
				sql = "SELECT * from annualscorestotal a "
						+ "WHERE a.STUDENTCLASS = ? and "
						+ "a.ACADEMICYEAR = ? ;";
				
				stmt2 = conn2.prepareStatement(sql);
				
				int yearX = Integer.parseInt(year);
				
				stmt2.setString(1, stdClass);
				stmt2.setInt(2, yearX);
				
				ResultSet rs = stmt2.executeQuery();
				
				while(rs.next()) {
					DataCount.add(rs.getString("STUDENTNAME"));
				}
				rs.close();
				stmt2.close();
				conn2.close();
			}
			catch(SQLException es) {
				es.printStackTrace();
				annualSubjectError_TF.setVisible(true);
				annualSubjectError_TF.setText("Error JDBC: "+ es.getSQLState());
			}
			catch(Exception es2) {
				es2.printStackTrace();
				annualSubjectError_TF.setVisible(true);
				annualSubjectError_TF.setText("Error JDBC: "+ es2.getMessage());
			}
			finally {
				try {
					if(stmt2 != null ) {
						stmt2.close();
					}
				}
				catch(SQLException ces) {
					annualSubjectError_TF.setVisible(true);
					annualSubjectError_TF.setText("Error JDBC: "+ ces.getSQLState());
				}
				try {
					if(conn2 != null ) {
						conn2.close();
					}
				}
				catch(Exception ces2) {
					annualSubjectError_TF.setVisible(true);
					annualSubjectError_TF.setText("JDBC: "+ces2.getMessage());
				}
			}
			
			annualSubjectNoInClass_LBL.setText(String.valueOf(DataCount.size()));
	
		}
		catch(Exception e) {
			e.printStackTrace();
			annualSubjectError_TF.setVisible(true);
			annualSubjectError_TF.setText("Error: " + e.getLocalizedMessage());
			annualSubjectClass_LBL.setText(null);
			annualSubjectSession_LBL.setText(null);
			annualSubjectTerm_LBL.setText(null);
			annualSubjectNoInClass_LBL.setText(null);
			annualSubjectClassTotal_LBL.setText(null);
			annualSubjectClassDataTable.setItems(null);
		}
	}
	
	@FXML SplitPane printPaneAnnualSubjectClass;
	@FXML public void annualSubjectClass_PrintResultButton(ActionEvent event) {
		annualSubjectError_TF.setVisible(false);
		annualSubjectYear_Combo.setVisible(false);
		annualSubjectClass_Combo.setVisible(false);
		annualSubjectClassLetter_Combo.setVisible(false);
		annualSubjectClassSpoolBtn.setVisible(false);
		returnAnnualSubjectGenReportHome.setVisible(false);
		genAnnualSubjectExcelBtn.setVisible(false);
		annualSubjectClass_PrintResultBtn.setVisible(false);
		
		try {
			printNode(printPaneAnnualSubjectClass);
		}
		catch(Exception exception) {
			annualSubjectError_TF.setVisible(true);
			annualSubjectError_TF.setText("Print Error: "+ exception.getLocalizedMessage());
		}
		finally {
			annualSubjectError_TF.setVisible(false);
			annualSubjectYear_Combo.setVisible(true);
			annualSubjectClass_Combo.setVisible(true);
			annualSubjectClassLetter_Combo.setVisible(true);
			annualSubjectClassSpoolBtn.setVisible(true);
			returnAnnualSubjectGenReportHome.setVisible(true);
			genAnnualSubjectExcelBtn.setVisible(true);
			annualSubjectClass_PrintResultBtn.setVisible(true);
		}
	}

	@FXML public void genAnnualSubjectExcelButton(ActionEvent event) {
		
		Workbook workbook = new HSSFWorkbook();
		Sheet spreadSheet = workbook.createSheet("worksheet");
		Row row = spreadSheet.createRow(0);
		
		for(int j = 0; j < annualSubjectClassDataTable.getColumns().size(); j++) {
			row.createCell(j).setCellValue(annualSubjectClassDataTable.getColumns().get(j).getText());
		}
		
		for(int i = 0; i < annualSubjectClassDataTable.getItems().size(); i++) {
			row = spreadSheet.createRow(i + 1);
			for(int j = 0; j < annualSubjectClassDataTable.getColumns().size(); j++) {
				if(annualSubjectClassDataTable.getColumns().get(j).getCellData(i) != null) {
					row.createCell(j).setCellValue(annualSubjectClassDataTable.getColumns().get(j).getCellData(i).toString());
				}
				else {
					row.createCell(j).setCellValue("");
				}
			}
		}
		
		String txt = annualSubjectClass_LBL.getText()+annualSubjectSession_LBL.getText()+"BySubject"+".xls";
		String filePath = "C:\\workbook\\"+txt;
		
		try {
			FileOutputStream fileOut = new FileOutputStream(filePath);
			try {
				workbook.write(fileOut);
				fileOut.close();
				annualSubjectError_TF.setVisible(true);
				annualSubjectError_TF.setText(filePath);
			} catch (IOException e2) {
				annualSubjectError_TF.setVisible(true);
				annualSubjectError_TF.setText("Write Error: "+ e2.getMessage());
			}
		} catch (FileNotFoundException e) {
			annualSubjectError_TF.setVisible(true);
			annualSubjectError_TF.setText("File Error: "+ e.getMessage());
		}
	}
	
	//Payment History Report Controller
	@FXML private Button paymentHistRptBtn, returnPayHistReptBtn, genExcelPayHistRptBtn,
		payHistRptPrintBtn, payHistReptSpoolBtn;
	@FXML private ComboBox<String> classPayHistRpt_Combo, yearPayHistRpt_Combo,
		termPayHistRpt_Combo;
	@FXML private Label classPayHistRpt_LBL, sessionPayHistRpt_LBL, termPayHistRpt_LBL, paymentsPayHistRpt_LBL, 
		balancePayHistRpt_LBL;
	@FXML TableView<PayHistRptDataTable> payHistRptDataTable;
	@FXML TableColumn<PayHistRptDataTable,String> payHistRptSNoCol, payHistRptStdIDCol, 
		payHistRptNameCol, payHistRptDescCol, payHistRptAmountCol, payHistRptBalanceCol,
		payHistRptPIDCol, payHistRptDateCol;
	@FXML TextField errorPayHistRpt_TF;
	
	@FXML public void payHistRpt_initialize(MouseEvent event) {
		classPayHistRpt_Combo.setItems(classNo);
		//yearPayHistRpt_Combo.setItems(years);
		populateYear(yearPayHistRpt_Combo);
		termPayHistRpt_Combo.setItems(termN);
		errorPayHistRpt_TF.setVisible(false);
	}
	
	@SuppressWarnings({ "unchecked", "rawtypes" })
	@FXML public void payHistRptSpoolButton(ActionEvent event) {
	
		String year = yearPayHistRpt_Combo.getValue();
		String stdClass = classPayHistRpt_Combo.getValue();
		String term = termPayHistRpt_Combo.getValue();
		DecimalFormat fm = new DecimalFormat("#.00");
		
		ObservableList<PayHistRptDataTable> data = FXCollections.observableArrayList();
		
		LinkedList<String> Description = new LinkedList<>();
		LinkedList<String> DataStudentId = new LinkedList<>();
		LinkedList<String> DataName = new LinkedList<>();
		LinkedList<String> Amount = new LinkedList<>();
		LinkedList<String> Balance = new LinkedList<>();
		LinkedList<String> PID = new LinkedList<>();
		LinkedList<String> TxnDate = new LinkedList<>();
		
		try {
			final String JDBC_Driver = "com.mysql.jdbc.Driver";
			final String DB_URL = dbURL;
			final String DB_User = dbUSR;
			final String DB_PWD = dbPWD;
			
			
			Connection conn = null;
			PreparedStatement stmt = null;
			
			try {
				Class.forName(JDBC_Driver);
				conn = DriverManager.getConnection(DB_URL, DB_User, DB_PWD);
				
				String sql;
				sql = "select * from studentpayments a where "
						+ "a.ACADEMICYEAR_FIN = ? and "
						+ "a.STDTERM_FIN = ? and "
						+ "a.STDCLASS_FIN = ?;";
				
				stmt = conn.prepareStatement(sql);
				
				int yearX = Integer.parseInt(year);
				int termX = Integer.parseInt(term);
				int stdClassX = Integer.parseInt(stdClass);
				
				stmt.setInt(1, yearX);
				stmt.setInt(2, termX);
				stmt.setInt(3, stdClassX);
				
				ResultSet rs = stmt.executeQuery();
				
				while(rs.next()) {
					DataStudentId.add(rs.getString("STDID_FIN"));
					DataName.add(rs.getString("STDNAME_FIN"));
					Description.add(rs.getString("DESCRIPTION_FIN"));
					Amount.add(rs.getString("ACTUALPAYMENTMADE"));
					Balance.add(rs.getString("BALANCEDUE"));
					PID.add(rs.getString("PAYMENTID"));
					TxnDate.add(rs.getString("DATE_FIN"));
				}
				rs.close();
				stmt.close();
				conn.close();
			}
			catch(SQLException es) {
				errorPayHistRpt_TF.setVisible(true);
				errorPayHistRpt_TF.setText("Error JDBC: "+ es.getSQLState());
			}
			catch(Exception es2) {
				errorPayHistRpt_TF.setVisible(true);
				errorPayHistRpt_TF.setText("Error JDBC: "+ es2.getMessage());
			}
			finally {
				try {
					if(stmt != null ) {
						stmt.close();
					}
				}
				catch(SQLException ces) {
					errorPayHistRpt_TF.setVisible(true);
					errorPayHistRpt_TF.setText("Error JDBC: "+ ces.getSQLState());
				}
				try {
					if(conn != null ) {
						conn.close();
					}
				}
				catch(Exception ces2) {
					errorPayHistRpt_TF.setVisible(true);
					errorPayHistRpt_TF.setText("JDBC: "+ces2.getMessage());
				}
			}
			
			for(int i = 1; i <= DataStudentId.size(); i++) {
				int sNo = i;
				String countX = String.valueOf(sNo);
				String stdIdX = DataStudentId.get(i-1);
				String nameX = DataName.get(i-1);
				String descriptionX = Description.get(i-1);
				String amountX = Amount.get(i-1);
				String balanceX = Balance.get(i-1);
				String pidX = PID.get(i-1);
				String dateX = TxnDate.get(i-1);	
				
				data.add(new PayHistRptDataTable(
					countX,
					stdIdX,
					nameX,
					descriptionX,
					amountX,
					balanceX,
					pidX,
					dateX
					));
			}
			
			payHistRptSNoCol.setCellValueFactory(new PropertyValueFactory("sNo_Data"));
			payHistRptStdIDCol.setCellValueFactory(new PropertyValueFactory("studentID_Data"));
			payHistRptNameCol.setCellValueFactory(new PropertyValueFactory("name_Data"));
			payHistRptDescCol.setCellValueFactory(new PropertyValueFactory("description_Data"));
			payHistRptAmountCol.setCellValueFactory(new PropertyValueFactory("amount_Data"));
			payHistRptBalanceCol.setCellValueFactory(new PropertyValueFactory("balance_Data"));
			payHistRptPIDCol.setCellValueFactory(new PropertyValueFactory("pid_Data"));
			payHistRptDateCol.setCellValueFactory(new PropertyValueFactory("date_Data"));
			
			try {	
				payHistRptDataTable.setItems(data);
			}
			catch(Exception ex) {
				errorPayHistRpt_TF.setVisible(true);
				errorPayHistRpt_TF.setText("Set Data Error: " + ex.getLocalizedMessage());
			}
				
			double totalPay = 0, totalBalance = 0;
			for(PayHistRptDataTable datum : data) {
				totalPay = totalPay + Double.parseDouble(datum.getAmount_Data());
				if(datum.getDescription_Data().equals("Due Payments for the term...")) {
					totalBalance = totalBalance + Double.parseDouble(datum.getBalance_Data());
				}
			}
			
			double netBal = totalBalance - totalPay;
			paymentsPayHistRpt_LBL.setText(fm.format(totalPay));
			balancePayHistRpt_LBL.setText(fm.format(netBal));
			
			classPayHistRpt_LBL.setText(stdClass);
			sessionPayHistRpt_LBL.setText(year);
			termPayHistRpt_LBL.setText(term);
		}
		catch(Exception e) {
			errorPayHistRpt_TF.setVisible(true);
			errorPayHistRpt_TF.setText("Error: " + e.getLocalizedMessage());
		}
	}
	
	@FXML SplitPane printPanePayHistRpt;
	@FXML public void payHistRptPrintButton(ActionEvent event) {
		errorPayHistRpt_TF.setVisible(false);
		classPayHistRpt_Combo.setVisible(false);
		yearPayHistRpt_Combo.setVisible(false);
		termPayHistRpt_Combo.setVisible(false);
		payHistReptSpoolBtn.setVisible(false);
		returnPayHistReptBtn.setVisible(false);
		genExcelPayHistRptBtn.setVisible(false);
		payHistRptPrintBtn.setVisible(false);
		
		try {
			printNode(printPanePayHistRpt);
		}
		catch(Exception exception) {
			errorPayHistRpt_TF.setVisible(true);
			errorPayHistRpt_TF.setText("Print Error: "+ exception.getLocalizedMessage());
		}
		finally {
			errorPayHistRpt_TF.setVisible(false);
			classPayHistRpt_Combo.setVisible(true);
			yearPayHistRpt_Combo.setVisible(true);
			termPayHistRpt_Combo.setVisible(true);
			payHistReptSpoolBtn.setVisible(true);
			returnPayHistReptBtn.setVisible(true);
			genExcelPayHistRptBtn.setVisible(true);
			payHistRptPrintBtn.setVisible(true);
		}
	}

	@FXML public void genExcelPayHistRptButton(ActionEvent event) {
		
		Workbook workbook = new HSSFWorkbook();
		Sheet spreadSheet = workbook.createSheet("worksheet");
		Row row = spreadSheet.createRow(0);
		
		for(int j = 0; j < payHistRptDataTable.getColumns().size(); j++) {
			row.createCell(j).setCellValue(payHistRptDataTable.getColumns().get(j).getText());
		}
		
		for(int i = 0; i < payHistRptDataTable.getItems().size(); i++) {
			row = spreadSheet.createRow(i + 1);
			for(int j = 0; j < payHistRptDataTable.getColumns().size(); j++) {
				if(payHistRptDataTable.getColumns().get(j).getCellData(i) != null) {
					row.createCell(j).setCellValue(payHistRptDataTable.getColumns().get(j).getCellData(i).toString());
				}
				else {
					row.createCell(j).setCellValue("");
				}
			}
		}
		
		String txt = classPayHistRpt_LBL.getText()+sessionPayHistRpt_LBL.getText()+
				termPayHistRpt_LBL.getText()+".xls";
		String filePath = "C:\\workbook\\"+txt;
		
		try {
			FileOutputStream fileOut = new FileOutputStream(filePath);
			try {
				workbook.write(fileOut);
				fileOut.close();
				errorPayHistRpt_TF.setVisible(true);
				errorPayHistRpt_TF.setText(filePath);
			} catch (IOException e2) {
				errorPayHistRpt_TF.setVisible(true);
				errorPayHistRpt_TF.setText("Write Error: "+ e2.getMessage());
			}
		} catch (FileNotFoundException e) {
			errorPayHistRpt_TF.setVisible(true);
			errorPayHistRpt_TF.setText("File Error: "+ e.getMessage());
		}
	}
	
	//Student List Report Controller
	@FXML private Button studentListBtn, returnSpoolStdListBtn, genExcelSpoolStdListBtn, printStdListBtn, 
		spoolStudentListBtn;
	@FXML TextField errorStdList_TF;
	@FXML TableView<SpoolStdListDataTable> spoolStdListDataTable;
	@FXML TableColumn<SpoolStdListDataTable,String> stdListSNoCol, stdListStdIDCol,
		stdListNameCol, stdListSexCol, stdListAgeCol, stdListClassCol,
		stdListParentsCol, stdListPhoneCol, stdListEmailCol;
	
	@SuppressWarnings({ "unchecked", "rawtypes" })
	@FXML public void spoolStudentListButton(ActionEvent event) {
		
		errorStdList_TF.setVisible(false);
	
		ObservableList<SpoolStdListDataTable> data = FXCollections.observableArrayList();
		
		LinkedList<String> DataStudentId = new LinkedList<>();
		LinkedList<String> DataSurName = new LinkedList<>();
		LinkedList<String> DataOtherNames = new LinkedList<>();
		LinkedList<String> Sex = new LinkedList<>();
		LinkedList<LocalDate> DOB = new LinkedList<>();
		LinkedList<String> Parents = new LinkedList<>();
		LinkedList<String> Phone = new LinkedList<>();
		LinkedList<String> Email = new LinkedList<>();
		
		try {
			final String JDBC_Driver = "com.mysql.jdbc.Driver";
			final String DB_URL = dbURL;
			final String DB_User = dbUSR;
			final String DB_PWD = dbPWD;
			
			
			Connection conn = null;
			PreparedStatement stmt = null;
			
			try {
				Class.forName(JDBC_Driver);
				conn = DriverManager.getConnection(DB_URL, DB_User, DB_PWD);
				
				String sql;
				sql = "select * from Students where ENTRYCLASSASSIGNED like '%JSS%' or "
						+ "ENTRYCLASSASSIGNED like '%SSS%'";
				
				stmt = conn.prepareStatement(sql);
				
				ResultSet rs = stmt.executeQuery();
				
				while(rs.next()) {
					DataStudentId.add(rs.getString("ID"));
					DataSurName.add(rs.getString("SURNAME"));
					DataOtherNames.add(rs.getString("OTHERNAMES"));
					Sex.add(rs.getString("SEX"));
					DOB.add(rs.getDate("DATEOFBIRTH").toLocalDate());
					Parents.add(rs.getString("FATHERNAME"));
					Phone.add(rs.getString("FATHERPHONE"));
					Email.add(rs.getString("EMAIL"));
				}
				rs.close();
				stmt.close();
				conn.close();
			}
			catch(SQLException es) {
				errorStdList_TF.setVisible(true);
				errorStdList_TF.setText("Error JDBC: "+ es.getSQLState());
			}
			catch(Exception es2) {
				errorStdList_TF.setVisible(true);
				errorStdList_TF.setText("Error JDBC: "+ es2.getMessage());
			}
			finally {
				try {
					if(stmt != null ) {
						stmt.close();
					}
				}
				catch(SQLException ces) {
					errorStdList_TF.setVisible(true);
					errorStdList_TF.setText("Error JDBC: "+ ces.getSQLState());
				}
				try {
					if(conn != null ) {
						conn.close();
					}
				}
				catch(Exception ces2) {
					errorStdList_TF.setVisible(true);
					errorStdList_TF.setText("JDBC: "+ces2.getMessage());
				}
			}
			
			for(int i = 1; i <= DataStudentId.size(); i++) {
				LocalDate dob2 = (LocalDate) DOB.get(i-1);
				LocalDate dob3 = LocalDate.now();
				int dobx = dob3.getYear() - dob2.getYear();
				String stdIdy = DataStudentId.get(i-1);
				String stdClass = "";
				try {
					EntityManagerFactory emfactory = Persistence.createEntityManagerFactory
							("SchoolMgtSystem");
					EntityManager entitymanager = emfactory.createEntityManager();
					entitymanager.getTransaction().begin();
					
					Students std = entitymanager.find(Students.class, stdIdy);
					//LinkedHashSet<String> set = std.getAnnualScoresTotalIdSet();
					String classId = std.getEntryClassAssigned();
					//for(String str : set) {
						//if(str.contains(stdIdy)) {
							try {
								EntityManagerFactory emfactory2 = Persistence.createEntityManagerFactory
										("SchoolMgtSystem");
								EntityManager entitymanager2 = emfactory2.createEntityManager();
								entitymanager2.getTransaction().begin();
								
								StudentClasses myClass = entitymanager2.find(StudentClasses.class, classId);
								stdClass = myClass.getClassNo()+myClass.getClassLetter();
								
								entitymanager2.getTransaction().commit();
								entitymanager2.close();
								emfactory2.close();
							}
							catch(Exception except) {
								except.printStackTrace();
							}
						//}
					//}
					
					entitymanager.getTransaction().commit();
					entitymanager.close();
					emfactory.close();
				}
				catch(Exception ex) {
					ex.printStackTrace();
				}
				
				int sNo = i;
				String countX = String.valueOf(sNo);
				String stdIdX = stdIdy;
				String nameX = DataSurName.get(i-1)+" "+DataOtherNames.get(i-1);
				String sexX = Sex.get(i-1);
				String ageX = String.valueOf(dobx);
				String classX = stdClass;
				String parentX = Parents.get(i-1);
				String phoneX = Phone.get(i-1);
				String emailX = Email.get(i-1);	
				
				data.add(new SpoolStdListDataTable(
					countX,
					stdIdX,
					nameX,
					sexX,
					ageX,
					classX,
					parentX,
					phoneX,
					emailX
					));
			}
			
			stdListSNoCol.setCellValueFactory(new PropertyValueFactory("sNo_Data"));
			stdListStdIDCol.setCellValueFactory(new PropertyValueFactory("studentID_Data"));
			stdListNameCol.setCellValueFactory(new PropertyValueFactory("name_Data"));
			stdListSexCol.setCellValueFactory(new PropertyValueFactory("sex_Data"));
			stdListAgeCol.setCellValueFactory(new PropertyValueFactory("age_Data"));
			stdListClassCol.setCellValueFactory(new PropertyValueFactory("stdClass_Data"));
			stdListParentsCol.setCellValueFactory(new PropertyValueFactory("parent_Data"));
			stdListPhoneCol.setCellValueFactory(new PropertyValueFactory("phone_Data"));
			stdListEmailCol.setCellValueFactory(new PropertyValueFactory("email_Data"));
			
			try {	
				spoolStdListDataTable.setItems(data);
			}
			catch(Exception ex) {
				errorStdList_TF.setVisible(true);
				errorStdList_TF.setText("Set Data Error: " + ex.getLocalizedMessage());
			}
		}
		catch(Exception e) {
			errorStdList_TF.setVisible(true);
			errorStdList_TF.setText("Error: " + e.getLocalizedMessage());
		}
	}
	
	@FXML SplitPane printPaneStdList;
	@FXML public void printStdListButton(ActionEvent event) {
		spoolStudentListBtn.setVisible(false);
		returnSpoolStdListBtn.setVisible(false);
		genExcelSpoolStdListBtn.setVisible(false);
		printStdListBtn.setVisible(false);
		errorStdList_TF.setVisible(false);
		
		try {
			printNode(printPaneStdList);
		}
		catch(Exception exception) {
			errorStdList_TF.setVisible(true);
			errorStdList_TF.setText("Print Error: "+ exception.getLocalizedMessage());
		}
		finally {
			spoolStudentListBtn.setVisible(true);
			returnSpoolStdListBtn.setVisible(true);
			genExcelSpoolStdListBtn.setVisible(true);
			printStdListBtn.setVisible(true);
			errorStdList_TF.setVisible(false);
		}
	}

	@FXML public void genExcelStdListButton(ActionEvent event) {
		
		Workbook workbook = new HSSFWorkbook();
		Sheet spreadSheet = workbook.createSheet("worksheet");
		Row row = spreadSheet.createRow(0);
		
		for(int j = 0; j < spoolStdListDataTable.getColumns().size(); j++) {
			row.createCell(j).setCellValue(spoolStdListDataTable.getColumns().get(j).getText());
		}
		
		for(int i = 0; i < spoolStdListDataTable.getItems().size(); i++) {
			row = spreadSheet.createRow(i + 1);
			for(int j = 0; j < spoolStdListDataTable.getColumns().size(); j++) {
				if(spoolStdListDataTable.getColumns().get(j).getCellData(i) != null) {
					row.createCell(j).setCellValue(spoolStdListDataTable.getColumns().get(j).getCellData(i).toString());
				}
				else {
					row.createCell(j).setCellValue("");
				}
			}
		}
		
		String str = LocalDate.now().format(formatter);
		String txt = "stdList"+str+".xls";
		String filePath = "C:\\workbook\\"+txt;
		
		try {
			FileOutputStream fileOut = new FileOutputStream(filePath);
			try {
				workbook.write(fileOut);
				fileOut.close();
				errorStdList_TF.setVisible(true);
				errorStdList_TF.setText(filePath);
			} catch (IOException e2) {
				errorStdList_TF.setVisible(true);
				errorStdList_TF.setText("Write Error: "+ e2.getMessage());
			}
		} catch (FileNotFoundException e) {
			errorStdList_TF.setVisible(true);
			errorStdList_TF.setText("File Error: "+ e.getMessage());
		}
	}
	
	// Staff List Controller
	@FXML private Button staffListBtn, spoolStaffListBtn, returnSpoolStaffListBtn, genExcelSpoolStaffListBtn,
		printStaffListBtn;
	@FXML TextField errorStaffList_TF;
	@FXML TableView<SpoolStaffListDataTable> spoolStaffListDataTable;
	@FXML TableColumn<SpoolStaffListDataTable,String> staffListSNoCol, staffListEmpNoCol,
		staffListNameCol, staffListSexCol, staffListAgeCol, staffListMaritalCol,
		staffListQualCol, staffListSpecCol, staffListPhoneCol, staffListEmailCol, staffNextOfKinCol;
	
	@SuppressWarnings({ "unchecked", "rawtypes" })
	@FXML public void spoolStaffListButton(ActionEvent event) {
		
		//errorStaffList_TF.setVisible(false);
		errorStaffList_TF.setDisable(true);
	
		ObservableList<SpoolStaffListDataTable> data = FXCollections.observableArrayList();
		
		LinkedList<String> StaffEmpNo = new LinkedList<>();
		LinkedList<String> DataSurName = new LinkedList<>();
		LinkedList<String> DataOtherNames = new LinkedList<>();
		LinkedList<String> Sex = new LinkedList<>();
		LinkedList<LocalDate> DOB = new LinkedList<>();
		LinkedList<String> MaritalStatus = new LinkedList<>();
		LinkedList<String> Qualifications = new LinkedList<>();
		LinkedList<LocalDate> DOQ = new LinkedList<>();
		LinkedList<String> Specialization = new LinkedList<>();
		LinkedList<String> Phone = new LinkedList<>();
		LinkedList<String> Email = new LinkedList<>();
		LinkedList<String> NextOfKin = new LinkedList<>();
		
		try {
			final String JDBC_Driver = "com.mysql.jdbc.Driver";
			final String DB_URL = dbURL;
			final String DB_User = dbUSR;
			final String DB_PWD = dbPWD;
			
			
			Connection conn = null;
			PreparedStatement stmt = null;
			
			try {
				Class.forName(JDBC_Driver);
				conn = DriverManager.getConnection(DB_URL, DB_User, DB_PWD);
				
				String sql;
				sql = "select * from staff where EMPNO like '%K%';";
				
				stmt = conn.prepareStatement(sql);
				
				ResultSet rs = stmt.executeQuery();
				
				while(rs.next()) {
					StaffEmpNo.add(rs.getString("EMPNO"));
					DataSurName.add(rs.getString("SURNAME"));
					DataOtherNames.add(rs.getString("OTHERNAMES"));
					Sex.add(rs.getString("SEX"));
					DOB.add(rs.getDate("DOB").toLocalDate());
					MaritalStatus.add(rs.getString("MARITALSTATUS"));
					Qualifications.add(rs.getString("QUALIFICATION"));
					DOQ.add(rs.getDate("DATEOFQUALIFICATION").toLocalDate());
					Specialization.add(rs.getString("SPECIALIZATION"));
					Phone.add(rs.getString("PHONE1"));
					Email.add(rs.getString("EMAIL"));
					NextOfKin.add(rs.getString("NEXTOFKIN"));
				}
				rs.close();
				stmt.close();
				conn.close();
			}
			catch(SQLException es) {
				errorStaffList_TF.setVisible(true);
				errorStaffList_TF.setText("Error JDBC: "+ es.getSQLState());
			}
			catch(Exception es2) {
				errorStaffList_TF.setVisible(true);
				errorStaffList_TF.setText("Error JDBC: "+ es2.getMessage());
			}
			finally {
				try {
					if(stmt != null ) {
						stmt.close();
					}
				}
				catch(SQLException ces) {
					errorStaffList_TF.setVisible(true);
					errorStaffList_TF.setText("Error JDBC: "+ ces.getSQLState());
				}
				try {
					if(conn != null ) {
						conn.close();
					}
				}
				catch(Exception ces2) {
					errorStaffList_TF.setVisible(true);
					errorStaffList_TF.setText("JDBC: "+ces2.getMessage());
				}
			}
			
			try {
				for(int i = 1; i <= StaffEmpNo.size(); i++) {
					
					String countX = "";
					String staffEmpNoX = "";
					String nameX = "";
					String sexX = "";
					String ageX = "";
					String maritalStatusX = "";
					String qualificationX = "";
					String specializationX = "";
					String phoneX = "";
					String emailX = "";	
					String nextOfKinX = "";
					
					LocalDate dob2 = (LocalDate) DOB.get(i-1);
					LocalDate dob3 = LocalDate.now();
					int dobx = dob3.getYear() - dob2.getYear();
					
					int sNo = i;
					countX = String.valueOf(sNo);
					staffEmpNoX = StaffEmpNo.get(i-1);
					nameX = DataSurName.get(i-1)+" "+DataOtherNames.get(i-1);
					sexX = Sex.get(i-1);
					ageX = String.valueOf(dobx);
					maritalStatusX = MaritalStatus.get(i-1);
					qualificationX = Qualifications.get(i-1)+", "+DOQ.get(i-1);
					specializationX = Specialization.get(i-1);
					phoneX = Phone.get(i-1);
					emailX = Email.get(i-1);	
					nextOfKinX = NextOfKin.get(i-1);
					
					data.add(new SpoolStaffListDataTable(
						countX,
						staffEmpNoX,
						nameX,
						sexX,
						ageX,
						maritalStatusX,
						qualificationX,
						specializationX,
						phoneX,
						emailX,
						nextOfKinX
						));
				}
			}
			catch(Exception exception) {
				errorStaffList_TF.setVisible(true);
				errorStaffList_TF.setText("data.add error: " + exception.getMessage());
			}
			
			try {
				staffListSNoCol.setCellValueFactory(new PropertyValueFactory("sNo_Data"));
				staffListEmpNoCol.setCellValueFactory(new PropertyValueFactory("staffEmpNo_Data"));
				staffListNameCol.setCellValueFactory(new PropertyValueFactory("name_Data"));
				staffListSexCol.setCellValueFactory(new PropertyValueFactory("sex_Data"));
				staffListAgeCol.setCellValueFactory(new PropertyValueFactory("age_Data"));
				staffListMaritalCol.setCellValueFactory(new PropertyValueFactory("maritalStatus_Data"));
				staffListQualCol.setCellValueFactory(new PropertyValueFactory("qualification_Data"));
				staffListSpecCol.setCellValueFactory(new PropertyValueFactory("specialization_Data"));
				staffListPhoneCol.setCellValueFactory(new PropertyValueFactory("phone_Data"));
				staffListEmailCol.setCellValueFactory(new PropertyValueFactory("email_Data"));
				staffNextOfKinCol.setCellValueFactory(new PropertyValueFactory("nextOfKin_Data"));
			}
			catch(Exception exe) {
				errorStaffList_TF.setVisible(true);
				errorStaffList_TF.setText("Set Cell Factory Error: " + exe.getLocalizedMessage());
			}
			
			try {	
				spoolStaffListDataTable.setItems(data);
			}
			catch(Exception ex) {
				errorStaffList_TF.setVisible(true);
				errorStaffList_TF.setText("Set Data Error: " + ex.getLocalizedMessage());
			}
		}
		catch(Exception e) {
			errorStaffList_TF.setVisible(true);
			errorStaffList_TF.setText("Error: " + e.getLocalizedMessage());
		}
	}
	
	@FXML SplitPane printPaneStaffList;
	@FXML public void printStaffListButton(ActionEvent event) {
		spoolStaffListBtn.setVisible(false);
		returnSpoolStaffListBtn.setVisible(false);
		genExcelSpoolStaffListBtn.setVisible(false);
		printStaffListBtn.setVisible(false);
		errorStaffList_TF.setVisible(false);
		
		try {
			printNode(printPaneStaffList);
		}
		catch(Exception exception) {
			errorStaffList_TF.setVisible(true);
			errorStaffList_TF.setText("Print Error: "+ exception.getLocalizedMessage());
		}
		finally {
			spoolStaffListBtn.setVisible(true);
			returnSpoolStaffListBtn.setVisible(true);
			genExcelSpoolStaffListBtn.setVisible(true);
			printStaffListBtn.setVisible(true);
			errorStaffList_TF.setVisible(false);
		}
	}

	@FXML public void genExcelStaffListButton(ActionEvent event) {
		
		Workbook workbook = new HSSFWorkbook();
		Sheet spreadSheet = workbook.createSheet("worksheet");
		Row row = spreadSheet.createRow(0);
		
		for(int j = 0; j < spoolStaffListDataTable.getColumns().size(); j++) {
			row.createCell(j).setCellValue(spoolStaffListDataTable.getColumns().get(j).getText());
		}
		
		for(int i = 0; i < spoolStaffListDataTable.getItems().size(); i++) {
			row = spreadSheet.createRow(i + 1);
			for(int j = 0; j < spoolStaffListDataTable.getColumns().size(); j++) {
				if(spoolStaffListDataTable.getColumns().get(j).getCellData(i) != null) {
					row.createCell(j).setCellValue(spoolStaffListDataTable.getColumns().get(j).getCellData(i).toString());
				}
				else {
					row.createCell(j).setCellValue("");
				}
			}
		}
		
		String str = LocalDate.now().format(formatter);
		String txt = "staffList"+str+".xls";
		String filePath = "C:\\workbook\\"+txt;
		
		try {
			FileOutputStream fileOut = new FileOutputStream(filePath);
			try {
				workbook.write(fileOut);
				fileOut.close();
				errorStaffList_TF.setVisible(true);
				errorStaffList_TF.setText(filePath);
			} catch (IOException e2) {
				errorStaffList_TF.setVisible(true);
				errorStaffList_TF.setText("Write Error: "+ e2.getMessage());
			}
		} catch (FileNotFoundException e) {
			errorStaffList_TF.setVisible(true);
			errorStaffList_TF.setText("File Error: "+ e.getMessage());
		}
	}
	
	//Library System Controller
	@FXML private Button librarySysBtn, returnLibrarySysBtn;
	
	//Create Book Controller
	@FXML private Button createLibBook, returnCreateLibBook;
	@FXML private TextField ISBN, publishedBy, bookEdition, bookPageCount;
	@FXML private TextArea bookTitle, bookAuthors, bookCopyright;
	@FXML private ComboBox<String> yearOfPublication, bookStatus;
	@FXML private DatePicker bookEntryDate;
	ObservableList<String> bookAvailability = FXCollections.observableArrayList("Available",
			"Not Available");
	
	@FXML public void initializeBookCombo(MouseEvent event) {
		//yearOfPublication.setItems(years);
		populateYear(yearOfPublication);
		bookStatus.setItems(bookAvailability);
	}
	
	@FXML public void saveBookButtoon(ActionEvent event) {
		String isbn = ISBN.getText().toUpperCase();
		String pubBy = publishedBy.getText();
		String bkEdition = bookEdition.getText();
		int bkPageCount = Integer.parseInt(bookPageCount.getText());
		String bkTitle = bookTitle.getText();
		String bkAuthors = bookAuthors.getText();
		String bkCopyright = bookCopyright.getText();
		String bkStatus = bookStatus.getValue();
		String yrOfPublication = yearOfPublication.getValue();
		
		CreateBook book = new CreateBook();
		try {
			book.createBook(isbn, bkTitle, bkAuthors, pubBy, bkEdition, 
					yrOfPublication, bkCopyright, bkPageCount, bkStatus, 
					bookEntryDate.getValue(), dispName);
		}
		catch(Exception e) {
			ISBN.setText("CreateBook Error: "+e.getMessage());
		}
		finally {
			publishedBy.clear(); 
			bookEdition.clear(); 
			bookPageCount.clear();
			bookTitle.clear(); 
			bookAuthors.clear(); 
			bookCopyright.clear(); 
			bookStatus.setValue("select option");
			yearOfPublication.setValue("select option");
			bookEntryDate.setValue(LocalDate.now());
		}
	}
	
	@FXML public void updateBookButton(ActionEvent event) {
		String isbn = ISBN.getText().toUpperCase();
		String pubBy = publishedBy.getText();
		String bkEdition = bookEdition.getText();
		int bkPageCount = Integer.parseInt(bookPageCount.getText());
		String bkTitle = bookTitle.getText();
		String bkAuthors = bookAuthors.getText();
		String bkCopyright = bookCopyright.getText();
		String bkStatus = bookStatus.getValue();
		String yrOfPublication = yearOfPublication.getValue();
		
		UpdateBook book = new UpdateBook();
		try {
			book.updateBook(isbn, bkTitle, bkAuthors, pubBy, bkEdition, 
					yrOfPublication, bkCopyright, bkPageCount, bkStatus, 
					bookEntryDate.getValue(), dispName);
		}
		catch(Exception e) {
			ISBN.setText("updateBook Error: "+e.getMessage());
		}
		finally {
			publishedBy.clear(); 
			bookEdition.clear(); 
			bookPageCount.clear();
			bookTitle.clear(); 
			bookAuthors.clear(); 
			bookCopyright.clear(); 
			bookStatus.setValue("select option");
			yearOfPublication.setValue("select option");
			bookEntryDate.setValue(LocalDate.now());
		}
	}
	
	@FXML public void findBookButton(ActionEvent event) {
		String isbn = ISBN.getText().toUpperCase();
		try {
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			LibraryBooks book = entitymanager.find(LibraryBooks.class, isbn);
			
			//ISBN.setText(book.getISBN());
			bookTitle.setText(book.getBookTitle());
			bookAuthors.setText(book.getBookAuthors());
			publishedBy.setText(book.getPublishedBy());
			bookEdition.setText(book.getBookEdition());
			yearOfPublication.setValue(book.getYearOfPublication());
			bookCopyright.setText(book.getBookCopyright());
			bookPageCount.setText(String.valueOf(book.getBookPageCount()));
			bookStatus.setValue(book.getBookStatus());
		
			LocalDate date2 = book.getBookEntryDate();
			bookEntryDate.setValue(date2);
			
			entitymanager.getTransaction().commit();
			entitymanager.close();
			emfactory.close();
		}
		catch(Exception e) {
			ISBN.setText("FindBook Error: "+ e.getLocalizedMessage());
			publishedBy.clear(); 
			bookEdition.clear(); 
			bookPageCount.clear();
			bookTitle.clear(); 
			bookAuthors.clear(); 
			bookCopyright.clear(); 
			bookStatus.setValue("select option");
			yearOfPublication.setValue("select option");
			bookEntryDate.setValue(LocalDate.now());
		}
	}
	
	@FXML public void deleteBookButton(ActionEvent event) {
		String isbn = ISBN.getText().toUpperCase();
		
		DeleteBook book = new DeleteBook();
		try {
			book.deleteBook(isbn);
		}
		catch(Exception e) {
			ISBN.setText("deleteBook Error: "+e.getMessage());
		}
		finally {
			publishedBy.clear(); 
			bookEdition.clear(); 
			bookPageCount.clear();
			bookTitle.clear(); 
			bookAuthors.clear(); 
			bookCopyright.clear(); 
			bookStatus.setValue("select option");
			yearOfPublication.setValue("select option");
			bookEntryDate.setValue(LocalDate.now());
		}
	}
	
	//Lend A Book Controller
	@FXML private Button lendBookBtn, returnLendBookBtn;
	@FXML private TextField lendLID, lendStdID, lendStdName, lendISBN, 
		lendBookEdition, lendYearOfPublication;
	@FXML  private ComboBox<String> lendStdClass, lendStdClassLetter;
	@FXML private TextArea lendBookTitle, lendBookAuthors, lendBookStatus;
	@FXML private DatePicker lendingDate, expectedReturnDate;
	
	@FXML public void lendBookComboInit(MouseEvent event) {
		lendStdClass.setItems(classNo);
		lendStdClassLetter.setItems(classL);
	}
	
	@FXML public void lendBookInit(MouseEvent event) {
		try {
			
			String year;
			int yr = LocalDate.now().getYear();
			//int mnt = LocalDate.now().getMonthValue();
			
			year = String.valueOf(yr);
			
			String stdClass = "";
			String classLetter = "";
			String cid = "";
			String stdName = "";
			String stdNo = lendStdID.getText().toUpperCase();
			String isbn = lendISBN.getText().toUpperCase();
			
			//std info
			try {
				EntityManagerFactory emfactory = Persistence.createEntityManagerFactory
						("SchoolMgtSystem");
				EntityManager entitymanager = emfactory.createEntityManager();
				entitymanager.getTransaction().begin();
				
				Students std = entitymanager.find(Students.class, stdNo);
				
				stdName = std.getOtherNames()+" "+std.getSurName();
				cid = std.getEntryClassAssigned();
				
				try {
					EntityManagerFactory emfactory2 = Persistence.createEntityManagerFactory
							("SchoolMgtSystem");
					EntityManager entitymanager2 = emfactory2.createEntityManager();
					entitymanager2.getTransaction().begin();
					
					StudentClasses clas = entitymanager2.find(StudentClasses.class, cid);
					stdClass = clas.getClassNo();
					classLetter = clas.getClassLetter();
					
					entitymanager2.getTransaction().commit();
					entitymanager2.close();
					emfactory2.close();
				}
				catch(Exception except) {
					except.printStackTrace();
				}
				
				entitymanager.getTransaction().commit();
				entitymanager.close();
				emfactory.close();
			}
			catch(Exception ex) {
				ex.printStackTrace();
			}
			
			lendStdName.setText(stdName);
			lendStdClass.setValue(stdClass);
			lendStdClassLetter.setValue(classLetter);
			
			//book info
			try {
				String bkTitle = "";
				String bkAuthor = "";
				String bkEdition = "";
				String bkYear = "";
				String bkStatus ="";
				EntityManagerFactory emfactory = Persistence.createEntityManagerFactory
						("SchoolMgtSystem");
				EntityManager entitymanager = emfactory.createEntityManager();
				entitymanager.getTransaction().begin();
				
				LibraryBooks book = entitymanager.find(LibraryBooks.class, isbn);
				bkTitle = book.getBookTitle();
				bkAuthor = book.getBookAuthors();
				bkEdition = book.getBookEdition();
				bkYear = book.getYearOfPublication();
				bkStatus = book.getBookStatus();
				
				entitymanager.getTransaction().commit();
				entitymanager.close();
				emfactory.close();
				
				lendBookTitle.setText(bkTitle);
				lendBookAuthors.setText(bkAuthor);
				lendBookEdition.setText(bkEdition);
				lendYearOfPublication.setText(bkYear);
				lendBookStatus.setText(bkStatus);
			}
			catch(Exception ex) {
				ex.printStackTrace();
			}
		}
		catch(Exception e) {
			e.printStackTrace();
		}
	}
	
	//Lend Book
	@SuppressWarnings("unchecked")
	@FXML public void saveLendBookButton(ActionEvent event) {
		String year, monthX, dayX;
		int yr = lendingDate.getValue().getYear();
		int mnt = lendingDate.getValue().getMonthValue();
		int dy = lendingDate.getValue().getDayOfYear();
		year = String.valueOf(yr);
		monthX = String.valueOf(mnt);
		dayX = String.valueOf(dy);
		String stdNo = lendStdID.getText().toUpperCase();
		String isbn = lendISBN.getText().toUpperCase();
		String lid = stdNo+isbn+year+monthX+dayX;
		String stdName = lendStdName.getText();
		String studentClass = lendStdClass.getValue();
		String stdClassLetter = lendStdClassLetter.getValue();
		String bkTitle = lendBookTitle.getText();
		String bkAuthor = lendBookAuthors.getText();
		String bkEdition = lendBookEdition.getText();
		String bkYear = lendYearOfPublication.getText();
		String bkStatus = lendBookStatus.getText();
		if(!(bkStatus.equals("Not Available"))) {
			try {
				CreateBook lendBook = new CreateBook();
				lendBook.createLendingBook(lid, stdNo, stdName, studentClass, stdClassLetter, isbn, 
						bkTitle, bkAuthor, bkEdition, bkYear, bkStatus, lendingDate.getValue(), 
						expectedReturnDate.getValue(), dispName);
				
				Vector<LendingBookCount> LendingData = new Vector<>();
				try {
					EntityManagerFactory emfactory = Persistence.createEntityManagerFactory
							("SchoolMgtSystem");
					EntityManager entitymanager = emfactory.createEntityManager();
					entitymanager.getTransaction().begin();
					
					LibraryBooks book = entitymanager.find(LibraryBooks.class, isbn);
					book.setBookStatus("Not Available");
					
					Query queryX =
							entitymanager.createQuery("select e from LendingBookCount e ");
					LendingData = (Vector<LendingBookCount>) queryX.getResultList();
					
					entitymanager.persist(book);
					entitymanager.getTransaction().commit();
					entitymanager.close();
					emfactory.close();
					
					LinkedList<String> lendDataX = new LinkedList<>();
					for (LendingBookCount lend : LendingData) {
						if(lend.getLendBkStdID().equals(stdNo)) {
							lendDataX.add(stdNo);
						}
					}
					
					EntityManagerFactory emfactoryY = Persistence.createEntityManagerFactory
							("SchoolMgtSystem");
					EntityManager entitymanagerY = emfactoryY.createEntityManager();
					entitymanagerY.getTransaction().begin();
					
					if(lendDataX.contains(stdNo)) {
						LendingBookCount lend = entitymanagerY.find(LendingBookCount.class, stdNo);
						int bkCount = lend.getBookCount();
						lend.setBookCount(bkCount + 1);
						
						entitymanagerY.persist(lend);
					}
					else {
						LendingBookCount lend = new LendingBookCount();
						lend.setLendBkStdID(stdNo);
						lend.setLendBkStdName(stdName);
						lend.setLendBkStdClass(studentClass);
						lend.setLendBkStdClassLetter(stdClassLetter);
						lend.setBookCount(1);
						lend.setDefaultCount(0);
						lend.setUser(dispName);
						
						entitymanagerY.persist(lend);
					}
					
					entitymanagerY.getTransaction().commit();
					entitymanagerY.close();
					emfactoryY.close();
					
					lendLID.setText(lid);
				}
				catch(Exception except) {
					except.printStackTrace();
				}
				
			}
			catch(Exception e) {
				lendLID.setText("Lending Book Error: " + e.getLocalizedMessage());
			}
			finally {
				lendStdID.clear();
				lendStdName.clear();
				lendISBN.clear(); 
				lendBookEdition.clear();
				lendYearOfPublication.clear();
				lendStdClass.setValue("select option"); 
				lendStdClassLetter.setValue("select option");
				lendBookTitle.clear();
				lendBookAuthors.clear(); 
				lendBookStatus.clear();
				lendingDate.setValue(LocalDate.now());
				expectedReturnDate.setValue(LocalDate.now());
			}
		}
		else {
			Alert alert = new Alert(Alert.AlertType.INFORMATION);
			alert.setContentText("This book is not available in the "
					+ "library at the moment... Please check back later");
			alert.showAndWait();
		}
	}
	
	//update LendBook
	@FXML public void updateLendBookButton(ActionEvent event) {
		String stdNo = lendStdID.getText().toUpperCase();
		String isbn = lendISBN.getText().toUpperCase();
		String lid = lendLID.getText().toUpperCase();
		try {
			UpdateBook book = new UpdateBook();
			book.updateLendingBook(lid, lendingDate.getValue(), expectedReturnDate.getValue(), dispName);
		}
		catch(Exception e) {
			lendLID.setText("updating Book Error: " + e.getLocalizedMessage());
		}
		finally {
			lendStdID.clear();
			lendStdName.clear();
			lendISBN.clear(); 
			lendBookEdition.clear();
			lendYearOfPublication.clear();
			lendStdClass.setValue("select option"); 
			lendStdClassLetter.setValue("select option");
			lendBookTitle.clear();
			lendBookAuthors.clear(); 
			lendBookStatus.clear();
			lendingDate.setValue(LocalDate.now());
			expectedReturnDate.setValue(LocalDate.now());
		}
	}
	
	//Find or validate LendBook
	@FXML public void findLendBookButton(ActionEvent event) {
		String lid = lendLID.getText().toUpperCase();
		try {
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory
					("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			LendingBook lend = entitymanager.find(LendingBook.class, lid);
			
			lendStdID.setText(String.valueOf(lend.getLendStdID()));
			lendStdName.setText(lend.getLendStdName());
			lendISBN.setText(lend.getLendISBN());
			lendBookEdition.setText(lend.getLendBookEdition());
			lendYearOfPublication.setText(lend.getLendYearOfPublication());
			lendStdClass.setValue(lend.getLendStdClass()); 
			lendStdClassLetter.setValue(lend.getLendStdClassLetter());
			lendBookTitle.setText(lend.getLendBookTitle());
			lendBookAuthors.setText(lend.getLendBookAuthors());
			lendBookStatus.setText(lend.getLendBookStatus());

			LocalDate date2 = lend.getLendingDate();
			LocalDate dateY = lend.getExpectedReturnDate();
			
			lendingDate.setValue(date2);
			expectedReturnDate.setValue(dateY);
			
			entitymanager.persist(lend);
			
			entitymanager.getTransaction().commit();
			entitymanager.close();
			emfactory.close();
		}
		catch(Exception e) {
			lendLID.setText("validate LendBook Error: " + e.getLocalizedMessage());
			lendStdID.clear();
			lendStdName.clear();
			lendISBN.clear(); 
			lendBookEdition.clear();
			lendYearOfPublication.clear();
			lendStdClass.setValue("select option"); 
			lendStdClassLetter.setValue("select option");
			lendBookTitle.clear();
			lendBookAuthors.clear(); 
			lendBookStatus.clear();
			lendingDate.setValue(LocalDate.now());
			expectedReturnDate.setValue(LocalDate.now());
		}
	}
	
	//delete lendbook
	@FXML public void deleteLendBookButton(ActionEvent event) {
		String lid = lendLID.getText().toUpperCase();
		findLendBookButton(null);
		String stdNo = lendStdID.getText().toUpperCase();
		String isbn = lendISBN.getText().toUpperCase();
		try {
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory
					("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			LendingBookCount lend = entitymanager.find(LendingBookCount.class, stdNo);
			
			int bkCount = lend.getBookCount();
			lend.setBookCount(bkCount - 1);
			
			entitymanager.persist(lend);
			entitymanager.getTransaction().commit();
			entitymanager.close();
			emfactory.close();
		}
		catch(Exception ex) {
			lendLID.setText("updating lendingBookCount Error: " + ex.getLocalizedMessage());
		}
		
		try {
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory
					("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			LibraryBooks book = entitymanager.find(LibraryBooks.class, isbn);
			
			book.setBookStatus("Available");
			
			entitymanager.persist(book);
			entitymanager.getTransaction().commit();
			entitymanager.close();
			emfactory.close();
		}
		catch(Exception ex) {
			lendLID.setText("updating LibraryBooks Error: " + ex.getLocalizedMessage());
		}
		
		try {
			DeleteBook lendBook = new DeleteBook();
			lendBook.deleteLendBook(lid);
		}
		catch(Exception e) {
			lendLID.setText("delete LendBook Error: " + e.getLocalizedMessage());
		}
		finally {
			lendStdID.clear();
			lendStdName.clear();
			lendISBN.clear(); 
			lendBookEdition.clear();
			lendYearOfPublication.clear();
			lendStdClass.setValue("select option"); 
			lendStdClassLetter.setValue("select option");
			lendBookTitle.clear();
			lendBookAuthors.clear(); 
			lendBookStatus.clear();
			lendingDate.setValue(LocalDate.now());
			expectedReturnDate.setValue(LocalDate.now());
		}
		
	}
	
	//Return Book Controller
	@FXML private Button bookReturnBtn, returnBookReturnBtn;
	@FXML private TextField returnLID, returnStdID, returnDefaultDays, 
		returnNoOfDefaults, returnStdName, returnISBN, returnBookTitle,
		returnBookAuthors, returnBookEdition, returnYearOfPublication;
	@FXML private ComboBox<String> returnStdClass, returnStdClassLetter, returnPenalty;
	@FXML private DatePicker lentDate, returnExpectedReturnDate2, actualReturnDate, 
		suspendedUntil;
	
	ObservableList<String> penalty = FXCollections.observableArrayList("suspended",
			"ignored","select option");
	
	@FXML public void returnBookInit(MouseEvent event) {
		returnStdClass.setItems(classNo);
		returnStdClassLetter.setItems(classL);
		returnPenalty.setItems(penalty);
	}
	
	//init
	@SuppressWarnings("unchecked")
	@FXML public void returnBookGridInit(MouseEvent event) {
		try {
			if(returnPenalty.getValue().equals("ignored")) {
				suspendedUntil.setValue(LocalDate.now());
			}
		}
		catch(Exception ex3) {
			ex3.printStackTrace();
		}
		try {
			String year, monthX, dayX;
			String stdClass = "";
			String classLetter = "";
			String cid = "";
			String stdName = "";
			String defCount = "";
			String stdNo = returnStdID.getText().toUpperCase();
			String isbn = returnISBN.getText().toUpperCase();
			
			String year2 = String.valueOf(LocalDate.now().getYear());
			Vector<LendingBook> LendingData = new Vector<>();
			
			//std info
			try {
				EntityManagerFactory emfactory = Persistence.createEntityManagerFactory
						("SchoolMgtSystem");
				EntityManager entitymanager = emfactory.createEntityManager();
				entitymanager.getTransaction().begin();
				
				Query query =
						entitymanager.createQuery("select e from LendingBook e ");
				LendingData = (Vector<LendingBook>) query.getResultList();
				
				Students std = entitymanager.find(Students.class, stdNo);
				
				stdName = std.getOtherNames()+" "+std.getSurName();
				cid = std.getEntryClassAssigned();
				
				try {
					EntityManagerFactory emfactory2 = Persistence.createEntityManagerFactory
							("SchoolMgtSystem");
					EntityManager entitymanager2 = emfactory2.createEntityManager();
					entitymanager2.getTransaction().begin();
					
					StudentClasses clas = entitymanager2.find(StudentClasses.class, cid);
					stdClass = clas.getClassNo();
					classLetter = clas.getClassLetter();
					
					entitymanager2.getTransaction().commit();
					entitymanager2.close();
					emfactory2.close();
				}
				catch(Exception except) {
					except.printStackTrace();
				}
				
				entitymanager.getTransaction().commit();
				entitymanager.close();
				emfactory.close();
			}
			catch(Exception ex) {
				ex.printStackTrace();
			}
			
			try {
				EntityManagerFactory emfactory = Persistence.createEntityManagerFactory
						("SchoolMgtSystem");
				EntityManager entitymanager = emfactory.createEntityManager();
				entitymanager.getTransaction().begin();
				
				LendingBookCount count = entitymanager.find(LendingBookCount.class, stdNo);
				
				defCount = String.valueOf(count.getDefaultCount());
				
				entitymanager.persist(count);
				entitymanager.getTransaction().commit();
				entitymanager.close();
				emfactory.close();
				returnNoOfDefaults.setText(defCount);
			}
			catch(Exception e) {
				e.printStackTrace();
			}
			
			returnStdName.setText(stdName);
			returnStdClass.setValue(stdClass);
			returnStdClassLetter.setValue(classLetter);
			
			//*******************************
			LinkedList<String> lendX = new LinkedList<>();
			String lid2 = "";
			for(LendingBook lending : LendingData) {
				if(lending.getLendStdID().equals(stdNo) && 
						lending.getLendISBN().equals(isbn)) {
					if(lending.getLendStdClass().equals(stdClass) && 
							lending.getLendStdClassLetter().equals(classLetter) ) {
						lendX.add(lending.getLendLID());
						lid2 = lending.getLendLID();
					}
				}
			}
			
			String lid = lid2; //stdNo+isbn+year+monthX+dayX;
			
			//book info
			try {
				String bkTitle = "";
				String bkAuthor = "";
				String bkEdition = "";
				String bkYear = "";
				LocalDate lentDateX;
				LocalDate expReturnDate;
				EntityManagerFactory emfactory = Persistence.createEntityManagerFactory
						("SchoolMgtSystem");
				EntityManager entitymanager = emfactory.createEntityManager();
				entitymanager.getTransaction().begin();
				
				LendingBook book = entitymanager.find(LendingBook.class, lid);
				bkTitle = book.getLendBookTitle();
				bkAuthor = book.getLendBookAuthors();
				bkEdition = book.getLendBookEdition();
				bkYear = book.getLendYearOfPublication();
				
				lentDateX = book.getLendingDate();
				expReturnDate = book.getExpectedReturnDate();
				
				entitymanager.getTransaction().commit();
				entitymanager.close();
				emfactory.close();
				
				returnBookTitle.setText(bkTitle);
				returnBookAuthors.setText(bkAuthor);
				returnBookEdition.setText(bkEdition);
				returnYearOfPublication.setText(bkYear);
				lentDate.setValue(lentDateX);
				returnExpectedReturnDate2.setValue(expReturnDate);
				
				try {
					if(!(actualReturnDate.getValue() == null)) {
						LocalDate dueDate = returnExpectedReturnDate2.getValue();
						LocalDate returnDate = actualReturnDate.getValue();
						if(returnDate.isAfter(dueDate)) {
							long diff = returnDate.toEpochDay() - dueDate.toEpochDay();
							returnDefaultDays.setText(String.valueOf(diff));
						}
						else {
							returnDefaultDays.setText(String.valueOf(0));
						}
					}
				
				}
				catch(Exception ex2) {
					ex2.printStackTrace();
				}
			}
			catch(Exception ex) {
				ex.printStackTrace();
			}
		}
		catch(Exception e) {
			e.printStackTrace();
		}
	}
	
	//Save Return Book
	@SuppressWarnings("unchecked")
	@FXML public void saveReturnBookButton(ActionEvent event) {
		String year, monthX, dayX;
		int yr = lentDate.getValue().getYear();
		int mnt = lentDate.getValue().getMonthValue();
		int dy = lentDate.getValue().getDayOfYear();
		year = String.valueOf(yr);
		monthX = String.valueOf(mnt);
		dayX = String.valueOf(dy);
		
		String stdID = returnStdID.getText().toUpperCase();
		String stdId = stdID;
		String stdName = returnStdName.getText();
		String stdClass = returnStdClass.getValue();
		String stdClassLetter = returnStdClassLetter.getValue();
		String isbn = returnISBN.getText().toUpperCase();
		String bkTitle = returnBookTitle.getText();
		String bkAuthors = returnBookAuthors.getText();
		String bkEdition = returnBookEdition.getText();
		String bkYear = returnYearOfPublication.getText();
		int defaultDaysCount = Integer.parseInt(returnDefaultDays.getText());
		String retPenalty = returnPenalty.getValue();
		int noOfDefaults = Integer.parseInt(returnNoOfDefaults.getText());
		String lid = stdID+isbn+year+monthX+dayX;
		LocalDate retDate = actualReturnDate.getValue();
		LocalDate expRetDate = returnExpectedReturnDate2.getValue();
		
		String suspStatus;
		String commentX = "Book return default";
		if(retPenalty.equals("suspended")) {
			suspStatus = "Suspended";
		}
		else {
			suspStatus = "Not Suspended";
		}
		
		CreateBook book = new CreateBook();
		
		try {
			book.createReturningBook(lid, stdId, stdName, stdClass, stdClassLetter, 
					isbn, bkTitle, bkAuthors, bkEdition, bkYear, defaultDaysCount, 
					noOfDefaults, retPenalty, lentDate.getValue(), returnExpectedReturnDate2.getValue(), 
					actualReturnDate.getValue(), suspendedUntil.getValue(), dispName);
			
			try {
				EntityManagerFactory emfactory = Persistence.createEntityManagerFactory
						("SchoolMgtSystem");
				EntityManager entitymanager = emfactory.createEntityManager();
				entitymanager.getTransaction().begin();
				
				LibraryBooks lib = entitymanager.find(LibraryBooks.class, isbn);
				LendingBook lend = entitymanager.find(LendingBook.class, lid);
				LendingBookCount count = entitymanager.find(LendingBookCount.class, stdId);
				
				lend.setLendBookStatus("Not Available");
				lib.setBookStatus("Available");
				
				int bkCount = count.getBookCount();
				count.setBookCount(bkCount - 1);
				long countxx = suspendedUntil.getValue().toEpochDay() - retDate.toEpochDay();
				if(retDate.isAfter(expRetDate)) {
					String dfIdStr = stdID+isbn+year+monthX+dayX;
					int dfCount = count.getDefaultCount();
					count.setDefaultCount(dfCount + 1);
					
					book.createDefaultPenalty(dfIdStr, stdName, String.valueOf(countxx), 
							suspStatus, commentX, actualReturnDate.getValue(), 
							suspendedUntil.getValue(), dispName);
				}
				
				entitymanager.persist(lend);
				entitymanager.persist(count);
				entitymanager.persist(lib);
				entitymanager.getTransaction().commit();
				entitymanager.close();
				emfactory.close();
				
				returnLID.setText(lid);
			}
			catch(Exception except) {
				returnLID.setText("Count error: "+except.getLocalizedMessage());
			}
			
		}
		catch(Exception e) {
			returnLID.setText("create ReturningBook error: "+e.getMessage());
		}
		finally { 
			returnStdID.clear();
			returnDefaultDays.clear(); 
			returnNoOfDefaults.clear();
			returnStdName.clear();
			returnISBN.clear();
			returnBookTitle.clear();
			returnBookAuthors.clear(); 
			returnBookEdition.clear(); 
			returnYearOfPublication.clear();
			returnStdClass.setValue("select option"); 
			returnStdClassLetter.setValue("select option");
			returnPenalty.setValue("select option");
			lentDate.setValue(LocalDate.now());
			returnExpectedReturnDate2.setValue(LocalDate.now());
			actualReturnDate.setValue(LocalDate.now());
			suspendedUntil.setValue(LocalDate.now());
		}
	}
	 
	//Find ReturningBook
	@FXML public void findReturnBookButton(ActionEvent event) {
		String lid = returnLID.getText().toUpperCase();
		try {
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory
					("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			ReturningBook ret = entitymanager.find(ReturningBook.class, lid);
			
			returnStdID.setText(String.valueOf(ret.getReturnStdID()));
			returnDefaultDays.setText(String.valueOf(ret.getReturnDefaultDays()));
			returnNoOfDefaults.setText(String.valueOf(ret.getReturnNoOfDefaults()));
			returnStdName.setText(ret.getReturnStdName());
			returnISBN.setText(ret.getReturnISBN());
			returnBookTitle.setText(ret.getReturnBookTitle());
			returnBookAuthors.setText(ret.getReturnBookAuthors());
			returnBookEdition.setText(ret.getReturnBookEdition()); 
			returnYearOfPublication.setText(ret.getReturnYearOfPublication());
			returnStdClass.setValue(ret.getReturnStdClass()); 
			returnStdClassLetter.setValue(ret.getReturnStdClassLetter());
			returnPenalty.setValue(ret.getReturnPenalty());
		
			LocalDate lDate2 = ret.getLentDate();
			LocalDate eDate2 = ret.getExpectedReturnDate();
			LocalDate aDate2 = ret.getActualReturnDate();
			LocalDate sDate2 = ret.getSuspendedUntil();
			
			lentDate.setValue(lDate2);
			returnExpectedReturnDate2.setValue(eDate2);
			actualReturnDate.setValue(aDate2);
			suspendedUntil.setValue(sDate2);
			
			entitymanager.persist(ret);
			
			entitymanager.getTransaction().commit();
			entitymanager.close();
			emfactory.close();
		}
		catch(Exception e) {
			returnLID.setText("validate ReturningBook Error: " + e.getLocalizedMessage());
			returnStdID.clear();
			returnDefaultDays.clear(); 
			returnNoOfDefaults.clear();
			returnStdName.clear();
			returnISBN.clear();
			returnBookTitle.clear();
			returnBookAuthors.clear(); 
			returnBookEdition.clear(); 
			returnYearOfPublication.clear();
			returnStdClass.setValue("select option"); 
			returnStdClassLetter.setValue("select option");
			returnPenalty.setValue("select option");
			lentDate.setValue(LocalDate.now());
			returnExpectedReturnDate2.setValue(LocalDate.now());
			actualReturnDate.setValue(LocalDate.now());
			suspendedUntil.setValue(LocalDate.now());
		}
	}
	
	//update ReturningBook
	@FXML public void updateReturningBookButton(ActionEvent event) {
		
		String lid = returnLID.getText().toUpperCase();
		int dfDays = Integer.parseInt(returnDefaultDays.getText());
		String penaltyStr = returnPenalty.getValue();
		int noOfDefaults = Integer.parseInt(returnNoOfDefaults.getText());
		try {
			UpdateBook book = new UpdateBook();
			book.updateReturningBook(lid, actualReturnDate.getValue(), dfDays, penaltyStr, 
					suspendedUntil.getValue(), noOfDefaults, dispName);
		}
		catch(Exception e) {
			returnLID.setText("updating ReturningBook Error: " + e.getLocalizedMessage());
		}
		finally {
			returnStdID.clear();
			returnDefaultDays.clear(); 
			returnNoOfDefaults.clear();
			returnStdName.clear();
			returnISBN.clear();
			returnBookTitle.clear();
			returnBookAuthors.clear(); 
			returnBookEdition.clear(); 
			returnYearOfPublication.clear();
			returnStdClass.setValue("select option"); 
			returnStdClassLetter.setValue("select option");
			returnPenalty.setValue("select option");
			lentDate.setValue(LocalDate.now());
			returnExpectedReturnDate2.setValue(LocalDate.now());
			actualReturnDate.setValue(LocalDate.now());
			suspendedUntil.setValue(LocalDate.now());
		}
	}
	
	//Delete ReturningBook
	@FXML public void deleteReturningBookButton(ActionEvent event) {
		String lid = returnLID.getText().toUpperCase();
		//findLendBookButton(null);
		String stdNo = returnStdID.getText().toUpperCase();
		String isbn = returnISBN.getText().toUpperCase();
		try {
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory
					("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			LendingBookCount lend = entitymanager.find(LendingBookCount.class, stdNo);
			
			int bkCount = lend.getBookCount();
			lend.setBookCount(bkCount + 1);
			
			entitymanager.persist(lend);
			entitymanager.getTransaction().commit();
			entitymanager.close();
			emfactory.close();
		}
		catch(Exception ex) {
			returnLID.setText("updating lendingBookCount Error: " + ex.getLocalizedMessage());
		}
		
		try {
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory
					("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			LibraryBooks book = entitymanager.find(LibraryBooks.class, isbn);
			
			book.setBookStatus("Not Available");
			
			entitymanager.persist(book);
			entitymanager.getTransaction().commit();
			entitymanager.close();
			emfactory.close();
		}
		catch(Exception ex) {
			returnLID.setText("updating LibraryBooks Error: " + ex.getLocalizedMessage());
		}
		
		try {
			DeleteBook retBook = new DeleteBook();
			retBook.deleteReturningBook(lid);
		}
		catch(Exception e) {
			returnLID.setText("delete ReturnedBook Error: " + e.getLocalizedMessage());
		}
		finally {
			returnStdID.clear();
			returnDefaultDays.clear(); 
			returnNoOfDefaults.clear();
			returnStdName.clear();
			returnISBN.clear();
			returnBookTitle.clear();
			returnBookAuthors.clear(); 
			returnBookEdition.clear(); 
			returnYearOfPublication.clear();
			returnStdClass.setValue("select option"); 
			returnStdClassLetter.setValue("select option");
			returnPenalty.setValue("select option");
			lentDate.setValue(LocalDate.now());
			returnExpectedReturnDate2.setValue(LocalDate.now());
			actualReturnDate.setValue(LocalDate.now());
			suspendedUntil.setValue(LocalDate.now());
		}
		
	}
	
	//List of Library Books
	@FXML private Button returnBookLibHome, listLibBooksButton, spoolLibBooksListBtn, genExcelLibBkListBtn,
		printLibBkListBtn;
	@FXML private SplitPane printPaneLibBooks;
	@FXML private TableView<LibBooksDataTable> libBooksDataTable;
	@FXML private TableColumn<LibBooksDataTable,String> libBooksSNoCol, libBooksISBNCol, libBooksBkTitleCol, 
		libBooksBkAuthorsCol, libBooksEdYrCol, libBooksStatusCol;
	@FXML private Label libBooksTotal, libBooksAvailable, libBooksNotAvailable, libBooksOverdue;
	@FXML private TextField libBookListError;
	
	@SuppressWarnings({ "unchecked", "rawtypes" })
	@FXML public void spoolLibBooksListButton(ActionEvent event) {
		ObservableList<LibBooksDataTable> data = FXCollections.observableArrayList();
		Vector<LibraryBooks> LibData = new Vector<>();
		try {
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory
					("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
					
			Query query =
					entitymanager.createQuery("select e from LibraryBooks e ");
			LibData = (Vector<LibraryBooks>) query.getResultList();
			
			entitymanager.getTransaction().commit();
			entitymanager.close();
			emfactory.close();
		}
		catch(Exception e) {
			libBookListError.setText("Lib Books Error: "+e.getLocalizedMessage());
		}
		
		String sNo, isbn, bkTitle, bkAuthors, editionYr, bkStatus;
		int i = 0;
		for(LibraryBooks lib : LibData) {
			i = i + 1;
			sNo = String.valueOf(i);
			isbn = lib.getISBN();
			bkTitle = lib.getBookTitle();
			bkAuthors = lib.getBookAuthors();
			editionYr = lib.getBookEdition()+" Edition, "+lib.getYearOfPublication();
			bkStatus = lib.getBookStatus();
			
			data.add(new LibBooksDataTable(
					sNo, isbn, bkTitle, bkAuthors, editionYr, bkStatus));
		}
		
		libBooksSNoCol.setCellValueFactory(new PropertyValueFactory("sNo_Data"));
		libBooksISBNCol.setCellValueFactory(new PropertyValueFactory("ISBN_Data"));
		libBooksBkTitleCol.setCellValueFactory(new PropertyValueFactory("bookTitle_Data"));
		libBooksBkAuthorsCol.setCellValueFactory(new PropertyValueFactory("bookAuthors_Data"));
		libBooksEdYrCol.setCellValueFactory(new PropertyValueFactory("editionYear_Data"));
		libBooksStatusCol.setCellValueFactory(new PropertyValueFactory("status_Data"));
		
		libBooksDataTable.setItems(data);
		
		libBooksTotal.setText(String.valueOf(data.size()));
	
		int av = 0, nav = 0;
		for(LibBooksDataTable datum : data) {
			if(datum.getStatus_Data().equals("Available")) {
				av = av + 1;
			}
			else {
				nav = nav + 1;
			}
		}
		libBooksAvailable.setText(String.valueOf(av));
		libBooksNotAvailable.setText(String.valueOf(nav));
	}
	
	@FXML public void printLibBkListButton(ActionEvent event) {
		returnBookLibHome.setVisible(false); 
		spoolLibBooksListBtn.setVisible(false); 
		genExcelLibBkListBtn.setVisible(false);
		printLibBkListBtn.setVisible(false);
		libBookListError.setVisible(false);
		try {
			printNode(printPaneLibBooks);
		}
		catch(Exception exception) {
			libBookListError.setVisible(true);
			libBookListError.setText("Print Error: "+ exception.getLocalizedMessage());
		}
		finally {
			returnBookLibHome.setVisible(true); 
			spoolLibBooksListBtn.setVisible(true); 
			genExcelLibBkListBtn.setVisible(true);
			printLibBkListBtn.setVisible(true);
			libBookListError.setVisible(false);
		}
	}
	
	@FXML public void genExcelLibBkListButton(ActionEvent event) {
		Workbook workbook = new HSSFWorkbook();
		Sheet spreadSheet = workbook.createSheet("sheet");
		Row row = spreadSheet.createRow(0);
		
		for(int j = 0; j < libBooksDataTable.getColumns().size(); j++) {
			row.createCell(j).setCellValue(libBooksDataTable.getColumns().get(j).getText());
		}
		
		for(int i = 0; i < libBooksDataTable.getItems().size(); i++) {
			row = spreadSheet.createRow(i + 1);
			for(int j = 0; j < libBooksDataTable.getColumns().size(); j++) {
				if(libBooksDataTable.getColumns().get(j).getCellData(i) != null) {
					row.createCell(j).setCellValue(libBooksDataTable.getColumns().get(j).getCellData(i).toString());
				}
				else {
					row.createCell(j).setCellValue("");
				}
			}
		}
		
		String localDate = LocalDate.now().toString();
		String txt = "LibraryBookList"+localDate+".xls";
		String filePath = "C:\\workbook\\"+txt;
		
		try {
			FileOutputStream fileOut = new FileOutputStream(filePath);
			try {
				workbook.write(fileOut);
				fileOut.close();
				libBookListError.setVisible(true);
				libBookListError.setText(filePath);
			} catch (IOException e2) {
				libBookListError.setVisible(true);
				libBookListError.setText("Write Error: "+ e2.getMessage());
			}
		} catch (FileNotFoundException e) {
			libBookListError.setVisible(true);
			libBookListError.setText("File Error: "+ e.getMessage());
		}
	}
	
	@FXML private Button returnBookLentLibHome, listLibBooksLentButton, spoolLibBkLentBtn,
		printLibBkLentBtn, genExcelLibBkLentBtn;
	@FXML private SplitPane printPaneLibBooksLent;
	@FXML private Label libBooksLentTotal;
	@FXML private TextField libBookLentError;
	@FXML private TableView<LibBooksLentDataTable> libBooksLentDataTable;
	@FXML private TableColumn<LibBooksLentDataTable,String> libBooksLentSNoCol, libBooksLentISBNCol,
		libBooksLentBkTitleCol, libBooksLentBkAuthorsCol, libBooksLentEdYrCol, libBooksLentDateCol,
		libBooksLentExpRtdCol, libBooksLentStatusCol;
	
	@SuppressWarnings({ "unchecked", "rawtypes" })
	@FXML public void spoolLibBkLentButton(ActionEvent event) {
		ObservableList<LibBooksLentDataTable> data = FXCollections.observableArrayList();
		Vector<LendingBook> LentData = new Vector<>();
		
		try {
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory
					("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
					
			Query query =
					entitymanager.createQuery("select e from LendingBook e ");
			LentData = (Vector<LendingBook>) query.getResultList();
			
			entitymanager.getTransaction().commit();
			entitymanager.close();
			emfactory.close();
		}
		catch(Exception e) {
			libBookLentError.setText("Lending Book Error: "+e.getMessage());
		}
		
		String sNo, isbn, bkTitle, bkAuthors, lentTo, lentDate, expRetDate, status;
		int i = 0;
		for(LendingBook lend : LentData) {
			i = i + 1;
			sNo = String.valueOf(i);
			isbn = lend.getLendISBN();
			bkTitle = lend.getLendBookTitle();
			bkAuthors = lend.getLendBookAuthors();
			lentTo = lend.getLendStdName();
			lentDate = String.valueOf(lend.getLendingDate());
			expRetDate = String.valueOf(lend.getExpectedReturnDate());
			if(lend.getLendBookStatus().equals("Available")) {
				status = "Not Returned";
			}
			else {
				status = "Returned";
			}
			
			data.add(new LibBooksLentDataTable(
					sNo, isbn, bkTitle, bkAuthors, lentTo, lentDate, expRetDate, status));
		}
		
		libBooksLentSNoCol.setCellValueFactory(new PropertyValueFactory("sNo_Data"));
		libBooksLentISBNCol.setCellValueFactory(new PropertyValueFactory("ISBN_Data"));
		libBooksLentBkTitleCol.setCellValueFactory(new PropertyValueFactory("bookTitle_Data"));
		libBooksLentBkAuthorsCol.setCellValueFactory(new PropertyValueFactory("bookAuthors_Data"));
		libBooksLentEdYrCol.setCellValueFactory(new PropertyValueFactory("lentTo_Data"));
		libBooksLentDateCol.setCellValueFactory(new PropertyValueFactory("lentDate_Data"));
		libBooksLentExpRtdCol.setCellValueFactory(new PropertyValueFactory("expectedRetDate_Data"));
		libBooksLentStatusCol.setCellValueFactory(new PropertyValueFactory("status_Data"));
		
		libBooksLentDataTable.setItems(data);
		
		int count = 0;
		for(LibBooksLentDataTable datum : data) {
			if(datum.getStatus_Data().equals("Not Returned")) {
				count = count + 1;
			}
		}
		libBooksLentTotal.setText(String.valueOf(count));
	}
	
	@FXML public void printLibBkLentButton(ActionEvent event) {
		returnBookLentLibHome.setVisible(false);
		spoolLibBkLentBtn.setVisible(false);
		printLibBkLentBtn.setVisible(false);
		genExcelLibBkLentBtn.setVisible(false);
		libBookLentError.setVisible(false);
		try {
			printNode(printPaneLibBooksLent);
		}
		catch(Exception exception) {
			libBookLentError.setVisible(true);
			libBookLentError.setText("Print Error: "+ exception.getLocalizedMessage());
		}
		finally {
			returnBookLentLibHome.setVisible(true);
			spoolLibBkLentBtn.setVisible(true);
			printLibBkLentBtn.setVisible(true);
			genExcelLibBkLentBtn.setVisible(true);
			libBookLentError.setVisible(false);
		}
	}
	
	@FXML public void genExcelLibBkLentButton(ActionEvent event) {
		Workbook workbook = new HSSFWorkbook();
		Sheet spreadSheet = workbook.createSheet("sheet");
		Row row = spreadSheet.createRow(0);
		
		for(int j = 0; j < libBooksLentDataTable.getColumns().size(); j++) {
			row.createCell(j).setCellValue(libBooksLentDataTable.getColumns().get(j).getText());
		}
		
		for(int i = 0; i < libBooksLentDataTable.getItems().size(); i++) {
			row = spreadSheet.createRow(i + 1);
			for(int j = 0; j < libBooksLentDataTable.getColumns().size(); j++) {
				if(libBooksLentDataTable.getColumns().get(j).getCellData(i) != null) {
					row.createCell(j).setCellValue(libBooksLentDataTable.getColumns().get(j).getCellData(i).toString());
				}
				else {
					row.createCell(j).setCellValue("");
				}
			}
		}
		
		String localDate = LocalDate.now().toString();
		String txt = "LibraryLentBookList"+localDate+".xls";
		String filePath = "C:\\workbook\\"+txt;
		
		try {
			FileOutputStream fileOut = new FileOutputStream(filePath);
			try {
				workbook.write(fileOut);
				fileOut.close();
				libBookLentError.setVisible(true);
				libBookLentError.setText(filePath);
			} catch (IOException e2) {
				libBookLentError.setVisible(true);
				libBookLentError.setText("Write Error: "+ e2.getMessage());
			}
		} catch (FileNotFoundException e) {
			libBookLentError.setVisible(true);
			libBookLentError.setText("File Error: "+ e.getMessage());
		}
	}
	
	
	@FXML private Button returnOverdueLibHome, listLibBooksOverdueButton, spoolLibOverdueBtn,
		printLibOverdueBtn, genExcelLibOverdueBtn;
	@FXML private TableView<LibOverdueDataTable> libOverdueDataTable;
	@FXML private TableColumn<LibOverdueDataTable,String> libOverdueBooksSNoCol, libOverdueBooksISBNCol, 
		libOverdueBooksBkTitleCol, libOverdueBooksBkAuthorsCol, libOverdueLentToCol, libOverdueDaysCol;
	@FXML private Label libOverdueBooksTotal;
	@FXML private TextField libOverdueError;
	@FXML private SplitPane printPaneLibOverdue;
	
	@SuppressWarnings({ "unchecked", "rawtypes" })
	@FXML public void spoolLibOverdueButton(ActionEvent event) {
		ObservableList<LibOverdueDataTable> data = FXCollections.observableArrayList();
		Vector<LendingBook> OverdueData = new Vector<>();
		try {
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory
					("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
					
			Query query =
					entitymanager.createQuery("select e from LendingBook e ");
			OverdueData = (Vector<LendingBook>) query.getResultList();
			
			entitymanager.getTransaction().commit();
			entitymanager.close();
			emfactory.close();
			
			String sNo, isbn, bkTitle, bkAuthors, lentTo, overdueDays;
			int i = 0;
			for(LendingBook due : OverdueData) {
				LocalDate today = LocalDate.now();
				LocalDate expRet2 = due.getExpectedReturnDate();
				if(today.isAfter(expRet2) && 
						due.getLendBookStatus().equals("Available")) {
					i = i + 1;
					sNo = String.valueOf(i);
					isbn = due.getLendISBN();
					bkTitle = due.getLendBookTitle();
					bkAuthors = due.getLendBookAuthors();
					lentTo = due.getLendStdName();
					overdueDays = String.valueOf(today.toEpochDay()-expRet2.toEpochDay());
					
					data.add(new LibOverdueDataTable(
							sNo, isbn, bkTitle, bkAuthors, lentTo, overdueDays));
				}
			}
			
			libOverdueBooksSNoCol.setCellValueFactory(new PropertyValueFactory("sNo_Data"));
			libOverdueBooksISBNCol.setCellValueFactory(new PropertyValueFactory("ISBN_Data"));
			libOverdueBooksBkTitleCol.setCellValueFactory(new PropertyValueFactory("bookTitle_Data"));
			libOverdueBooksBkAuthorsCol.setCellValueFactory(new PropertyValueFactory("bookAuthors_Data"));
			libOverdueLentToCol.setCellValueFactory(new PropertyValueFactory("lentTo_Data"));
			libOverdueDaysCol.setCellValueFactory(new PropertyValueFactory("overdueDays_Data"));
			
			libOverdueDataTable.setItems(data);
			
			libOverdueBooksTotal.setText(String.valueOf(data.size()));
		}
		catch(Exception e) {
			libOverdueError.setText("Overdue error: "+ e.getMessage());
		}
	}
	
	@FXML public void printLibOverdueButton(ActionEvent event) {
		returnOverdueLibHome.setVisible(false);
		spoolLibOverdueBtn.setVisible(false);
		printLibOverdueBtn.setVisible(false); 
		genExcelLibOverdueBtn.setVisible(false);
		libOverdueError.setVisible(false);
		try {
			printNode(printPaneLibOverdue);
		}
		catch(Exception exception) {
			libOverdueError.setVisible(true);
			libOverdueError.setText("Print Error: "+ exception.getLocalizedMessage());
		}
		finally {
			returnOverdueLibHome.setVisible(true);
			spoolLibOverdueBtn.setVisible(true);
			printLibOverdueBtn.setVisible(true); 
			genExcelLibOverdueBtn.setVisible(true);
			libOverdueError.setVisible(false);
		}
	}
	
	@FXML public void genExcelLibOverdueButton(ActionEvent event) {
		Workbook workbook = new HSSFWorkbook();
		Sheet spreadSheet = workbook.createSheet("sheet");
		Row row = spreadSheet.createRow(0);
		
		for(int j = 0; j < libOverdueDataTable.getColumns().size(); j++) {
			row.createCell(j).setCellValue(libOverdueDataTable.getColumns().get(j).getText());
		}
		
		for(int i = 0; i < libOverdueDataTable.getItems().size(); i++) {
			row = spreadSheet.createRow(i + 1);
			for(int j = 0; j < libOverdueDataTable.getColumns().size(); j++) {
				if(libOverdueDataTable.getColumns().get(j).getCellData(i) != null) {
					row.createCell(j).setCellValue(libOverdueDataTable.getColumns().get(j).getCellData(i).toString());
				}
				else {
					row.createCell(j).setCellValue("");
				}
			}
		}
		
		String localDate = LocalDate.now().toString();
		String txt = "LibraryOverdueBookList"+localDate+".xls";
		String filePath = "C:\\workbook\\"+txt;
		
		try {
			FileOutputStream fileOut = new FileOutputStream(filePath);
			try {
				workbook.write(fileOut);
				fileOut.close();
				libOverdueError.setVisible(true);
				libOverdueError.setText(filePath);
			} catch (IOException e2) {
				libOverdueError.setVisible(true);
				libOverdueError.setText("Write Error: "+ e2.getMessage());
			}
		} catch (FileNotFoundException e) {
			libOverdueError.setVisible(true);
			libOverdueError.setText("File Error: "+ e.getMessage());
		}
	}
	
	//Image Processing Controller
	@FXML private TextField imageBrowseIdNo, imageBrowseFP;
	@FXML private TextArea imageBrowseName;
	@FXML private ImageView imageView;
	@FXML private MediaView mediaView;
	@FXML private DatePicker imageBrowseDate;
	@FXML Stage stage;
	
	@FXML public void imageUploadBrowseButton(ActionEvent event) throws FileNotFoundException {
//		FileChooser fileChooser = new FileChooser();
//		fileChooser.setTitle("select video for upload...");
//		File file = fileChooser.showOpenDialog(stage);
//		FileInputStream input = new FileInputStream(file.getAbsolutePath());
//		if(file != null) {
//			imageBrowseFP.setText(file.getAbsolutePath());
//			
//			Image image = new Image(input);
//			imageView.setImage(image);
//		}
		
		FileChooser fileChooser = new FileChooser();
		fileChooser.setTitle("select video for upload...");
		File file = fileChooser.showOpenDialog(stage);
//		FileInputStream input = new FileInputStream(file.getAbsolutePath());
		if(file != null) {
			
			ImageResizer sizer = new ImageResizer();
			
			try {
				//sizer.resize(file.getAbsolutePath(), "C:\\images\\photo2.jpg", 0.5);
				sizer.resize(file.getAbsolutePath(), "C:\\images\\photo.jpg", 300, 300);
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			FileInputStream input = new FileInputStream("C:\\images\\photo.jpg");
			
			imageBrowseFP.setText("C:\\images\\photo.jpg");
			
			Image image = new Image(input);
					
			imageView.setImage(image);
		}
	}
	
	@FXML private Button updateBrowseBtn, deleteBrowseImageBtn;
	@FXML public void imageBrowseDetailsInit(MouseEvent event) {
		
		if(dispUserClass.equals("Computer-Operator")) {
			updateBrowseBtn.setDisable(true);
			deleteBrowseImageBtn.setDisable(true);
		}
		
		File directory = new File("C:\\images");
		if(!(directory.exists())) {
			directory.mkdirs();
		}
		
		//create image table if not exists
		String jdbcUrl = dbURL;
		String username = dbUSR;
		String password = dbPWD;
		
		String sql2 = "create table if not exists stdImages(stdid varchar(100) not null, name varchar(255) not null, "
				+ "image blob null, date varchar(100) null, user varchar(255) not null, primary key(stdid))";
		
		try(Connection conn = DriverManager.getConnection(jdbcUrl, username, password);
				){
			//File photo = new File(filePath);
			
			PreparedStatement stmt = conn.prepareStatement(sql2);
			stmt.executeUpdate();
		}
		catch(SQLException eq) {
			imageBrowseIdNo.setText(eq.getMessage());
		}
		
		String stdId = imageBrowseIdNo.getText();
		try {
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			Students std = entitymanager.find(Students.class, stdId);
			
			imageBrowseName.setText(std.getSurName() + ", "+ std.getOtherNames());
			
			entitymanager.getTransaction().commit();
			
			entitymanager.close();
			emfactory.close();
		}
		catch(Exception e) {
			//imageBrowseIdNo.setText(e.getLocalizedMessage());
			e.printStackTrace();
		}
	}
	
	
	//upload image
	@FXML public void uploadBrowseImageButton(ActionEvent event) {
		String stdId = imageBrowseIdNo.getText().toUpperCase();
		String name = imageBrowseName.getText();
		String filePath = imageBrowseFP.getText();
		String user = dispName;
		
		LocalDate d1 = imageBrowseDate.getValue();
		
		try {
			if(d1.toString().trim().length() != 0 && name.trim().length() != 0 && 
					stdId.trim().length() != 0) {
				DateTimeFormatter formatter = DateTimeFormatter.ofLocalizedDate(FormatStyle.MEDIUM);
				
				String date = formatter.format(d1);
				
				String jdbcUrl = dbURL;
				String username = dbUSR;
				String password = dbPWD;
				
				String sql = "INSERT INTO stdImages(stdid, name, image, date, user) VALUES(?, ?, ?, ?, ?)";
				
				try(Connection conn = DriverManager.getConnection(jdbcUrl, username, password);
						){
					File photo = new File(filePath);
					
					try(FileInputStream inputStream = new FileInputStream(photo);
							PreparedStatement stmt = conn.prepareStatement(sql);
							){
						stmt.setString(1, stdId);
						stmt.setString(2, name);
						stmt.setBinaryStream(3, inputStream, photo.length());
						stmt.setString(4, date);
						stmt.setString(5, user);
						
						stmt.executeUpdate();
						
						imageBrowseFP.setText("Image Saved Successfully...");
						Alert alert = new Alert(Alert.AlertType.INFORMATION);
						alert.setContentText("Image saved sucessfully...");
						alert.setHeaderText("Image Processing");
						Optional<ButtonType> result = alert.showAndWait();
						if(result.get() == ButtonType.OK) {
							alert.close();
						}
						else {
							alert.close();
						}
					}
					catch(IOException io) {
						//imageBrowseIdNo.setText(io.getMessage());
						Alert alert = new Alert(Alert.AlertType.ERROR);
						alert.setContentText("Error: "+ io.getMessage());
						alert.setHeaderText("Error");
						Optional<ButtonType> result = alert.showAndWait();
						if(result.get() == ButtonType.OK) {
							alert.close();
						}
						else {
							alert.close();
						}
					}
				}
				catch(SQLException eq) {
					//imageBrowseIdNo.setText(eq.getMessage());
					Alert alert = new Alert(Alert.AlertType.ERROR);
					alert.setContentText("Error: "+ eq.getMessage());
					alert.setHeaderText("Error");
					Optional<ButtonType> result = alert.showAndWait();
					if(result.get() == ButtonType.OK) {
						alert.close();
					}
					else {
						alert.close();
					}
				}
			}
			else {
				Alert alert = new Alert(Alert.AlertType.ERROR);
				alert.setContentText("Invalid entries... Please ensure that you have selected an appropriate "
						+ "date and all other parameters.");
				alert.setHeaderText("INVALID ENTRIES");
				Optional<ButtonType> result = alert.showAndWait();
				if(result.get() == ButtonType.OK) {
					alert.close();
				}
				else {
					alert.close();
				}
			}
		}
		catch(Exception exxxd) {
			Alert alert = new Alert(Alert.AlertType.ERROR);
			alert.setContentText("Invalid entries... Please ensure that you have selected an appropriate "
					+ "date and all other parameters. "+ exxxd.getMessage());
			alert.setHeaderText("INVALID ENTRIES");
			Optional<ButtonType> result = alert.showAndWait();
			if(result.get() == ButtonType.OK) {
				alert.close();
			}
			else {
				alert.close();
			}
		}
	}
	
	//Retrieve image
	@FXML private TextField imageViewIdNo, imageViewSex, imageViewAge, imageViewClass, imageViewYear, 
		imageViewTerm, //imageViewTotalPay, imageViewNoPay, 
		imageViewBalance;
	@FXML private TextArea imageViewName, imageViewStatus;
	@FXML private ImageView imageView2;
	
	@FXML public void imageViewDetailsInit(MouseEvent event) {
		
		String stdNo = imageViewIdNo.getText().toUpperCase();
		
		try{
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory
					("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			Students std = entitymanager.find(Students.class, stdNo);
			
			imageViewName.setText(std.getSurName()+ ", "+std.getOtherNames());
			imageViewSex.setText(std.getSex());
	
			LocalDate dateAgeStr2 = std.getDateOfBirth();
			LocalDate currentDateStr = LocalDate.now();
			int diffDateStr = currentDateStr.getYear() - dateAgeStr2.getYear();
			imageViewAge.setText(String.valueOf(diffDateStr));
			
			if(std.getStatus().equalsIgnoreCase("Suspended")) {
				EntityManagerFactory emfactoryq = Persistence.createEntityManagerFactory
						("SchoolMgtSystem");
				EntityManager entitymanagerq = emfactoryq.createEntityManager();
				entitymanagerq.getTransaction().begin();
				SuspensionEntry entry = entitymanagerq.find(SuspensionEntry.class, stdNo);
				
				String msg = entry.getSuspendTextFlow().getLast();
				
				imageViewStatus.setText(std.getStatus()+" ("+msg+")");
				
				entitymanagerq.getTransaction().commit();
				entitymanagerq.close();
				emfactoryq.close();
			}
			else {
				imageViewStatus.setText(std.getStatus());
			}
			
			String classId = std.getEntryClassAssigned();
			
			EntityManagerFactory emfactory2 = Persistence.createEntityManagerFactory
					("SchoolMgtSystem");
			EntityManager entitymanager2 = emfactory2.createEntityManager();
			entitymanager2.getTransaction().begin();
			
			StudentClasses clas = entitymanager2.find(StudentClasses.class, classId);
			
			imageViewClass.setText(clas.getClassNo()+clas.getClassLetter());
			imageViewYear.setText(clas.getYear());
			imageViewTerm.setText(clas.getTerm());
			
			entitymanager2.getTransaction().commit();
			entitymanager2.close();
			emfactory2.close();
			
			EntityManagerFactory emfactory3 = Persistence.createEntityManagerFactory
					("SchoolMgtSystem");
			EntityManager entitymanager3 = emfactory3.createEntityManager();
			entitymanager3.getTransaction().begin();
			
			AccountBalance bal = entitymanager3.find(AccountBalance.class, stdNo);
			
			imageViewBalance.setText(fm2.format(bal.getBalance()));
			
			entitymanager3.getTransaction().commit();
			entitymanager3.close();
			emfactory3.close();
			
			entitymanager.getTransaction().commit();
			entitymanager.close();
			emfactory.close();
			
		}
		catch(Exception e) {
			imageViewIdNo.setText("Error: " + e.getLocalizedMessage());
			imageViewName.clear();
			imageViewSex.clear();
			imageViewAge.clear();
			imageViewClass.clear();
			imageViewYear.clear();
			imageViewTerm.clear();
			imageViewBalance.clear();
		}
		
		//view photo
		try {
			String stdId = stdNo; //imageViewIdNo.getText().trim().toUpperCase();
			
			String jdbcUrl = dbURL;
			String username = dbUSR;
			String password = dbPWD;
			
			String sql = "SELECT * FROM stdImages WHERE stdid = ?";
			
			try(Connection conn = DriverManager.getConnection(jdbcUrl, username, password);
					){
				
				try(PreparedStatement stmt = conn.prepareStatement(sql);
						){
					stmt.setString(1, stdId);		
					
					ResultSet result = stmt.executeQuery();
					
					
					if(result.next()) {
						InputStream imageStream = result.getBinaryStream("image");
						Image img = new Image(imageStream);
						imageView2.setImage(img);
						String stdName = result.getString("name");
						imageViewName.setText(stdName);
					}
					else {
						imageView2.setImage(null);
					}
				
					result.close();
					stmt.close();
					conn.close();
				}
				catch(SQLException io) {
					imageViewIdNo.setText(io.getMessage());
					imageViewName.clear();
					imageView2.setImage(null);
				}
			}
			catch(SQLException eq) {
				imageViewIdNo.setText(eq.getMessage());
				imageViewName.clear();
				imageView2.setImage(null);
			}
		}
		catch(Exception e) {
			imageViewIdNo.setText(e.getMessage());
			imageViewName.clear();
			imageView2.setImage(null);
		}
	}
	
	@FXML public void downloadPhotoButton(ActionEvent event) {
		try {
			String stdId = imageViewIdNo.getText().trim().toUpperCase();
			
			String jdbcUrl = dbURL;
			String username = dbUSR;
			String password = dbPWD;
			
			String sql = "SELECT * FROM stdImages WHERE stdid = ?";
			
			try(Connection conn = DriverManager.getConnection(jdbcUrl, username, password);
					){
				
				try(PreparedStatement stmt = conn.prepareStatement(sql);
						){
					
					File file2 = new File("C:\\download\\images\\");
					if(!(file2.exists())) {
						file2.mkdirs();
					}
					
					String stdNumber = stdId.replace('/', '_');
					
					File file = new File("C:\\download\\images\\"+ stdNumber+".jpg");
				
					
					stmt.setString(1, stdId);		
					
					ResultSet result = stmt.executeQuery();
					
					int i = 0;
					while(result.next()) {
						InputStream imageStream = result.getBinaryStream("image");
						OutputStream fos = new FileOutputStream(file);
						
						i++;
						int c = 0;
						
						while((c = imageStream.read()) > -1) {
							fos.write(c);
						}
						
						fos.close();
						imageStream.close();
						
						Alert alert = new Alert(Alert.AlertType.INFORMATION);
						alert.setContentText("Image downloaded to C:\\download\\images\\");
						alert.setHeaderText("SUCCESS...");
						Optional<ButtonType> resultS = alert.showAndWait();
						if(resultS.get() == ButtonType.OK) {
							alert.close();
						}
						else {
							alert.close();
						}
					}
				
					result.close();
					stmt.close();
					conn.close();
				}
				catch(SQLException io) {
					Alert alert = new Alert(Alert.AlertType.ERROR);
					alert.setContentText("SQL Error: "+io.getMessage());
					alert.setHeaderText("ERROR...");
					Optional<ButtonType> resultS = alert.showAndWait();
					if(resultS.get() == ButtonType.OK) {
						alert.close();
					}
					else {
						alert.close();
					}
				}
			}
			catch(SQLException eq) {
				Alert alert = new Alert(Alert.AlertType.ERROR);
				alert.setContentText("SQL2 Error: "+eq.getMessage());
				alert.setHeaderText("ERROR...");
				Optional<ButtonType> resultS = alert.showAndWait();
				if(resultS.get() == ButtonType.OK) {
					alert.close();
				}
				else {
					alert.close();
				}
			}
		}
		catch(Exception e) {
			Alert alert = new Alert(Alert.AlertType.ERROR);
			alert.setContentText("Exception: "+e.getMessage());
			alert.setHeaderText("ERROR...");
			Optional<ButtonType> resultS = alert.showAndWait();
			if(resultS.get() == ButtonType.OK) {
				alert.close();
			}
			else {
				alert.close();
			}
		}
	}
	
	@FXML public void startWebCamButton(ActionEvent event) throws IOException {
		Webcam webcam = Webcam.getDefault();
		webcam.open();
		
		BufferedImage image = webcam.getImage();
		ImageIO.write(image, "JPG", new File("C:\\images\\photo.jpg"));
		
		File file = new File("C:\\images\\photo.jpg");
		
		FileInputStream imgStream = new FileInputStream(file.getAbsolutePath());
		
		Image img = new Image(imgStream);
		
		imageView.setImage(img);
		
		imageBrowseFP.setText("C:\\images\\photo.jpg");
	}
	
	@FXML public void viewPhotoButton2(ActionEvent event) {
		String stdId = imageBrowseIdNo.getText().toUpperCase();
		
		String jdbcUrl = dbURL;
		String username = dbUSR;
		String password = dbPWD;
		
		String sql = "SELECT * FROM stdImages WHERE stdid = ?";
		
		try(Connection conn = DriverManager.getConnection(jdbcUrl, username, password);
				){
			
			try(PreparedStatement stmt = conn.prepareStatement(sql);
					){
				stmt.setString(1, stdId);		
				
				ResultSet result = stmt.executeQuery();
				
				
				if(result.next()) {
					InputStream imageStream = result.getBinaryStream("image");
					Image img = new Image(imageStream);
					imageView.setImage(img);
					String stdName = result.getString("name");
					imageBrowseName.setText(stdName);
				}
				else {
					imageView.setImage(null);
				}
				result.close();
				stmt.close();
				conn.close();
			}
			catch(SQLException io) {
				imageBrowseIdNo.setText(io.getMessage());
				imageBrowseName.clear();
				imageView.setImage(null);
			}
		}
		catch(SQLException eq) {
			imageBrowseIdNo.setText(eq.getMessage());
			imageBrowseName.clear();
			imageView.setImage(null);
		}
	}
	
	//update image details
	@FXML public void updateBrowseImageButton(ActionEvent event) {
		String stdId = imageBrowseIdNo.getText().toUpperCase();
		String name = imageBrowseName.getText();
		//Image image = imageView.getImage();
		String filePath = imageBrowseFP.getText();
		String user = dispName;
		
		LocalDate d1 = imageBrowseDate.getValue();
		
		try {
			if(d1.toString().trim().length() != 0 && name.trim().length() != 0 && 
					stdId.trim().length() != 0) {
				
				DateTimeFormatter formatter = DateTimeFormatter.ofLocalizedDate(FormatStyle.MEDIUM);
				
				String date = formatter.format(d1);
				
				String jdbcUrl = dbURL;
				String username = dbUSR;
				String password = dbPWD;
				
				String sql = "UPDATE stdImages SET name = ?, image = ?, date = ?, user = ? WHERE stdid = ?";
				
				try(Connection conn = DriverManager.getConnection(jdbcUrl, username, password);
						){
					File photo = new File(filePath);
					
					try(FileInputStream inputStream = new FileInputStream(photo);
							PreparedStatement stmt = conn.prepareStatement(sql);
							){
						stmt.setString(1, name);
						stmt.setBinaryStream(2, inputStream, photo.length());
						stmt.setString(3, date);
						stmt.setString(4, user);
						stmt.setString(5, stdId);
						
						stmt.executeUpdate();
						
						imageBrowseFP.setText("Image Updated Successfully...");
					}
					catch(IOException io) {
						imageBrowseIdNo.setText(io.getMessage());
						imageBrowseName.clear();
						imageView.setImage(null);
					}
				}
				catch(SQLException eq) {
					imageBrowseIdNo.setText(eq.getMessage());
					imageBrowseName.clear();
					imageView.setImage(null);
				}
				
			}
			else {
				Alert alert = new Alert(Alert.AlertType.ERROR);
				alert.setContentText("Invalid entries... Please ensure that you have selected an appropriate "
						+ "date and all other parameters.");
				alert.setHeaderText("INVALID ENTRIES");
				Optional<ButtonType> result = alert.showAndWait();
				if(result.get() == ButtonType.OK) {
					alert.close();
				}
				else {
					alert.close();
				}
			}
		}
		catch(Exception exxxd) {
			Alert alert = new Alert(Alert.AlertType.ERROR);
			alert.setContentText("Invalid entries... Please ensure that you have selected an appropriate "
					+ "date and all other parameters. "+ exxxd.getMessage());
			alert.setHeaderText("INVALID ENTRIES");
			Optional<ButtonType> result = alert.showAndWait();
			if(result.get() == ButtonType.OK) {
				alert.close();
			}
			else {
				alert.close();
			}
		}
	}
	
	//Delete Image Details
	@FXML public void deleteBrowseImageButton(ActionEvent event) {
		
		if(true) {
			Alert alert = new Alert(Alert.AlertType.CONFIRMATION);
			alert.setContentText("You are about to delete this student image details... "
					+ "Note that this action is irreversible!");
			Optional<ButtonType> result = alert.showAndWait();
			if(result.get() == ButtonType.OK) {
				String stdId = imageBrowseIdNo.getText();
				
				String jdbcUrl = dbURL;
				String username = dbUSR;
				String password = dbPWD;
				
				String sql = "DELETE FROM stdImages WHERE stdid = ?";
				
				try(Connection conn = DriverManager.getConnection(jdbcUrl, username, password);
						){
					
					try(PreparedStatement stmt = conn.prepareStatement(sql);
							){
						
						stmt.setString(1, stdId);
						
						stmt.executeUpdate();
						
						imageBrowseFP.setText("Image Deleted Successfully...");
					}
					catch(SQLException io) {
						imageBrowseIdNo.setText(io.getMessage());
						imageBrowseName.clear();
						imageView.setImage(null);
					}
				}
				catch(SQLException eq) {
					imageBrowseIdNo.setText(eq.getMessage());
					imageBrowseName.clear();
					imageView.setImage(null);
				}
			}
			else {
				alert.close();
			}
		}
	}
	
	//Std Details Request from Image View
//	@FXML public void initialize888(MouseEvent event) {
//		imageViewClassCombo.setItems(stdClassN);
//		imageViewYearCombo.setItems(years);
//		imageViewTermCombo.setItems(termN);
//	}
	
	@FXML public void submitStdDetailsReqButton(ActionEvent event) {
		String stdNo = imageViewIdNo.getText().trim().toUpperCase();
		
		try{
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory
					("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			Students std = entitymanager.find(Students.class, stdNo);
			
			imageViewName.setText(std.getSurName()+ ", "+std.getOtherNames());
			imageViewSex.setText(std.getSex());
	
			LocalDate dateAgeStr2 = std.getDateOfBirth();
			LocalDate currentDateStr = LocalDate.now();
			int diffDateStr = currentDateStr.getYear() - dateAgeStr2.getYear();
			imageViewAge.setText(String.valueOf(diffDateStr));
			imageViewStatus.setText(std.getStatus());
			
			String classId = std.getEntryClassAssigned();
			
			EntityManagerFactory emfactory2 = Persistence.createEntityManagerFactory
					("SchoolMgtSystem");
			EntityManager entitymanager2 = emfactory2.createEntityManager();
			entitymanager2.getTransaction().begin();
			
			StudentClasses clas = entitymanager2.find(StudentClasses.class, classId);
			
			imageViewClass.setText(clas.getClassNo()+clas.getClassLetter());
			imageViewYear.setText(clas.getYear());
			imageViewTerm.setText(clas.getTerm());
			
			entitymanager2.getTransaction().commit();
			entitymanager2.close();
			emfactory2.close();
			
			EntityManagerFactory emfactory3 = Persistence.createEntityManagerFactory
					("SchoolMgtSystem");
			EntityManager entitymanager3 = emfactory3.createEntityManager();
			entitymanager3.getTransaction().begin();
			
			AccountBalance bal = entitymanager3.find(AccountBalance.class, stdNo);
			
			imageViewBalance.setText(fm2.format(bal.getBalance()));
			
			entitymanager3.getTransaction().commit();
			entitymanager3.close();
			emfactory3.close();
					
			entitymanager.getTransaction().commit();
			entitymanager.close();
			emfactory.close();
			
		}
		catch(Exception e) {
			imageViewIdNo.setText("Error: " + e.getLocalizedMessage());
			imageViewName.clear();
			imageViewSex.clear();
			imageViewAge.clear();
			imageViewClass.clear();
			imageViewYear.clear();
			imageViewTerm.clear();
			imageViewBalance.clear();
		}
		
		//view photo
		try {
			String stdId = imageViewIdNo.getText().trim().toUpperCase();
			
			String jdbcUrl = dbURL;
			String username = dbUSR;
			String password = dbPWD;
			
			String sql = "SELECT * FROM stdImages WHERE stdid = ?";
			
			try(Connection conn = DriverManager.getConnection(jdbcUrl, username, password);
					){
				
				try(PreparedStatement stmt = conn.prepareStatement(sql);
						){
					stmt.setString(1, stdId);		
					
					ResultSet result = stmt.executeQuery();
					
					
					if(result.next()) {
						InputStream imageStream = result.getBinaryStream("image");
						Image img = new Image(imageStream);
						imageView2.setImage(img);
						String stdName = result.getString("name");
						imageViewName.setText(stdName);
					}
					else {
						imageView2.setImage(null);
					}
				
					result.close();
					stmt.close();
					conn.close();
				}
				catch(SQLException io) {
					imageViewIdNo.setText(io.getMessage());
					imageViewName.clear();
					imageView2.setImage(null);
				}
			}
			catch(SQLException eq) {
				imageViewIdNo.setText(eq.getMessage());
				imageViewName.clear();
				imageView2.setImage(null);
			}
		}
		catch(Exception e) {
			imageViewIdNo.setText(e.getMessage());
			imageViewName.clear();
			imageView2.setImage(null);
		}
	}
	
	//Student without image capture List Report Controller
	@FXML private Button studentListBtn2, returnSpoolStdListBtn2, genExcelSpoolStdListBtn2, printStdListBtn2, 
		spoolStudentListBtn2;
	@FXML TextField errorStdList_TF2;
	@FXML TableView<SpoolStdListDataTable> spoolStdListDataTable2;
	@FXML TableColumn<SpoolStdListDataTable,String> stdListSNoCol2, stdListStdIDCol2,
		stdListNameCol2, stdListSexCol2, stdListAgeCol2, stdListClassCol2,
		stdListParentsCol2, stdListPhoneCol2, stdListEmailCol2;
	
	@SuppressWarnings({ "unchecked", "rawtypes" })
	@FXML public void spoolStudentListButton2(ActionEvent event) {
		
		errorStdList_TF2.setVisible(false);
	
		ObservableList<SpoolStdListDataTable> data = FXCollections.observableArrayList();
		
		LinkedList<String> DataStudentId = new LinkedList<>();
		LinkedList<String> DataSurName = new LinkedList<>();
		LinkedList<String> DataOtherNames = new LinkedList<>();
		LinkedList<String> Sex = new LinkedList<>();
		LinkedList<LocalDate> DOB = new LinkedList<>();
		LinkedList<String> Parents = new LinkedList<>();
		LinkedList<String> Phone = new LinkedList<>();
		LinkedList<String> Email = new LinkedList<>();
		
		LinkedList<String> StdImagesId = new LinkedList<>();
		
		//std images
			final String JDBC_Driver2 = "com.mysql.jdbc.Driver";
			final String DB_URL2 = dbURL;
			final String DB_User2 = dbUSR;
			final String DB_PWD2 = dbPWD;
			
			
			Connection conn2 = null;
			PreparedStatement stmt2 = null;
			
			try {
				Class.forName(JDBC_Driver2);
				conn2 = DriverManager.getConnection(DB_URL2, DB_User2, DB_PWD2);
				
				String sql2;
				sql2 = "select * from StdImages;";
				
				stmt2 = conn2.prepareStatement(sql2);
				
				ResultSet rs2 = stmt2.executeQuery();
				
				while(rs2.next()) {
					StdImagesId.add(rs2.getString("STDID"));
				}
				rs2.close();
				stmt2.close();
				conn2.close();
			}
			catch(SQLException es) {
				errorStdList_TF2.setVisible(true);
				errorStdList_TF2.setText("Error JDBC: "+ es.getSQLState());
			}
		catch(Exception es2) {
			errorStdList_TF2.setVisible(true);
			errorStdList_TF2.setText("Error JDBC: "+ es2.getMessage());
		}
		finally {
			try {
				if(stmt2 != null ) {
					stmt2.close();
				}
			}
			catch(SQLException ces) {
				errorStdList_TF2.setVisible(true);
				errorStdList_TF2.setText("Error JDBC: "+ ces.getSQLState());
			}
			try {
				if(conn2 != null ) {
					conn2.close();
				}
			}
			catch(Exception ces2) {
				errorStdList_TF2.setVisible(true);
				errorStdList_TF2.setText("JDBC: "+ces2.getMessage());
			}
		}
		
		//std
		try {
			final String JDBC_Driver = "com.mysql.jdbc.Driver";
			final String DB_URL = dbURL;
			final String DB_User = dbUSR;
			final String DB_PWD = dbPWD;
			
			
			Connection conn = null;
			PreparedStatement stmt = null;
			
			try {
				Class.forName(JDBC_Driver);
				conn = DriverManager.getConnection(DB_URL, DB_User, DB_PWD);
				
				String sql;
				sql = "select * from Students;";
				
				stmt = conn.prepareStatement(sql);
				
				ResultSet rs = stmt.executeQuery();
				
				while(rs.next()) {
					DataStudentId.add(rs.getString("ID"));
					DataSurName.add(rs.getString("SURNAME"));
					DataOtherNames.add(rs.getString("OTHERNAMES"));
					Sex.add(rs.getString("SEX"));
					DOB.add(rs.getDate("DATEOFBIRTH").toLocalDate());
					Parents.add(rs.getString("FATHERNAME"));
					Phone.add(rs.getString("FATHERPHONE"));
					Email.add(rs.getString("EMAIL"));
				}
				rs.close();
				stmt.close();
				conn.close();
			}
			catch(SQLException es) {
				errorStdList_TF2.setVisible(true);
				errorStdList_TF2.setText("Error JDBC: "+ es.getSQLState());
			}
		catch(Exception es2) {
			errorStdList_TF2.setVisible(true);
			errorStdList_TF2.setText("Error JDBC: "+ es2.getMessage());
		}
		finally {
			try {
				if(stmt != null ) {
					stmt.close();
				}
			}
			catch(SQLException ces) {
				errorStdList_TF2.setVisible(true);
				errorStdList_TF2.setText("Error JDBC: "+ ces.getSQLState());
			}
			try {
				if(conn != null ) {
					conn.close();
				}
			}
			catch(Exception ces2) {
				errorStdList_TF2.setVisible(true);
				errorStdList_TF2.setText("JDBC: "+ces2.getMessage());
			}
		}
		
		int k = 1;
		for(int i = 1; i <= DataStudentId.size(); i++) {
			
			LocalDate dob2 = (LocalDate) DOB.get(i-1);
			LocalDate dob3 = LocalDate.now();
			int dobx = dob3.getYear() - dob2.getYear();
			String stdIdy = DataStudentId.get(i-1);
			String stdClass = "";
			try {
				EntityManagerFactory emfactory = Persistence.createEntityManagerFactory
						("SchoolMgtSystem");
				EntityManager entitymanager = emfactory.createEntityManager();
				entitymanager.getTransaction().begin();
				
				Students std = entitymanager.find(Students.class, stdIdy);
				//LinkedHashSet<String> set = std.getAnnualScoresTotalIdSet();
				String classId = std.getEntryClassAssigned();
				//for(String str : set) {
					//if(str.contains(stdIdy)) {
						try {
							EntityManagerFactory emfactory2 = Persistence.createEntityManagerFactory
									("SchoolMgtSystem");
							EntityManager entitymanager2 = emfactory2.createEntityManager();
							entitymanager2.getTransaction().begin();
							
							StudentClasses myClass = entitymanager2.find(StudentClasses.class, classId);
							stdClass = myClass.getClassNo()+myClass.getClassLetter();
							
							entitymanager2.getTransaction().commit();
							entitymanager2.close();
							emfactory2.close();
						}
						catch(Exception except) {
							except.printStackTrace();
						}
					//}
				//}
				
				entitymanager.getTransaction().commit();
				entitymanager.close();
				emfactory.close();
				}
				catch(Exception ex) {
					ex.printStackTrace();
				}
				
				if(!(StdImagesId.contains(stdIdy))) {
					int sNo = k;
					String countX = String.valueOf(sNo);
					String stdIdX = stdIdy;
					String nameX = DataSurName.get(i-1)+" "+DataOtherNames.get(i-1);
					String sexX = Sex.get(i-1);
					String ageX = String.valueOf(dobx);
					String classX = stdClass;
					String parentX = Parents.get(i-1);
					String phoneX = Phone.get(i-1);
					String emailX = Email.get(i-1);	
					
					data.add(new SpoolStdListDataTable(
						countX,
						stdIdX,
						nameX,
						sexX,
						ageX,
						classX,
						parentX,
						phoneX,
						emailX
						));
					k = k + 1;
				}
				
			}
				
			stdListSNoCol2.setCellValueFactory(new PropertyValueFactory("sNo_Data"));
			stdListStdIDCol2.setCellValueFactory(new PropertyValueFactory("studentID_Data"));
			stdListNameCol2.setCellValueFactory(new PropertyValueFactory("name_Data"));
			stdListSexCol2.setCellValueFactory(new PropertyValueFactory("sex_Data"));
			stdListAgeCol2.setCellValueFactory(new PropertyValueFactory("age_Data"));
			stdListClassCol2.setCellValueFactory(new PropertyValueFactory("stdClass_Data"));
			stdListParentsCol2.setCellValueFactory(new PropertyValueFactory("parent_Data"));
			stdListPhoneCol2.setCellValueFactory(new PropertyValueFactory("phone_Data"));
			stdListEmailCol2.setCellValueFactory(new PropertyValueFactory("email_Data"));
			
			try {	
				spoolStdListDataTable2.setItems(data);
			}
			catch(Exception ex) {
				errorStdList_TF2.setVisible(true);
				errorStdList_TF2.setText("Set Data Error: " + ex.getLocalizedMessage());
			}
		}
		catch(Exception e) {
			errorStdList_TF2.setVisible(true);
			errorStdList_TF2.setText("Error: " + e.getLocalizedMessage());
		}
	}
	
	@FXML private VBox printPaneStdList2;
	@FXML public void printStdListButton2(ActionEvent event) {
		spoolStudentListBtn2.setVisible(false);
		returnSpoolStdListBtn2.setVisible(false);
		genExcelSpoolStdListBtn2.setVisible(false);
		printStdListBtn2.setVisible(false);
		errorStdList_TF2.setVisible(false);
		
		try {
			printNode(printPaneStdList2);
		}
		catch(Exception exception) {
			errorStdList_TF2.setVisible(true);
			errorStdList_TF2.setText("Print Error: "+ exception.getLocalizedMessage());
		}
		finally {
			spoolStudentListBtn2.setVisible(true);
			returnSpoolStdListBtn2.setVisible(true);
			genExcelSpoolStdListBtn2.setVisible(true);
			printStdListBtn2.setVisible(true);
			errorStdList_TF2.setVisible(false);
		}
	}

	@FXML public void genExcelStdListButton2(ActionEvent event) {
		
		Workbook workbook = new HSSFWorkbook();
		Sheet spreadSheet = workbook.createSheet("worksheet");
		Row row = spreadSheet.createRow(0);
		
		for(int j = 0; j < spoolStdListDataTable2.getColumns().size(); j++) {
			row.createCell(j).setCellValue(spoolStdListDataTable2.getColumns().get(j).getText());
		}
		
		for(int i = 0; i < spoolStdListDataTable2.getItems().size(); i++) {
			row = spreadSheet.createRow(i + 1);
			for(int j = 0; j < spoolStdListDataTable2.getColumns().size(); j++) {
				if(spoolStdListDataTable2.getColumns().get(j).getCellData(i) != null) {
					row.createCell(j).setCellValue(spoolStdListDataTable2.getColumns().get(j).getCellData(i).toString());
				}
				else {
					row.createCell(j).setCellValue("");
				}
			}
		}
		
		String str = LocalDate.now().format(formatter);
		String txt = "stdNoImgList"+str+".xls";
		String filePath = "C:\\workbook\\"+txt;
		
		try {
			FileOutputStream fileOut = new FileOutputStream(filePath);
			try {
				workbook.write(fileOut);
				fileOut.close();
				errorStdList_TF2.setVisible(true);
				errorStdList_TF2.setText(filePath);
			} catch (IOException e2) {
				errorStdList_TF2.setVisible(true);
				errorStdList_TF2.setText("Write Error: "+ e2.getMessage());
			}
		} catch (FileNotFoundException e) {
			errorStdList_TF2.setVisible(true);
			errorStdList_TF2.setText("File Error: "+ e.getMessage());
		}
	}
	
	//CASH MANAGEMENT MODULE
	/***********************************************************************************/
	//Inventory Entry Controller
	@FXML private TextField inventoryTagNo, inventorySNo, inventoryName, inventoryModel, inventoryAOInfo,
		inventoryPAmt, inventoryAssignedTo, inventoryAge, inventoryDeptHead;
	@FXML private TextArea inventoryDescription, inventoryOfficeUnit;
	@FXML private DatePicker inventoryDOP, inventoryDOE;
	@FXML private ComboBox<String> inventoryStatus;
	@FXML private Button returnEnterInventoryBtn, enterInventoryBtn, enterInventoryPad,
		returnEnterInventoryPad;
	
	ObservableList<String> inventState = FXCollections.observableArrayList("In-Use","Sold","Lost/Misplaced",
			"Confisticated","Available","Not Available","select option");
	
	
	@FXML public void inventoryCombo(MouseEvent event) {
		inventoryStatus.setItems(inventState);
	}
		
	@FXML public void submitInventoryButton(ActionEvent event) {
		String tagNo = inventoryTagNo.getText().toUpperCase();
		String SNo = inventorySNo.getText().toUpperCase();
		String itemName = inventoryName.getText();
		String model = inventoryModel.getText();
		//String name = itemName +", "+model;
		String AOI = inventoryAOInfo.getText();
		double pAmt = Double.parseDouble(inventoryPAmt.getText());
		String assignedTo = inventoryAssignedTo.getText();
		
		int num = inventoryDOP.getValue().getYear();
		int num2 = LocalDate.now().getYear();
		
		int age = num2 - num;
		String HOD = inventoryDeptHead.getText();
		String description = inventoryDescription.getText();
		String unit = inventoryOfficeUnit.getText();
		String status = inventoryStatus.getValue();
		
		LocalDate dop = inventoryDOP.getValue();
		LocalDate doe = inventoryDOE.getValue();
		
		try {
			CreateInventory inventory = new CreateInventory();
			inventory.createInventory(tagNo, SNo, itemName, model, description, AOI, dop, assignedTo, 
					unit, HOD, status, doe, dispName, pAmt, age);
		}
		catch(Exception tag) {
			inventoryTagNo.setText("Error: "+tag.getMessage());
		}
		finally {
			inventorySNo.clear(); 
			inventoryName.clear();
			inventoryModel.clear(); 
			inventoryAOInfo.clear();
			inventoryPAmt.clear();
			inventoryAssignedTo.clear();
			inventoryAge.setText(String.valueOf(age));
			inventoryDeptHead.clear();
			inventoryDescription.clear();
			inventoryOfficeUnit.clear();
			inventoryDOP.setValue(LocalDate.now());
			inventoryDOE.setValue(LocalDate.now());
			inventoryStatus.setValue("select option");
		}
	}
	
	//Find Inventory Item
	@FXML public void findInventoryItemButton(ActionEvent event) {
		String tagNo = inventoryTagNo.getText().toUpperCase();
		try {
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			Inventory inv = entitymanager.find(Inventory.class, tagNo);
			
			inventorySNo.setText(inv.getSerialNo());
			inventoryName.setText(inv.getName());
			inventoryModel.setText(inv.getModel()); 
			inventoryAOInfo.setText(inv.getAnyOI());
			inventoryPAmt.setText(String.valueOf(inv.getpAmount()));
			inventoryAssignedTo.setText(inv.getAssignedTo());
			inventoryAge.setText(String.valueOf(inv.getItemAge()));
			inventoryDeptHead.setText(inv.getDeptHead());
			inventoryDescription.setText(inv.getDescription());
			inventoryOfficeUnit.setText(inv.getOfficeUnit());
			inventoryDOP.setValue(inv.getDOP());
			inventoryDOE.setValue(inv.getDOE());
			inventoryStatus.setValue(inv.getItemStatus());
			
			entitymanager.getTransaction().commit();
			entitymanager.close();
			emfactory.close();
		}
		catch(Exception e) {
			inventoryTagNo.setText("Error: "+e.getMessage());
			inventorySNo.clear(); 
			inventoryName.clear();
			inventoryModel.clear(); 
			inventoryAOInfo.clear();
			inventoryPAmt.clear();
			inventoryAssignedTo.clear();
			inventoryAge.clear();
			inventoryDeptHead.clear();
			inventoryDescription.clear();
			inventoryOfficeUnit.clear();
			inventoryDOP.setValue(LocalDate.now());
			inventoryDOE.setValue(LocalDate.now());
			inventoryStatus.setValue("select option");
		}
	}
	
	//Update Inventory Item
	@FXML public void updateInventoryItemButton(ActionEvent event) {
		String tagNo = inventoryTagNo.getText().toUpperCase();
		String SNo = inventorySNo.getText().toUpperCase();
		String itemName = inventoryName.getText();
		String model = inventoryModel.getText();
		//String name = itemName +", "+model;
		String AOI = inventoryAOInfo.getText();
		double pAmt = Double.parseDouble(inventoryPAmt.getText());
		String assignedTo = inventoryAssignedTo.getText();
		
		int num = inventoryDOP.getValue().getYear();
		int num2 = LocalDate.now().getYear();
		
		LocalDate dop = inventoryDOP.getValue();
		LocalDate doe = inventoryDOE.getValue();
		
		int age = num2 - num;
		String HOD = inventoryDeptHead.getText();
		String description = inventoryDescription.getText();
		String unit = inventoryOfficeUnit.getText();
		String status = inventoryStatus.getValue();
		try {
			UpdateInventory update = new UpdateInventory();
			update.updateInventory(tagNo, SNo, itemName, model, description, AOI, dop, assignedTo, 
					unit, HOD, status, doe, dispName, pAmt, age);
		}
		catch(Exception e) {
			inventoryTagNo.setText("Error: "+e.getMessage());
			inventorySNo.clear(); 
			inventoryName.clear();
			inventoryModel.clear(); 
			inventoryAOInfo.clear();
			inventoryPAmt.clear();
			inventoryAssignedTo.clear();
			inventoryAge.clear();
			inventoryDeptHead.clear();
			inventoryDescription.clear();
			inventoryOfficeUnit.clear();
			inventoryDOP.setValue(LocalDate.now());
			inventoryDOE.setValue(LocalDate.now());
			inventoryStatus.setValue("select option");
		}
		finally {
			inventorySNo.clear(); 
			inventoryName.clear();
			inventoryModel.clear(); 
			inventoryAOInfo.clear();
			inventoryPAmt.clear();
			inventoryAssignedTo.clear();
			inventoryAge.clear();
			inventoryDeptHead.clear();
			inventoryDescription.clear();
			inventoryOfficeUnit.clear();
			inventoryDOP.setValue(LocalDate.now());
			inventoryDOE.setValue(LocalDate.now());
			inventoryStatus.setValue("select option");
		}
	}
	
	//Delete Inventory
	@FXML public void deleteInventoryItemButton(ActionEvent event) {
		String tagNo = inventoryTagNo.getText().toUpperCase();
		try {
			DeleteInventory inv = new DeleteInventory();
			inv.deleteInventory(tagNo);
		}
		catch(Exception e) {
			inventoryTagNo.setText("Error: "+e.getMessage());
			inventorySNo.clear(); 
			inventoryName.clear();
			inventoryModel.clear(); 
			inventoryAOInfo.clear();
			inventoryPAmt.clear();
			inventoryAssignedTo.clear();
			inventoryAge.clear();
			inventoryDeptHead.clear();
			inventoryDescription.clear();
			inventoryOfficeUnit.clear();
			inventoryDOP.setValue(LocalDate.now());
			inventoryDOE.setValue(LocalDate.now());
			inventoryStatus.setValue("select option");
		}
		finally {
			inventorySNo.clear(); 
			inventoryName.clear();
			inventoryModel.clear(); 
			inventoryAOInfo.clear();
			inventoryPAmt.clear();
			inventoryAssignedTo.clear();
			inventoryAge.clear();
			inventoryDeptHead.clear();
			inventoryDescription.clear();
			inventoryOfficeUnit.clear();
			inventoryDOP.setValue(LocalDate.now());
			inventoryDOE.setValue(LocalDate.now());
			inventoryStatus.setValue("select option");
		}
	}
	
	//Inventory List
	@FXML private Button returnInvListBtn, invListBtn, spoolInventoryListBtn, GenInventoryListExcelBtn,
		printInventoryListBtn;
	@FXML private SplitPane inventorySplitPane;
	@FXML private TableView <InventoryDataTable> inventoryDataTable;
	@FXML private TableColumn<InventoryDataTable,String> inventorySNoCol, inventoryTagNoCol, inventorySerialCol,
		inventoryNameModelCol, inventoryAgeCol, inventoryDeptCol, inventoryStatusCol;
	@FXML private TextField inventoryError_TF;
	@FXML private Label inventoryTotal;
	
	@SuppressWarnings({ "rawtypes", "unchecked" })
	@FXML public void spoolInventoryListButton(ActionEvent event) {
		ObservableList<InventoryDataTable> data = FXCollections.observableArrayList();
		Vector<Inventory> InventoryData = new Vector<>();
		try {
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory
					("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
					
			Query query =
					entitymanager.createQuery("select e from Inventory e ");
			InventoryData = (Vector<Inventory>) query.getResultList();
			
			entitymanager.getTransaction().commit();
			entitymanager.close();
			emfactory.close();
			
			String sNo, tagNo, serialNo, nameModel, age, deptUnit, status;
			int i = 0;
			for(Inventory list : InventoryData) {
				
				int today = LocalDate.now().getYear();
				String date = list.getDOP().format(formatter);
				LocalDate date2 = list.getDOP();
				int yest = date2.getYear();
				int yr = today - yest;
				
				i = i + 1;
				sNo = String.valueOf(i);
				tagNo = list.getTagNo();
				serialNo = list.getSerialNo();
				nameModel = list.getName() +", "+list.getModel();
				age = String.valueOf(yr);
				deptUnit = list.getOfficeUnit();
				status = list.getItemStatus();
				
				data.add(new InventoryDataTable(
						sNo, tagNo, serialNo, nameModel, age, deptUnit, status));
			}
			
			inventorySNoCol.setCellValueFactory(new PropertyValueFactory("sNo_Data"));
			inventoryTagNoCol.setCellValueFactory(new PropertyValueFactory("tagNo_Data"));
			inventorySerialCol.setCellValueFactory(new PropertyValueFactory("serialNo_Data"));
			inventoryNameModelCol.setCellValueFactory(new PropertyValueFactory("nameModel_Data"));
			inventoryAgeCol.setCellValueFactory(new PropertyValueFactory("age_Data"));
			inventoryDeptCol.setCellValueFactory(new PropertyValueFactory("deptUnit_Data"));
			inventoryStatusCol.setCellValueFactory(new PropertyValueFactory("status_Data"));
			
			inventoryDataTable.setItems(data);
			
			inventoryTotal.setText(String.valueOf(data.size()));
		}
		catch(Exception e) {
			inventoryError_TF.setVisible(true);
			inventoryError_TF.setText("inventory list error: "+ e.getMessage());
		}
	}
	
	@FXML public void printInventoryList(ActionEvent event) {
		spoolInventoryListBtn.setVisible(false);
		returnInvListBtn.setVisible(false);
		GenInventoryListExcelBtn.setVisible(false); 
		printInventoryListBtn.setVisible(false);
		inventoryError_TF.setVisible(false);
		try {
			printNode(inventorySplitPane);
		}
		catch(Exception exception) {
			inventoryError_TF.setVisible(true);
			inventoryError_TF.setText("Print Error: "+ exception.getLocalizedMessage());
		}
		finally {
			spoolInventoryListBtn.setVisible(true);
			returnInvListBtn.setVisible(true);
			GenInventoryListExcelBtn.setVisible(true); 
			printInventoryListBtn.setVisible(true);
			inventoryError_TF.setVisible(false);
		}
	}
	
	@FXML public void GenInventoryListExcel(ActionEvent event) {
		Workbook workbook = new HSSFWorkbook();
		Sheet spreadSheet = workbook.createSheet("sheet");
		Row row = spreadSheet.createRow(0);
		
		for(int j = 0; j < inventoryDataTable.getColumns().size(); j++) {
			row.createCell(j).setCellValue(inventoryDataTable.getColumns().get(j).getText());
		}
		
		for(int i = 0; i < inventoryDataTable.getItems().size(); i++) {
			row = spreadSheet.createRow(i + 1);
			for(int j = 0; j < inventoryDataTable.getColumns().size(); j++) {
				if(inventoryDataTable.getColumns().get(j).getCellData(i) != null) {
					row.createCell(j).setCellValue(inventoryDataTable.getColumns().get(j).getCellData(i).toString());
				}
				else {
					row.createCell(j).setCellValue("");
				}
			}
		}
		
		String localDate = LocalDate.now().format(formatter);
		String txt = "AssetList"+localDate+".xls";
		String filePath = "C:\\workbook\\"+txt;
		
		try {
			FileOutputStream fileOut = new FileOutputStream(filePath);
			try {
				workbook.write(fileOut);
				fileOut.close();
				inventoryError_TF.setVisible(true);
				inventoryError_TF.setText(filePath);
			} catch (IOException e2) {
				inventoryError_TF.setVisible(true);
				inventoryError_TF.setText("Write Error: "+ e2.getMessage());
			}
		} catch (FileNotFoundException e) {
			inventoryError_TF.setVisible(true);
			inventoryError_TF.setText("File Error: "+ e.getMessage());
		}
	}
	
	//Cash Office
	DecimalFormat fm = new DecimalFormat("#0.00");
	@FXML private Button enterCashPadBtn, returnEnterCashPadBtn, enterABBtn, returnEnterABBtn;
	@FXML private TextField cardNoBalanceEnquiry, ABBalanceEnquiry;
	@FXML private TextField nameBalanceEnquiry;
	@FXML private DatePicker DateBalanceEnquiry;
	
	@FXML public void initBalEnquiry(MouseEvent event) {
		DecimalFormat fm2 = new DecimalFormat("#0,000.00");
		DateBalanceEnquiry.setValue(LocalDate.now());
		String cardNo = cardNoBalanceEnquiry.getText().toUpperCase();
		try {
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			AccountBalance ab = entitymanager.find(AccountBalance.class, cardNo);
			
			nameBalanceEnquiry.setText(ab.getOtherNames()+" "+ab.getSurName());
			ABBalanceEnquiry.setText(fm2.format(ab.getBalance()));
			
			entitymanager.getTransaction().commit();
			entitymanager.close();
			emfactory.close();
		}
		catch(Exception e) {
			//cardNoBalanceEnquiry.setText("Error getting balance: "+ e.getMessage());
			e.printStackTrace();
			nameBalanceEnquiry.clear();
			ABBalanceEnquiry.clear();
		}
	}
	
	
	//Open Till/GL Accounts
	@FXML private Button enterOpenTillGLBtn, returnEnterOpenTillGLBtn;
	@FXML private TextField tillGLAcctName;
	@FXML private ComboBox<String> tillGLAcctNo, tillUser, tillGLAcctClass, tillGLAcctCategory;
	@FXML private DatePicker tillGLTxnDate;
	ObservableList<String> tillGLAccts = FXCollections.observableArrayList("11001","11002",
			"11003","11004","11005","21001","21002","21003","21004","21005","21006","21007",
			"21008","21009","21010");
	ObservableList<String> tillGLClass = FXCollections.observableArrayList("Till","GL");
	ObservableList<String> tUser = FXCollections.observableArrayList();
	
	
	@SuppressWarnings("unchecked")
	@FXML public void initializeTillGLCombo(MouseEvent event) {
	
		tillGLAcctNo.setItems(tillGLAccts);
		tillGLAcctCategory.setItems(billCategory);
		tillGLAcctClass.setItems(tillGLClass);
		try {
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			Vector<Users> userData = new Vector<>();
			Query queryX =
					entitymanager.createQuery("select e from Users e ");
			userData = (Vector<Users>) queryX.getResultList();
			
			for(Users x : userData) {
				if(!(tUser.contains(x.getName()))) {
					tUser.add(x.getName());
				}
			}
			
			tillUser.setItems(tUser);
			
			entitymanager.getTransaction().commit();
			entitymanager.close();
			emfactory.close();
		}
		catch(Exception e) {
			tillGLAcctName.setText("Error initializing tillUser: "+ e.getMessage());
		}
	}
	
	//Create Till/GL Account
	@FXML public void createTillGLAcctButton(ActionEvent event) {
		String tillAcct = tillGLAcctNo.getValue();
		String tillName = tillGLAcctName.getText();
		String tu = tillUser.getValue();
		String clas = tillGLAcctClass.getValue();
		String category = tillGLAcctCategory.getValue();
		LocalDate date = tillGLTxnDate.getValue();
		
		LocalDateTime dateTime = LocalDateTime.now();
		
		String TIDStr = tillAcct + dateTime;
		CreateTransactions transaction = new CreateTransactions();
		try {
			transaction.createTillAccount(tillAcct, tillName, 0.0, tu, clas, category, date);
			transaction.initializeTillAccount(tillAcct, tillName, tu, clas, date, dateTime, dispName);
//			transaction.createTillTxnSeqSet(TIDStr, 0);
			transaction.createTTIDSet(TIDStr, tillAcct);
		}
		catch(Exception e) {
			tillGLAcctNo.setValue("Create till/GL acct error: "+ e.getMessage());
		}
		finally {
			tillGLAcctName.clear();
			tillUser.setValue("select option");
			tillGLAcctClass.setValue("select option");
			tillGLTxnDate.setValue(LocalDate.now());
		}
	}
	
	//Find Till/GL Accounts
	@FXML public void findTillGLAcctButton(ActionEvent event) {
		String tillGlAcct = tillGLAcctNo.getValue();
		try {
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			Tills till = entitymanager.find(Tills.class, tillGlAcct);
			
			tillGLAcctName.setText(till.getTillName());
			tillUser.setValue(till.getTillUser());
			tillGLAcctClass.setValue(till.getTillAcctClassification());
			tillGLAcctCategory.setValue(till.getTillCategory());
			tillGLTxnDate.setValue(till.getTxnDate());
			
			entitymanager.getTransaction().commit();
			entitymanager.close();
			emfactory.close();
		}
		catch(Exception e) {
			tillGLAcctNo.setValue("Find till/GL acct error: "+ e.getMessage());
			tillGLAcctName.clear();
			tillUser.setValue("select option");
			tillGLAcctClass.setValue("select option");
			tillGLAcctCategory.setValue("select option");
			tillGLTxnDate.setValue(LocalDate.now());
		}
	}
	
	//Update Till/GL Account
	@FXML public void updateTillGLButton(ActionEvent event) {
		String tillAcct = tillGLAcctNo.getValue();
		String tillName = tillGLAcctName.getText();
		String tu = tillUser.getValue();
		String clas = tillGLAcctClass.getValue();
		String category = tillGLAcctCategory.getValue();
		LocalDate date = tillGLTxnDate.getValue();
		
		UpdateTransactions transaction = new UpdateTransactions();
		try {
			transaction.updateTillAccount(tillAcct, tillName, tu, clas, category, date);
			transaction.updateTillTransactions(tillAcct, tillName, date);
		}
		catch(Exception e) {
			tillGLAcctNo.setValue("Update till/GL acct error: "+ e.getMessage());
		}
		finally {
			tillGLAcctName.clear();
			tillUser.setValue("select option");
			tillGLAcctClass.setValue("select option");
			tillGLTxnDate.setValue(LocalDate.now());
		}
	}
	
	//Delete Till/GL Account
	@FXML public void deleteTillGLButton(ActionEvent event) {
		
		String tillGlAcct = tillGLAcctNo.getValue().toUpperCase();
		
		if(true) {
			Alert alert = new Alert(AlertType.CONFIRMATION);
			alert.setTitle("Deleting an acctount...");
			alert.setContentText("Note that this process is irreversible!");
			Optional<ButtonType> result = alert.showAndWait();
			if(result.get() == ButtonType.OK) {
				DeleteTransactions transaction = new DeleteTransactions();
				try {
					transaction.deleteTillGL(tillGlAcct);
					transaction.deleteTillTransactions(tillGlAcct);
				}
				catch(Exception e) {
					tillGLAcctNo.setValue("Find till/GL acct error: "+ e.getMessage());
				}
				finally {
					tillGLAcctName.clear();
					tillUser.setValue("select option");
					tillGLAcctClass.setValue("select option");
					tillGLTxnDate.setValue(LocalDate.now());
				}
			}
			else {
				alert.close();
			}
		}
		
	}
	
	//Tellering
	@FXML private Button tellerButton, returnTellerButton;
	@FXML TextField accountNumberTF, currentBalanceTF,
		creditsTF, debitsTF, txnTypeCashBal, txnTypeTellerBal, txnTypePOSBal;
	@FXML ComboBox<String> txnCodeTF, txnTypeCombo, TIDTF, depWithdrawalTF, teller_Session,
		teller_Term, accountNameTF;
	@FXML DatePicker txnDateTF; 
	@FXML TextField tillBalanceTF, amountTF, availableBalanceTF, txnSeqNoSetTF;
	@FXML ComboBox<String> tillAcctNoTF;
	@FXML TextField tillAcctNameTF;
	
	ObservableList<String> txnCodeList = FXCollections.observableArrayList("CR","DR");
	ObservableList<String> txnType = FXCollections.observableArrayList("Cash","Teller","POS");
	ObservableList<String> receiptCombo = FXCollections.observableArrayList();
	ObservableList<String> teller_DESC = FXCollections.observableArrayList("School Fee","WAEC Fee",
			"NECO Fee","Boarding Fee","Maintenance Fee","Junior-WAEC Fee","Other Fees");
	ObservableList<String> xCombo = FXCollections.observableArrayList();
	
	DecimalFormat fm2 = new DecimalFormat("#0,000.00");
	
	@FXML public void tellerNameInit(MouseEvent event) {
		searchByName(accountNumberTF, accountNameTF, xCombo);
	}
	
	@FXML private void intialize2(MouseEvent event) {
		txnTypeCombo.setItems(txnType);
		txnCodeTF.setItems(txnCodeList);
		//teller_Session.setItems(years);
		populateYear(teller_Session);
		teller_Term.setItems(termN);
		depWithdrawalTF.setItems(teller_DESC);
	}
	
	@FXML public void intialize2ReceiptReprint(MouseEvent event) {
		//Access Control - Receipt Reprint
		if(dispUserClass.equalsIgnoreCase("Cashier")) {
			TIDTF.setDisable(true);
		}
		
		//TID for receipt re-print
		ObservableList<String> receiptCombo = FXCollections.observableArrayList();
		
		String stdNo = accountNumberTF.getText().trim().toUpperCase();
	
		if(validateStdNo(stdNo)) {
			Vector<Transactions> userData2 = new Vector<>();
			try {
				EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
				EntityManager entitymanager = emfactory.createEntityManager();
				entitymanager.getTransaction().begin();
				
//				Query query2 =
//						entitymanager.createQuery("select e from Transactions e ");
//				userData2 = (Vector<Transactions>) query2.getResultList();
				
				userData2 = getTIDByStdNo(entitymanager, stdNo);
				
				for(Transactions x : userData2) {
					if(x.getTxnCode().equalsIgnoreCase("CR") || x.getTxnCode().equalsIgnoreCase("DR")) {
						if(!(receiptCombo.contains(x.getTID()))) {
							receiptCombo.add(x.getTID());
						}
					}
				}
				
				TIDTF.setItems(receiptCombo);
				
				//entitymanager.getTransaction().commit();
				entitymanager.close();
				emfactory.close();
				
				new AutoCompleteComboBoxListener<>(TIDTF);
			}
			catch(Exception e) {
				e.printStackTrace();
			}
		}
		else {
			Alert alert = new Alert(Alert.AlertType.ERROR);
			alert.setContentText("Invalid Student Id or empty field... Re-enter the Std Id in the AcctNo Field.");
			alert.setHeaderText("INVALID STD ID");
			Optional<ButtonType> result = alert.showAndWait();
			if(result.get() == ButtonType.OK) {
				alert.close();
			}
			else {
				alert.close();
			}
		}
	}
	
//	@FXML public void init(MouseEvent event) {
//		String num = accountNumberTF.getText();
//		
////		Vector<CashTransactions> cashData = new Vector<>();
////		Vector<TellerTransactions> tellerData = new Vector<>();
////		Vector<POSTransactions> posData = new Vector<>();
////		double sum = 0, sum2 = 0, sum3 = 0;
////		
////		try {
////			EntityManagerFactory emfactorys = Persistence.createEntityManagerFactory("SchoolMgtSystem");
////			EntityManager entitymanagers = emfactorys.createEntityManager();
////			entitymanagers.getTransaction().begin();
////			
////			try {
////				Query queryX =
////						entitymanagers.createQuery("select e from CashTransactions e ");
////				if(!(queryX.getResultList().isEmpty())) {
////					cashData = (Vector<CashTransactions>) queryX.getResultList();
////				}
////			}
////			catch(Exception e1) {
////				e1.printStackTrace();
////			}
////			
////			try {
////				Query queryY =
////						entitymanagers.createQuery("select e from TellerTransactions e ");
////				if(!(queryY.getResultList().isEmpty())) {
////					tellerData = (Vector<TellerTransactions>) queryY.getResultList();
////				}
////			}
////			catch(Exception e2) {
////				e2.printStackTrace();
////			}
////			
////			try {
////				Query queryZ =
////						entitymanagers.createQuery("select e from POSTransactions e ");
////				if(!(queryZ.getResultList().isEmpty())) {
////					posData = (Vector<POSTransactions>) queryZ.getResultList();
////				}
////			}
////			catch(Exception e3) {
////				e3.printStackTrace();
////			}
////			
////			entitymanagers.getTransaction().commit();
////			entitymanagers.close();
////			emfactorys.close();
////			
////			for(CashTransactions x : cashData) {
////				if(x.getTxnDate().toEpochDay() == LocalDate.now().toEpochDay()) {
////					sum = sum + Double.parseDouble(x.getAmount());
////				}
////			}
////			
////			for(TellerTransactions x : tellerData) {
////				if(x.getTxnDate().toEpochDay() == LocalDate.now().toEpochDay()) {
////					sum2 = sum2 + Double.parseDouble(x.getAmount());
////				}
////			}
////			
////			for(POSTransactions x : posData) {
////				if(x.getTxnDate().toEpochDay() == LocalDate.now().toEpochDay()) {
////					sum3 = sum3 + Double.parseDouble(x.getAmount());
////				}
////			}
////		}
////		catch(Exception e4) {
////			e4.printStackTrace();
////		}
////		txnTypeCashBal.setText(fm2.format(sum));
////		txnTypeTellerBal.setText(fm2.format(sum2));
////		txnTypePOSBal.setText(fm2.format(sum3));
//		
//		try {
//			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
//			EntityManager entitymanager = emfactory.createEntityManager();
//			entitymanager.getTransaction().begin();
//			
//			AccountBalance customer = entitymanager.find(AccountBalance.class, num);
//			
//			LinkedHashSet<String> myTIDSet = customer.getTIDSet();
//			Object myStrx = myTIDSet.toArray()[myTIDSet.size()-1];
//			String myStr = (String)myStrx;
//			
//			try {
//				
//				EntityManagerFactory emf = Persistence.createEntityManagerFactory("SchoolMgtSystem");
//				EntityManager entitymgr = emf.createEntityManager();
//				entitymgr.getTransaction().begin();
//				
//				Transactions trans = entitymgr.find(Transactions.class, myStr);
//				
//				accountNameTF.setText(trans.getAccountName());
//				
//				//TIDTF.setValue(trans.getTID());
//				//depWithdrawalTF.setText(trans.getDepWithdrawal()); 
////				txnSeqNoTF.setText(String.valueOf(trans.getTxnSeqNo())); 
//				
//				amountTF.setText(String.valueOf(0.0));
//				availableBalanceTF.setText(String.valueOf(trans.getAvailableBalance()));
//				//txnCodeTF.setValue(trans.getTxnCode());
//				
//				String dateV = trans.getTxnDate().format(formatter);
//				LocalDate localDate = trans.getTxnDate();
//				//txnDateTF.setValue(localDate);
//				
//				entitymgr.getTransaction().commit();
//				entitymgr.close();
//				emf.close();
//			}
//			catch(Exception ex) {
//				//TIDTF.setValue("Init variables Error: "+ex.getMessage());
//				ex.printStackTrace();
//			}
//			
//			entitymanager.getTransaction().commit();
//			
//			entitymanager.close();
//			emfactory.close();
//		}
//		catch(Exception except){
//			//TIDTF.setValue("Init TID Error: "+except.getMessage());
//			except.printStackTrace();
//		}
//	}
	
	
	@FXML public void postTransactionButton(ActionEvent event) {
		
		String thisAcct = accountNumberTF.getText().trim().toUpperCase();
		String tillAcctN = tillAcctNoTF.getValue().trim().toUpperCase();
		String name = accountNameTF.getValue();
		String amt = amountTF.getText();
		String pDate = LocalDate.now().toString();
		String teller_yr = teller_Session.getValue();
		String teller_term = teller_Term.getValue();
		String avBal = "", stdClass = "";
		String desc = depWithdrawalTF.getValue() + " "+teller_yr+teller_term;
		String txnTypeStr = txnTypeCombo.getValue();
		String txnStr = txnCodeTF.getValue();
		String tillAccountName = tillAcctNameTF.getText().trim().toUpperCase();
		
		try {
			
			if(!tillAccountName.contains("Initialize till error".toUpperCase()) && 
					tillAccountName.contains(dispName.toUpperCase())) {
				
				//the real deal starts
				
				try {
					if(thisAcct.trim().length() != 0 && tillAcctN.trim().length() != 0 && 
							name.trim().length() != 0 && amt.trim().length() != 0 && pDate.trim().length() != 0 && 
							teller_yr.trim().length() != 0 && teller_term.trim().length() != 0 && 
							desc.trim().length() != 0 && txnTypeStr.trim().length() != 0 && 
							txnStr.trim().length() != 0 && (txnTypeStr.equalsIgnoreCase("Cash") || 
									txnTypeStr.equalsIgnoreCase("Teller") || txnTypeStr.equalsIgnoreCase("Pos")) &&
							(txnStr.trim().equalsIgnoreCase("CR") || txnStr.trim().equalsIgnoreCase("DR"))) {
						
						CreateTransactions transact = new CreateTransactions();
						CreateCashTransactions cash = new CreateCashTransactions();
						CreateTellerTransactions teller = new CreateTellerTransactions();
						CreatePOSTransactions pos = new CreatePOSTransactions();
						LocalDateTime dateTime = LocalDateTime.now();
						String printTID = thisAcct + dateTime;
						
						try {
//							if(!txnTypeStr.trim().equalsIgnoreCase("Cash") || !txnTypeStr.trim().equalsIgnoreCase("Teller") || 
//									!txnTypeStr.trim().equalsIgnoreCase("POS")) {
//								throw new Exception("You must select transaction type for your cash report analysis...");
//							}
							
							EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
							EntityManager entitymanager = emfactory.createEntityManager();
							entitymanager.getTransaction().begin();
							
							AccountBalance customer = entitymanager.find(AccountBalance.class, thisAcct);
							
							Students cstx = entitymanager.find(Students.class, thisAcct);
							stdClass = cstx.getEntryClassAssigned();
							
							LinkedHashSet<String> myTIDSet = customer.getTIDSet();
							Object myTIDStr = myTIDSet.toArray()[myTIDSet.size()-1];
							String myStr =  (String) myTIDStr; 
							
							//System.out.println("XXXX: "+myStr);
							
							//tills
							EntityManagerFactory emfactoryx = Persistence.createEntityManagerFactory("SchoolMgtSystem");
							EntityManager entitymanagerx = emfactoryx.createEntityManager();
							entitymanagerx.getTransaction().begin();
							
							Tills tillx = entitymanagerx.find(Tills.class, tillAcctN);
							
							LinkedHashSet<String> myTTIDSet = tillx.getTTIDSet();
							Object myTTIDStr = myTTIDSet.toArray()[myTTIDSet.size()-1];
							String myStr2 = (String)myTTIDStr;
							
							//System.out.println("YYYY: "+myStr2);
							
//							EntityManagerFactory emf = Persistence.createEntityManagerFactory("SchoolMgtSystem");
//							EntityManager entitymgr = emf.createEntityManager();
//							entitymgr.getTransaction().begin();
//							
//							Transactions trans = entitymgr.find(Transactions.class, myStr);
							//till
							EntityManagerFactory emfx = Persistence.createEntityManagerFactory("SchoolMgtSystem");
							EntityManager entitymgrx = emfx.createEntityManager();
							entitymgrx.getTransaction().begin();
						
							Tills tilly = entitymgrx.find(Tills.class, tillAcctN); // TillTransactions and myStr2
							
//							long mySeqNo = 0; //trans.getTxnSeqNo(); //Long.parseLong(seqNo);
//							long mySeqNo2 = mySeqNo + 1;
//							//String strTxnSeq = String.valueOf(mySeqNo2);
//							//txnSeqNoTF.setText(String.valueOf(mySeqNo2));
//							
//							//till
//							long mySeqNoTill = 0; //tilly.getTxnSeqNo(); //Long.parseLong(strSeqNoTill);
//							long mySeqNoTill2 = mySeqNoTill + 1;
//							//String strTxnSeqTill = String.valueOf(mySeqNoTill2);
							
							//IMPORTANT
							
							String invId = thisAcct + dateTime;
							
							String str = thisAcct+dateTime;  //strTxnSeq;
							String num = thisAcct;
							//TIDTF.setValue(str);
							String mySearchStr = myStr;
							
							//till
							String strTill = tillAcctN+dateTime;   //strTxnSeqTill;
							String mySearchStr2 = myStr2;
							
							LocalDate txDate = txnDateTF.getValue();
							
							try {
								
								if(txnStr.equals("CR")) {
									transact.postTransactions(mySearchStr, thisAcct, accountNameTF.getValue(), 
											depWithdrawalTF.getValue()+" "+teller_Session.getValue()+teller_Term.getValue(), txnCodeTF.getValue(), txDate,   
											Double.parseDouble(amountTF.getText()), 
											Double.parseDouble(availableBalanceTF.getText())+Double.parseDouble(amountTF.getText()), 
											Double.parseDouble(amountTF.getText()), 0.0, dateTime, dispName, invId);
									transact.postTillTransactions(mySearchStr2, 0.0, 0.0 - Double.parseDouble(amountTF.getText()), 
											(tilly.getBalance() + (- Double.parseDouble(amountTF.getText()))), 
											thisAcct, tillAcctN, tillAcctNameTF.getText(), accountNameTF.getValue(), 
											txDate, dispName, dateTime, invId);
									transact.updateAcctBalance(thisAcct, Double.parseDouble(amountTF.getText()));
									transact.updateTillBalance(tillAcctN, Double.parseDouble(amountTF.getText()));
								}

								else if(txnStr.equals("DR")) {
									transact.postTransactions(mySearchStr, thisAcct, accountNameTF.getValue(), 
											depWithdrawalTF.getValue()+" "+teller_Session.getValue()+teller_Term.getValue(), txnCodeTF.getValue(), txDate,   
											Double.parseDouble(amountTF.getText()), 
											Double.parseDouble(availableBalanceTF.getText())-Double.parseDouble(amountTF.getText()),
											0.0, Double.parseDouble(amountTF.getText()), dateTime, dispName, invId);
									transact.postTillTransactions(mySearchStr2, Double.parseDouble(amountTF.getText()), 0.0, 
											(tilly.getBalance()+Double.parseDouble(amountTF.getText())), 
											thisAcct, tillAcctN, tillAcctNameTF.getText(), accountNameTF.getValue(), 
											txDate, dispName, dateTime, invId); //mySeqNoTill2
									transact.updateAcctBalanceDr(thisAcct, Double.parseDouble(amountTF.getText()));
									transact.updateTillBalanceDr(tillAcctN, Double.parseDouble(amountTF.getText()));
								}
								else {
									//
								}
								
								// shouldnt be here
								
								try {
									
									CreateTransactions transact2 = new CreateTransactions();
									try {
										transact2.createTID(str, num);
									}
									catch(Exception e1) {
										TIDTF.setValue("createTID: "+e1.getMessage());
									}
									
//									try {
//										transact2.createTxnSeqSet(str, mySeqNo2);
//									}
//									catch(Exception e2) {
//										TIDTF.setValue("createTxnSeqSet: "+e2.getMessage());
//									}
									
									try {
										transact2.createTTIDSet(strTill, tillAcctN);
									}
									catch(Exception e3) {
										TIDTF.setValue("createTTIDSet: "+e3.getMessage());
									}
									
									try {
										
										if(txnStr.equals("CR")) {
											if(txnTypeStr.trim().equalsIgnoreCase("Cash")) {
												cash.postCashTransactions(invId, thisAcct, name, desc, txnStr, txDate, Double.parseDouble(amountTF.getText()),
														Double.parseDouble(amountTF.getText()), 0.0, dateTime, dispUserName);
											}
											else if(txnTypeStr.trim().equalsIgnoreCase("Teller")) {
												teller.postTellerTransactions(invId, thisAcct, name, desc, txnStr, txDate, Double.parseDouble(amountTF.getText()), 
														Double.parseDouble(amountTF.getText()), 0.0, dateTime, dispUserName);
											}
											else {
												pos.postPOSTransactions(invId, thisAcct, name, desc, txnStr, txDate, Double.parseDouble(amountTF.getText()), 
														Double.parseDouble(amountTF.getText()), 0.0, dateTime, dispUserName);
											}
										}
										else if(txnStr.equals("DR")) {
											if(txnTypeStr.trim().equalsIgnoreCase("Cash")) {
												cash.postCashTransactions(invId, thisAcct, name, desc, txnStr, txDate, -1*Double.parseDouble(amountTF.getText()),
														0.0, Double.parseDouble(amountTF.getText()), dateTime, dispUserName);
											}
											else if(txnTypeStr.trim().equalsIgnoreCase("Teller")) {
												teller.postTellerTransactions(invId, thisAcct, name, desc, txnStr, txDate, -1*Double.parseDouble(amountTF.getText()), 
														0.0, Double.parseDouble(amountTF.getText()), dateTime, dispUserName);
											}
											else {
												pos.postPOSTransactions(invId, thisAcct, name, desc, txnStr, txDate, -1*Double.parseDouble(amountTF.getText()), 
														0.0, Double.parseDouble(amountTF.getText()), dateTime, dispUserName);
											}
										}
										else {
											//
										}
										
//										if(txnTypeStr.trim().equalsIgnoreCase("Cash")) {
//											cash.postCashTransactions(invId, thisAcct, name, desc, txnStr, txDate, Double.parseDouble(amountTF.getText()),
//													Double.parseDouble(amountTF.getText()), 0.0, dateTime, dispUserName);
//										}
//										else if(txnTypeStr.trim().equalsIgnoreCase("Teller")) {
//											teller.postTellerTransactions(invId, thisAcct, name, desc, txnStr, txDate, Double.parseDouble(amountTF.getText()), 
//													Double.parseDouble(amountTF.getText()), 0.0, dateTime, dispUserName);
//										}
//										else {
//											pos.postPOSTransactions(invId, thisAcct, name, desc, txnStr, txDate, Double.parseDouble(amountTF.getText()), 
//													Double.parseDouble(amountTF.getText()), 0.0, dateTime, dispUserName);
//										}
										
										//display cash, teller and pos
										Vector<CashTransactions> cashData = new Vector<>();
										Vector<TellerTransactions> tellerData = new Vector<>();
										Vector<POSTransactions> posData = new Vector<>();
										double sum = 0, sum2 = 0, sum3 = 0;
										
										try {
											EntityManagerFactory emfactorys = Persistence.createEntityManagerFactory("SchoolMgtSystem");
											EntityManager entitymanagers = emfactorys.createEntityManager();
											entitymanagers.getTransaction().begin();
											
											try {
												Query queryX =
														entitymanagers.createQuery("select e from CashTransactions e ");
												if(!(queryX.getResultList().isEmpty())) {
													cashData = (Vector<CashTransactions>) queryX.getResultList();
												}
											}
											catch(Exception e1) {
												e1.printStackTrace();
											}
											
											try {
												Query queryY =
														entitymanagers.createQuery("select e from TellerTransactions e ");
												if(!(queryY.getResultList().isEmpty())) {
													tellerData = (Vector<TellerTransactions>) queryY.getResultList();
												}
											}
											catch(Exception e2) {
												e2.printStackTrace();
											}
											
											try {
												Query queryZ =
														entitymanagers.createQuery("select e from POSTransactions e ");
												if(!(queryZ.getResultList().isEmpty())) {
													posData = (Vector<POSTransactions>) queryZ.getResultList();
												}
											}
											catch(Exception e3) {
												e3.printStackTrace();
											}
											
											entitymanagers.getTransaction().commit();
											entitymanagers.close();
											emfactorys.close();
											
											for(CashTransactions x : cashData) {
												if(x.getTxnDate().toEpochDay() == LocalDate.now().toEpochDay()) {
													sum = sum + Double.parseDouble(x.getAmount());
												}
											}
											
											for(TellerTransactions x : tellerData) {
												if(x.getTxnDate().toEpochDay() == LocalDate.now().toEpochDay()) {
													sum2 = sum2 + Double.parseDouble(x.getAmount());
												}
											}
											
											for(POSTransactions x : posData) {
												if(x.getTxnDate().toEpochDay() == LocalDate.now().toEpochDay()) {
													sum3 = sum3 + Double.parseDouble(x.getAmount());
												}
											}
										}
										catch(Exception e4) {
											e4.printStackTrace();
										}
										
										txnTypeCashBal.setText(fm2.format(sum));
										txnTypeTellerBal.setText(fm2.format(sum2));
										txnTypePOSBal.setText(fm2.format(sum3));
										
									}
									catch(Exception et) {
										et.printStackTrace();
									}
									
//									try {
//										transact2.createTillTxnSeqSet(strTill, mySeqNo2); //tillAcctN);
//									}
//									catch(Exception e4) {
//										TIDTF.setValue("createTillTxnSeqSet: "+e4.getMessage());
//									}
									
								}
								catch(Exception except){
									TIDTF.setValue("Create TIDs Error: "+except.getMessage());
								}
								
							}
							
							catch(Exception e) {
								TIDTF.setValue("Create txn error: "+e.getMessage());
							}
							finally {
								//accountNumberTF.clear();
//								accountNameTF.clear(); 
//								depWithdrawalTF.clear();
//								txnSeqNoTF.clear(); 
//								tillBalanceTF.clear();
//								amountTF.clear();
//								availableBalanceTF.clear();
//								txnCodeTF.setValue("CR");
//								txnDateTF.setValue(LocalDate.now());
							}
							
							entitymgrx.getTransaction().commit();
							entitymgrx.close();
							emfx.close();
							
//							entitymgr.getTransaction().commit();
//							entitymgr.close();
//							emf.close();
							
							entitymanagerx.getTransaction().commit();
							entitymanagerx.close();
							emfactoryx.close();
							
							entitymanager.getTransaction().commit();
							entitymanager.close();
							emfactory.close();
							
							EntityManagerFactory emfactory9 = Persistence.createEntityManagerFactory("SchoolMgtSystem");
							EntityManager entitymanager9 = emfactory9.createEntityManager();
							entitymanager9.getTransaction().begin();
							
							AccountBalance bal = entitymanager9.find(AccountBalance.class, thisAcct);
							
							avBal = fm2.format(bal.getBalance());
							
							entitymanager9.getTransaction().commit();
							entitymanager9.close();
							emfactory9.close();
							
							//generate barcode for receipt
							File directory = new File("C:\\BarCode\\receipt");
									if(!(directory.exists())) {
										directory.mkdirs();
									}
							try {
											
								String barCodeData = thisAcct.toUpperCase();
								
								String filePath = "C:\\BarCode\\receipt\\barcode.png";
								String charset = "UTF-8";
								
								Map<EncodeHintType, ErrorCorrectionLevel> hintMap = new HashMap<>();
								hintMap.put(EncodeHintType.ERROR_CORRECTION, ErrorCorrectionLevel.L);
								
								BitMatrix matrix = new MultiFormatWriter().encode(
									new String(barCodeData.getBytes(charset), charset), 
									BarcodeFormat.CODE_39, 250,25, hintMap);
								MatrixToImageWriter.writeToFile(matrix, filePath.substring(
									filePath.lastIndexOf('.') + 1), new File(filePath));
						
							}
							catch(Exception e) {
								e.printStackTrace();
							}
							
							//print
						 	UIManager.put("swing.boldMetal", Boolean.FALSE);
					        JFrame f = new JFrame("Receipt Printer");
					        f.addWindowListener(new WindowAdapter() {
					           public void windowClosing(WindowEvent e) {
					        	   //System.exit(0);
					        	   }
					        });
					        
					        JButton printButton = new JButton("Click HERE to Print Receipt");
					        printButton.addActionListener(new HelloWorldPrinter(printTID, thisAcct, name, stdClass, 
					        		fm2.format(Double.parseDouble(amt)), pDate, avBal, desc, txnTypeStr));
					        f.add("Center", printButton);
					        f.pack();
					        f.setVisible(true);
						}
						catch(Exception excepted) {
							accountNumberTF.setText("Error: "+excepted.getMessage());
						}
						finally {
							//accountNumberTF.clear();
							accountNameTF.setValue(""); 
							depWithdrawalTF.setValue("");
							tillBalanceTF.clear();
							txnTypeCombo.setValue("");
							amountTF.clear();
							availableBalanceTF.clear();
							txnCodeTF.setValue("CR");
							txnDateTF.setValue(LocalDate.now());
						}
						
					}
					else {
						Alert alert = new Alert(Alert.AlertType.ERROR);
						alert.setContentText("Invalid entries...");
						alert.setHeaderText("INVALID ENTRIES");
						Optional<ButtonType> result = alert.showAndWait();
						if(result.get() == ButtonType.OK) {
							alert.close();
						}
						else {
							alert.close();
						}
					}
				}
				catch(Exception ett) {
					Alert alert = new Alert(Alert.AlertType.ERROR);
					alert.setContentText(ett.getMessage() + ": Invalid entries...");
					alert.setHeaderText("INVALID ENTRIES");
					Optional<ButtonType> result = alert.showAndWait();
					if(result.get() == ButtonType.OK) {
						alert.close();
					}
					else {
						alert.close();
					}
				}
				
				//the real deal ends
			}
			else {
				Alert alert = new Alert(Alert.AlertType.ERROR);
				alert.setContentText("Invalid Till Selected... "+dispName+", please select your own till. "
						+ "You cannot use someone else'.");
				alert.setHeaderText("WRONG TILL");
				Optional<ButtonType> result = alert.showAndWait();
				if(result.get() == ButtonType.OK) {
					alert.close();
				}
				else {
					alert.close();
				}
			}
			
		}
		catch(Exception dispUserError) {
			Alert alert = new Alert(Alert.AlertType.ERROR);
			alert.setContentText("Invalid Till Selected... "+dispName+", please select your own till. "
					+ "You cannot use someone else'. "+ dispUserError.getMessage());
			alert.setHeaderText("WRONG TILL");
			Optional<ButtonType> result = alert.showAndWait();
			if(result.get() == ButtonType.OK) {
				alert.close();
			}
			else {
				alert.close();
			}
		}
	}
	
	//Till Transactions
	ObservableList<String> tillAccts = FXCollections.observableArrayList();
	@SuppressWarnings("unchecked")
	@FXML public void initTill(MouseEvent event) {
		
		EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
		EntityManager entitymanager = emfactory.createEntityManager();
		entitymanager.getTransaction().begin();
		
		Vector<Tills> tillData = new Vector<>();
		Query queryX =
				entitymanager.createQuery("select e from Tills e ");
		tillData = (Vector<Tills>) queryX.getResultList();
		
		for(Tills x : tillData) {
			if(!(tillAccts.contains(x.getTillAcctNo())) && 
					x.getTillAcctClassification().equalsIgnoreCase("Till")) {
				tillAccts.add(x.getTillAcctNo());
			}
		}
		
		tillAcctNoTF.setItems(tillAccts);
		
		entitymanager.getTransaction().commit();
		entitymanager.close();
		emfactory.close();
	}
	
	
	@SuppressWarnings("unchecked")
	@FXML public void initTillAcctName(MouseEvent event) {
		String tillAcct = tillAcctNoTF.getValue();
		String num = accountNumberTF.getText().toUpperCase();
		
		//Access Control - Receipt Reprint
		if(dispUserClass.equalsIgnoreCase("Cashier")) {
			TIDTF.setDisable(true);
		}
				
		try {
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			Tills till = entitymanager.find(Tills.class, tillAcct);
			
			if(till.getTillUser().equals(dispName)) {
				tillAcctNoTF.setValue(tillAcct);
				tillAcctNameTF.setText(till.getTillName()+", "+till.getTillUser());
				tillBalanceTF.setText(fm.format(till.getBalance()));
				
				entitymanager.getTransaction().commit();
				entitymanager.close();
				emfactory.close();
				
				tillAcctNoTF.setDisable(true);
			}
			
		}
		catch(Exception e) {
			tillAcctNameTF.setText("Initialize till error: "+e.getLocalizedMessage());
		}
		
		//*************************************************************************
//			String num = accountNumberTF.getText();
		//TIDTF.clear();
		
		try {
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			AccountBalance customer = entitymanager.find(AccountBalance.class, num);
			
			accountNameTF.setValue(customer.getOtherNames() + " " + customer.getSurName());
			//amountTF.setText(String.valueOf(0.0));
			availableBalanceTF.setText(fm.format(customer.getBalance()));
			
			entitymanager.getTransaction().commit();
			
			entitymanager.close();
			emfactory.close();
		}
		catch(Exception except){
			//TIDTF.setValue("Create TID Error: "+except.getMessage());
			except.printStackTrace();
		}
	}
	
	//Funds Transfer
	@FXML private Button FTButton, returnFTButton;
	@FXML private TextField froCustAcctNameTF, froAvailableBalanceTF,
		toCustAcctNoTF, toCustAcctNameTF, toAvailableBalanceTF, transferAmountTF;
	@FXML private ComboBox<String> FTTxnCodes, froCustAcctNoTF;
	@FXML private DatePicker FTTxnDate;
	@FXML private Label ftErrorLabel;
	
	ObservableList<String> FTTxn = FXCollections.observableArrayList("105 - Trf-GL-to-Till_GL",
			"106 - Trf-GL-to-Customer");
	ObservableList<String> FTTillAccts = FXCollections.observableArrayList();
	@FXML public void initFTTxnCodes(MouseEvent event) {
		
		EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
		EntityManager entitymanager = emfactory.createEntityManager();
		entitymanager.getTransaction().begin();
		
		Vector<Tills> tillData = new Vector<>();
		Query queryX =
				entitymanager.createQuery("select e from Tills e ");
		tillData = (Vector<Tills>) queryX.getResultList();
		
		for(Tills x : tillData) {
			if(!(FTTillAccts.contains(x.getTillAcctNo()))) {
				FTTillAccts.add(x.getTillAcctNo());
			}
		}
		
		froCustAcctNoTF.setItems(FTTillAccts);
		
		entitymanager.getTransaction().commit();
		entitymanager.close();
		emfactory.close();
		
		FTTxnCodes.setItems(FTTxn);
		FTTxnDate.setValue(LocalDate.now());
	}
	
	@FXML public void initFTAcct(MouseEvent event) {
		String froAcctNo = froCustAcctNoTF.getValue().toUpperCase();
		try {
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory
					("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			Tills customer = entitymanager.find(Tills.class, froAcctNo);
			
			froCustAcctNameTF.setText(customer.getTillName());
			froAvailableBalanceTF.setText(fm.format(customer.getBalance()));
			
			entitymanager.getTransaction().commit();
			entitymanager.close();
			emfactory.close();
			
			ftErrorLabel.setText(null);
		}
		catch(Exception e) {
			//froCustAcctNoTF.setValue("Init error: "+e.getMessage());
			ftErrorLabel.setText("Init Error: "+ e.getMessage());
			froCustAcctNameTF.clear();
			froAvailableBalanceTF.clear();
		}
		
		String toAcctNo = toCustAcctNoTF.getText().toUpperCase();
		String txnCode = FTTxnCodes.getValue();
		if(txnCode.equals("106 - Trf-GL-to-Customer")) {
			try {
				EntityManagerFactory emfactory = Persistence.createEntityManagerFactory
						("SchoolMgtSystem");
				EntityManager entitymanager = emfactory.createEntityManager();
				entitymanager.getTransaction().begin();
				
				AccountBalance customer = entitymanager.find(AccountBalance.class, toAcctNo);
				
				toCustAcctNameTF.setText(customer.getOtherNames()+" "+customer.getSurName());
				toAvailableBalanceTF.setText(fm.format(customer.getBalance()));
				
				entitymanager.getTransaction().commit();
				entitymanager.close();
				emfactory.close();
				
				ftErrorLabel.setText(null);
			}
			catch(Exception e) {
				//toCustAcctNoTF.setText("Init error: "+e.getMessage());
				ftErrorLabel.setText("Init Error: "+e.getMessage());
				toCustAcctNameTF.clear();
				toAvailableBalanceTF.clear();
			}
		}
		else {
			try {
				EntityManagerFactory emfactory = Persistence.createEntityManagerFactory
						("SchoolMgtSystem");
				EntityManager entitymanager = emfactory.createEntityManager();
				entitymanager.getTransaction().begin();
				
				Tills customer = entitymanager.find(Tills.class, toAcctNo);
				
				toCustAcctNameTF.setText(customer.getTillName());
				toAvailableBalanceTF.setText(fm.format(customer.getBalance()));
				
				entitymanager.getTransaction().commit();
				entitymanager.close();
				emfactory.close();
				
				ftErrorLabel.setText(null);
			}
			catch(Exception e) {
				//toCustAcctNoTF.setText("Init error: "+e.getMessage());
				ftErrorLabel.setText("Init Error: "+e.getMessage());
				toCustAcctNameTF.clear();
				toAvailableBalanceTF.clear();
			}
		}
	}
	
	@FXML public void initFTAcct2(MouseEvent event) {
		String toAcctNo = toCustAcctNoTF.getText().toUpperCase();
		String txnCode = FTTxnCodes.getValue();
		if(txnCode.equals("106 - Trf-GL-to-Customer")) {
			try {
				EntityManagerFactory emfactory = Persistence.createEntityManagerFactory
						("SchoolMgtSystem");
				EntityManager entitymanager = emfactory.createEntityManager();
				entitymanager.getTransaction().begin();
				
				AccountBalance customer = entitymanager.find(AccountBalance.class, toAcctNo);
				
				toCustAcctNameTF.setText(customer.getOtherNames()+" "+customer.getSurName());
				toAvailableBalanceTF.setText(fm.format(customer.getBalance()));
				
				entitymanager.getTransaction().commit();
				entitymanager.close();
				emfactory.close();
				
				ftErrorLabel.setText(null);
			}
			catch(Exception e) {
				//toCustAcctNoTF.setText("Init error: "+e.getMessage());
				ftErrorLabel.setText("Init Error: "+e.getMessage());
				toCustAcctNameTF.clear();
				toAvailableBalanceTF.clear();
			}
		}
		else {
			try {
				EntityManagerFactory emfactory = Persistence.createEntityManagerFactory
						("SchoolMgtSystem");
				EntityManager entitymanager = emfactory.createEntityManager();
				entitymanager.getTransaction().begin();
				
				Tills customer = entitymanager.find(Tills.class, toAcctNo);
				
				toCustAcctNameTF.setText(customer.getTillName());
				toAvailableBalanceTF.setText(fm.format(customer.getBalance()));
				
				entitymanager.getTransaction().commit();
				entitymanager.close();
				emfactory.close();
				ftErrorLabel.setText(null);
			}
			catch(Exception e) {
				//toCustAcctNoTF.setText("Init error: "+e.getMessage());
				ftErrorLabel.setText("Init Error: "+e.getMessage());
				toCustAcctNameTF.clear();
				toAvailableBalanceTF.clear();
			}
		}
	}
	
	@FXML public void postFundsTransferButton(ActionEvent event) {
		CreateTransactions transact = new CreateTransactions();
		
		String froCustAcct = froCustAcctNoTF.getValue().toUpperCase();
		String toCustAcct = toCustAcctNoTF.getText().toUpperCase();
		String froCustName = froCustAcctNameTF.getText();
		String toCustName = toCustAcctNameTF.getText();
		String txnCode = FTTxnCodes.getValue();
		double transferAmount = Double.parseDouble(transferAmountTF.getText());
		double toAvailableBalance = Double.parseDouble(toAvailableBalanceTF.getText());
		double froAvailableBalance = Double.parseDouble(froAvailableBalanceTF.getText());
		LocalDateTime dateTime = LocalDateTime.now();
		LocalDate txDate = FTTxnDate.getValue();
		
		try {
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			Tills customer = entitymanager.find(Tills.class, froCustAcct);
			
			LinkedHashSet<String> myTIDSet = customer.getTTIDSet();
			Object myTIDStr = myTIDSet.toArray()[myTIDSet.size()-1];
			String myStr =  (String) myTIDStr; 
			
			if(txnCode.equals("106 - Trf-GL-to-Customer")) {
				//to account
				EntityManagerFactory emfactoryx = Persistence.createEntityManagerFactory("SchoolMgtSystem");
				EntityManager entitymanagerx = emfactoryx.createEntityManager();
				entitymanagerx.getTransaction().begin();
				
				AccountBalance customer2 = entitymanagerx.find(AccountBalance.class, toCustAcct);
				
				LinkedHashSet<String> myTIDSet2 = customer2.getTIDSet();
				Object myTIDStr2 = myTIDSet2.toArray()[myTIDSet2.size()-1];
				String myStr2 = (String)myTIDStr2;
				
				EntityManagerFactory emf = Persistence.createEntityManagerFactory("SchoolMgtSystem");
				EntityManager entitymgr = emf.createEntityManager();
				entitymgr.getTransaction().begin();
				
				TillTransactions trans = entitymgr.find(TillTransactions.class, myStr);
				
				//to acct
				EntityManagerFactory emfx = Persistence.createEntityManagerFactory("SchoolMgtSystem");
				EntityManager entitymgrx = emfx.createEntityManager();
				entitymgrx.getTransaction().begin();
				
				Transactions trans2 = entitymgrx.find(Transactions.class, myStr2);
				
//					LocalDateTime dateTime = LocalDateTime.now();
				
//				long mySeqNo = trans.getTxnSeqNo(); 
//				long mySeqNo2 = mySeqNo + 1;
//				String strTxnSeq = String.valueOf(mySeqNo2);
//				
//				//to acct
//				long mySeqNoTill = trans2.getTxnSeqNo();
//				long mySeqNoTill2 = mySeqNoTill + 1;
//				String strTxnSeqTill = String.valueOf(mySeqNoTill2);
				
				String str = froCustAcct + dateTime; //String.valueOf(froCustAcct)+strTxnSeq;
				
				String mySearchStr = myStr;
				
				//to acct
				String strTill = toCustAcct + dateTime; //String.valueOf(toCustAcct)+strTxnSeqTill;
				String mySearchStr2 = myStr2;
				
				String invId = froCustAcct + toCustAcct + dateTime;
				
				try {
					transact.postTransactionsGL(mySearchStr, froCustAcct, froCustName, 
							toCustAcct, toCustName, txDate,   
							transferAmount, froAvailableBalance - transferAmount,
							0.0, transferAmount, dateTime, dispName);
					transact.updateAcctBalanceDrGL(froCustAcct, transferAmount);
					
					transact.postTransactions(mySearchStr2, toCustAcct, toCustName, 
							froCustName, txnCode, txDate,   
							transferAmount, toAvailableBalance + transferAmount,
							transferAmount, 0.0, dateTime, dispName, invId);
					transact.updateAcctBalance(toCustAcct, transferAmount);
				}
				catch(Exception e) {
					froCustAcctNoTF.setValue("FT txn error: "+e.getMessage());
				}
				finally {
					froCustAcctNameTF.clear();
					froAvailableBalanceTF.clear(); 
					transferAmountTF.clear();
					toCustAcctNameTF.clear();
					toAvailableBalanceTF.clear();
					FTTxnCodes.setValue("select option");
					FTTxnDate.setValue(LocalDate.now());
				}
				
				entitymgrx.getTransaction().commit();
				entitymgrx.close();
				emfx.close();
				
				entitymgr.getTransaction().commit();
				entitymgr.close();
				emf.close();
				
				entitymanagerx.getTransaction().commit();
				entitymanagerx.close();
				emfactoryx.close();
				
				entitymanager.getTransaction().commit();
				entitymanager.close();
				emfactory.close();
				
				try {
					CreateTransactions transact2 = new CreateTransactions();
					transact2.createTTIDSet(str, froCustAcct);
//					transact2.createTillTxnSeqSet(str, mySeqNo2);
					transact2.createTID(strTill, toCustAcct);
//					transact2.createTxnSeqSet(strTill, mySeqNoTill2);
				}
				catch(Exception except){
					froCustAcctNoTF.setValue("FT TIDs Error: "+except.getMessage());
				}
			}
			else {
				//to account
				EntityManagerFactory emfactoryx = Persistence.createEntityManagerFactory("SchoolMgtSystem");
				EntityManager entitymanagerx = emfactoryx.createEntityManager();
				entitymanagerx.getTransaction().begin();
				
				Tills customer2 = entitymanagerx.find(Tills.class, toCustAcct);
				
				LinkedHashSet<String> myTIDSet2 = customer2.getTTIDSet();
				Object myTIDStr2 = myTIDSet2.toArray()[myTIDSet2.size()-1];
				String myStr2 = (String)myTIDStr2;
				
				EntityManagerFactory emf = Persistence.createEntityManagerFactory("SchoolMgtSystem");
				EntityManager entitymgr = emf.createEntityManager();
				entitymgr.getTransaction().begin();
				
				TillTransactions trans = entitymgr.find(TillTransactions.class, myStr);
				
				//to acct
				EntityManagerFactory emfx = Persistence.createEntityManagerFactory("SchoolMgtSystem");
				EntityManager entitymgrx = emfx.createEntityManager();
				entitymgrx.getTransaction().begin();
				
				TillTransactions trans2 = entitymgrx.find(TillTransactions.class, myStr2);
				
//					LocalDateTime dateTime = LocalDateTime.now();
				
//				long mySeqNo = trans.getTxnSeqNo(); 
//				long mySeqNo2 = mySeqNo + 1;
//				String strTxnSeq = String.valueOf(mySeqNo2);
//				
//				//to acct
////					long mySeqNoTill = trans2.getTxnSeqNo();
//				long mySeqNoTill = trans.getTxnSeqNo();
//				long mySeqNoTill2 = mySeqNoTill + 1;
//				String strTxnSeqTill = String.valueOf(mySeqNoTill2);
				
				String str = froCustAcct + dateTime; //String.valueOf(froCustAcct)+strTxnSeq;
				
				String mySearchStr = myStr;
				
				//to acct
				String strTill = toCustAcct + dateTime; //String.valueOf(toCustAcct)+strTxnSeqTill;
				String mySearchStr2 = myStr2;
				
				try {
					
					transact.postTransactionsGL(mySearchStr, froCustAcct, froCustName, 
							toCustAcct, toCustName, txDate,   
							transferAmount, froAvailableBalance - transferAmount,
							0.0, transferAmount, dateTime, dispName);
					transact.updateAcctBalanceDrGL(froCustAcct, transferAmount);
					
					transact.postTransactionsGL(mySearchStr2, toCustAcct, toCustName, 
							toCustAcct, toCustName, txDate,   
							transferAmount, toAvailableBalance + transferAmount,
							transferAmount, 0.0, dateTime, dispName);
					transact.updateAcctBalanceGL(toCustAcct, transferAmount);
				}
				catch(Exception e) {
					froCustAcctNoTF.setValue("FT txn error: "+e.getMessage());
				}
				finally {
					froCustAcctNameTF.clear();
					froAvailableBalanceTF.clear(); 
					transferAmountTF.clear();
					toCustAcctNameTF.clear();
					toAvailableBalanceTF.clear();
					FTTxnCodes.setValue("select option");
					FTTxnDate.setValue(LocalDate.now());
				}
				
				entitymgrx.getTransaction().commit();
				entitymgrx.close();
				emfx.close();
				
				entitymgr.getTransaction().commit();
				entitymgr.close();
				emf.close();
				
				entitymanagerx.getTransaction().commit();
				entitymanagerx.close();
				emfactoryx.close();
				
				entitymanager.getTransaction().commit();
				entitymanager.close();
				emfactory.close();
				
				try {
					CreateTransactions transact2 = new CreateTransactions();
					transact2.createTTIDSet(strTill, froCustAcct);
//					transact2.createTillTxnSeqSet(strTill, mySeqNoTill2);
					transact2.createTTIDSet(strTill, toCustAcct);
//					transact2.createTillTxnSeqSet(strTill, mySeqNoTill2);
				}
				catch(Exception except){
					froCustAcctNoTF.setValue("FT TIDs Error: "+except.getMessage());
				}
			}
		}
		catch(Exception excepted) {
			froCustAcctNoTF.setValue("Error: "+excepted.getMessage());
		}
	}
	
	//Billable Items Inventory Management
	@FXML private Button enterDrugsInfoBtn, returnEnterDrugsInfoBtn;
	@FXML private TextField unitPrice, itemQty, itemTotalCost, itemIncomeAcctNo, itemIncomeAcctName;  
	@FXML private ComboBox<String> drugIdNo, itemCategory;
	@FXML private TextArea nameDesc;
	@FXML private DatePicker entryDate;
	
	ObservableList<String> billItems = FXCollections.observableArrayList(); //"School Fees","Boarding Fees","ICT Fees", 
			//"Library Fee","Science Lab","WAEC - SSCE","Junior WAEC - JSCE","NECO","Others");
	
	
	@SuppressWarnings("unchecked")
	@FXML public void drugIdNoComboInit(MouseEvent event) {
		itemCategory.setItems(billCategory);
		try {
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			Vector<DrugInformation> userData = new Vector<>();
			Query queryX =
					entitymanager.createQuery("select e from DrugInformation e ");
			userData = (Vector<DrugInformation>) queryX.getResultList();
			
			for(DrugInformation x : userData) {
				if(!(billItems.contains(x.getItemIdNo()))) {
					billItems.add(x.getItemIdNo());
				}
			}
			
			drugIdNo.setItems(billItems);
			
			entitymanager.getTransaction().commit();
			entitymanager.close();
			emfactory.close();
			
			new AutoCompleteComboBoxListener<>(drugIdNo);
		}
		catch(Exception e) {
			drugIdNo.setValue("Error initializing drugs/items: "+ e.getMessage());
		}
	}
	
	@FXML public void itemAcctInit(MouseEvent event) {
		String category = itemCategory.getValue();
		Vector<Tills> tillData = new Vector<>();
		itemTotalCost.setText(fm.format(Double.parseDouble(unitPrice.getText()) * Integer.parseInt(itemQty.getText())));
		try {
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			Query queryX =
					entitymanager.createQuery("select e from Tills e ");
			tillData = (Vector<Tills>) queryX.getResultList();
			
			entitymanager.getTransaction().commit();
			entitymanager.close();
			emfactory.close();
		}
		catch(Exception e) {
			e.printStackTrace();
		}
		
		for(Tills till : tillData) {
			if(till.getTillCategory().equals(category)) {
				itemIncomeAcctNo.setText(till.getTillAcctNo());
				itemIncomeAcctName.setText(till.getTillName());
			}
		}
	}
	
	@FXML public void saveDrugInfoButton(ActionEvent event) {
		String drugId = drugIdNo.getValue().toUpperCase();
		double uPrice = Double.parseDouble(unitPrice.getText());
		String nameD = nameDesc.getText();
		LocalDate entDate = entryDate.getValue();
		String category = itemCategory.getValue();
		int qty = Integer.parseInt(itemQty.getText());
		double totalCost = Double.parseDouble(itemTotalCost.getText());
		String incomeAcctNo = itemIncomeAcctNo.getText();
		String incomeAcctName = itemIncomeAcctName.getText();
		
		CreateDrugInformation drug = new CreateDrugInformation();
		try {
			//drug.createDrugInformation(drugId, nameD, uPrice, entDate, dispName);
			drug.createDrugInformation(drugId, nameD, uPrice, entDate, dispName, 
					category, incomeAcctNo, incomeAcctName, totalCost, qty);
		}
		catch(Exception e) {
			drugIdNo.setValue("Create item error: "+ e.getMessage());
		}
		finally {
			unitPrice.clear(); 
			nameDesc.clear();
			entryDate.setValue(LocalDate.now());
			itemCategory.setValue("select category");	
			itemQty.setText(String.valueOf(1));
			itemTotalCost.clear();
			itemIncomeAcctNo.clear();
			itemIncomeAcctName.clear();
		}
	}
	
	//Find Drug Info
	@FXML public void findDrugInfoButton(ActionEvent event) {
		String drugId = drugIdNo.getValue().toUpperCase();
		try {
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			DrugInformation drug = entitymanager.find(DrugInformation.class, drugId);
			
			unitPrice.setText(fm.format(drug.getUnitPrice()));
			nameDesc.setText(drug.getNameDesc());
			entryDate.setValue(drug.getEntryDate());
			itemCategory.setValue(drug.getCategory());	
			itemQty.setText(String.valueOf(drug.getQty()));
			itemTotalCost.setText(String.valueOf(drug.getTotalPrice()));
			itemIncomeAcctNo.setText(drug.getIncomeAcctNo());
			itemIncomeAcctName.setText(drug.getIncomeAcctName());
			
			entitymanager.getTransaction().commit();
			entitymanager.close();
			emfactory.close();
		}
		catch(Exception e) {
			drugIdNo.setValue("Find drug error: "+ e.getMessage());
			unitPrice.clear(); 
			nameDesc.clear();
			entryDate.setValue(LocalDate.now());
			itemCategory.setValue("select category");	
			itemQty.setText(String.valueOf(1));
			itemTotalCost.clear();
			itemIncomeAcctNo.clear();
			itemIncomeAcctName.clear();
		}
	}
	
	//Update Drug Info
	@FXML public void updateDrugInfoButton(ActionEvent event) {
		String drugId = drugIdNo.getValue().toUpperCase();
		double uPrice = Double.parseDouble(unitPrice.getText());
		String nameD = nameDesc.getText();
		LocalDate entDate = entryDate.getValue();
		String category = itemCategory.getValue();
		int qty = Integer.parseInt(itemQty.getText());
		double totalCost = Double.parseDouble(itemTotalCost.getText());
		String incomeAcctNo = itemIncomeAcctNo.getText();
		String incomeAcctName = itemIncomeAcctName.getText();
		
		UpdateDrugInformation drug = new UpdateDrugInformation();
		try {
			//drug.updateDrugInformation(drugId, nameD, uPrice, entDate, dispName);
			drug.updateDrugInformation(drugId, nameD, uPrice, entDate, dispName, 
					category, incomeAcctNo, incomeAcctName, totalCost, qty);
			
		}
		catch(Exception e) {
			drugIdNo.setValue("Update drug error: "+ e.getMessage());
		}
		finally {
			unitPrice.clear(); 
			nameDesc.clear();
			entryDate.setValue(LocalDate.now());
			itemCategory.setValue("select category");	
			itemQty.setText(String.valueOf(1));
			itemTotalCost.clear();
			itemIncomeAcctNo.clear();
			itemIncomeAcctName.clear();
		}
	}
	
	//Delete Drug Info
	@FXML public void deleteDrugInfoButton(ActionEvent event) {
		if(true) {
			Alert alert = new Alert(Alert.AlertType.CONFIRMATION);
			alert.setContentText("You are about to delete this drug record... "
					+ "Note that this action is irreversible!");
			Optional<ButtonType> result = alert.showAndWait();
			if(result.get() == ButtonType.OK) {
				String drugId = drugIdNo.getValue().toUpperCase();
				
				DeleteDrugInformation drug = new DeleteDrugInformation();
				try {
					drug.deleteDrugInformation(drugId);
				}
				catch(Exception e) {
					drugIdNo.setValue("Delete drug error: "+ e.getMessage());
				}
				finally {
					unitPrice.clear(); 
					nameDesc.clear();
					entryDate.setValue(LocalDate.now());
					itemCategory.setValue("select category");	
					itemQty.setText(String.valueOf(1));
					itemTotalCost.clear();
					itemIncomeAcctNo.clear();
					itemIncomeAcctName.clear();
				}
			}
			else {
				alert.close();
			}
		}
	}
	
	
	//Billing Sheet/Invoicing Controller
	@FXML private Button billingsBtn, returnBillingsBtn, enterBillForDrugsBtn,
		returnEnterBillForDrugsBtn, invoicingBtn, returnInvoicingBtn;
	@FXML private TextField invCardNo, invName, invUnitPrice, invAvailQty,invAvailBal2, 
		invQty, invTotalPrice, invoiceId, invGLAcctNo, invGLAcctName;
	@FXML private TextArea invItemNameDesc;
	@FXML private DatePicker invPurchaseDate;
	@FXML private ComboBox<String> invCategory, invItemId, invYrCombo, invTermCombo, invClassCombo;
	ObservableList<String> billCategory = FXCollections.observableArrayList("schoolFee",
			"WAEC","juniorWAEC","NECO","ICT","boardingFee","others");
	ObservableList<String> invItems = FXCollections.observableArrayList();
	
	@SuppressWarnings("unchecked")
	@FXML public void invoicingCombo(MouseEvent event) {
		
//		invYrCombo.setItems(years);
//		invTermCombo.setItems(termN);
//		invClassCombo.setItems(classNo);
		
		invCategory.setItems(billCategory);
		try {
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			Vector<DrugInformation> userData = new Vector<>();
			Query queryX =
					entitymanager.createQuery("select e from DrugInformation e ");
			userData = (Vector<DrugInformation>) queryX.getResultList();
			
			for(DrugInformation x : userData) {
				if(!(invItems.contains(x.getItemIdNo()))) {
					invItems.add(x.getItemIdNo());
				}
			}
			
			invItemId.setItems(invItems);
			
			entitymanager.getTransaction().commit();
			entitymanager.close();
			emfactory.close();
			
			new AutoCompleteComboBoxListener<>(invItemId);
		}
		catch(Exception e) {
			invoiceId.setText("Error initializing drugs/items: "+ e.getMessage());
		}
	}
	
	@SuppressWarnings("unchecked")
	@FXML public void invoicingBillMove(MouseEvent event) {
		String cardNo = invCardNo.getText().toUpperCase();
		String category = invCategory.getValue();
		Vector<Tills> tillData = new Vector<>();
		try {
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			Students std = entitymanager.find(Students.class, cardNo);
			
			String classId = std.getEntryClassAssigned();
			invName.setText(std.getOtherNames() + " " + std.getSurName());
//			invClassCombo.setValue(classId);
			
			StudentClasses cl = entitymanager.find(StudentClasses.class, classId);
			invClassCombo.setValue(cl.getClassNo()+cl.getClassLetter());
			invYrCombo.setValue(cl.getYear());
			invTermCombo.setValue(cl.getTerm());
			
			Query queryX =
					entitymanager.createQuery("select e from Tills e ");
			tillData = (Vector<Tills>) queryX.getResultList();
			
			entitymanager.getTransaction().commit();
			entitymanager.close();
			emfactory.close();
		}
		catch(Exception e) {
			invoiceId.setText("Error initializing patient: "+ e.getMessage());
		}
		
		String itemId = invItemId.getValue();
		try {
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			DrugInformation drug = entitymanager.find(DrugInformation.class, itemId);
			
			invItemNameDesc.setText(drug.getNameDesc());
			invUnitPrice.setText(fm.format(drug.getUnitPrice()));
			
			entitymanager.getTransaction().commit();
			entitymanager.close();
			emfactory.close();
		}
		catch(Exception e) {
			invoiceId.setText("Error initializing patient: "+ e.getMessage());
		}
		
		invTotalPrice.setText(fm.format(Double.parseDouble(invUnitPrice.getText())));
		
		try {
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			AccountBalance patient = entitymanager.find(AccountBalance.class, cardNo);
			
			invAvailBal2.setText(fm.format(patient.getBalance()));
			
			entitymanager.getTransaction().commit();
			entitymanager.close();
			emfactory.close();
		}
		catch(Exception e7) {
			invoiceId.setText("Error initializing patient's acct bal: "+ e7.getMessage());
		}
		
		for(Tills till : tillData) {
			if(till.getTillCategory().equals(category)) {
				invGLAcctNo.setText(till.getTillAcctNo());
				invGLAcctName.setText(till.getTillName());
			}
		}
	}
	
	// create a function	
	public void postBills(String cardNo, String name, String itemId, double uPrice, int qty, 
			double tPrice, String itemName, String category, String invId, String GLAcctNo, 
			String GLAcctName, LocalDateTime dateTime, String invId2) {
				
		//core
		CreateTransactions transact = new CreateTransactions();
		
		if(category.equals(category)) {
			
			String thisAcct = cardNo;
			String tillAcctN = GLAcctNo;
			
			try {
				EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
				EntityManager entitymanager = emfactory.createEntityManager();
				entitymanager.getTransaction().begin();
				
				AccountBalance customer = entitymanager.find(AccountBalance.class, thisAcct);
				
				LinkedHashSet<String> myTIDSet = customer.getTIDSet();
				Object myTIDStr = myTIDSet.toArray()[myTIDSet.size()-1];
				String myStr =  (String) myTIDStr; 
				
				//tills
				EntityManagerFactory emfactoryx = Persistence.createEntityManagerFactory("SchoolMgtSystem");
				EntityManager entitymanagerx = emfactoryx.createEntityManager();
				entitymanagerx.getTransaction().begin();
				
				Tills tillx = entitymanagerx.find(Tills.class, tillAcctN);
				
				LinkedHashSet<String> myTTIDSet = tillx.getTTIDSet();
				Object myTTIDStr = myTTIDSet.toArray()[myTTIDSet.size()-1];
				String myStr2 = (String)myTTIDStr;
				
//				EntityManagerFactory emf = Persistence.createEntityManagerFactory("SchoolMgtSystem");
//				EntityManager entitymgr = emf.createEntityManager();
//				entitymgr.getTransaction().begin();
//				
//				Transactions trans = entitymgr.find(Transactions.class, myStr);
				//till
				EntityManagerFactory emfx = Persistence.createEntityManagerFactory("SchoolMgtSystem");
				EntityManager entitymgrx = emfx.createEntityManager();
				entitymgrx.getTransaction().begin();
			
				TillTransactions tilly = entitymgrx.find(TillTransactions.class, myStr2);
				
//				long mySeqNo = trans.getTxnSeqNo(); //Long.parseLong(seqNo);
//				long mySeqNo2 = mySeqNo + 1;
//				//String strTxnSeq = String.valueOf(mySeqNo2);
//				//txnSeqNoTF.setText(String.valueOf(mySeqNo2));
//				
//				//till
//				long mySeqNoTill = tilly.getTxnSeqNo(); //Long.parseLong(strSeqNoTill);
//				long mySeqNoTill2 = mySeqNoTill + 1;
//				//String strTxnSeqTill = String.valueOf(mySeqNoTill2);
				
				//IMPORTANT
				//LocalDateTime dateTime = LocalDateTime.now();
				
				String str = thisAcct+dateTime;  //strTxnSeq;
				String num = thisAcct;
				//TIDTF.setValue(str);
				String mySearchStr = myStr;
				
				//till
				String strTill = tillAcctN+dateTime;   //strTxnSeqTill;
				String mySearchStr2 = myStr2;
				double availB = 0.0;
				
				EntityManagerFactory emfactoryQ = Persistence.createEntityManagerFactory("SchoolMgtSystem");
				EntityManager entitymanagerQ = emfactoryQ.createEntityManager();
				entitymanagerQ.getTransaction().begin();
				
				AccountBalance ab = entitymanagerQ.find(AccountBalance.class, cardNo);
				
				availB = ab.getBalance();
				
				entitymanagerQ.getTransaction().commit();
				entitymanagerQ.close();
				emfactoryQ.close();
				
				//String invId = thisAcct + itemId + year + term;
				
				try {
					transact.postTransactions(mySearchStr, thisAcct, name, 
							"payment for "+itemName, "FT", invPurchaseDate.getValue(),   
							tPrice, availB - tPrice, 0.0, tPrice, dateTime, dispName, invId2);
					
					transact.postTillTransactions(mySearchStr2, tPrice, 0.0, 
							((Double.parseDouble(tilly.getBalance()))+tPrice), 
							thisAcct, tillAcctN, tilly.getTillAcctName(), name, 
							invPurchaseDate.getValue(), dispName, dateTime, invId2);
					
					transact.updateAcctBalanceDr(thisAcct, tPrice);
					transact.updateTillBalanceDr(tillAcctN, tPrice);
					
					try {
						
						CreateTransactions transact2 = new CreateTransactions();
						try {
							transact2.createTID(str, num);
						}
						catch(Exception e1) {
							invoiceId.setText("createTID: "+e1.getMessage());
						}
						
//						try {
//							transact2.createTxnSeqSet(str, mySeqNo2);
//						}
//						catch(Exception e2) {
//							invoiceId.setText("createTxnSeqSet: "+e2.getMessage());
//						}
						
						try {
							transact2.createTTIDSet(strTill, tillAcctN);
						}
						catch(Exception e3) {
							invoiceId.setText("createTTIDSet: "+e3.getMessage());
						}
						
//						try {
//							transact2.createTillTxnSeqSet(strTill, mySeqNo2); //tillAcctN);
//						}
//						catch(Exception e4) {
//							invoiceId.setText("createTillTxnSeqSet: "+e4.getMessage());
//						}
						
					}
					catch(Exception except){
						invoiceId.setText("Create TIDs Error: "+except.getMessage());
					}
					
				}
				
				catch(Exception e) {
					invoiceId.setText("Create txn error: "+e.getMessage());
				}
				
				entitymgrx.getTransaction().commit();
				entitymgrx.close();
				emfx.close();
				
//				entitymgr.getTransaction().commit();
//				entitymgr.close();
//				emf.close();
				
				entitymanagerx.getTransaction().commit();
				entitymanagerx.close();
				emfactoryx.close();
				
				entitymanager.getTransaction().commit();
				entitymanager.close();
				emfactory.close();
				
			}
			catch(Exception excepted) {
				invoiceId.setText("Error: "+excepted.getMessage());
			}
		}
		
	}
	
	//Bill a class post
	public void postBills2(String cardNo, String name, String itemId, double uPrice, int qty, 
			double tPrice, String itemName, String category, String invId, String GLAcctNo, 
			String GLAcctName, LocalDateTime dateTime, LocalDate date, String invId2) {
				
		//core
		CreateTransactions transact = new CreateTransactions();
		
		if(category.equals(category)) {
			
			String thisAcct = cardNo;
			String tillAcctN = GLAcctNo;
			
			try {
				EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
				EntityManager entitymanager = emfactory.createEntityManager();
				entitymanager.getTransaction().begin();
				
				AccountBalance customer = entitymanager.find(AccountBalance.class, thisAcct);
				
				LinkedHashSet<String> myTIDSet = customer.getTIDSet();
				Object myTIDStr = myTIDSet.toArray()[myTIDSet.size()-1];
				String myStr =  (String) myTIDStr; 
				
				//tills
				EntityManagerFactory emfactoryx = Persistence.createEntityManagerFactory("SchoolMgtSystem");
				EntityManager entitymanagerx = emfactoryx.createEntityManager();
				entitymanagerx.getTransaction().begin();
				
				Tills tillx = entitymanagerx.find(Tills.class, tillAcctN);
				
				LinkedHashSet<String> myTTIDSet = tillx.getTTIDSet();
				Object myTTIDStr = myTTIDSet.toArray()[myTTIDSet.size()-1];
				String myStr2 = (String)myTTIDStr;
				
				EntityManagerFactory emf = Persistence.createEntityManagerFactory("SchoolMgtSystem");
				EntityManager entitymgr = emf.createEntityManager();
				entitymgr.getTransaction().begin();
				
				Transactions trans = entitymgr.find(Transactions.class, myStr);
				//till
				EntityManagerFactory emfx = Persistence.createEntityManagerFactory("SchoolMgtSystem");
				EntityManager entitymgrx = emfx.createEntityManager();
				entitymgrx.getTransaction().begin();
			
				TillTransactions tilly = entitymgrx.find(TillTransactions.class, myStr2);
				
				long mySeqNo = 0; 
				long mySeqNo2 = mySeqNo + 1;
				
				//till
				long mySeqNoTill = 0; 
				long mySeqNoTill2 = mySeqNoTill + 1;
				
				String str = invId2; //thisAcct+dateTime; 
				String num = thisAcct;
				String mySearchStr = myStr;
				
				//till
				String strTill = invId2; //tillAcctN+dateTime; 
				String mySearchStr2 = myStr2;
				double availB = 0.0;
				
				EntityManagerFactory emfactoryQ = Persistence.createEntityManagerFactory("SchoolMgtSystem");
				EntityManager entitymanagerQ = emfactoryQ.createEntityManager();
				entitymanagerQ.getTransaction().begin();
				
				AccountBalance ab = entitymanagerQ.find(AccountBalance.class, cardNo);
				
				availB = ab.getBalance();
				
				entitymanagerQ.getTransaction().commit();
				entitymanagerQ.close();
				emfactoryQ.close();
				
				try {
					transact.postTransactions(mySearchStr, thisAcct, name, 
							"payment for "+itemName, "FT", date,   
							tPrice, availB - tPrice, 0.0, tPrice, dateTime, dispName, invId2);
					
					transact.postTillTransactions(mySearchStr2, tPrice, 0.0, 
							((Double.parseDouble(tilly.getBalance()))+tPrice), 
							thisAcct, tillAcctN, tilly.getTillAcctName(), name, 
							date, dispName, dateTime, invId2);
					
					transact.updateAcctBalanceDr(thisAcct, tPrice);
					transact.updateTillBalanceDr(tillAcctN, tPrice);
					
					try {
						
						CreateTransactions transact2 = new CreateTransactions();
						try {
							transact2.createTID(str, num);
						}
						catch(Exception e1) {
							//bacInformation.setText("createTID: "+e1.getMessage());
							Alert alert = new Alert(Alert.AlertType.ERROR);
							alert.setContentText("createTID... "+ e1.getMessage());
							alert.setHeaderText("CREATETID");
							Optional<ButtonType> result = alert.showAndWait();
							if(result.get() == ButtonType.OK) {
								alert.close();
							}
							else {
								alert.close();
							}
						}
						
						try {
							transact2.createTTIDSet(strTill, tillAcctN);
						}
						catch(Exception e3) {
							//bacInformation.setText("createTTIDSet: "+e3.getMessage());
							Alert alert = new Alert(Alert.AlertType.ERROR);
							alert.setContentText("createTTIDSet... "+ e3.getMessage());
							alert.setHeaderText("CREATETTID");
							Optional<ButtonType> result = alert.showAndWait();
							if(result.get() == ButtonType.OK) {
								alert.close();
							}
							else {
								alert.close();
							}
						}
						
					}
					catch(Exception except){
						//bacInformation.setText("Create TIDs Error: "+except.getMessage());
						Alert alert = new Alert(Alert.AlertType.ERROR);
						alert.setContentText("createTID Error... "+ except.getMessage());
						alert.setHeaderText("Error");
						Optional<ButtonType> result = alert.showAndWait();
						if(result.get() == ButtonType.OK) {
							alert.close();
						}
						else {
							alert.close();
						}
					}
					
				}
				
				catch(Exception e) {
					bacInformation.setText("Create txn error: "+e.getMessage());
					//e.printStackTrace();
//					Alert alert = new Alert(Alert.AlertType.ERROR);
//					alert.setContentText("create txn Error... "+ e.getMessage());
//					alert.setHeaderText("Error");
//					Optional<ButtonType> result = alert.showAndWait();
//					if(result.get() == ButtonType.OK) {
//						alert.close();
//					}
//					else {
//						alert.close();
//					}
				}
				
				entitymgrx.getTransaction().commit();
				entitymgrx.close();
				emfx.close();
				
				entitymgr.getTransaction().commit();
				entitymgr.close();
				emf.close();
				
				entitymanagerx.getTransaction().commit();
				entitymanagerx.close();
				emfactoryx.close();
				
				entitymanager.getTransaction().commit();
				entitymanager.close();
				emfactory.close();
				
			}
			catch(Exception excepted) {
				//bacInformation.setText("Error: "+excepted.getMessage());
				Alert alert = new Alert(Alert.AlertType.ERROR);
				alert.setContentText("Error... "+ excepted.getMessage());
				alert.setHeaderText("Error");
				Optional<ButtonType> result = alert.showAndWait();
				if(result.get() == ButtonType.OK) {
					alert.close();
				}
				else {
					alert.close();
				}
			}
		}
		
	}
	
	
	@FXML public void saveInvBillButton(ActionEvent event) {
//		String cardNo = invCardNo.getText().toUpperCase(); 
//		String name = invName.getText(); 
//		String itemId = invItemId.getValue();
//		double uPrice = Double.parseDouble(invUnitPrice.getText()); 
//	//	long availableQty = Long.parseLong(invAvailQty.getText());
//		int qty = Integer.parseInt(invQty.getText()); 
//		double tPrice = Double.parseDouble(invTotalPrice.getText());
//		String itemName = invItemNameDesc.getText();
//		//invPurchaseDate
//		String year = invYrCombo.getValue();
//		String term = invTermCombo.getValue();
//		String category = invCategory.getValue();
//		LocalDateTime dateTime = LocalDateTime.now();
//		String invId = cardNo+itemId+year+term;  //+ dateTime;
//		String GLAcctNo = invGLAcctNo.getText();
//		String GLAcctName = invGLAcctName.getText();
//		String stdClass = invClassCombo.getValue();
//		
//		CreateInvoicing invoice = new CreateInvoicing();
//		try {
//			postBills(cardNo, name, itemId, uPrice, qty, tPrice, itemName, category, 
//					invId, GLAcctNo, GLAcctName, dateTime, invId);
////			invoice.createInvoicing(invId, itemId, cardNo, name, itemName, 
////					invPurchaseDate.getValue(), uPrice, tPrice, qty, dispName, category, year, term, stdClass);
//			
//			try {
//				invoice.createInvoicing(invId, itemId, cardNo, name, itemName, 
//						invPurchaseDate.getValue(), uPrice, tPrice, qty, dispName, category, year, term, stdClass);
//				
////				invoice.createBillingsInformation(invId, itemId, cardNo, name, itemName, 
////						invPurchaseDate.getValue(), uPrice, tPrice, qty, dispName, category, year, term, stdClass);
//				
//				invoice.createBillingsInformation(invId, itemId, GLAcctNo, GLAcctName, itemName, invPurchaseDate.getValue(), 
//						uPrice, tPrice, qty, dispName, category, year, term, stdClass, cardNo);
//				
////				postBills(cardNo, name, itemId, uPrice, qty, tPrice, itemName, category, 
////						invId, GLAcctNo, GLAcctName, dateTime, invId);
//				
//				//update drug info
////				UpdateDrugInformation drug = new UpdateDrugInformation();
////				try {
////					drug.updateDrugInformationQty(itemId, qty, invPurchaseDate.getValue(), dispName);
////				}
////				catch(Exception e3) {
////					invCardNo.setText("Update drug info error: "+e3.getMessage());
////				}
//			}
//			catch(Exception ex) {
//				invCardNo.setText("save billings error: "+ ex.getMessage());
//			}
//			
//			invoiceId.setText(invId);
//		}
//		catch(Exception e) {
//			invCardNo.setText("save invoicing error: "+ e.getMessage());
//		}
//		finally {
//			invName.clear();
//			invUnitPrice.clear();
//			//invAvailQty.clear();
//			invQty.clear(); 
//			invTotalPrice.clear();
//			//invoiceId
//			invItemNameDesc.clear();
//			invPurchaseDate.setValue(LocalDate.now());
//			invCategory.setValue("select option");
//			invItemId.setValue("select option");
//		}
	}
	
	//Earned Income Report
	@FXML private Button enterEarnedIncomeBtn, returnEnterIncomeBtn, genExcelIncomeBtn, printIncomeBtn,
		spoolIncomeBtn;
	@FXML private SplitPane printPaneEarnedIncome;
	@FXML private TableView<IncomeDataTable> incomeDataTable;
	@FXML private TableColumn<IncomeDataTable,String> incomeSNoCol, acctNumIncomeCol, acctNameIncomeCol, 
		cbIncomeCol, earnedIncomeCol;
	@FXML private Label totalNetIncome, incomeTillBalance, totalNetPatBalances, incomeNetBalance, incomeDate;
	@FXML private TextField incomeTextError, incomeCashReceipt, incomeCashOutStanding;
	
	@SuppressWarnings({ "rawtypes", "unchecked" })
	@FXML public void spoolIncomeButton(ActionEvent event) {
		
		try {
			double cashReceipt = Double.parseDouble(incomeCashReceipt.getText());
			
			ObservableList<IncomeDataTable> data = FXCollections.observableArrayList();
			Vector<Tills> tillData = new Vector<>();
			Vector<AccountBalance> balData = new Vector<>();
			try {
				EntityManagerFactory emfactory = Persistence.createEntityManagerFactory
						("SchoolMgtSystem");
				EntityManager entitymanager = emfactory.createEntityManager();
				entitymanager.getTransaction().begin();
						
				Query query =
						entitymanager.createQuery("select e from Tills e ");
				tillData = (Vector<Tills>) query.getResultList();
				
				Query query2 =
						entitymanager.createQuery("select e from AccountBalance e ");
				balData = (Vector<AccountBalance>) query2.getResultList();
				
				entitymanager.getTransaction().commit();
				entitymanager.close();
				emfactory.close();
			}
			catch(Exception e) {
				incomeTextError.setVisible(true);
				incomeTextError.setText("till Spool Error: "+e.getLocalizedMessage());
			}
			
			int i = 0;
			double tillBal = 0.0;
			for(Tills till : tillData) {
				if(till.getTillAcctClassification().equals("GL")) {
					i = i + 1;
					String sNo = String.valueOf(i);
					String acctNo = till.getTillAcctNo();
					String acctName = till.getTillName();
					String acctBal = fm2.format(till.getBalance());
					String earnedInc = fm.format(till.getBalance());
					
					data.add(new IncomeDataTable(
							sNo, acctNo, acctName, acctBal, earnedInc));
				}
				else {
					tillBal = till.getBalance();
					incomeTillBalance.setText(fm2.format(tillBal));
				}
				
			}
			
			incomeSNoCol.setCellValueFactory(new PropertyValueFactory("sNo_Data"));
			acctNumIncomeCol.setCellValueFactory(new PropertyValueFactory("acctNo_Data"));
			acctNameIncomeCol.setCellValueFactory(new PropertyValueFactory("acctName_Data"));
			cbIncomeCol.setCellValueFactory(new PropertyValueFactory("acctBalance_Data"));
			earnedIncomeCol.setCellValueFactory(new PropertyValueFactory("earnedIncome_Data"));
			
			incomeDataTable.setItems(data);
		
			double sum = 0;
			for(IncomeDataTable datum : data) {
				sum = sum + Double.parseDouble(datum.getEarnedIncome_Data());
			}
			
			totalNetIncome.setText(fm2.format(sum));
			
			double netSum = 0.0, outStandingNet = 0.0;
			for(AccountBalance bal : balData) {
				if(bal.getBalance() >= 0.0) {
					netSum = netSum + bal.getBalance();
				}
				else {
					outStandingNet = outStandingNet + bal.getBalance();
				}
			}
			totalNetPatBalances.setText(fm2.format(netSum));
			for(Tills till : tillData) {
				if(till.getTillAcctClassification().equals("Till")) {
					incomeNetBalance.setText(fm.format(cashReceipt + tillBal)); //- (netSum + sum)));
				}
			}
			
			incomeCashOutStanding.setText(fm.format(outStandingNet));
			
			incomeCashReceipt.setText(fm.format(cashReceipt));
			LocalDate d3 = LocalDate.now();
			DateTimeFormatter d4 = DateTimeFormatter.ofLocalizedDate(FormatStyle.MEDIUM);
			String d5 = d4.format(d3);
			incomeDate.setText(d5);
		}
		catch(Exception ex) {
			incomeTextError.setVisible(true);
			incomeTextError.setText(ex.getLocalizedMessage());
			incomeDataTable.setItems(null);
		}
	}
	
	@FXML public void printIncomeButton(ActionEvent event) {
		spoolIncomeBtn.setVisible(false); 
		printIncomeBtn.setVisible(false); 
		genExcelIncomeBtn.setVisible(false);
		returnEnterIncomeBtn.setVisible(false);
		incomeTextError.setVisible(false);
		try {
			printNode(printPaneEarnedIncome);
		}
		catch(Exception exception) {
			incomeTextError.setVisible(true);
			incomeTextError.setText("Print Error: "+ exception.getLocalizedMessage());
		}
		finally {
			spoolIncomeBtn.setVisible(true); 
			printIncomeBtn.setVisible(true); 
			genExcelIncomeBtn.setVisible(true);
			returnEnterIncomeBtn.setVisible(true);
			incomeTextError.setVisible(false);
		}
	}
	
	@FXML public void genExcelIncomeButton(ActionEvent event) {
		Workbook workbook = new HSSFWorkbook();
		Sheet spreadSheet = workbook.createSheet("sheet");
		Row row = spreadSheet.createRow(0);
		
		for(int j = 0; j < incomeDataTable.getColumns().size(); j++) {
			row.createCell(j).setCellValue(incomeDataTable.getColumns().get(j).getText());
		}
		
		for(int i = 0; i < incomeDataTable.getItems().size(); i++) {
			row = spreadSheet.createRow(i + 1);
			for(int j = 0; j < incomeDataTable.getColumns().size(); j++) {
				if(incomeDataTable.getColumns().get(j).getCellData(i) != null) {
					row.createCell(j).setCellValue(incomeDataTable.getColumns().get(j).getCellData(i).toString());
				}
				else {
					row.createCell(j).setCellValue("");
				}
			}
		}
		
		String localDate = LocalDate.now().toString();
		String txt = "incomeDataTable"+localDate+".xls";
		String filePath = "C:\\workbook\\"+txt;
		
		try {
			FileOutputStream fileOut = new FileOutputStream(filePath);
			try {
				workbook.write(fileOut);
				fileOut.close();
				incomeTextError.setVisible(true);
				incomeTextError.setText(filePath);
			} catch (IOException e2) {
				incomeTextError.setVisible(true);
				incomeTextError.setText("Write Error: "+ e2.getMessage());
			}
		} catch (FileNotFoundException e) {
			incomeTextError.setVisible(true);
			incomeTextError.setText("File Error: "+ e.getMessage());
		}
	}
	
	//Periodic Earned Income Report
	@FXML private Button enterEarnedIncomeBtn2, returnEnterIncomeBtn2, genExcelIncomeBtn2, printIncomeBtn2,
		spoolIncomeBtn2;
	@FXML private SplitPane printPaneEarnedIncome2;
	@FXML private TableView<PeriodicIncomeDataTable> incomeDataTable2;
	@FXML private TableColumn<PeriodicIncomeDataTable,String> periodicSNoCol, periodicAcctNoCol, periodicAcctNameCol, 
		periodicCategoryCol, periodicBalanceCol;
	@FXML private Label totalNetIncome2, incomeTillBalance2, totalNetPatBalances2, incomeNetBalance2;
	@FXML private TextField incomeTextError2, incomeCashReceipt2, incomeCashOutStanding2;
	@FXML private DatePicker periodicFroDate, periodicToDate;
	
	@SuppressWarnings({ "rawtypes", "unchecked" })
	@FXML public void spoolIncomeButton2(ActionEvent event) {
		LocalDate froDate = periodicFroDate.getValue();
		LocalDate toDate = periodicToDate.getValue();
		
		try {
			
			ObservableList<PeriodicIncomeDataTable> data = FXCollections.observableArrayList();
			Vector<Invoicing> glData = new Vector<>();
			Vector<Transactions> txnData = new Vector<>();
			LinkedHashSet<String> DataSetPeriodic = new LinkedHashSet<>();
			
			try {
				EntityManagerFactory emfactory = Persistence.createEntityManagerFactory
						("SchoolMgtSystem");
				EntityManager entitymanager = emfactory.createEntityManager();
				entitymanager.getTransaction().begin();
						
				Query query =
						entitymanager.createQuery("select e from Invoicing e ");
				glData = (Vector<Invoicing>) query.getResultList();
				
				Query query2 =
						entitymanager.createQuery("select e from Transactions e ");
				txnData = (Vector<Transactions>) query2.getResultList();
				
				entitymanager.close();
				emfactory.close();
				
			}
			catch(Exception e) {
				incomeTextError2.toFront();
				incomeTextError2.setVisible(true);
				incomeTextError2.setText("till Spool Error: "+e.getLocalizedMessage());
				//e.printStackTrace();
			}
			
			//New Query for Tills
			final String JDBC_Driver_Periodic = "com.mysql.jdbc.Driver";
			final String DB_URL_Periodic = dbURL;
			final String DB_User_Periodic = dbUSR;
			final String DB_PWD_Periodic = dbPWD;							
												
			Connection conn_Periodic = null;
			PreparedStatement stmt_Periodic = null;
												
			try {
				Class.forName(JDBC_Driver_Periodic );
				conn_Periodic = DriverManager.getConnection(DB_URL_Periodic, DB_User_Periodic, DB_PWD_Periodic);
													
				String sql;
				sql = "SELECT * FROM Tills";
													
				stmt_Periodic = conn_Periodic.prepareStatement(sql);
													
				ResultSet resultSet = stmt_Periodic.executeQuery();
																					
				while(resultSet.next()) {
					DataSetPeriodic.add(resultSet.getString("TILLACCTNO"));
				}

				resultSet.close();
				stmt_Periodic.close();
				conn_Periodic.close();
			}
			catch(SQLException es) {
				incomeTextError2.toFront();
				incomeTextError2.setVisible(true);
				incomeTextError2.setText("Error JDBC: "+ es.getSQLState());
			}
			catch(Exception es2) {
				incomeTextError2.toFront();
				incomeTextError2.setVisible(true);
				incomeTextError2.setText("Error JDBC: "+ es2.getMessage());
			}
			finally {
				try {
					if(stmt_Periodic != null ) {
						stmt_Periodic.close();
					}
				}
				catch(SQLException ces) {
					incomeTextError2.toFront();
					incomeTextError2.setVisible(true);
					incomeTextError2.setText("Error JDBC: "+ ces.getSQLState());
				}
				try {
					if(conn_Periodic != null ) {
						conn_Periodic.close();
					}
				}
				catch(Exception ces2) {
					incomeTextError2.toFront();
					incomeTextError2.setVisible(true);
					incomeTextError2.setText("JDBC: "+ces2.getMessage());
				}
													
			}
			
			double cashAtHand = 0;
			for(Transactions transact : txnData) {
				if(transact.getTxnDate().toEpochDay() >= froDate.toEpochDay() && 
						transact.getTxnDate().toEpochDay() <= toDate.toEpochDay()) {
					cashAtHand = cashAtHand + Double.parseDouble(transact.getCredits());
				}
			}
			incomeCashReceipt2.setText(fm.format(cashAtHand));
			
			int i = 0;
			
			for(String tillNo : DataSetPeriodic) {
				EntityManagerFactory emfactory = Persistence.createEntityManagerFactory
						("SchoolMgtSystem");
				EntityManager entitymanager = emfactory.createEntityManager();
				entitymanager.getTransaction().begin();
						
				Tills tillInfo = entitymanager.find(Tills.class, tillNo);
				
				if(tillInfo.getTillAcctClassification().equals("GL")) {
					
					double sum = 0;
					
					for(Invoicing inv : glData) {
						if(inv.getPurchaseDate().toEpochDay() >= froDate.toEpochDay() && 
								inv.getPurchaseDate().toEpochDay() <= toDate.toEpochDay()) {
							
							if(tillInfo.getTillCategory().equals(inv.getCategory())) {
								sum = sum + inv.getTotalPrice();
							}
						}
					}
					
					i = i + 1;
					String SNo = String.valueOf(i);
					String acctNo = tillInfo.getTillAcctNo();
					String acctName = tillInfo.getTillName();
					String cat = tillInfo.getTillCategory();
					String netBal = fm.format(sum);
					
					data.add(new PeriodicIncomeDataTable(SNo, acctNo, acctName, cat, netBal));
				}
				
				entitymanager.getTransaction().commit();
				entitymanager.close();
				emfactory.close();
			}
			
			periodicSNoCol.setCellValueFactory(new PropertyValueFactory("sNo_Data"));
			periodicAcctNoCol.setCellValueFactory(new PropertyValueFactory("acctNo_Data"));
			periodicAcctNameCol.setCellValueFactory(new PropertyValueFactory("acctName_Data"));
			periodicCategoryCol.setCellValueFactory(new PropertyValueFactory("category_Data"));
			periodicBalanceCol.setCellValueFactory(new PropertyValueFactory("acctBalance_Data"));
			
			incomeDataTable2.setItems(data);
		
			double sum2 = 0;
			for(PeriodicIncomeDataTable datum : data) {
				sum2 = sum2 + Double.parseDouble(datum.getAcctBalance_Data());
			}
			
			totalNetIncome2.setText(fm2.format(sum2));
			incomeCashOutStanding2.setText(fm.format(cashAtHand - sum2));
			
		}
		catch(Exception ex) {
			incomeTextError2.toFront();
			incomeTextError2.setVisible(true);
			incomeTextError2.setText(ex.getLocalizedMessage());
			incomeDataTable2.setItems(null);
		}
	}
	
	@FXML public void printIncomeButton2(ActionEvent event) {
		spoolIncomeBtn2.setVisible(false); 
		printIncomeBtn2.setVisible(false); 
		genExcelIncomeBtn2.setVisible(false);
		returnEnterIncomeBtn2.setVisible(false);
		incomeTextError2.setVisible(false);
		try {
			printNode(printPaneEarnedIncome2);
		}
		catch(Exception exception) {
			incomeTextError2.setVisible(true);
			incomeTextError2.setText("Print Error: "+ exception.getLocalizedMessage());
		}
		finally {
			spoolIncomeBtn2.setVisible(true); 
			printIncomeBtn2.setVisible(true); 
			genExcelIncomeBtn2.setVisible(true);
			returnEnterIncomeBtn2.setVisible(true);
			incomeTextError2.setVisible(false);
		}
	}
	
	@FXML public void genExcelIncomeButton2(ActionEvent event) {
		Workbook workbook = new HSSFWorkbook();
		Sheet spreadSheet = workbook.createSheet("sheet");
		Row row = spreadSheet.createRow(0);
		
		for(int j = 0; j < incomeDataTable2.getColumns().size(); j++) {
			row.createCell(j).setCellValue(incomeDataTable2.getColumns().get(j).getText());
		}
		
		for(int i = 0; i < incomeDataTable2.getItems().size(); i++) {
			row = spreadSheet.createRow(i + 1);
			for(int j = 0; j < incomeDataTable2.getColumns().size(); j++) {
				if(incomeDataTable2.getColumns().get(j).getCellData(i) != null) {
					row.createCell(j).setCellValue(incomeDataTable2.getColumns().get(j).getCellData(i).toString());
				}
				else {
					row.createCell(j).setCellValue("");
				}
			}
		}
		
		String localDate = LocalDate.now().toString();
		String txt = "PeriodicIncomeDataTable"+localDate+".xls";
		String filePath = "C:\\workbook\\"+txt;
		
		try {
			FileOutputStream fileOut = new FileOutputStream(filePath);
			try {
				workbook.write(fileOut);
				fileOut.close();
				incomeTextError2.setVisible(true);
				incomeTextError2.setText(filePath);
			} catch (IOException e2) {
				incomeTextError2.setVisible(true);
				incomeTextError2.setText("Write Error: "+ e2.getMessage());
			}
		} catch (FileNotFoundException e) {
			incomeTextError2.setVisible(true);
			incomeTextError2.setText("File Error: "+ e.getMessage());
		}
	}
	
	//++++++PRINT INVOICE
	//Invoicing
	@FXML private Button spoolInvoicingInfoBtn, printInvoicingInfoBtn, genExcelInvoicingInfoBtn, 
		genExcelInvoiceInfoBtn;
	@FXML private SplitPane printPaneInvoicingInfo;
	@FXML private TableView<InvoicingDataTable> invoicingDataTable;
	@FXML private TableColumn<InvoicingDataTable,String> invoicingInfoSNoCol, invoicingDescCol, 
		invoicingInfoQtyCol, invoicingInfoUPCol, invoicingInfoTotalCol, invoicingInfoDateCol;
	@FXML private Label invoiceInfoName, invoicePhoneNo, invoiceTotalAmt, invoiceAddress, 
		invoiceCashPaid, invoiceOutstandingPmt;
	@FXML private TextField invoiceInfoCardNo, invoiceInfoTextError;
	@FXML private DatePicker invoiceInfoStartDate, invoiceInfoEndDate;
	
	
	@SuppressWarnings({ "rawtypes", "unchecked" })
	@FXML public void spoolInvoiceButton(ActionEvent event) {
		
		String cardNo = invoiceInfoCardNo.getText().toUpperCase();
		LocalDate startDate = invoiceInfoStartDate.getValue();
		LocalDate endDate = invoiceInfoEndDate.getValue();
		
		ObservableList<InvoicingDataTable> data = FXCollections.observableArrayList();
		Vector<Invoicing> billData = new Vector<>();
		Vector<AccountBalance> acctData = new Vector<>();
		try {
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory
					("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
					
			Query query =
					entitymanager.createQuery("select e from Invoicing e ");
			billData = (Vector<Invoicing>) query.getResultList();
			
			Query query2 =
					entitymanager.createQuery("select e from AccountBalance e ");
			acctData = (Vector<AccountBalance>) query2.getResultList();
			
			entitymanager.getTransaction().commit();
			entitymanager.close();
			emfactory.close();
		}
		catch(Exception e) {
			invoiceInfoTextError.setVisible(true);
			invoiceInfoTextError.setText("Invoice Spool Error: "+e.getLocalizedMessage());
		}
		
		LinkedHashSet<String> set = new LinkedHashSet<>();
		for(Invoicing invoice : billData) {
			String ourDate = invoice.getPurchaseDate().format(formatter);
			LocalDate d1 = invoice.getPurchaseDate();
			if(invoice.getStdNo().equals(cardNo)) {
				
				if(d1.isEqual(startDate) || d1.isAfter(startDate) && 
						d1.isBefore(endDate) || d1.isEqual(endDate)) {
					
					set.add(invoice.getPurchaseDate().format(formatter));
				}
			}
		}
		
		int i = 0;
		for(String dat : set) {
			String sNo, date, descX, qtyX, unitPX;
			
			for(Invoicing invoice : billData) {
				String ourDate = invoice.getPurchaseDate().format(formatter);
				LocalDate d1 = invoice.getPurchaseDate();
				if(invoice.getStdNo().equals(cardNo)) {
					if(d1.isEqual(startDate) || d1.isAfter(startDate) && 
							d1.isBefore(endDate) || d1.isEqual(endDate)) {
			
						date = invoice.getPurchaseDate().format(formatter);
						
						if(dat.equals(date)) {
							
							i = i + 1;
							sNo = String.valueOf(i);
							descX = invoice.getItemNameDesc();
							qtyX = String.valueOf(invoice.getQuantity());
							unitPX = fm.format(invoice.getUnitPrice());
							String totalX = fm.format(invoice.getTotalPrice());
							String dateX = invoice.getPurchaseDate().format(formatter);
							
							data.add(new InvoicingDataTable(
									sNo, descX, qtyX, unitPX, totalX, dateX));
						
						}
					}
				}
			}
		}
		
		invoicingInfoSNoCol.setCellValueFactory(new PropertyValueFactory("sNo_Data"));
		invoicingDescCol.setCellValueFactory(new PropertyValueFactory("description_Data"));
		invoicingInfoQtyCol.setCellValueFactory(new PropertyValueFactory("quantity_Data"));
		invoicingInfoUPCol.setCellValueFactory(new PropertyValueFactory("unitPrice_Data"));
		invoicingInfoTotalCol.setCellValueFactory(new PropertyValueFactory("total_Data"));
		invoicingInfoDateCol.setCellValueFactory(new PropertyValueFactory("date_Data"));
		
		invoicingDataTable.setItems(data);
	
		double sum = 0;
		for(InvoicingDataTable datum : data) {
			sum = sum + Double.parseDouble(datum.getTotal_Data());
		}
		
		invoiceTotalAmt.setText(fm2.format(sum));
		
		for(AccountBalance bal : acctData) {
			if(bal.getStdNo().equals(cardNo)) {
				if(bal.getBalance() < 0) {
					invoiceCashPaid.setText(fm2.format(sum + bal.getBalance()));
					invoiceOutstandingPmt.setText(fm2.format(bal.getBalance()));
				}
				else {
					invoiceCashPaid.setText(fm2.format(sum));
					invoiceOutstandingPmt.setText(fm.format(0));
				}
			}
		}
		
		EntityManagerFactory emfactory = Persistence.createEntityManagerFactory
				("SchoolMgtSystem");
		EntityManager entitymanager = emfactory.createEntityManager();
		entitymanager.getTransaction().begin();
				
		Students patient = entitymanager.find(Students.class, cardNo);
		
		invoiceInfoName.setText(patient.getOtherNames() + " " + patient.getSurName());
		invoicePhoneNo.setText(patient.getFatherPhone());
		invoiceAddress.setText(patient.getAddress());
		
		entitymanager.getTransaction().commit();
		entitymanager.close();
		emfactory.close();
	}
	
	@FXML public void printInvoicingButton(ActionEvent event) {
		spoolInvoicingInfoBtn.setVisible(false); 
		printInvoicingInfoBtn.setVisible(false); 
		genExcelInvoiceInfoBtn.setVisible(false);
		returnInvoicingBtn.setVisible(false);
		invoiceInfoTextError.setVisible(false);
		try {
			printNode(printPaneInvoicingInfo);
		}
		catch(Exception exception) {
			invoiceInfoTextError.setVisible(true);
			invoiceInfoTextError.setText("Print Error: "+ exception.getLocalizedMessage());
		}
		finally {
			spoolInvoicingInfoBtn.setVisible(true); 
			printInvoicingInfoBtn.setVisible(true); 
			genExcelInvoiceInfoBtn.setVisible(true);
			returnInvoicingBtn.setVisible(true);
		}
	}
	
	@FXML public void genExcelInvoiceInfoButton(ActionEvent event) {
		Workbook workbook = new HSSFWorkbook();
		Sheet spreadSheet = workbook.createSheet("sheet");
		Row row = spreadSheet.createRow(0);
		
		for(int j = 0; j < invoicingDataTable.getColumns().size(); j++) {
			row.createCell(j).setCellValue(invoicingDataTable.getColumns().get(j).getText());
		}
		
		for(int i = 0; i < invoicingDataTable.getItems().size(); i++) {
			row = spreadSheet.createRow(i + 1);
			for(int j = 0; j < invoicingDataTable.getColumns().size(); j++) {
				if(invoicingDataTable.getColumns().get(j).getCellData(i) != null) {
					row.createCell(j).setCellValue(invoicingDataTable.getColumns().get(j).getCellData(i).toString());
				}
				else {
					row.createCell(j).setCellValue("");
				}
			}
		}
		
		String localDate = LocalDate.now().toString();
		String txt = "invoicingDataTable"+localDate+".xls";
		String filePath = "C:\\workbook\\"+txt;
		
		try {
			FileOutputStream fileOut = new FileOutputStream(filePath);
			try {
				workbook.write(fileOut);
				fileOut.close();
				invoiceInfoTextError.setVisible(true);
				invoiceInfoTextError.setText(filePath);
			} catch (IOException e2) {
				invoiceInfoTextError.setVisible(true);
				invoiceInfoTextError.setText("Write Error: "+ e2.getMessage());
			}
		} catch (FileNotFoundException e) {
			invoiceInfoTextError.setVisible(true);
			invoiceInfoTextError.setText("File Error: "+ e.getMessage());
		}
	}
	
	//Billings
	@FXML private Button spoolBillingsInfoBtn, printBillingsInfoBtn, genExcelBillInfoBtn;
	@FXML private SplitPane printPaneBillInfo;
	@FXML private TableView<BillingsInfoDataTable> billingsInfoDataTable;
	@FXML private TableColumn<BillingsInfoDataTable,String> billInfoSNoCol, billInfoDateCol, 
		billInfoConsultCol, billInfoDrugsCol, billInfoSurgeryCol, billInfoLabCol, billInfoXrayCol, 
		billInfoBedCol, billInfoOthersCol, billInfoTotalCol;
	@FXML private Label billInfoName, billInfoFromDate, billInfoToDate, billInfoTotalAmt, 
		billInfoCashPaid, billInfoOutstandingPmt;
	@FXML private TextField billInfoCardNo, billInfoTextError;
	@FXML private DatePicker billInfoStartDate, billInfoEndDate;
	
	@SuppressWarnings({ "unchecked", "rawtypes" })
	@FXML public void spoolBillInfoButton(ActionEvent event) {
		
		String cardNo = billInfoCardNo.getText().toUpperCase();
		LocalDate startDate = billInfoStartDate.getValue();
		LocalDate endDate = billInfoEndDate.getValue();
		
		ObservableList<BillingsInfoDataTable> data = FXCollections.observableArrayList();
		Vector<BillingsInformation> billData = new Vector<>();
		Vector<AccountBalance> acctData = new Vector<>();
		try {
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory
					("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
					
			Query query =
					entitymanager.createQuery("select e from BillingsInformation e ");
			billData = (Vector<BillingsInformation>) query.getResultList();
			
			Query query2 =
					entitymanager.createQuery("select e from AccountBalance e ");
			acctData = (Vector<AccountBalance>) query2.getResultList();
			
			entitymanager.getTransaction().commit();
			entitymanager.close();
			emfactory.close();
		}
		catch(Exception e) {
			billInfoTextError.setVisible(true);
			billInfoTextError.setText("Bill Spool Error: "+e.getLocalizedMessage());
		}
		
		LinkedHashSet<LocalDate> set = new LinkedHashSet<>();
		for(BillingsInformation bill : billData) {
			//String ourDate = bill.getBillingDate().format(formatter);
			LocalDate d1 = bill.getBillingDate();
			if(bill.getStdNo() != null && bill.getStdNo().equalsIgnoreCase(cardNo)) {
				
				if(d1.isEqual(startDate) || d1.isAfter(startDate) && 
						d1.isBefore(endDate) || d1.isEqual(endDate)) {
					
					set.add(bill.getBillingDate());
				}
			}
		}
		
		int i = 0;
		for(LocalDate dat : set) {
			String sNo;
			LocalDate date;
			double consultation = 0, drug = 0, surgery = 0, lab = 0, xray = 0, bed = 0, others = 0, 
					total = 0;
			
			for(BillingsInformation bill : billData) {
				LocalDate d1 = bill.getBillingDate();
				if(bill.getStdNo() != null && bill.getStdNo().equals(cardNo)) {
					if(d1.isEqual(startDate) || d1.isAfter(startDate) && 
							d1.isBefore(endDate) || d1.isEqual(endDate)) {
			
						date = bill.getBillingDate();
						
						if(dat.isEqual(date)) {
							consultation = consultation + bill.getSchoolFee();
							drug = drug + bill.getWAEC();
							surgery = surgery + bill.getJuniorWAEC();
							lab = lab + bill.getNECO();
							xray = xray + bill.getICT();
							bed = bed + bill.getBoardingFee();
							others = others + bill.getOthers();
						}
					}
				}
			}
			total = consultation + drug + surgery + lab + xray + bed + others;
			i = i + 1;
			sNo = String.valueOf(i);
			String consultX = fm2.format(consultation);
			String drugX = fm2.format(drug);
			String surgX = fm2.format(surgery);
			String labX = fm2.format(lab);
			String xrayX = fm2.format(xray);
			String bedX = fm2.format(bed);
			String othersX = fm2.format(others);
			String totalX = fm.format(total);
			
			data.add(new BillingsInfoDataTable(
					sNo, dat.toString(), consultX, drugX, surgX, labX, xrayX, bedX, othersX, totalX));
		}
		
		billInfoSNoCol.setCellValueFactory(new PropertyValueFactory("sNo_Data"));
		billInfoDateCol.setCellValueFactory(new PropertyValueFactory("date_Data"));
		billInfoConsultCol.setCellValueFactory(new PropertyValueFactory("consultation_Data"));
		billInfoDrugsCol.setCellValueFactory(new PropertyValueFactory("drugs_Data"));
		billInfoSurgeryCol.setCellValueFactory(new PropertyValueFactory("surgery_Data"));
		billInfoLabCol.setCellValueFactory(new PropertyValueFactory("lab_Data"));
		billInfoXrayCol.setCellValueFactory(new PropertyValueFactory("xray_Data"));
		billInfoBedCol.setCellValueFactory(new PropertyValueFactory("bed_Data"));
		billInfoOthersCol.setCellValueFactory(new PropertyValueFactory("others_Data"));
		billInfoTotalCol.setCellValueFactory(new PropertyValueFactory("total_Data"));
		
		billingsInfoDataTable.setItems(data);
	
		double sum = 0;
		for(BillingsInfoDataTable datum : data) {
			sum = sum + Double.parseDouble(datum.getTotal_Data());
		}
		
		billInfoTotalAmt.setText(fm2.format(sum));
		
		DateTimeFormatter formatter2 = DateTimeFormatter.ofLocalizedDate(FormatStyle.MEDIUM);
		String stDate = formatter2.format(startDate);
		String edDate = formatter2.format(endDate);
		
		billInfoFromDate.setText(stDate);
		billInfoToDate.setText(edDate);
		
		for (AccountBalance bal : acctData) {
			if(bal.getStdNo().equals(cardNo)) {
				if(bal.getBalance() < 0.0) {
					billInfoCashPaid.setText(fm2.format(sum + bal.getBalance()));
					billInfoOutstandingPmt.setText(fm2.format(bal.getBalance()));
				}
				else {
					billInfoCashPaid.setText(fm2.format(sum));
					billInfoOutstandingPmt.setText(fm.format(0));
				}
			}
		}
		
		EntityManagerFactory emfactory = Persistence.createEntityManagerFactory
				("SchoolMgtSystem");
		EntityManager entitymanager = emfactory.createEntityManager();
		entitymanager.getTransaction().begin();
				
		Students patient = entitymanager.find(Students.class, cardNo);
		
		billInfoName.setText(patient.getOtherNames() + " " + patient.getSurName());
		
		entitymanager.getTransaction().commit();
		entitymanager.close();
		emfactory.close();
	}
	
	@FXML public void printBillInfoButton(ActionEvent event) {
		printBillingsInfoBtn.setVisible(false); 
		spoolBillingsInfoBtn.setVisible(false); 
		returnBillingsBtn.setVisible(false);
		genExcelBillInfoBtn.setVisible(false);
		billInfoStartDate.setVisible(false);
		billInfoEndDate.setVisible(false);
		billInfoTextError.setVisible(false);
		try {
			printNode(printPaneBillInfo);
		}
		catch(Exception exception) {
			billInfoTextError.setVisible(true);
			billInfoTextError.setText("Print Error: "+ exception.getLocalizedMessage());
		}
		finally {
			printBillingsInfoBtn.setVisible(true); 
			spoolBillingsInfoBtn.setVisible(true); 
			returnBillingsBtn.setVisible(true);
			genExcelBillInfoBtn.setVisible(true);
			billInfoStartDate.setVisible(true);
			billInfoEndDate.setVisible(true);
		}
	}
	
	@FXML public void genExcelBillingInfoButton(ActionEvent event) {
		Workbook workbook = new HSSFWorkbook();
		Sheet spreadSheet = workbook.createSheet("sheet");
		Row row = spreadSheet.createRow(0);
		
		for(int j = 0; j < billingsInfoDataTable.getColumns().size(); j++) {
			row.createCell(j).setCellValue(billingsInfoDataTable.getColumns().get(j).getText());
		}
		
		for(int i = 0; i < billingsInfoDataTable.getItems().size(); i++) {
			row = spreadSheet.createRow(i + 1);
			for(int j = 0; j < billingsInfoDataTable.getColumns().size(); j++) {
				if(billingsInfoDataTable.getColumns().get(j).getCellData(i) != null) {
					row.createCell(j).setCellValue(billingsInfoDataTable.getColumns().get(j).getCellData(i).toString());
				}
				else {
					row.createCell(j).setCellValue("");
				}
			}
		}
		
		String localDate = LocalDate.now().toString();
		String txt = "billingsInfoDataTable"+localDate+".xls";
		String filePath = "C:\\workbook\\"+txt;
		
		try {
			FileOutputStream fileOut = new FileOutputStream(filePath);
			try {
				workbook.write(fileOut);
				fileOut.close();
				billInfoTextError.setVisible(true);
				billInfoTextError.setText(filePath);
			} catch (IOException e2) {
				billInfoTextError.setVisible(true);
				billInfoTextError.setText("Write Error: "+ e2.getMessage());
			}
		} catch (FileNotFoundException e) {
			billInfoTextError.setVisible(true);
			billInfoTextError.setText("File Error: "+ e.getMessage());
		}
	}
	
	
	//create classes controller
	@FXML private Button enterCreateClass, returnEnterCreateClass;
	@FXML private ComboBox<String> createClassNo, createClassLetter, createClassYear, createClassTerm, createClassId;
	@FXML private DatePicker createClassEntryDate;
	
	ObservableList<String> classIdLst = FXCollections.observableArrayList();
	//ObservableList<String> classIdLst2 = FXCollections.observableArrayList("WAEC","NECO","JUNIORWAEC","ADMISSION");
	
	@FXML public void createClassesComboInit(MouseEvent event) {
		createClassNo.setItems(stdClassN);
		createClassLetter.setItems(classL);
		//createClassYear.setItems(years);
		populateYear(createClassYear);
		createClassTerm.setItems(termN);
		
		populateStdClassesComboAll(classIdLst, createClassId);
	}
	
	@FXML public void createClassMouseEvt(MouseEvent event) {
		createClassEntryDate.setValue(LocalDate.now());
	}
	
	@FXML public void saveCreateClassesButton(ActionEvent event) {
		String classNo = createClassNo.getValue().toUpperCase();
		String classLet = createClassLetter.getValue().toUpperCase();
		String year = createClassYear.getValue().toUpperCase();
		String term = createClassTerm.getValue().toUpperCase();
		LocalDate entryDate = createClassEntryDate.getValue();
		
		try {
			if(classNo.trim().contains("ADMISSION") || classNo.trim().contains("WAEC") || 
					classNo.trim().contains("NECO") || classNo.trim().contains("JUNIORWAEC")) {
				
				String cid = classNo+classLet+year+term;
				
				CreateStudentClasses classes = new CreateStudentClasses();
				try {
					classes.createStudentClasses(cid, classNo, classLet, year, term, dispName, entryDate);
					createClassId.setValue(cid);
				}
				catch(Exception e) {
				
					e.printStackTrace();
					Alert alert = new Alert(Alert.AlertType.ERROR);
					alert.setContentText("Invalid entries... "+ e.getMessage());
					alert.setHeaderText("INVALID ENTRIES");
					Optional<ButtonType> result = alert.showAndWait();
					if(result.get() == ButtonType.OK) {
						alert.close();
					}
					else {
						alert.close();
					}
				}
			}
			else if(classNo.trim().length() == 4 && classLet.trim().length() == 1 || classLet.trim().length() == 2 && 
					year.trim().length() == 4 && term.trim().length() == 1 && 
					entryDate.toString().trim().length() != 0) {
				
				String cid = classNo+classLet+year+term;
				
				CreateStudentClasses classes = new CreateStudentClasses();
				try {
					classes.createStudentClasses(cid, classNo, classLet, year, term, dispName, entryDate);
					createClassId.setValue(cid);
				}
				catch(Exception e) {
					e.printStackTrace();
					Alert alert = new Alert(Alert.AlertType.ERROR);
					alert.setContentText("Invalid entries... "+ e.getMessage());
					alert.setHeaderText("INVALID ENTRIES");
					Optional<ButtonType> result = alert.showAndWait();
					if(result.get() == ButtonType.OK) {
						alert.close();
					}
					else {
						alert.close();
					}
				}
				
			}
			else {
				//throw new Exception("Select all your fields...");
				Alert alert = new Alert(Alert.AlertType.ERROR);
				alert.setContentText("Invalid entries... ");
				alert.setHeaderText("INVALID ENTRIES");
				Optional<ButtonType> result = alert.showAndWait();
				if(result.get() == ButtonType.OK) {
					alert.close();
				}
				else {
					alert.close();
				}
			}
		}
		catch(Exception except) {
			Alert alert = new Alert(Alert.AlertType.ERROR);
			alert.setContentText("Error: "+ except.getMessage());
			alert.setHeaderText("INVALID ENTRIES");
			Optional<ButtonType> result = alert.showAndWait();
			if(result.get() == ButtonType.OK) {
				alert.close();
			}
			else {
				alert.close();
			}
		}
		finally {
			//createClassNo
			//createClassLetter
			createClassYear.setValue("select year");
			createClassTerm.setValue("select term");
			createClassEntryDate.setValue(LocalDate.now());	
		}
	}
	
	//Find class Info
	@FXML public void findCreateClassButton(ActionEvent event) {
		String cid = createClassId.getValue().toUpperCase();
		try {
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			StudentClasses clas = entitymanager.find(StudentClasses.class, cid);
			
			createClassNo.setValue(clas.getClassNo());
			createClassLetter.setValue(clas.getClassLetter());
			createClassYear.setValue(clas.getYear());
			createClassTerm.setValue(clas.getTerm());
			createClassEntryDate.setValue(clas.getEntryDate());
			
			entitymanager.getTransaction().commit();
			entitymanager.close();
			emfactory.close();
		}
		catch(Exception e) {
			createClassYear.setValue("select year");
			createClassTerm.setValue("select term");
			createClassEntryDate.setValue(LocalDate.now());
		}
	}
	
	//Update Class Info
	@FXML public void updateCreateClassesButton(ActionEvent event) {
		String cid = createClassId.getValue().toUpperCase();
		String classNo = createClassNo.getValue().toUpperCase();
		String classLet = createClassLetter.getValue().toUpperCase();
		String year = createClassYear.getValue().toUpperCase();
		String term = createClassTerm.getValue().toUpperCase();
		LocalDate entryDate = createClassEntryDate.getValue();
		
		UpdateStudentClasses classes = new UpdateStudentClasses();
		try {
			classes.updateStudentClasses(cid, classNo, classLet, year, term, dispName, entryDate);
			//createClassId.setText(cid);
		}
		catch(Exception e) {
			createClassId.setValue("Updating classes error: "+ e.getMessage());
		}
		finally {
			//createClassNo
			//createClassLetter
			createClassYear.setValue("select year");
			createClassTerm.setValue("select term");
			createClassEntryDate.setValue(LocalDate.now());
		}
	}
	
	//Delete StudentClasses
	@FXML public void deleteStudentClassesButton(ActionEvent event) {
		if(true) {
			Alert alert = new Alert(Alert.AlertType.CONFIRMATION);
			alert.setContentText("You are about to make this class inactive... "
					+ "Note that this action is reversible! "
					+ "Updating the same class from this window makes it active again.");
			Optional<ButtonType> result = alert.showAndWait();
			if(result.get() == ButtonType.OK) {
				String cid = createClassId.getValue();
				
				DeleteStudentClasses clas = new DeleteStudentClasses();
				try {
					clas.deleteStudentClasses(cid);
				}
				catch(Exception e) {
					createClassId.setValue("Delete class error: "+ e.getMessage());
				}
				finally {
					createClassNo.setValue("select class");
					createClassLetter.setValue("select class letter");
					createClassYear.setValue("select year");
					createClassTerm.setValue("select term");
					createClassEntryDate.setValue(LocalDate.now());	
				}
			}
			else {
				alert.close();
			}
		}
	}
	
	
	//Change Border Status Controller
	@FXML private Button enterChangeBorderStatusBtn, returnEnterChangeBorderStatusBtn;
	@FXML private TextField cbsId, cbsStdId;  
	@FXML private TextArea cbsName;
	@FXML private ComboBox<String> cbsStdClass, cbsCurrentBorderStatus, cbsYear, cbsTerm, cbsNewBorderStatus;
	@FXML private DatePicker cbsEntryDate;
	
	@FXML public void cbsComboInit(MouseEvent event) {
		//cbsYear.setItems(years);
		populateYear(cbsYear);
		cbsTerm.setItems(termN);
		cbsNewBorderStatus.setItems(borderStatus);
	}
	
	@FXML public void cbsInfoInitX(MouseEvent event) {
		String stdId = cbsStdId.getText().toUpperCase();
		try {
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			Students std = entitymanager.find(Students.class, stdId);
			
			cbsName.setText(std.getOtherNames() + " " + std.getSurName());
			cbsStdClass.setValue(std.getEntryClassAssigned());
			cbsCurrentBorderStatus.setValue(std.getEntryBorderStatus());
//			cbsYear.setValue("session");
//			cbsTerm.setValue("term");
//			cbsNewBorderStatus.setValue("select new border status");
//			cbsEntryDate.setValue(LocalDate.now());
			
			entitymanager.getTransaction().commit();
			entitymanager.close();
			emfactory.close();
		}
		catch(Exception e) {
			cbsId.setText(e.getMessage());
			cbsStdId.clear();	
			cbsName.clear();
			cbsStdClass.setValue("std class");
			cbsCurrentBorderStatus.setValue("current border status");
			cbsYear.setValue("session");
			cbsTerm.setValue("term");
			cbsNewBorderStatus.setValue("select new border status");
			cbsEntryDate.setValue(LocalDate.now());
		}
	}
	
	@FXML public void submitCbsButton(ActionEvent event) {
		LocalDateTime localDateTime = LocalDateTime.now();
		
		String stdId = cbsStdId.getText().toUpperCase();
		String name = cbsName.getText().toUpperCase();
		String stdClass = cbsStdClass.getValue().toUpperCase();
		String currentStatus = cbsCurrentBorderStatus.getValue().toUpperCase();
		String year = cbsYear.getValue().toUpperCase();
		String term = cbsTerm.getValue().toUpperCase();
		String newStatus = cbsNewBorderStatus.getValue();
		LocalDate entryDate = cbsEntryDate.getValue();
		
		try {
			if(name.trim().length() != 0 && stdClass.trim().length() != 0 && currentStatus.trim().length() != 0 && 
					year.trim().length() != 0 && newStatus.trim().length() != 0 && 
					entryDate.toString().trim().length() != 0 && (validateStdNo(stdId))) {
				String cbsid = stdId+year+term+localDateTime;
				
				CreateChangeBorderStatus change = new CreateChangeBorderStatus();
				try {
					change.createChangeBorderStatus(cbsid, stdId, name, stdClass, currentStatus, 
							year, term, newStatus, dispName, entryDate);
					try {
						EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
						EntityManager entitymanager = emfactory.createEntityManager();
						entitymanager.getTransaction().begin();
						
						Students std = entitymanager.find(Students.class, stdId);
						
						std.setEntryBorderStatus(newStatus);
						
						entitymanager.persist(std);
						entitymanager.getTransaction().commit();
						entitymanager.close();
						emfactory.close();
					}
					catch(Exception ex) {
						cbsId.setText("update std change border error: "+ ex.getMessage());
					}
					
					cbsId.setText(cbsid);
				}
				catch(Exception e) {
					cbsId.setText("Create change border error: "+ e.getMessage());
				}
				finally {
					cbsStdId.clear();	
					cbsName.clear();
					cbsStdClass.setValue("std class");
					cbsCurrentBorderStatus.setValue("current border status");
					cbsYear.setValue("session");
					cbsTerm.setValue("term");
					cbsNewBorderStatus.setValue("select new border status");
					cbsEntryDate.setValue(LocalDate.now());
				}
			}
			else {
				Alert alert = new Alert(Alert.AlertType.ERROR);
				alert.setContentText("Invalid parameters selected/entries...");
				alert.setHeaderText("INVALID ENTRIES");
				Optional<ButtonType> result = alert.showAndWait();
				if(result.get() == ButtonType.OK) {
					alert.close();
				}
				else {
					alert.close();
				}
			}
		}
		catch(Exception excepted) {
			excepted.printStackTrace();
			Alert alert = new Alert(Alert.AlertType.ERROR);
			alert.setContentText(excepted.getMessage() + ": Invalid parameters selected/entries...");
			alert.setHeaderText("INVALID ENTRIES");
			Optional<ButtonType> result = alert.showAndWait();
			if(result.get() == ButtonType.OK) {
				alert.close();
			}
			else {
				alert.close();
			}
		}
	}
	
	//Find change border status Info
	@FXML public void findChangeBorderStatusButton(ActionEvent event) {
		String cbsid = cbsId.getText().toUpperCase();
		try {
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			ChangeBorderStatus change = entitymanager.find(ChangeBorderStatus.class, cbsid);
			
			cbsStdId.setText(change.getStdId());	
			cbsName.setText(change.getName());
			cbsStdClass.setValue(change.getStdClass());
			cbsCurrentBorderStatus.setValue(change.getCurrentBorderStatus());
			cbsYear.setValue(change.getYear());
			cbsTerm.setValue(change.getTerm());
			cbsNewBorderStatus.setValue(change.getNewBorderStatus());
			cbsEntryDate.setValue(change.getEntryDate());
			
			entitymanager.getTransaction().commit();
			entitymanager.close();
			emfactory.close();
		}
		catch(Exception e) {
			cbsId.setText("Find change border error: "+ e.getMessage());
			cbsStdId.clear();	
			cbsName.clear();
			cbsStdClass.setValue("std class");
			cbsCurrentBorderStatus.setValue("current border status");
			cbsYear.setValue("session");
			cbsTerm.setValue("term");
			cbsNewBorderStatus.setValue("select new border status");
			cbsEntryDate.setValue(LocalDate.now());
		}
	}
	
	//Update change border Info
	@FXML public void updateChangeBorderStatusButton(ActionEvent event) {
		
		String stdId = cbsStdId.getText().toUpperCase();
		String name = cbsName.getText().toUpperCase();
		String stdClass = cbsStdClass.getValue().toUpperCase();
		String currentStatus = cbsCurrentBorderStatus.getValue().toUpperCase();
		String year = cbsYear.getValue().toUpperCase();
		String term = cbsTerm.getValue().toUpperCase();
		String newStatus = cbsNewBorderStatus.getValue();
		LocalDate entryDate = cbsEntryDate.getValue();
		
		String cbsid = cbsId.getText();
		
		UpdateChangeBorderStatus change = new UpdateChangeBorderStatus();
		try {
			change.updateChangeBorderStatus(cbsid, stdId, name, stdClass, currentStatus, 
					year, term, newStatus, dispName, entryDate);
			try {
				EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
				EntityManager entitymanager = emfactory.createEntityManager();
				entitymanager.getTransaction().begin();
				
				Students std = entitymanager.find(Students.class, stdId);
				
				std.setEntryBorderStatus(newStatus);
				
				entitymanager.persist(std);
				entitymanager.getTransaction().commit();
				entitymanager.close();
				emfactory.close();
			}
			catch(Exception ex) {
				cbsId.setText("update std change border error: "+ ex.getMessage());
			}
			
			cbsId.setText(cbsid);
		}
		catch(Exception e) {
			cbsId.setText("update change border error: "+ e.getMessage());
		}
		finally {
			cbsStdId.clear();	
			cbsName.clear();
			cbsStdClass.setValue("std class");
			cbsCurrentBorderStatus.setValue("current border status");
			cbsYear.setValue("session");
			cbsTerm.setValue("term");
			cbsNewBorderStatus.setValue("select new border status");
			cbsEntryDate.setValue(LocalDate.now());
		}
	}
	
	//Delete change border status
	@FXML public void deleteChangeBorderStatusButton(ActionEvent event) {

	}
	
	
	//Assign std to Classes Controller
	@FXML private Button enterChangeStdClassBtn, returnEnterChangeStdClassBtn;
	@FXML private TextField cscId, cscStdId;  
	@FXML private TextArea cscName, astcDisplayClass;
	@FXML private ComboBox<String> cscCurrentStdClass, cscCurrentBorderStatus, cscYear, cscTerm, cscNewStdClass;
	@FXML private DatePicker cscEntryDate;
	
	@FXML TableView<AssignStdToClassDataTable> assignStdToClassDataTable;
	@FXML TableColumn<AssignStdToClassDataTable,String> astcSNoCol, astcStdIdCol, astcNameCol, astcSexCol,
		astcAgeCol, astcBorderCol, astcBalanceCol;
	
	ObservableList<String> newClasses = FXCollections.observableArrayList();
	
	@FXML public void cscComboInit(MouseEvent event) {
		//cscYear.setItems(years);
		populateYear(cscYear);
		cscTerm.setItems(termN);
		//cscNewStdClass.setItems(stdClassN);
		try {
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			Vector<StudentClasses> userData = new Vector<>();
			Query queryX =
					entitymanager.createQuery("select e from StudentClasses e ");
			userData = (Vector<StudentClasses>) queryX.getResultList();
			
			for(StudentClasses x : userData) {
				if(!(newClasses.contains(x.getClassNo()+x.getClassLetter()))) {
					if(x.getStatus().equals("Active")) {
						newClasses.add(x.getClassNo()+x.getClassLetter());
					}
				}
			}
			
			cscNewStdClass.setItems(newClasses);
			
			entitymanager.getTransaction().commit();
			entitymanager.close();
			emfactory.close();
			
			new AutoCompleteComboBoxListener<>(cscNewStdClass);
		}
		catch(Exception e) {
			//cscId.setText("Error initializing classes: "+ e.getMessage());
			e.printStackTrace();
		}
	}
	
	//populate std classes combo
	public void populateStdClassesCombo(ObservableList<String> list, ComboBox<String> combo) {
		try {
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			Vector<StudentClasses> userData = new Vector<>();
			Query queryX =
					entitymanager.createQuery("select e from StudentClasses e ");
			userData = (Vector<StudentClasses>) queryX.getResultList();
			
			for(StudentClasses x : userData) {
				if(!(list.contains(x.getClassId()))) {
					if(x.getStatus().equals("Active")  ) { //&& 
							//!x.getClassId().contains("ADMISSION") && 
							//!x.getClassId().contains("EXPENSE")) {
						list.add(x.getClassId());
					}
				}
			}
			
			combo.setItems(list);
			
			entitymanager.getTransaction().commit();
			entitymanager.close();
			emfactory.close();
			
			new AutoCompleteComboBoxListener<>(combo);
		}
		catch(Exception e) {
			//cscId.setText("Error initializing classes: "+ e.getMessage());
			e.printStackTrace();
		}
	}
	
	//populate all
	public void populateStdClassesComboAll(ObservableList<String> list, ComboBox<String> combo) {
		try {
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			Vector<StudentClasses> userData = new Vector<>();
			Query queryX =
					entitymanager.createQuery("select e from StudentClasses e ");
			userData = (Vector<StudentClasses>) queryX.getResultList();
			
			for(StudentClasses x : userData) {
				if(!(list.contains(x.getClassId()))) {
					list.add(x.getClassId());
				}
			}
			
			combo.setItems(list);
			
			entitymanager.getTransaction().commit();
			entitymanager.close();
			emfactory.close();
			
			new AutoCompleteComboBoxListener<>(combo);
		}
		catch(Exception e) {
			//cscId.setText("Error initializing classes: "+ e.getMessage());
			e.printStackTrace();
		}
	}
	
	@FXML public void cscInfoInitX(MouseEvent event) {
		
		String stdId = cscStdId.getText().toUpperCase();
		try {
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			Students std = entitymanager.find(Students.class, stdId);
			
			cscName.setText(std.getOtherNames() + " " + std.getSurName());
			cscCurrentStdClass.setValue(std.getEntryClassAssigned());
			cscCurrentBorderStatus.setValue(std.getEntryBorderStatus());
			
			entitymanager.getTransaction().commit();
			entitymanager.close();
			emfactory.close();
		}
		catch(Exception e) {
			//cscId.setText(e.getMessage());
			e.printStackTrace();
			cscStdId.clear();	
			cscName.clear();
			cscCurrentStdClass.setValue("std class");
			cscCurrentBorderStatus.setValue("current border status");
			cscYear.setValue("session");
			cscTerm.setValue("term");
			cscNewStdClass.setValue("select new std class");
			cscEntryDate.setValue(LocalDate.now());
		}
	}
	
	@FXML public void submitCscButton(ActionEvent event) {
		LocalDateTime localDateTime = LocalDateTime.now();
		
		String stdId = cscStdId.getText();
		String name = cscName.getText().toUpperCase();
		String currentClass = cscCurrentStdClass.getValue();
		String currentStatus = cscCurrentBorderStatus.getValue();
		String year = cscYear.getValue().toUpperCase();
		String term = cscTerm.getValue().toUpperCase();
		String newClass = cscNewStdClass.getValue();
		LocalDate entryDate = cscEntryDate.getValue();
		
		String cscid = stdId+year+term+localDateTime;
		String stdclassesId = newClass+year+term;
		String currentCID = currentClass;
		
		CreateChangeStdClass change = new CreateChangeStdClass();
		try {
			change.createChangeStdClass(cscid, stdId, name, currentStatus, currentClass, 
					year, term, newClass, dispName, entryDate);
//			cbsId.setText(cscid);
			
			try {
				EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
				EntityManager entitymanager = emfactory.createEntityManager();
				entitymanager.getTransaction().begin();
				
				Students std = entitymanager.find(Students.class, stdId);
				
				std.setEntryClassAssigned(stdclassesId);
				
				entitymanager.persist(std);
				entitymanager.getTransaction().commit();
				entitymanager.close();
				emfactory.close();
			}
			catch(Exception ex) {
				//cscId.setText("update std class error: "+ ex.getMessage());
				ex.printStackTrace();
			}
			
			try {
				EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
				EntityManager entitymanager = emfactory.createEntityManager();
				entitymanager.getTransaction().begin();
				
				StudentClasses classes = entitymanager.find(StudentClasses.class, stdclassesId);
				
				classes.setStdList(stdId);
				
				//classes.setTerm(term);
				
				entitymanager.getTransaction().commit();
				entitymanager.close();
				emfactory.close();
			}
			catch(Exception ex2) {
				ex2.printStackTrace();
			}
			
//			try {
//				EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
//				EntityManager entitymanager = emfactory.createEntityManager();
//				entitymanager.getTransaction().begin();
//				
//				StudentClasses clas = entitymanager.find(StudentClasses.class, currentCID);
//				
//				try {
//					clas.getStdList().remove(stdId);
//				}
//				catch(Exception et) {
//					et.printStackTrace();
//				}
//				
//				entitymanager.getTransaction().commit();
//				entitymanager.close();
//				emfactory.close();
//			}
//			catch(Exception ex2) {
//				ex2.printStackTrace();
//			}
			
			try {
				populateAssignStd2Class(stdclassesId);
				astcDisplayClass.setText(newClass);
				cscId.setText(cscid);
			}
			catch(Exception se) {
				se.printStackTrace();
				assignStdToClassDataTable.setItems(null);
			}
		}
		catch(Exception e) {
			//cscId.setText("Create class error: "+ e.getMessage());
			e.printStackTrace();
		}
		finally {
			//cscStdId.clear();	
			cscName.clear();
			cscCurrentStdClass.setValue("std class");
			cscCurrentBorderStatus.setValue("current border status");
			cscYear.setValue("session");
			cscTerm.setValue("term");
			cscNewStdClass.setValue("select new std class");
			cscEntryDate.setValue(LocalDate.now());
		}
		
	}
	
	@FXML public void listStdInCurrentClassButton(ActionEvent event) {
		String currentClass = cscCurrentStdClass.getValue();
		//String year = cscYear.getValue();
		//String term = cscTerm.getValue();
		//String cid = currentClass + year + term;
		try {
			populateAssignStd2Class(currentClass);
			astcDisplayClass.setText(currentClass);
		}
		catch(Exception e) {
			e.printStackTrace();
			assignStdToClassDataTable.setItems(null);
		}
	}
	
	@FXML public void listStdInNewClassButton(ActionEvent event) {
		String newClass = cscNewStdClass.getValue();
		String year = cscYear.getValue();
		String term = cscTerm.getValue();
		String cid = newClass + year + term;
		try {
			populateAssignStd2Class(cid);
			astcDisplayClass.setText(newClass);
		}
		catch(Exception e) {
			e.printStackTrace();
			assignStdToClassDataTable.setItems(null);
		}
	}
	
	@SuppressWarnings({ "unchecked", "rawtypes" })
	public void populateAssignStd2Class(String stdclassesId){
		LinkedHashSet<String> studentList = new LinkedHashSet<>();
		ObservableList<AssignStdToClassDataTable> data = FXCollections.observableArrayList();
	
		try {
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			StudentClasses clas = entitymanager.find(StudentClasses.class, stdclassesId);
			
			studentList = clas.getStdList();
			
			entitymanager.getTransaction().commit();
			entitymanager.close();
			emfactory.close();
			
			int i = 1;
			if(studentList.size() > 0) {
				for(String stdid : studentList) {
					
					String sNo = "", stdID = "", nameStr = "", sex = "", age = "", border = "", balance = "";
					
					EntityManagerFactory emfactoryx = Persistence.createEntityManagerFactory("SchoolMgtSystem");
					EntityManager entitymanagerx = emfactoryx.createEntityManager();
					entitymanagerx.getTransaction().begin();
					
					Students std = entitymanagerx.find(Students.class, stdid);
					
					sNo = String.valueOf(i);
					stdID = stdid; 
					nameStr = std.getOtherNames()+" "+std.getSurName();
					sex = std.getSex();
					age = String.valueOf(LocalDate.now().getYear() - std.getDateOfBirth().getYear());
					border = std.getEntryBorderStatus();
					
					EntityManagerFactory emfactory2 = Persistence.createEntityManagerFactory("SchoolMgtSystem");
					EntityManager entitymanager2 = emfactory2.createEntityManager();
					entitymanager2.getTransaction().begin();
					
					AccountBalance bal = entitymanager2.find(AccountBalance.class, stdID);
					
					balance = fm.format(bal.getBalance());
					
					try {
						data.add(new AssignStdToClassDataTable(sNo, stdID, nameStr, sex, age, border, balance));
						i = i + 1;
					}
					catch(Exception exet) {
						exet.printStackTrace();
					}
					
					entitymanager2.getTransaction().commit();
					entitymanager2.close();
					emfactory2.close();
					
					entitymanagerx.getTransaction().commit();
					entitymanagerx.close();
					emfactoryx.close();
					
					astcSNoCol.setCellValueFactory(new PropertyValueFactory("sNo_Data"));
					astcStdIdCol.setCellValueFactory(new PropertyValueFactory("stdId_Data"));
					astcNameCol.setCellValueFactory(new PropertyValueFactory("name_Data"));
					astcSexCol.setCellValueFactory(new PropertyValueFactory("sex_Data"));
					astcAgeCol.setCellValueFactory(new PropertyValueFactory("age_Data"));
					astcBorderCol.setCellValueFactory(new PropertyValueFactory("border_Data"));
					astcBalanceCol.setCellValueFactory(new PropertyValueFactory("balance_Data"));
					
					assignStdToClassDataTable.setItems(data);
				}
			}
			else {
				assignStdToClassDataTable.setItems(null);
			}
		}
		catch(Exception ex3) {
			//cscId.setText("update std class error: "+ ex2.getMessage());
			ex3.printStackTrace();
			assignStdToClassDataTable.setItems(null);
		}
	}
	
	//Find change class status Info
	@FXML public void findChangeStdClassButton(ActionEvent event) {
		String cscid = cscId.getText().toUpperCase();
		try {
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			ChangeStdClass change = entitymanager.find(ChangeStdClass.class, cscid);
			
			cscStdId.setText(change.getStdId());	
			cscName.setText(change.getName());
			cscCurrentStdClass.setValue(change.getCurrentStdClass());
			cscCurrentBorderStatus.setValue(change.getCurrentBorderStatus());
			cscYear.setValue(change.getYear());
			cscTerm.setValue(change.getTerm());
			cscNewStdClass.setValue(change.getNewStdClass());
			cscEntryDate.setValue(change.getEntryDate());
			
			entitymanager.getTransaction().commit();
			entitymanager.close();
			emfactory.close();
		}
		catch(Exception e) {
			cscId.setText("Find class error: "+ e.getMessage());
			cscStdId.clear();	
			cscName.clear();
			cscCurrentStdClass.setValue("std class");
			cscCurrentBorderStatus.setValue("current border status");
			cscYear.setValue("session");
			cscTerm.setValue("term");
			cscNewStdClass.setValue("select new std class");
			cscEntryDate.setValue(LocalDate.now());
		}
	}
	
	//Update change Std Class Info
	@FXML public void updateChangeStdClassButton(ActionEvent event) {
		
		String stdId = cscStdId.getText().toUpperCase();
		String name = cscName.getText().toUpperCase();
		String currentClass = cscCurrentStdClass.getValue().toUpperCase();
		String currentStatus = cscCurrentBorderStatus.getValue().toUpperCase();
		String year = cscYear.getValue().toUpperCase();
		String term = cscTerm.getValue().toUpperCase();
		String newClass = cscNewStdClass.getValue();
		LocalDate entryDate = cscEntryDate.getValue();
		
		String cscid = cscId.getText();
		String stdclassesId = newClass+year+term;
		
		UpdateChangeStdClass change = new UpdateChangeStdClass();
		try {
			change.updateChangeStdClass(cscid, stdId, name, currentStatus, currentClass, 
					year, term, newClass, dispName, entryDate);
			
			//cbsId.setText(cscid);
			
			try {
				EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
				EntityManager entitymanager = emfactory.createEntityManager();
				entitymanager.getTransaction().begin();
				
				Students std = entitymanager.find(Students.class, stdId);
				
				std.setEntryClassAssigned(newClass);
				
				entitymanager.persist(std);
				entitymanager.getTransaction().commit();
				entitymanager.close();
				emfactory.close();
			}
			catch(Exception ex) {
				cscId.setText("update std class error: "+ ex.getMessage());
			}
			
			try {
				EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
				EntityManager entitymanager = emfactory.createEntityManager();
				entitymanager.getTransaction().begin();
				
				StudentClasses classes = entitymanager.find(StudentClasses.class, stdclassesId);
				
				classes.setStdList(stdId);
				
				StudentClasses currentClasses = entitymanager.find(StudentClasses.class, currentClass);
				
				currentClasses.getStdList().remove(stdId);
				
				//entitymanager.persist(classes);
				entitymanager.getTransaction().commit();
				entitymanager.close();
				emfactory.close();
			}
			catch(Exception ex) {
				cscId.setText("update std class error: "+ ex.getMessage());
			}
			
//			cbsId.setText(cscid);
		}
		catch(Exception e) {
			cscId.setText("Update class error: "+ e.getMessage());
		}
		finally {
			cscStdId.clear();	
			cscName.clear();
			cscCurrentStdClass.setValue("std class");
			cscCurrentBorderStatus.setValue("current border status");
			cscYear.setValue("session");
			cscTerm.setValue("term");
			cscNewStdClass.setValue("select new std class");
			cscEntryDate.setValue(LocalDate.now());
		}
	}
	
	//Assign Billables to Classes
	@FXML private ComboBox<String> billableClass, billableItems, removeBillables;
	@FXML private TextField billableYear, billableTerm, itemTotalCostTxt;
	@FXML TableView<BillableDataTable> billableDataTable;
	@FXML TableColumn<BillableDataTable,String> itemIdCol, itemDescCol, itemTPriceCol;
	
	ObservableList<String> classToBill = FXCollections.observableArrayList();
	ObservableList<String> itemsInClass = FXCollections.observableArrayList();
	ObservableList<BillableDataTable> removeBilledItems = FXCollections.observableArrayList();
	
	@SuppressWarnings("unchecked")
	@FXML public void billablesComboInit(MouseEvent event) {
		
		populateStdClassesCombo(classToBill, billableClass);
//		try {
//			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
//			EntityManager entitymanager = emfactory.createEntityManager();
//			entitymanager.getTransaction().begin();
//			
//			Vector<StudentClasses> userData = new Vector<>();
//			Query queryX =
//					entitymanager.createQuery("select e from StudentClasses e ");
//			userData = (Vector<StudentClasses>) queryX.getResultList();
//			
//			for(StudentClasses x : userData) {
//				if(!(classToBill.contains(x.getClassId()))) {
//					classToBill.add(x.getClassId());
//				}
//			}
//			
//			billableClass.setItems(classToBill);
//			
//			entitymanager.getTransaction().commit();
//			entitymanager.close();
//			emfactory.close();
//			
//			new AutoCompleteComboBoxListener<>(billableClass);
//		}
//		catch(Exception e) {
//			e.printStackTrace();
//		}
		
		try {
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			Vector<DrugInformation> userData = new Vector<>();
			Query queryX =
					entitymanager.createQuery("select e from DrugInformation e ");
			userData = (Vector<DrugInformation>) queryX.getResultList();
			
			for(DrugInformation x : userData) {
				if(!(itemsInClass.contains(x.getItemIdNo()))) {
					itemsInClass.add(x.getItemIdNo());
				}
			}
			
			billableItems.setItems(itemsInClass);
			
			entitymanager.getTransaction().commit();
			entitymanager.close();
			emfactory.close();
			
			new AutoCompleteComboBoxListener<>(billableItems);
		}
		catch(Exception e) {
			e.printStackTrace();
		}
		
		//remove item from class cost list
		String stdClassId = billableClass.getValue();
		
		ObservableList<String> data = FXCollections.observableArrayList();
		LinkedHashSet<String> set = new LinkedHashSet<>();
		try {
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			StudentClasses itemList = entitymanager.find(StudentClasses.class, stdClassId);
			
			set = itemList.getClassCostList();
			
			entitymanager.getTransaction().commit();
			entitymanager.close();
			emfactory.close();
			
		}
		catch(Exception e) {
			e.printStackTrace();
		}
		
		for(String itemID : set) {
			
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			DrugInformation info = entitymanager.find(DrugInformation.class, itemID);
			
			try {
				data.add(info.getItemIdNo());
			}
			catch(Exception cat) {
				cat.printStackTrace();
			}
			
			entitymanager.getTransaction().commit();
			entitymanager.close();
			emfactory.close();
		}
		
		removeBillables.setItems(data);
	}
	
	
	@FXML public void selectBillableClass(ActionEvent event) {
		billableClass.setDisable(true);
		String billableId = billableClass.getValue();
		try {
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			StudentClasses std = entitymanager.find(StudentClasses.class, billableId);
			
			billableYear.setText(std.getYear());
			billableTerm.setText(std.getTerm());
			
			entitymanager.getTransaction().commit();
			entitymanager.close();
			emfactory.close();
			
		}
		catch(Exception e) {
			e.printStackTrace();
		}
	}
	
	@FXML public void deSelectBillableClass(ActionEvent event) {
		billableClass.setDisable(false);
	}
	
	@FXML public void addBillablesToClass(ActionEvent event) {
		String stdClassId = billableClass.getValue();
		String billableItemId = billableItems.getValue();
		
		ObservableList<BillableDataTable> data = FXCollections.observableArrayList();
		
		String id = "", desc = "", tPrice = "";
		try {
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			DrugInformation item = entitymanager.find(DrugInformation.class, billableItemId);
			
			id = item.getItemIdNo();
			desc = item.getNameDesc();
			tPrice = fm.format(item.getTotalPrice());
			
			entitymanager.getTransaction().commit();
			entitymanager.close();
			emfactory.close();
			
		}
		catch(Exception e) {
			e.printStackTrace();
		}
		
		try {
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			StudentClasses costList = entitymanager.find(StudentClasses.class, stdClassId);
			
			costList.setClassCostList(id);
			
			entitymanager.getTransaction().commit();
			entitymanager.close();
			emfactory.close();
			
		}
		catch(Exception e) {
			e.printStackTrace();
		}
		
		//data.add(new BillableDataTable(id, desc, tPrice));
		
		LinkedHashSet<String> set = new LinkedHashSet<>();
		try {
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			StudentClasses itemList = entitymanager.find(StudentClasses.class, stdClassId);
			
			set = itemList.getClassCostList();
			
			entitymanager.getTransaction().commit();
			entitymanager.close();
			emfactory.close();
			
		}
		catch(Exception e) {
			e.printStackTrace();
		}
		
		for(String itemID : set) {
			
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			DrugInformation info = entitymanager.find(DrugInformation.class, itemID);
			
			try {
				data.add(new BillableDataTable(info.getItemIdNo(), info.getNameDesc(), fm.format(info.getTotalPrice())));
			}
			catch(Exception lion) {
				lion.printStackTrace();
			}
			
			entitymanager.getTransaction().commit();
			entitymanager.close();
			emfactory.close();
		}
		
		itemIdCol.setCellValueFactory(new PropertyValueFactory("itemId_Data"));
		itemDescCol.setCellValueFactory(new PropertyValueFactory("description_Data"));
		itemTPriceCol.setCellValueFactory(new PropertyValueFactory("price_Data"));
		
		billableDataTable.setItems(data);
		
		double total = 0;
		for(BillableDataTable datum : data) {
			total = total + Double.parseDouble(datum.getPrice_Data());
		}
		
		itemTotalCostTxt.setText(fm.format(total));
			
		
	}
	
	//fetch stdClass table
	@FXML public void fetchBillableClass(ActionEvent event) {
		String stdClassId = billableClass.getValue();
		populateClassCostList(stdClassId);
		
//		ObservableList<BillableDataTable> data = FXCollections.observableArrayList();
//		LinkedHashSet<String> set = new LinkedHashSet<>();
//		try {
//			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
//			EntityManager entitymanager = emfactory.createEntityManager();
//			entitymanager.getTransaction().begin();
//			
//			StudentClasses itemList = entitymanager.find(StudentClasses.class, stdClassId);
//			
//			set = itemList.getClassCostList();
//			
//			entitymanager.getTransaction().commit();
//			entitymanager.close();
//			emfactory.close();
//			
//		}
//		catch(Exception e) {
//			e.printStackTrace();
//		}
//		
//		for(String itemID : set) {
//			
//			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
//			EntityManager entitymanager = emfactory.createEntityManager();
//			entitymanager.getTransaction().begin();
//			
//			DrugInformation info = entitymanager.find(DrugInformation.class, itemID);
//			
//			try {
//				data.add(new BillableDataTable(info.getItemIdNo(), info.getNameDesc(), fm.format(info.getTotalPrice())));
//			}
//			catch(Exception cat) {
//				cat.printStackTrace();
//			}
//			
//			entitymanager.getTransaction().commit();
//			entitymanager.close();
//			emfactory.close();
//		}
//		
//		itemIdCol.setCellValueFactory(new PropertyValueFactory("itemId_Data"));
//		itemDescCol.setCellValueFactory(new PropertyValueFactory("description_Data"));
//		itemTPriceCol.setCellValueFactory(new PropertyValueFactory("price_Data"));
//		
//		billableDataTable.setItems(data);
//		
//		double total = 0;
//		for(BillableDataTable datum : data) {
//			total = total + Double.parseDouble(datum.getPrice_Data());
//		}
//		
//		itemTotalCostTxt.setText(fm.format(total));
	}
	
	public void populateClassCostList(String stdClassId) {
		ObservableList<BillableDataTable> data = FXCollections.observableArrayList();
		LinkedHashSet<String> set = new LinkedHashSet<>();
		try {
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			StudentClasses itemList = entitymanager.find(StudentClasses.class, stdClassId);
			
			set = itemList.getClassCostList();
			
			entitymanager.getTransaction().commit();
			entitymanager.close();
			emfactory.close();
			
		}
		catch(Exception e) {
			e.printStackTrace();
		}
		
		for(String itemID : set) {
			
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			DrugInformation info = entitymanager.find(DrugInformation.class, itemID);
			
			try {
				data.add(new BillableDataTable(info.getItemIdNo(), info.getNameDesc(), fm.format(info.getTotalPrice())));
			}
			catch(Exception cat) {
				cat.printStackTrace();
			}
			
			entitymanager.getTransaction().commit();
			entitymanager.close();
			emfactory.close();
		}
		
		itemIdCol.setCellValueFactory(new PropertyValueFactory("itemId_Data"));
		itemDescCol.setCellValueFactory(new PropertyValueFactory("description_Data"));
		itemTPriceCol.setCellValueFactory(new PropertyValueFactory("price_Data"));
		
		billableDataTable.setItems(data);
		
		double total = 0;
		for(BillableDataTable datum : data) {
			total = total + Double.parseDouble(datum.getPrice_Data());
		}
		
		itemTotalCostTxt.setText(fm.format(total));
	}
	
	@FXML public void removeItemFromClass(ActionEvent event) {
		String item = removeBillables.getValue();
		String stdClassId = billableClass.getValue();
		
		//LinkedHashSet<String> set = new LinkedHashSet<>();
		try {
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			StudentClasses itemList = entitymanager.find(StudentClasses.class, stdClassId);
			
			itemList.getClassCostList().remove(item);
			//set = itemList.getClassCostList();
			
			entitymanager.getTransaction().commit();
			entitymanager.close();
			emfactory.close();
			
		}
		catch(Exception e) {
			e.printStackTrace();
		}
		
		populateClassCostList(stdClassId);
	}
	
	//Bill A Class Controller
	@FXML private Button enterBACBtn, returnEnterBACBtn;
	@FXML private ComboBox<String> bacClassId, bacYear, bacTerm, bacClass;
	@FXML private DatePicker bacDate;
	@FXML private TextField bacInformation, bacTotalBalance;
	
	@FXML TableView<AssignStdToClassDataTable> assignStdToClassDataTable2;
	@FXML TableColumn<AssignStdToClassDataTable,String> astcSNoCol2, astcStdIdCol2, astcNameCol2, astcSexCol2,
		astcAgeCol2, astcBorderCol2, astcBalanceCol2;
	
	ObservableList<String> bacIdList = FXCollections.observableArrayList();
	
	@FXML public void bacComboInit(MouseEvent event) {
		
		populateStdClassesCombo(bacIdList, bacClassId);
//		try {
//			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
//			EntityManager entitymanager = emfactory.createEntityManager();
//			entitymanager.getTransaction().begin();
//			
//			Vector<StudentClasses> userData = new Vector<>();
//			Query queryX =
//					entitymanager.createQuery("select e from StudentClasses e ");
//			userData = (Vector<StudentClasses>) queryX.getResultList();
//			
//			for(StudentClasses x : userData) {
//				if(!(bacIdList.contains(x.getClassId()))) {
//					bacIdList.add(x.getClassId());
//				}
//			}
//			
//			bacClassId.setItems(bacIdList);
//			
//			entitymanager.getTransaction().commit();
//			entitymanager.close();
//			emfactory.close();
//			
//			new AutoCompleteComboBoxListener<>(bacClassId);
//		}
//		catch(Exception e) {
//			bacInformation.setText("Error initializing classId: "+ e.getMessage());
//		}
	}
	
	@FXML public void bacMove(MouseEvent event) {
		bacDate.setValue(LocalDate.now());
		String cid = bacClassId.getValue();
		try {
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			StudentClasses item = entitymanager.find(StudentClasses.class, cid);
			
			bacYear.setValue(item.getYear());
			bacTerm.setValue(item.getTerm());
			bacClass.setValue(item.getClassNo()+item.getClassLetter());
			
			entitymanager.getTransaction().commit();
			entitymanager.close();
			emfactory.close();
			
			//define access
			if(dispUserClass.equalsIgnoreCase("Cashier")) {
				graduateClassBtn.setDisable(true);
			}
			else if(dispUserClass.equals("Vice-Principal") || dispUserClass.equals("Principal")){
				graduateClassBtn.setDisable(true);
			}
			else if(dispUserClass.equals("Computer-Operator")) {
				graduateClassBtn.setDisable(true);
			}
			
		}
		catch(Exception e) {
			e.printStackTrace();
		}
	}
	
	@FXML private Button bacBtn;
	@FXML public void bacEvent(MouseEvent event) {
		
		bacBtn.setOnMouseEntered(e-> {
			bacBtn.setTextFill(Color.GREEN);
		});
		bacBtn.setOnMouseExited(e-> {
			bacBtn.setTextFill(Color.DARKBLUE);
		});
		
		graduateClassBtn.setOnMouseEntered(e-> {
			graduateClassBtn.setTextFill(Color.GREEN);
		});
		graduateClassBtn.setOnMouseExited(e-> {
			graduateClassBtn.setTextFill(Color.DARKBLUE);
		});
		
		if(dispUserClass.equalsIgnoreCase("Cashier")) {
			graduateClassBtn.setDisable(true);
		}
		else if(dispUserClass.equals("Vice-Principal") || dispUserClass.equals("Principal")){
			graduateClassBtn.setDisable(true);
		}
		else if(dispUserClass.equals("Computer-Operator")) {
			graduateClassBtn.setDisable(true);
		}
	}
	
	
	@FXML public void submitBillAClassButton(ActionEvent event) {
		
		try {
			String cid = bacClassId.getValue();
			String year = bacYear.getValue();
			String term = bacTerm.getValue();
			String stdClass = bacClass.getValue();
			LocalDate date = bacDate.getValue();
			LocalDateTime dateTime = LocalDateTime.now();
		
			if(cid.trim().length() != 0 && (cid.trim().length() == 10 || cid.trim().length() == 11 || 
					cid.trim().length() == 16) && 
					year.trim().length() != 0 && year.trim().length() == 4 &&
					term.trim().length() != 0 && term.trim().length() == 1 && 
					stdClass.trim().length() != 0 && (stdClass.trim().length() == 5 || stdClass.trim().length() == 6 || 
					stdClass.trim().length() == 11) && 
					date.toString().trim().length() != 0 && date.toString().trim().length() != 0) {
				
				LinkedHashSet<String> itemIdList = new LinkedHashSet<>();
				LinkedHashSet<String> stdIdList = new LinkedHashSet<>();
				LinkedHashSet<String> stdBorderList = new LinkedHashSet<>();
				try {
					EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
					EntityManager entitymanager = emfactory.createEntityManager();
					entitymanager.getTransaction().begin();
					
					StudentClasses item = entitymanager.find(StudentClasses.class, cid);
					
					itemIdList = item.getClassCostList();
					stdIdList = item.getStdList();
					
					entitymanager.getTransaction().commit();
					entitymanager.close();
					emfactory.close();
					
				}
				catch(Exception e) {
					e.printStackTrace();
				}
				
				if(stdIdList.size() > 0) {
					String stdNo = "", stdName = "";
					//int j = 0;
					for(String stdId : stdIdList) {
						EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
						EntityManager entitymanager = emfactory.createEntityManager();
						entitymanager.getTransaction().begin();
						
						Students std = entitymanager.find(Students.class, stdId);
						
						if(std.getEntryBorderStatus().equalsIgnoreCase("Border")) {
							stdBorderList.add(std.getId());
						}
						
						stdNo = std.getId();
						stdName = std.getOtherNames()+ " "+std.getSurName();
						
						if(itemIdList.size() > 0) {
							String itemId = "", itemName = "", category = "", invId = "", GLAcctNo = "", GLAcctName = "";
							double uPrice = 0, tPrice = 0;
							int qty = 0;
							
							for(String itemID : itemIdList) {
								
								EntityManagerFactory emfactory2 = Persistence.createEntityManagerFactory("SchoolMgtSystem");
								EntityManager entitymanager2 = emfactory2.createEntityManager();
								entitymanager2.getTransaction().begin();
								
								DrugInformation item = entitymanager2.find(DrugInformation.class, itemID);
								
								try {
									itemId = itemID; //item.getItemIdNo();
									itemName = item.getNameDesc() + " "+year+term;
									category = item.getCategory();
									invId = stdNo + itemId + year + term;	//stdNo + dateTime +  j;  stdNo + itemId + year + term;
									GLAcctNo = item.getIncomeAcctNo();
									GLAcctName = item.getIncomeAcctName();
									uPrice = item.getUnitPrice();
									tPrice = item.getTotalPrice();
									qty = item.getQty();
								}
								catch(Exception q) {
									q.printStackTrace();
								}
								
								entitymanager2.getTransaction().commit();
								entitymanager2.close();
								emfactory2.close();
								
								//the real deal
								
								try {
									
									postBills2(stdNo, stdName, itemId, uPrice, qty, tPrice, itemName, category, 
											invId, GLAcctNo, GLAcctName, dateTime, date, invId);
									
									CreateInvoicing invoice = new CreateInvoicing();
									try {
										invoice.createInvoicing(invId, itemId, stdNo, stdName, itemName, 
												date, uPrice, tPrice, qty, dispName, category, year, term, stdClass);
										
									}
									catch(Exception e) {
										bacInformation.setText("save invoicing error: "+ e.getMessage());
									}
									
									try {
										
										invoice.createBillingsInformation(invId, itemId, GLAcctNo, GLAcctName, itemName, date, 
												uPrice, tPrice, qty, dispName, category, year, term, stdClass, stdNo);
										
										bacInformation.setText(stdClass+" billing in process...");
										
									}
									catch(Exception exx) {
										bacInformation.setText("save billings error: "+ exx.getMessage());
									}
									
								}
								catch(Exception ex) {
									bacInformation.setText("post txn error: "+ ex.getMessage());
								}
								
							}
						}
						else {
							bacInformation.setText("item list empty...");
						}
						
						entitymanager.getTransaction().commit();
						entitymanager.close();
						emfactory.close();
					}
				}
				else {
					bacInformation.setText("student list empty...");
				}
				
				//get the itemlist
				Vector<DrugInformation> borderItemList = new Vector<>();
				try {
					EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
					EntityManager entitymanager = emfactory.createEntityManager();
					entitymanager.getTransaction().begin();
					
					Query query =
							entitymanager.createQuery("select e from DrugInformation e ");
					borderItemList = (Vector<DrugInformation>) query.getResultList();
					
					entitymanager.getTransaction().commit();
					entitymanager.close();
					emfactory.close();
					
				}
				catch(Exception e) {
					e.printStackTrace();
				}
				
				if(stdBorderList.size() > 0) {
					String stdNo2 = "", stdName2 = "";
					for(String stdId : stdBorderList) {
						
						EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
						EntityManager entitymanager = emfactory.createEntityManager();
						entitymanager.getTransaction().begin();
						
						Students std = entitymanager.find(Students.class, stdId);
						
						stdNo2 = std.getId();
						stdName2 = std.getOtherNames()+ " "+ std.getSurName();
						
						entitymanager.getTransaction().commit();
						entitymanager.close();
						emfactory.close();
						
						String itemId2 = "", itemName2 = "", category2 = "", invId2 = "", GLAcctNo2 = "", GLAcctName2 = "";
						double uPrice2 = 0, tPrice2 = 0;
						int qty2 = 0;
						LocalDateTime dateTime2 = LocalDateTime.now();
						
						for(DrugInformation item : borderItemList) {
							if(item.getCategory().equalsIgnoreCase("boardingFee")) {
								
								try {
									itemId2 = item.getItemIdNo();
									itemName2 = item.getNameDesc();
									category2 = item.getCategory();
									invId2 = stdId + itemId2 + year + term;	
									GLAcctNo2 = item.getIncomeAcctNo();
									GLAcctName2 = item.getIncomeAcctName();
									uPrice2 = item.getUnitPrice();
									tPrice2 = item.getTotalPrice();
									qty2 = item.getQty();
								}
								catch(Exception q) {
									q.printStackTrace();
								}
								
								try {
									
									postBills2(stdNo2, stdName2, itemId2, uPrice2, qty2, tPrice2, itemName2, category2, 
											invId2, GLAcctNo2, GLAcctName2, dateTime2, date, invId2);
									
									CreateInvoicing invoice = new CreateInvoicing();
									try {
										invoice.createInvoicing(invId2, itemId2, stdNo2, stdName2, itemName2, 
												date, uPrice2, tPrice2, qty2, dispName, category2, year, term, stdClass);
										
									}
									catch(Exception e) {
										bacInformation.setText(e.getMessage());
									}
									
									try {
										
										invoice.createBillingsInformation(invId2, itemId2, GLAcctNo2, GLAcctName2, itemName2, date, 
												uPrice2, tPrice2, qty2, dispName, category2, year, term, stdClass, stdNo2);
										
										bacInformation.setText(stdClass+" billing in process...");
										
									}
									catch(Exception exx) {
										//bacInformation.setText("save billings error2: "+ exx.getMessage());
										exx.printStackTrace();
									}
									
								}
								catch(Exception ex) {
									bacInformation.setText("post txn error2: "+ ex.getMessage());
								}
								
							}
						}
					}
				}
				
				bacBtn.setTextFill(Color.DARKBLUE);
				//populate bac table
				populateAssignStd2Class2(cid);
				
				String ad;
				if(term.equals("1")) {
					ad = "st term";
				}
				else if(term.equals("2")) {
					ad = "nd term";
				}
				else {
					ad = "rd term";
				}
				
				bacInformation.setText(stdClass+" successfully billed for "+term+ad+" "+year+" session!");
				
				Alert alertz = new Alert(Alert.AlertType.INFORMATION);
				alertz.setContentText(stdClass+" was successfully billed for "+term+ ad+" "+year+" session!");
				alertz.setHeaderText("SUCCESS!");
				Optional<ButtonType> resultz = alertz.showAndWait();
				if(resultz.get() == ButtonType.OK) {
					alertz.close();
				}
				else {
					alertz.close();
				}
				
			}
			else {
				throw new Exception("Invalid class parameters selected...");
			}
		}
		catch(Exception newE) {
			Alert alert = new Alert(Alert.AlertType.ERROR);
			alert.setContentText(newE.getMessage() + ": Invalid class parameters selected...");
			alert.setHeaderText("INVALID ENTRIES");
			Optional<ButtonType> result = alert.showAndWait();
			if(result.get() == ButtonType.OK) {
				alert.close();
			}
			else {
				alert.close();
			}
		}
	}
	
	//Graduate a Class
	@FXML private Button graduateClassBtn;
	@FXML public void graduateClassButton(ActionEvent event) {
		String cid = bacClassId.getValue();
		String year = bacYear.getValue();
		String term = bacTerm.getValue();
		String stdClass = bacClass.getValue();
		LocalDate date = bacDate.getValue();
		LocalDateTime dateTime = LocalDateTime.now();
	
		if(cid.trim().length() != 0 && (cid.trim().length() == 10 || cid.trim().length() == 11) && 
				year.trim().length() != 0 && year.trim().length() == 4 &&
				term.trim().length() != 0 && term.trim().length() == 1 && 
				stdClass.trim().length() != 0 && (stdClass.trim().length() == 5 || stdClass.trim().length() == 6) && 
				date.toString().trim().length() != 0 && date.toString().trim().length() != 0) {
			
			Alert alert = new Alert(Alert.AlertType.CONFIRMATION);
			alert.setContentText("You are about to graduate "+stdClass +" for the "+year+" session...");
			alert.setHeaderText("Std statuses will change to graduated");
			Optional<ButtonType> result = alert.showAndWait();
			if(result.get() == ButtonType.OK) {
				//get your action word from choicedialog
				String action;
				ChoiceDialog<String> dialog = new ChoiceDialog<>("Graduated",statusCombo);
				dialog.setTitle("Make a choice...");
				dialog.setHeaderText("Your choice determines your action on a class. You can only"
						+ " graduate a class here though...");
				dialog.setContentText("Select the new statuses: ");
				
				Optional<String> resultDialog = dialog.showAndWait();
				//resultDialog.ifPresent(res -> action = res);
				if(resultDialog.isPresent()) {
					action = resultDialog.get();
				}
				else {
					action = "";
				}
				
				if(action.equals("Graduated")) {
					//action
					LinkedHashSet<String> stdIdList = new LinkedHashSet<>();
					try {
						EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
						EntityManager entitymanager = emfactory.createEntityManager();
						entitymanager.getTransaction().begin();
						
						StudentClasses item = entitymanager.find(StudentClasses.class, cid);
						
						stdIdList = item.getStdList();
						
						entitymanager.getTransaction().commit();
						entitymanager.close();
						emfactory.close();
						
					}
					catch(Exception e) {
						e.printStackTrace();
					}
					
					//iterate thru the stdlist
					for(String stdId : stdIdList) {
						String stdName;
						double outstandingBal;
						try {
							EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
							EntityManager entitymanager = emfactory.createEntityManager();
							entitymanager.getTransaction().begin();
							
							Students std = entitymanager.find(Students.class, stdId);
							
							AccountBalance bal = entitymanager.find(AccountBalance.class, stdId);
							
							stdName = std.getSurName()+", "+std.getOtherNames();
							
							outstandingBal = bal.getBalance();
							
							std.setStatus(action);
							
							entitymanager.getTransaction().commit();
							entitymanager.close();
							emfactory.close();
							
							String gid = cid + stdId;
							CreateGraduated graduated = new CreateGraduated();
							graduated.createGraduate(gid, cid, stdId, stdName, year, stdClass, outstandingBal, date, dispName);
							
						}
						catch(Exception e) {
							e.printStackTrace();
						}
					}
					
					//populate std list with new status
					graduateClassBtn.setTextFill(Color.DARKBLUE);
					//populate bac table
					populateAssignStd2ClassGrad(cid);
					
					Alert alertz = new Alert(Alert.AlertType.INFORMATION);
					alertz.setContentText(stdClass+" was successfully graduated for "+year+" session!");
					alertz.setHeaderText("SUCCESS!");
					Optional<ButtonType> resultz = alertz.showAndWait();
					if(resultz.get() == ButtonType.OK) {
						alertz.close();
					}
					else {
						alertz.close();
					}
				}
				else {
					Alert alertu = new Alert(Alert.AlertType.INFORMATION);
					alertu.setContentText("You can only graduate a class here...");
					alertu.setHeaderText("Pick the appropriate option - Graduated");
					Optional<ButtonType> resultu = alertu.showAndWait();
					if(resultu.get() == ButtonType.OK) {
						alertu.close();
					}
					else {
						alertu.close();
					}
				}
			}
			else {
				alert.close();
			}
		}
		else {
			Alert alert = new Alert(Alert.AlertType.ERROR);
			alert.setContentText("Error: Invalid class parameters selected...");
			alert.setHeaderText("INVALID ENTRIES");
			Optional<ButtonType> result = alert.showAndWait();
			if(result.get() == ButtonType.OK) {
				alert.close();
			}
			else {
				alert.close();
			}
		}
	}
	
	//a function to populate bill a class table
	@SuppressWarnings({ "unchecked", "rawtypes" })
	public void populateAssignStd2Class2(String stdclassesId){
		LinkedHashSet<String> studentList = new LinkedHashSet<>();
		ObservableList<AssignStdToClassDataTable> data = FXCollections.observableArrayList();
	
		try {
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			StudentClasses clas = entitymanager.find(StudentClasses.class, stdclassesId);
			
			studentList = clas.getStdList();
			
			entitymanager.getTransaction().commit();
			entitymanager.close();
			emfactory.close();
			
			int i = 1;
			if(studentList.size() > 0) {
				for(String stdid : studentList) {
					
					String sNo = "", stdID = "", nameStr = "", sex = "", age = "", border = "", balance = "";
					
					EntityManagerFactory emfactoryx = Persistence.createEntityManagerFactory("SchoolMgtSystem");
					EntityManager entitymanagerx = emfactoryx.createEntityManager();
					entitymanagerx.getTransaction().begin();
					
					Students std = entitymanagerx.find(Students.class, stdid);
					
					sNo = String.valueOf(i);
					stdID = stdid; 
					nameStr = std.getOtherNames()+" "+std.getSurName();
					sex = std.getSex();
					age = String.valueOf(LocalDate.now().getYear() - std.getDateOfBirth().getYear());
					border = std.getEntryBorderStatus();
					
					EntityManagerFactory emfactory2 = Persistence.createEntityManagerFactory("SchoolMgtSystem");
					EntityManager entitymanager2 = emfactory2.createEntityManager();
					entitymanager2.getTransaction().begin();
					
					AccountBalance bal = entitymanager2.find(AccountBalance.class, stdID);
					
					balance = fm.format(bal.getBalance());
					
					try {
						data.add(new AssignStdToClassDataTable(sNo, stdID, nameStr, sex, age, border, balance));
						i = i + 1;
					}
					catch(Exception exet) {
						exet.printStackTrace();
					}
					
					entitymanager2.getTransaction().commit();
					entitymanager2.close();
					emfactory2.close();
					
					entitymanagerx.getTransaction().commit();
					entitymanagerx.close();
					emfactoryx.close();
					
					astcSNoCol2.setCellValueFactory(new PropertyValueFactory("sNo_Data"));
					astcStdIdCol2.setCellValueFactory(new PropertyValueFactory("stdId_Data"));
					astcNameCol2.setCellValueFactory(new PropertyValueFactory("name_Data"));
					astcSexCol2.setCellValueFactory(new PropertyValueFactory("sex_Data"));
					astcAgeCol2.setCellValueFactory(new PropertyValueFactory("age_Data"));
					astcBorderCol2.setCellValueFactory(new PropertyValueFactory("border_Data"));
					astcBalanceCol2.setCellValueFactory(new PropertyValueFactory("balance_Data"));
					
					assignStdToClassDataTable2.setItems(data);
					
					double sum = 0;
					for(AssignStdToClassDataTable datum : data) {
						sum = sum + Double.parseDouble(datum.getBalance_Data());
					}
					
					bacTotalBalance.setText(fm2.format(sum));
				}
			}
			else {
				assignStdToClassDataTable2.setItems(null);
			}
		}
		catch(Exception ex3) {
			ex3.printStackTrace();
			assignStdToClassDataTable2.setItems(null);
		}
	}
	
	//function to populate a graduated class
	public void populateAssignStd2ClassGrad(String stdclassesId){
		LinkedHashSet<String> studentList = new LinkedHashSet<>();
		ObservableList<AssignStdToClassDataTable> data = FXCollections.observableArrayList();
	
		try {
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			StudentClasses clas = entitymanager.find(StudentClasses.class, stdclassesId);
			
			studentList = clas.getStdList();
			
			entitymanager.getTransaction().commit();
			entitymanager.close();
			emfactory.close();
			
			int i = 1;
			if(studentList.size() > 0) {
				for(String stdid : studentList) {
					
					String sNo = "", stdID = "", nameStr = "", sex = "", age = "", border = "", status = "";
					
					EntityManagerFactory emfactoryx = Persistence.createEntityManagerFactory("SchoolMgtSystem");
					EntityManager entitymanagerx = emfactoryx.createEntityManager();
					entitymanagerx.getTransaction().begin();
					
					Students std = entitymanagerx.find(Students.class, stdid);
					
					sNo = String.valueOf(i);
					stdID = stdid; 
					nameStr = std.getOtherNames()+" "+std.getSurName();
					sex = std.getSex();
					age = String.valueOf(LocalDate.now().getYear() - std.getDateOfBirth().getYear());
					border = std.getEntryBorderStatus();
					status = std.getStatus();
					
					try {
						data.add(new AssignStdToClassDataTable(sNo, stdID, nameStr, sex, age, border, status));
						i = i + 1;
					}
					catch(Exception exet) {
						exet.printStackTrace();
					}
					
					entitymanagerx.getTransaction().commit();
					entitymanagerx.close();
					emfactoryx.close();
					
					astcSNoCol2.setCellValueFactory(new PropertyValueFactory("sNo_Data"));
					astcStdIdCol2.setCellValueFactory(new PropertyValueFactory("stdId_Data"));
					astcNameCol2.setCellValueFactory(new PropertyValueFactory("name_Data"));
					astcSexCol2.setCellValueFactory(new PropertyValueFactory("sex_Data"));
					astcAgeCol2.setCellValueFactory(new PropertyValueFactory("age_Data"));
					astcBorderCol2.setCellValueFactory(new PropertyValueFactory("border_Data"));
					astcBalanceCol2.setCellValueFactory(new PropertyValueFactory("balance_Data"));
					
					assignStdToClassDataTable2.setItems(data);
					
				}
			}
			else {
				assignStdToClassDataTable2.setItems(null);
			}
		}
		catch(Exception ex3) {
			ex3.printStackTrace();
			assignStdToClassDataTable2.setItems(null);
		}
	}
	
	//more general
	//a function to populate bill a class table
	@SuppressWarnings({ "unchecked", "rawtypes" })
	public void populateAssignStd2ClassX(String stdclassesId, TableView<AssignStdToClassDataTable> assignStdToClassDataTable2,
			TableColumn<AssignStdToClassDataTable,String> astcSNoCol2, TableColumn<AssignStdToClassDataTable,String> astcStdIdCol2, 
			TableColumn<AssignStdToClassDataTable,String> astcNameCol2, TableColumn<AssignStdToClassDataTable,String> astcSexCol2,
			TableColumn<AssignStdToClassDataTable,String> astcAgeCol2, TableColumn<AssignStdToClassDataTable,String> astcBorderCol2, 
			TableColumn<AssignStdToClassDataTable,String> astcBalanceCol2, TextField balanceTxt){
		
		LinkedHashSet<String> studentList = new LinkedHashSet<>();
		ObservableList<AssignStdToClassDataTable> data = FXCollections.observableArrayList();
	
		try {
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			StudentClasses clas = entitymanager.find(StudentClasses.class, stdclassesId);
			
			studentList = clas.getStdList();
			
			entitymanager.getTransaction().commit();
			entitymanager.close();
			emfactory.close();
			
			int i = 1;
			if(studentList.size() > 0) {
				for(String stdid : studentList) {
					
					String sNo = "", stdID = "", nameStr = "", sex = "", age = "", border = "", balance = "";
					
					EntityManagerFactory emfactoryx = Persistence.createEntityManagerFactory("SchoolMgtSystem");
					EntityManager entitymanagerx = emfactoryx.createEntityManager();
					entitymanagerx.getTransaction().begin();
					
					Students std = entitymanagerx.find(Students.class, stdid);
					
					sNo = String.valueOf(i);
					stdID = stdid; 
					nameStr = std.getOtherNames()+" "+std.getSurName();
					sex = std.getSex();
					age = String.valueOf(LocalDate.now().getYear() - std.getDateOfBirth().getYear());
					border = std.getEntryBorderStatus();
					
					EntityManagerFactory emfactory2 = Persistence.createEntityManagerFactory("SchoolMgtSystem");
					EntityManager entitymanager2 = emfactory2.createEntityManager();
					entitymanager2.getTransaction().begin();
					
					AccountBalance bal = entitymanager2.find(AccountBalance.class, stdID);
					
					balance = fm.format(bal.getBalance());
					
					try {
						data.add(new AssignStdToClassDataTable(sNo, stdID, nameStr, sex, age, border, balance));
						i = i + 1;
					}
					catch(Exception exet) {
						exet.printStackTrace();
					}
					
					entitymanager2.getTransaction().commit();
					entitymanager2.close();
					emfactory2.close();
					
					entitymanagerx.getTransaction().commit();
					entitymanagerx.close();
					emfactoryx.close();
					
					astcSNoCol2.setCellValueFactory(new PropertyValueFactory("sNo_Data"));
					astcStdIdCol2.setCellValueFactory(new PropertyValueFactory("stdId_Data"));
					astcNameCol2.setCellValueFactory(new PropertyValueFactory("name_Data"));
					astcSexCol2.setCellValueFactory(new PropertyValueFactory("sex_Data"));
					astcAgeCol2.setCellValueFactory(new PropertyValueFactory("age_Data"));
					astcBorderCol2.setCellValueFactory(new PropertyValueFactory("border_Data"));
					astcBalanceCol2.setCellValueFactory(new PropertyValueFactory("balance_Data"));
					
					assignStdToClassDataTable2.setItems(data);
					
					double sum = 0;
					for(AssignStdToClassDataTable datum : data) {
						sum = sum + Double.parseDouble(datum.getBalance_Data());
					}
					
					balanceTxt.setText(fm2.format(sum));
				}
			}
			else {
				assignStdToClassDataTable2.setItems(null);
			}
		}
		catch(Exception ex3) {
			ex3.printStackTrace();
			assignStdToClassDataTable2.setItems(null);
		}
	}
	
	//student list per class per boarder status
	public void populateAssignStd2ClassXXX(String stdclassesId, String boarderStatus, 
			TableView<AssignStdToClassDataTable> assignStdToClassDataTable2,
			TableColumn<AssignStdToClassDataTable,String> astcSNoCol2, TableColumn<AssignStdToClassDataTable,String> astcStdIdCol2, 
			TableColumn<AssignStdToClassDataTable,String> astcNameCol2, TableColumn<AssignStdToClassDataTable,String> astcSexCol2,
			TableColumn<AssignStdToClassDataTable,String> astcAgeCol2, TableColumn<AssignStdToClassDataTable,String> astcBorderCol2, 
			TableColumn<AssignStdToClassDataTable,String> astcBalanceCol2, TextField balanceTxt){
		
		LinkedHashSet<String> studentList = new LinkedHashSet<>();
		ObservableList<AssignStdToClassDataTable> data = FXCollections.observableArrayList();
	
		try {
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			StudentClasses clas = entitymanager.find(StudentClasses.class, stdclassesId);
			
			studentList = clas.getStdList();
			
			entitymanager.getTransaction().commit();
			entitymanager.close();
			emfactory.close();
			
			int i = 1;
			String sNo = "", stdID = "", nameStr = "", sex = "", age = "", border = "", balance = "";
			LinkedList<String> boarderStatusDay = new LinkedList<>();
			LinkedList<String> boarderStatusBoarder = new LinkedList<>();
			LinkedList<String> boarderStatusAll = new LinkedList<>();
			if(studentList.size() > 0) {
				for(String stdid : studentList) {
					
					EntityManagerFactory emfactoryx = Persistence.createEntityManagerFactory("SchoolMgtSystem");
					EntityManager entitymanagerx = emfactoryx.createEntityManager();
					entitymanagerx.getTransaction().begin();
					
					Students std = entitymanagerx.find(Students.class, stdid);
					
					if(std.getEntryBorderStatus().equals("Day")) {
						boarderStatusDay.add(std.getId().toUpperCase());	
					}
					else if(std.getEntryBorderStatus().equals("Border")) {
						boarderStatusBoarder.add(std.getId().toUpperCase());
					}
					
					boarderStatusAll.add(std.getId().toUpperCase());
					
					entitymanagerx.getTransaction().commit();
					entitymanagerx.close();
					emfactoryx.close();
				}
			}
			else {
				assignStdToClassDataTable2.setItems(null);
			}
			
			if(boarderStatus.equals("Day")) {
				for(String id : boarderStatusDay) {
					EntityManagerFactory emfactoryx = Persistence.createEntityManagerFactory("SchoolMgtSystem");
					EntityManager entitymanagerx = emfactoryx.createEntityManager();
					entitymanagerx.getTransaction().begin();
					
					Students std = entitymanagerx.find(Students.class, id);
					
					sNo = String.valueOf(i);
					stdID = id; 
					nameStr = std.getOtherNames()+" "+std.getSurName();
					sex = std.getSex();
					age = String.valueOf(LocalDate.now().getYear() - std.getDateOfBirth().getYear());
					border = std.getEntryBorderStatus();
					
					EntityManagerFactory emfactory2 = Persistence.createEntityManagerFactory("SchoolMgtSystem");
					EntityManager entitymanager2 = emfactory2.createEntityManager();
					entitymanager2.getTransaction().begin();
					
					AccountBalance bal = entitymanager2.find(AccountBalance.class, stdID);
					
					balance = fm.format(bal.getBalance());
					
					try {
						data.add(new AssignStdToClassDataTable(sNo, stdID, nameStr, sex, age, border, balance));
						i = i + 1;
					}
					catch(Exception exet) {
						exet.printStackTrace();
					}
					
					entitymanager2.getTransaction().commit();
					entitymanager2.close();
					emfactory2.close();
					
					astcSNoCol2.setCellValueFactory(new PropertyValueFactory("sNo_Data"));
					astcStdIdCol2.setCellValueFactory(new PropertyValueFactory("stdId_Data"));
					astcNameCol2.setCellValueFactory(new PropertyValueFactory("name_Data"));
					astcSexCol2.setCellValueFactory(new PropertyValueFactory("sex_Data"));
					astcAgeCol2.setCellValueFactory(new PropertyValueFactory("age_Data"));
					astcBorderCol2.setCellValueFactory(new PropertyValueFactory("border_Data"));
					astcBalanceCol2.setCellValueFactory(new PropertyValueFactory("balance_Data"));
					
					assignStdToClassDataTable2.setItems(data);
					
					double sum = 0;
					for(AssignStdToClassDataTable datum : data) {
						sum = sum + Double.parseDouble(datum.getBalance_Data());
					}
					
					balanceTxt.setText(fm2.format(sum));
					
					entitymanagerx.getTransaction().commit();
					entitymanagerx.close();
					emfactoryx.close();
				}
			}
			else if(boarderStatus.equals("Border")) {
				for(String id : boarderStatusBoarder) {
					EntityManagerFactory emfactoryx = Persistence.createEntityManagerFactory("SchoolMgtSystem");
					EntityManager entitymanagerx = emfactoryx.createEntityManager();
					entitymanagerx.getTransaction().begin();
					
					Students std = entitymanagerx.find(Students.class, id);
					
					sNo = String.valueOf(i);
					stdID = id; 
					nameStr = std.getOtherNames()+" "+std.getSurName();
					sex = std.getSex();
					age = String.valueOf(LocalDate.now().getYear() - std.getDateOfBirth().getYear());
					border = std.getEntryBorderStatus();
					
					EntityManagerFactory emfactory2 = Persistence.createEntityManagerFactory("SchoolMgtSystem");
					EntityManager entitymanager2 = emfactory2.createEntityManager();
					entitymanager2.getTransaction().begin();
					
					AccountBalance bal = entitymanager2.find(AccountBalance.class, stdID);
					
					balance = fm.format(bal.getBalance());
					
					try {
						data.add(new AssignStdToClassDataTable(sNo, stdID, nameStr, sex, age, border, balance));
						i = i + 1;
					}
					catch(Exception exet) {
						exet.printStackTrace();
					}
					
					entitymanager2.getTransaction().commit();
					entitymanager2.close();
					emfactory2.close();
					
					astcSNoCol2.setCellValueFactory(new PropertyValueFactory("sNo_Data"));
					astcStdIdCol2.setCellValueFactory(new PropertyValueFactory("stdId_Data"));
					astcNameCol2.setCellValueFactory(new PropertyValueFactory("name_Data"));
					astcSexCol2.setCellValueFactory(new PropertyValueFactory("sex_Data"));
					astcAgeCol2.setCellValueFactory(new PropertyValueFactory("age_Data"));
					astcBorderCol2.setCellValueFactory(new PropertyValueFactory("border_Data"));
					astcBalanceCol2.setCellValueFactory(new PropertyValueFactory("balance_Data"));
					
					assignStdToClassDataTable2.setItems(data);
					
					double sum = 0;
					for(AssignStdToClassDataTable datum : data) {
						sum = sum + Double.parseDouble(datum.getBalance_Data());
					}
					
					balanceTxt.setText(fm2.format(sum));
					
					entitymanagerx.getTransaction().commit();
					entitymanagerx.close();
					emfactoryx.close();
		
				}
			}
			else {
				for(String id : boarderStatusAll) {
					EntityManagerFactory emfactoryx = Persistence.createEntityManagerFactory("SchoolMgtSystem");
					EntityManager entitymanagerx = emfactoryx.createEntityManager();
					entitymanagerx.getTransaction().begin();
					
					Students std = entitymanagerx.find(Students.class, id);
					
					sNo = String.valueOf(i);
					stdID = id; 
					nameStr = std.getOtherNames()+" "+std.getSurName();
					sex = std.getSex();
					age = String.valueOf(LocalDate.now().getYear() - std.getDateOfBirth().getYear());
					border = std.getEntryBorderStatus();
					
					EntityManagerFactory emfactory2 = Persistence.createEntityManagerFactory("SchoolMgtSystem");
					EntityManager entitymanager2 = emfactory2.createEntityManager();
					entitymanager2.getTransaction().begin();
					
					AccountBalance bal = entitymanager2.find(AccountBalance.class, stdID);
					
					balance = fm.format(bal.getBalance());
					
					try {
						data.add(new AssignStdToClassDataTable(sNo, stdID, nameStr, sex, age, border, balance));
						i = i + 1;
					}
					catch(Exception exet) {
						exet.printStackTrace();
					}
					
					entitymanager2.getTransaction().commit();
					entitymanager2.close();
					emfactory2.close();
					
					astcSNoCol2.setCellValueFactory(new PropertyValueFactory("sNo_Data"));
					astcStdIdCol2.setCellValueFactory(new PropertyValueFactory("stdId_Data"));
					astcNameCol2.setCellValueFactory(new PropertyValueFactory("name_Data"));
					astcSexCol2.setCellValueFactory(new PropertyValueFactory("sex_Data"));
					astcAgeCol2.setCellValueFactory(new PropertyValueFactory("age_Data"));
					astcBorderCol2.setCellValueFactory(new PropertyValueFactory("border_Data"));
					astcBalanceCol2.setCellValueFactory(new PropertyValueFactory("balance_Data"));
					
					assignStdToClassDataTable2.setItems(data);
					
					double sum = 0;
					for(AssignStdToClassDataTable datum : data) {
						sum = sum + Double.parseDouble(datum.getBalance_Data());
					}
					
					balanceTxt.setText(fm2.format(sum));
					
					entitymanagerx.getTransaction().commit();
					entitymanagerx.close();
					emfactoryx.close();
				}
			}
		}
		catch(Exception ex3) {
			ex3.printStackTrace();
			assignStdToClassDataTable2.setItems(null);
		}
	}
	
	//validated list - std in wrong class
	public void populateAssignStd2ClassXXXZ(String stdclassesId, String boarderStatus, 
			TableView<AssignStdToClassDataTable> assignStdToClassDataTable2,
			TableColumn<AssignStdToClassDataTable,String> astcSNoCol2, TableColumn<AssignStdToClassDataTable,String> astcStdIdCol2, 
			TableColumn<AssignStdToClassDataTable,String> astcNameCol2, TableColumn<AssignStdToClassDataTable,String> astcSexCol2,
			TableColumn<AssignStdToClassDataTable,String> astcAgeCol2, TableColumn<AssignStdToClassDataTable,String> astcBorderCol2, 
			TableColumn<AssignStdToClassDataTable,String> astcBalanceCol2){
		
		LinkedHashSet<String> studentList = new LinkedHashSet<>();
		ObservableList<AssignStdToClassDataTable> data = FXCollections.observableArrayList();
	
		try {
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			StudentClasses clas = entitymanager.find(StudentClasses.class, stdclassesId);
			
			studentList = clas.getStdList();
			
			entitymanager.getTransaction().commit();
			entitymanager.close();
			emfactory.close();
			
			int i = 1;
			String sNo = "", stdID = "", nameStr = "", sex = "", age = "", border = "", balance = "";
			LinkedList<String> boarderStatusDay = new LinkedList<>();
			LinkedList<String> boarderStatusBoarder = new LinkedList<>();
			LinkedList<String> boarderStatusAll = new LinkedList<>();
			if(studentList.size() > 0) {
				for(String stdid : studentList) {
					
					EntityManagerFactory emfactoryx = Persistence.createEntityManagerFactory("SchoolMgtSystem");
					EntityManager entitymanagerx = emfactoryx.createEntityManager();
					entitymanagerx.getTransaction().begin();
					
					Students std = entitymanagerx.find(Students.class, stdid);
					
					String stdEntryClass = std.getEntryClassAssigned();
					
					if(!stdclassesId.equalsIgnoreCase(stdEntryClass)) {
						if(std.getEntryBorderStatus().equals("Day")) {
							boarderStatusDay.add(std.getId().toUpperCase());	
						}
						else if(std.getEntryBorderStatus().equals("Border")) {
							boarderStatusBoarder.add(std.getId().toUpperCase());
						}
						
						boarderStatusAll.add(std.getId().toUpperCase());
					}
					else {
						assignStdToClassDataTable2.setItems(null);
					}
					
					entitymanagerx.getTransaction().commit();
					entitymanagerx.close();
					emfactoryx.close();
				}
			}
			else {
				assignStdToClassDataTable2.setItems(null);
			}
			
			if(boarderStatus.equals("Day")) {
				for(String id : boarderStatusDay) {
					EntityManagerFactory emfactoryx = Persistence.createEntityManagerFactory("SchoolMgtSystem");
					EntityManager entitymanagerx = emfactoryx.createEntityManager();
					entitymanagerx.getTransaction().begin();
					
					Students std = entitymanagerx.find(Students.class, id);
					
					sNo = String.valueOf(i);
					stdID = id; 
					nameStr = std.getOtherNames()+" "+std.getSurName();
					sex = std.getSex();
					age = String.valueOf(LocalDate.now().getYear() - std.getDateOfBirth().getYear());
					border = std.getEntryBorderStatus();
					balance = std.getEntryClassAssigned();
					
					try {
						data.add(new AssignStdToClassDataTable(sNo, stdID, nameStr, sex, age, border, balance));
						i = i + 1;
					}
					catch(Exception exet) {
						exet.printStackTrace();
					}
					
					astcSNoCol2.setCellValueFactory(new PropertyValueFactory("sNo_Data"));
					astcStdIdCol2.setCellValueFactory(new PropertyValueFactory("stdId_Data"));
					astcNameCol2.setCellValueFactory(new PropertyValueFactory("name_Data"));
					astcSexCol2.setCellValueFactory(new PropertyValueFactory("sex_Data"));
					astcAgeCol2.setCellValueFactory(new PropertyValueFactory("age_Data"));
					astcBorderCol2.setCellValueFactory(new PropertyValueFactory("border_Data"));
					astcBalanceCol2.setCellValueFactory(new PropertyValueFactory("balance_Data"));
					
					assignStdToClassDataTable2.setItems(data);
					
					entitymanagerx.getTransaction().commit();
					entitymanagerx.close();
					emfactoryx.close();
				}
			}
			else if(boarderStatus.equals("Border")) {
				for(String id : boarderStatusBoarder) {
					EntityManagerFactory emfactoryx = Persistence.createEntityManagerFactory("SchoolMgtSystem");
					EntityManager entitymanagerx = emfactoryx.createEntityManager();
					entitymanagerx.getTransaction().begin();
					
					Students std = entitymanagerx.find(Students.class, id);
					
					sNo = String.valueOf(i);
					stdID = id; 
					nameStr = std.getOtherNames()+" "+std.getSurName();
					sex = std.getSex();
					age = String.valueOf(LocalDate.now().getYear() - std.getDateOfBirth().getYear());
					border = std.getEntryBorderStatus();
					balance = std.getEntryClassAssigned();
					
					try {
						data.add(new AssignStdToClassDataTable(sNo, stdID, nameStr, sex, age, border, balance));
						i = i + 1;
					}
					catch(Exception exet) {
						exet.printStackTrace();
					}
					
					astcSNoCol2.setCellValueFactory(new PropertyValueFactory("sNo_Data"));
					astcStdIdCol2.setCellValueFactory(new PropertyValueFactory("stdId_Data"));
					astcNameCol2.setCellValueFactory(new PropertyValueFactory("name_Data"));
					astcSexCol2.setCellValueFactory(new PropertyValueFactory("sex_Data"));
					astcAgeCol2.setCellValueFactory(new PropertyValueFactory("age_Data"));
					astcBorderCol2.setCellValueFactory(new PropertyValueFactory("border_Data"));
					astcBalanceCol2.setCellValueFactory(new PropertyValueFactory("balance_Data"));
					
					assignStdToClassDataTable2.setItems(data);
					
					entitymanagerx.getTransaction().commit();
					entitymanagerx.close();
					emfactoryx.close();
		
				}
			}
			else {
				for(String id : boarderStatusAll) {
					EntityManagerFactory emfactoryx = Persistence.createEntityManagerFactory("SchoolMgtSystem");
					EntityManager entitymanagerx = emfactoryx.createEntityManager();
					entitymanagerx.getTransaction().begin();
					
					Students std = entitymanagerx.find(Students.class, id);
					
					sNo = String.valueOf(i);
					stdID = id; 
					nameStr = std.getOtherNames()+" "+std.getSurName();
					sex = std.getSex();
					age = String.valueOf(LocalDate.now().getYear() - std.getDateOfBirth().getYear());
					border = std.getEntryBorderStatus();
					balance = std.getEntryClassAssigned();
					
					try {
						data.add(new AssignStdToClassDataTable(sNo, stdID, nameStr, sex, age, border, balance));
						i = i + 1;
					}
					catch(Exception exet) {
						exet.printStackTrace();
					}
					
					astcSNoCol2.setCellValueFactory(new PropertyValueFactory("sNo_Data"));
					astcStdIdCol2.setCellValueFactory(new PropertyValueFactory("stdId_Data"));
					astcNameCol2.setCellValueFactory(new PropertyValueFactory("name_Data"));
					astcSexCol2.setCellValueFactory(new PropertyValueFactory("sex_Data"));
					astcAgeCol2.setCellValueFactory(new PropertyValueFactory("age_Data"));
					astcBorderCol2.setCellValueFactory(new PropertyValueFactory("border_Data"));
					astcBalanceCol2.setCellValueFactory(new PropertyValueFactory("balance_Data"));
					
					assignStdToClassDataTable2.setItems(data);
					
					entitymanagerx.getTransaction().commit();
					entitymanagerx.close();
					emfactoryx.close();
				}
			}
		}
		catch(Exception ex3) {
			ex3.printStackTrace();
			assignStdToClassDataTable2.setItems(null);
		}
	}
	
	
	//Student List per class
	@FXML private Button returnStdClassListBtn, enterStdClassListBtn;
	@FXML private ComboBox<String> stdClassCombo, stdClassBoarderCombo;
	@FXML private TextField stdClassTotalBalance;
	@FXML private Label stdClassLabel;
	@FXML TableView<AssignStdToClassDataTable> assignStdToClassDataTable3;
	@FXML TableColumn<AssignStdToClassDataTable,String> astcSNoCol3, astcStdIdCol3, astcNameCol3, astcSexCol3,
		astcAgeCol3, astcBorderCol3, astcBalanceCol3;
	
	ObservableList<String> stdClassLst = FXCollections.observableArrayList();
	
	ObservableList<String> stdClassBoarder = FXCollections.observableArrayList("All","Day","Border");
	
	@FXML public void bacComboInit2(MouseEvent event) {
		
		stdClassBoarderCombo.setItems(stdClassBoarder);
		
		populateStdClassesCombo(stdClassLst, stdClassCombo);

	}
	
	@FXML public void spoolStdClassListButton(ActionEvent event) {
		String classId = stdClassCombo.getValue();
		String boarderStatus = stdClassBoarderCombo.getValue();
		try {
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			StudentClasses item = entitymanager.find(StudentClasses.class, classId);
			
			stdClassLabel.setText("Class: "+item.getClassNo()+item.getClassLetter()+ " Year: "+item.getYear()+
					" Term: "+ item.getTerm());
			
			entitymanager.getTransaction().commit();
			entitymanager.close();
			emfactory.close();
			
		}
		catch(Exception e) {
			e.printStackTrace();
		}
		
		try {
			populateAssignStd2ClassXXX(classId, boarderStatus, assignStdToClassDataTable3, astcSNoCol3, astcStdIdCol3, 
					astcNameCol3, astcSexCol3, astcAgeCol3, astcBorderCol3, astcBalanceCol3, stdClassTotalBalance);
		}
		catch(Exception e) {
			e.printStackTrace();
			assignStdToClassDataTable3.setItems(null);
		}
		
	}
	
	//Excel std class list
	@FXML public void xcelStdClassListButton(ActionEvent event) {
		Workbook workbook = new HSSFWorkbook();
		Sheet spreadSheet = workbook.createSheet("sample");
		Row row = spreadSheet.createRow(0);
		
		for(int j = 0; j < assignStdToClassDataTable3.getColumns().size(); j++) {
			row.createCell(j).setCellValue(assignStdToClassDataTable3.getColumns().get(j).getText());
		}
		
		for(int i = 0; i < assignStdToClassDataTable3.getItems().size(); i++) {
			row = spreadSheet.createRow(i + 1);
			for(int j = 0; j < assignStdToClassDataTable3.getColumns().size(); j++) {
				if(assignStdToClassDataTable3.getColumns().get(j).getCellData(i) != null) {
					row.createCell(j).setCellValue(assignStdToClassDataTable3.getColumns().get(j).getCellData(i).toString());
				}
				else {
					row.createCell(j).setCellValue("");
				}
			}
		}
		
		String txt = stdClassCombo.getValue()+".xls";
		String filePath = "C:\\workbook\\"+txt;
		
		try {
			FileOutputStream fileOut = new FileOutputStream(filePath);
			try {
				workbook.write(fileOut);
				fileOut.close();
				stdClassLabel.setText(filePath);
			} catch (IOException e2) {
				stdClassLabel.setText("Write Error: "+ e2.getMessage());
			}
		} catch (FileNotFoundException e) {
			stdClassLabel.setText("File Error: "+ e.getMessage());
		}
	}
	
	//validate class membership
	@FXML public void validateClassMembership(ActionEvent event) {
		String classId = stdClassCombo.getValue();
		String boarderStatus = stdClassBoarderCombo.getValue();
//		try {
//			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
//			EntityManager entitymanager = emfactory.createEntityManager();
//			entitymanager.getTransaction().begin();
//			
//			StudentClasses item = entitymanager.find(StudentClasses.class, classId);
//			
//			stdClassLabel.setText("Class: "+item.getClassNo()+item.getClassLetter()+ " Year: "+item.getYear()+
//					" Term: "+ item.getTerm());
//			
//			entitymanager.getTransaction().commit();
//			entitymanager.close();
//			emfactory.close();
//			
//		}
//		catch(Exception e) {
//			e.printStackTrace();
//		}
		
		try {
			populateAssignStd2ClassXXXZ(classId, boarderStatus, assignStdToClassDataTable3, astcSNoCol3, astcStdIdCol3, 
					astcNameCol3, astcSexCol3, astcAgeCol3, astcBorderCol3, astcBalanceCol3);
		}
		catch(Exception e) {
			e.printStackTrace();
			assignStdToClassDataTable3.setItems(null);
		}
	}
	
	//scan the database and add std to their classes
	@FXML public void scanClassMembership(ActionEvent event) {
		
		try {
			String classId = stdClassCombo.getValue();
			String boarderStatus = stdClassBoarderCombo.getValue();
			
			Vector<Students> stdListAll = new Vector<>();
			LinkedHashSet<String> stdListClass = new LinkedHashSet<>();
			
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
//			Query query =
//					entitymanager.createQuery("select e from Students e where "
//			+"e.entryClassAssigned like '%SSS%' or e.entryClassAssigned like '%JSS%'");
//			stdListAll = (Vector<Students>) query.getResultList();
			
			stdListAll = getStudentsAll(entitymanager);
			
			StudentClasses stdC = entitymanager.find(StudentClasses.class, classId);
			stdListClass = stdC.getStdList();
			
			entitymanager.getTransaction().commit();
			entitymanager.close();
			emfactory.close();
			
			for (Students std : stdListAll) {
				if(std.getEntryClassAssigned().equals(classId) && 
						!stdListClass.contains(std.getId())) {
					
					try {
						EntityManagerFactory emf = Persistence.createEntityManagerFactory("SchoolMgtSystem");
						EntityManager em = emf.createEntityManager();
						em.getTransaction().begin();
						
						StudentClasses stds = em.find(StudentClasses.class, classId);
						
						stds.getStdList().add(std.getId());
						
						em.getTransaction().commit();
						em.close();
						emf.close();
						
					}
					catch(Exception e2) {
						e2.printStackTrace();
					}
					
				}
			}
			
			populateAssignStd2ClassXXX(classId, boarderStatus, assignStdToClassDataTable3, astcSNoCol3, astcStdIdCol3, 
					astcNameCol3, astcSexCol3, astcAgeCol3, astcBorderCol3, astcBalanceCol3, stdClassTotalBalance);
		}
		catch(Exception e) {
			e.printStackTrace();
			assignStdToClassDataTable3.setItems(null);
		}
		
	}
	
	//Move a class to a class
	@FXML private Button enterMoveClass2ClassBtn, returnMoveClass2ClassBtn;
	@FXML private TextField moveClassId, moveStdClassId, moveClassTotal;
	@FXML private ComboBox<String> moveCurrentClass, moveNewClass, moveStdId;
	@FXML private DatePicker moveEntryDate;
	@FXML private TextArea moveDisplayClass;
	@FXML TableView<AssignStdToClassDataTable> assignStdToClassDataTable4;
	@FXML TableColumn<AssignStdToClassDataTable,String> astcSNoCol4, astcStdIdCol4, astcNameCol4, astcSexCol4,
		astcAgeCol4, astcBorderCol4, astcBalanceCol4;
	
	ObservableList<String> moveCurrentList = FXCollections.observableArrayList();
	ObservableList<String> moveNewList = FXCollections.observableArrayList();
	ObservableList<String> moveStdList = FXCollections.observableArrayList();
	
	@FXML public void moveClass2ClassComboInit(MouseEvent event) {
		populateStdClassesCombo(moveCurrentList, moveCurrentClass);
		populateStdClassesCombo(moveNewList, moveNewClass);
		
		//populate from current class
		String currentClassId = moveCurrentClass.getValue();
		
		ObservableList<String> data = FXCollections.observableArrayList();
		LinkedHashSet<String> set = new LinkedHashSet<>();
		try {
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			StudentClasses stds = entitymanager.find(StudentClasses.class, currentClassId);
			
			set = stds.getStdList();
			
			entitymanager.getTransaction().commit();
			entitymanager.close();
			emfactory.close();
			
		}
		catch(Exception e) {
			e.printStackTrace();
		}
		
		for(String STID : set) {
			
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			Students info = entitymanager.find(Students.class, STID);
			
			try {
				data.add(info.getId());
			}
			catch(Exception cat) {
				cat.printStackTrace();
			}
			
			entitymanager.getTransaction().commit();
			entitymanager.close();
			emfactory.close();
		}
		
		moveStdId.setItems(data);
		new AutoCompleteComboBoxListener<>(moveStdId);
	}
	
	@FXML private Button remStd4ClassBtn;
	@FXML public void cscInfoInitX2(MouseEvent event) {
		
		moveEntryDate.setValue(LocalDate.now());
		
		if(dispUserClass.equals("Cashier") || dispUserClass.equalsIgnoreCase("Bursar")) {
			copyClass2ClassBtn.setDisable(true);
			remStd4ClassBtn.setDisable(true);
		}
		else if(dispUserClass.equals("Dean") || dispUserClass.equals("Sub-Dean")) {
			copyClass2ClassBtn.setDisable(true);
			remStd4ClassBtn.setDisable(true);
		}
		else if(dispUserClass.equals("Vice-Principal") || dispUserClass.equals("Principal")) {
			copyClass2ClassBtn.setDisable(true);
			remStd4ClassBtn.setDisable(true);
		}
		else if(dispUserClass.equals("AdmissionOfficer")) {
			copyClass2ClassBtn.setDisable(true);
			remStd4ClassBtn.setDisable(true);
		}
		else if(dispUserClass.equals("Computer-Operator")) {
			copyClass2ClassBtn.setDisable(true);
			remStd4ClassBtn.setDisable(true);
		}
		else {
			//do nothing
		}
	}
	
	@FXML public void moveClass2ClassButton(ActionEvent event) {
		LocalDateTime dateTime = LocalDateTime.now();
		String currentClass = moveCurrentClass.getValue();
		String newClass = moveNewClass.getValue();
		LocalDate date = moveEntryDate.getValue();
		
		try {
			if((currentClass.trim().length() == 10 || currentClass.trim().length() == 31 || 
					currentClass.trim().length() == 11 || currentClass.trim().length() == 16) && 
					(newClass.trim().length() == 10 || newClass.trim().length() == 11 || 
					newClass.trim().length() == 31 || newClass.trim().length() == 16) && 
					date.toString().trim().length() != 0) {
				
				String mId = currentClass+newClass+dateTime;
				LinkedHashSet<String> set = new LinkedHashSet<>();
				
				try {
					EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
					EntityManager entitymanager = emfactory.createEntityManager();
					entitymanager.getTransaction().begin();
					
					StudentClasses stds = entitymanager.find(StudentClasses.class, currentClass);
					
					set = stds.getStdList();
					
					entitymanager.getTransaction().commit();
					entitymanager.close();
					emfactory.close();
					
				}
				catch(Exception e) {
					e.printStackTrace();
				}
				
				for(String STID : set) {
					
					EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
					EntityManager entitymanager = emfactory.createEntityManager();
					entitymanager.getTransaction().begin();
					
					StudentClasses clas = entitymanager.find(StudentClasses.class, newClass);
					Students stdx = entitymanager.find(Students.class, STID);
					
					try {
						clas.setStdList(STID);
						stdx.setEntryClassAssigned(newClass);
					}
					catch(Exception cat) {
						cat.printStackTrace();
					}
					
					moveDisplayClass.setText(newClass);
					
					entitymanager.getTransaction().commit();
					entitymanager.close();
					emfactory.close();
				}
				
				CreateMoveClass2Class move = new CreateMoveClass2Class();
				try {
					move.createMoveClass2Class(mId, currentClass, newClass, dispName, date);
					moveClassId.setText(mId);
				}
				catch(Exception st) {
					st.printStackTrace();
				}
				
				EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
				EntityManager entitymanager = emfactory.createEntityManager();
				entitymanager.getTransaction().begin();
				
				StudentClasses stdRemove = entitymanager.find(StudentClasses.class, currentClass);
				
				stdRemove.getStdList().clear();
				
				entitymanager.getTransaction().commit();
				entitymanager.close();
				emfactory.close();
				
				try {
					populateAssignStd2ClassX(newClass, assignStdToClassDataTable4, astcSNoCol4, astcStdIdCol4, 
							astcNameCol4, astcSexCol4, astcAgeCol4, astcBorderCol4, astcBalanceCol4, moveClassTotal);
				}
				catch(Exception ess) {
					ess.printStackTrace();
				}
			}
			else {
				throw new Exception("Invalid entries...");
			}
		}
		catch(Exception ex) {
			Alert alert = new Alert(Alert.AlertType.ERROR);
			alert.setContentText("Invalid Selections..."+ ex.getMessage());
			Optional<ButtonType> result = alert.showAndWait();
			if(result.get() == ButtonType.OK) {
				alert.close();
			}
			else {
				alert.close();
			}
		}
	}
	
	@FXML public void moveStdFromCurrentToNew(ActionEvent event) {
		LocalDateTime dateTime = LocalDateTime.now();
		String currentClass = moveCurrentClass.getValue();
		String newClass = moveNewClass.getValue();
		String stdId = moveStdId.getValue();
		LocalDate date = moveEntryDate.getValue();
		
		try {
			if((currentClass.trim().length() == 10 || currentClass.trim().length() == 11 || 
					currentClass.trim().length() == 31 || currentClass.trim().length() == 16) && 
					(newClass.trim().length() == 10 || newClass.trim().length() == 11 || 
					newClass.trim().length() == 31 || newClass.trim().length() == 16) && 
					date.toString().trim().length() == 10 &&
					(validateStdNo(stdId))) {
				
				String moveId = stdId+currentClass+newClass+dateTime;
				
				EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
				EntityManager entitymanager = emfactory.createEntityManager();
				entitymanager.getTransaction().begin();
				
				StudentClasses clas = entitymanager.find(StudentClasses.class, newClass);
				Students stdx = entitymanager.find(Students.class, stdId);
				
				try {
					clas.setStdList(stdId);
					stdx.setEntryClassAssigned(newClass);
				}
				catch(Exception cat) {
					cat.printStackTrace();
				}
				
				moveDisplayClass.setText(newClass);
				
				entitymanager.getTransaction().commit();
				entitymanager.close();
				emfactory.close();
				
				CreateMoveStdClass2Class moveStd = new CreateMoveStdClass2Class();
				try {
					moveStd.createMoveStdClass2Class(moveId, stdId, currentClass, newClass, dispName, date);
					
					moveStdClassId.setText(moveId);
				}
				catch(Exception st) {
					st.printStackTrace();
				}
				
				EntityManagerFactory emfactoryv = Persistence.createEntityManagerFactory("SchoolMgtSystem");
				EntityManager entitymanagerv = emfactoryv.createEntityManager();
				entitymanagerv.getTransaction().begin();
				
				StudentClasses stdRemove = entitymanagerv.find(StudentClasses.class, currentClass);
				
				stdRemove.getStdList().remove(stdId);
				
				entitymanagerv.getTransaction().commit();
				entitymanagerv.close();
				emfactoryv.close();
				
				try {
					populateAssignStd2ClassX(newClass, assignStdToClassDataTable4, astcSNoCol4, astcStdIdCol4, 
							astcNameCol4, astcSexCol4, astcAgeCol4, astcBorderCol4, astcBalanceCol4, moveClassTotal);
				}
				catch(Exception ess) {
					ess.printStackTrace();
				}
				
			}
			else {
				throw new Exception("Invalid entries...");
			}
		}
		catch(Exception ex) {
			Alert alert = new Alert(Alert.AlertType.ERROR);
			alert.setContentText("Invalid Selections..."+ ex.getMessage());
			Optional<ButtonType> result = alert.showAndWait();
			if(result.get() == ButtonType.OK) {
				alert.close();
			}
			else {
				alert.close();
			}
		}
	}
	
	//Remove std from a class in the event of a std appearing in more than one classes
	@FXML public void removeStdFromClass(ActionEvent event) {
		String currentClass = moveCurrentClass.getValue();
		String newClass = moveNewClass.getValue();
		String stdId = moveStdId.getValue();
		LocalDate date = moveEntryDate.getValue();
		
		try {
			if((currentClass.trim().length() == 10 || currentClass.trim().length() == 11 || 
					currentClass.trim().length() == 31 || currentClass.trim().length() == 16) && 
					(newClass.trim().length() == 10 || newClass.trim().length() == 11 || 
					newClass.trim().length() == 31 || newClass.trim().length() == 16) && 
					date.toString().trim().length() != 0 &&
					(validateStdNo(stdId))) {
				
				EntityManagerFactory emfactoryv = Persistence.createEntityManagerFactory("SchoolMgtSystem");
				EntityManager entitymanagerv = emfactoryv.createEntityManager();
				entitymanagerv.getTransaction().begin();
				
				StudentClasses stdRemove = entitymanagerv.find(StudentClasses.class, currentClass);
				
				stdRemove.getStdList().remove(stdId.toUpperCase());
				
				//remove for lowercase
				stdRemove.getStdList().remove(stdId.toLowerCase());
				
				entitymanagerv.getTransaction().commit();
				entitymanagerv.close();
				emfactoryv.close();
				
				try {
					populateAssignStd2ClassX(currentClass, assignStdToClassDataTable4, astcSNoCol4, astcStdIdCol4, 
							astcNameCol4, astcSexCol4, astcAgeCol4, astcBorderCol4, astcBalanceCol4, moveClassTotal);
				}
				catch(Exception ess) {
					ess.printStackTrace();
				}
			}
			else {
				throw new Exception("Invalid entries...");
			}
		}
		catch(Exception ex) {
			Alert alert = new Alert(Alert.AlertType.ERROR);
			alert.setContentText("Invalid Selections..."+ ex.getMessage());
			Optional<ButtonType> result = alert.showAndWait();
			if(result.get() == ButtonType.OK) {
				alert.close();
			}
			else {
				alert.close();
			}
		}
	}
	
	@FXML public void listMoveNewClassButton(ActionEvent event) {
		try {
			String newClass = moveNewClass.getValue();
			populateAssignStd2ClassX(newClass, assignStdToClassDataTable4, astcSNoCol4, astcStdIdCol4, 
					astcNameCol4, astcSexCol4, astcAgeCol4, astcBorderCol4, astcBalanceCol4, moveClassTotal);
			moveDisplayClass.setText(newClass);
		}
		catch(Exception ess) {
			ess.printStackTrace();
		}
	}
	
	@FXML public void listMoveCurrentClassButton(ActionEvent event) {
		String currentClass = moveCurrentClass.getValue();
		try {
			populateAssignStd2ClassX(currentClass, assignStdToClassDataTable4, astcSNoCol4, astcStdIdCol4, 
					astcNameCol4, astcSexCol4, astcAgeCol4, astcBorderCol4, astcBalanceCol4, moveClassTotal);
			moveDisplayClass.setText(currentClass);
		}
		catch(Exception ess) {
			ess.printStackTrace();
		}
	}
	
	@FXML public void copyClass2ClassButton(ActionEvent event) {
		LocalDateTime dateTime = LocalDateTime.now();
		String currentClass = moveCurrentClass.getValue();
		String newClass = moveNewClass.getValue();
		LocalDate date = moveEntryDate.getValue();
		
		try {
			if((currentClass.trim().length() == 10 || currentClass.trim().length() == 31 || 
					currentClass.trim().length() == 11 || currentClass.trim().length() == 16) && 
					(newClass.trim().length() == 10 || newClass.trim().length() == 11 || 
					newClass.trim().length() == 31 || newClass.trim().length() == 16) && 
					date.toString().trim().length() != 0) {
				String mId = currentClass+newClass+dateTime;
				LinkedHashSet<String> set = new LinkedHashSet<>();
				try {
					EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
					EntityManager entitymanager = emfactory.createEntityManager();
					entitymanager.getTransaction().begin();
					
					StudentClasses stds = entitymanager.find(StudentClasses.class, currentClass);
					
					set = stds.getStdList();
					
					entitymanager.getTransaction().commit();
					entitymanager.close();
					emfactory.close();
					
				}
				catch(Exception e) {
					e.printStackTrace();
				}
				
				for(String STID : set) {
					
					EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
					EntityManager entitymanager = emfactory.createEntityManager();
					entitymanager.getTransaction().begin();
					
					StudentClasses clas = entitymanager.find(StudentClasses.class, newClass);
					
					try {
						clas.setStdList(STID);
					}
					catch(Exception cat) {
						cat.printStackTrace();
					}
					
					moveDisplayClass.setText(newClass);
					
					entitymanager.getTransaction().commit();
					entitymanager.close();
					emfactory.close();
				}
				
				CreateMoveClass2Class move = new CreateMoveClass2Class();
				try {
					move.createMoveClass2Class(mId, currentClass, newClass, dispName, date);
					moveClassId.setText(mId);
				}
				catch(Exception st) {
					st.printStackTrace();
				}
				
//				EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
//				EntityManager entitymanager = emfactory.createEntityManager();
//				entitymanager.getTransaction().begin();
//				
//				StudentClasses stdRemove = entitymanager.find(StudentClasses.class, currentClass);
//				
//				stdRemove.getStdList().clear();
//				
//				entitymanager.getTransaction().commit();
//				entitymanager.close();
//				emfactory.close();
				
				try {
					populateAssignStd2ClassX(newClass, assignStdToClassDataTable4, astcSNoCol4, astcStdIdCol4, 
							astcNameCol4, astcSexCol4, astcAgeCol4, astcBorderCol4, astcBalanceCol4, moveClassTotal);
				}
				catch(Exception ess) {
					ess.printStackTrace();
				}
			}
			else {
				Alert alert = new Alert(Alert.AlertType.ERROR);
				alert.setContentText("Invalid entries... Please ensure that you have selected an appropriate "
						+ "date and all other parameters.");
				alert.setHeaderText("INVALID ENTRIES");
				Optional<ButtonType> result = alert.showAndWait();
				if(result.get() == ButtonType.OK) {
					alert.close();
				}
				else {
					alert.close();
				}
			}
		}
		catch(Exception exceptt) {
			Alert alert = new Alert(Alert.AlertType.ERROR);
			alert.setContentText("Invalid entries... Please ensure that you have selected an appropriate "
					+ "date and all other parameters. "+ exceptt.getMessage());
			alert.setHeaderText("INVALID ENTRIES");
			Optional<ButtonType> result = alert.showAndWait();
			if(result.get() == ButtonType.OK) {
				alert.close();
			}
			else {
				alert.close();
			}
		}
	}
	
	@FXML public void copyStd2ClassButton(ActionEvent event) {
		LocalDateTime dateTime = LocalDateTime.now();
		String currentClass = moveCurrentClass.getValue();
		String stdNo = moveStdId.getValue().toUpperCase();
		String newClass = moveNewClass.getValue();
		LocalDate date = moveEntryDate.getValue();
		
		if((currentClass.trim().length() == 10 || currentClass.trim().length() == 31 || 
				currentClass.trim().length() == 11 || currentClass.trim().length() == 16) && 
			(newClass.trim().length() == 10 || newClass.trim().length() == 31 || 
			newClass.trim().length() == 11 || newClass.trim().length() == 16) && 
			date.toString().trim().length() != 0 &&
			(validateStdNo(stdNo))) {
			
			String mId = currentClass+stdNo+newClass+dateTime;
			
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			StudentClasses clas = entitymanager.find(StudentClasses.class, newClass);
			
			try {
				clas.setStdList(stdNo);
			}
			catch(Exception cat) {
				cat.printStackTrace();
			}
			
			moveDisplayClass.setText(newClass);
			
			entitymanager.getTransaction().commit();
			entitymanager.close();
			emfactory.close();
			
			CreateMoveStdClass2Class move = new CreateMoveStdClass2Class();
			try {
				move.createMoveStdClass2Class(mId, stdNo, currentClass, newClass, dispName, date);
				moveClassId.setText(mId);
			}
			catch(Exception st) {
				st.printStackTrace();
			}
			
			try {
				populateAssignStd2ClassX(newClass, assignStdToClassDataTable4, astcSNoCol4, astcStdIdCol4, 
						astcNameCol4, astcSexCol4, astcAgeCol4, astcBorderCol4, astcBalanceCol4, moveClassTotal);
			}
			catch(Exception ess) {
				ess.printStackTrace();
			}
		}
		else {
			Alert alert = new Alert(Alert.AlertType.ERROR);
			alert.setContentText("Invalid Selections or entries...");
			Optional<ButtonType> result = alert.showAndWait();
			if(result.get() == ButtonType.OK) {
				alert.close();
			}
			else {
				alert.close();
			}
		}
	}
	
	//Disciplinary Records
	@FXML private Button enterDiscRecBtn, returnDiscRecBtn;
	@FXML private TextFlow dcTextflow;
	@FXML private TextField dcStdNo;
	@FXML private TextArea dcTxtArea;
	@FXML private Label dcSurName, dcOtherNames, dcAge;
	@FXML private ComboBox<String> dcSex, dcBorderStatus, dcClass, dcCombo;
	@FXML private ImageView imageViewDc;
	@FXML private DatePicker dcDate;
	
	//init combo
	@FXML public void initDC(MouseEvent event) {
		dcCombo.setItems(statusCombo);
	}
	
	//init
	@FXML public void dcStdBasics(MouseEvent event) {
		String stdNo = dcStdNo.getText().toUpperCase();
		try {
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			Students std = entitymanager.find(Students.class, stdNo);
			
			dcSurName.setText(std.getSurName());
			dcOtherNames.setText(std.getOtherNames());
			dcAge.setText(String.valueOf(LocalDate.now().getYear() - std.getDateOfBirth().getYear()));
			dcSex.setValue(std.getSex());
			dcBorderStatus.setValue(std.getEntryBorderStatus());
			dcClass.setValue(std.getEntryClassAssigned());
		
			entitymanager.getTransaction().commit();
			
			entitymanager.close();
			emfactory.close();
		}
		catch(Exception e) {
			dcStdNo.setText("Error: "+e.getMessage());
			dcSurName.setText(null);
			dcOtherNames.setText(null);
			dcAge.setText(null);
			dcSex.setValue("select option");
			dcBorderStatus.setValue("select option");
			dcClass.setValue("select option");
		}
		
		//view image
		try {
			String stdId = stdNo;
			
			String jdbcUrl = dbURL;
			String username = dbUSR;
			String password = dbPWD;
			
			String sql = "SELECT * FROM stdImages WHERE stdid = ?";
			
			try(Connection conn = DriverManager.getConnection(jdbcUrl, username, password);
					){
				
				try(PreparedStatement stmt = conn.prepareStatement(sql);
						){
					stmt.setString(1, stdId);		
					
					ResultSet result = stmt.executeQuery();
					
					
					if(result.next()) {
						InputStream imageStream = result.getBinaryStream("image");
						Image img = new Image(imageStream);
						imageViewDc.setImage(img);
					}
					else {
						imageViewDc.setImage(null);
					}
				
					result.close();
					stmt.close();
					conn.close();
				}
				catch(SQLException io) {
					dcStdNo.setText(io.getMessage());
					imageViewDc.setImage(null);
				}
			}
			catch(SQLException eq) {
				dcStdNo.setText(eq.getMessage());
				imageViewDc.setImage(null);
			}
		}
		catch(Exception e) {
			dcStdNo.setText(e.getMessage());
			imageViewDc.setImage(null);
		}
	}
	
	@FXML public void discEntryButton(ActionEvent event) {
		dcTextflow.getChildren().clear();
		TextInputDialog dialog = new TextInputDialog(dcTxtArea.getText());
		dialog.setTitle("Enter student's disciplinary report...");
		dialog.resizableProperty();
		dialog.setHeight(300);
		dialog.setWidth(400);
		Optional<String> result = dialog.showAndWait();
		if(result.isPresent()) {
			DateTimeFormatter formatter2 = DateTimeFormatter.ofLocalizedDate(FormatStyle.MEDIUM);
			LocalDate today = LocalDate.now();
			String date = formatter2.format(today);
			
			TextArea text = new TextArea(date+"\n"+ dcTxtArea.getText());//result.get());
			text.setWrapText(true);
			text.setPrefSize(780, 100);
			text.setFocusTraversable(true);
//			text.setEditable(false);
			
//			text.setFill(Color.rgb(100, 50, 200));
			text.resize(780, 100);
			text.autosize();
			Font tahoma = Font.font("Tahoma", 14);
			text.setFont(tahoma);
			
			dcTextflow.getChildren().add(text);
			
			text.toBack();
			
		}
	}
	
	//save disc
	@FXML public void saveDiagButton(ActionEvent event) {
		String stdNo = dcStdNo.getText().toUpperCase();
		
		try {
			
			ObservableList<Node> data = dcTextflow.getChildren();
			
			StringBuilder sb = new StringBuilder();
			
			Node item = data.get(0);
			if(item instanceof TextArea) {
				sb.append(((TextArea)item).getText());
			}
			
			String text = sb.toString();
			
			CreateDisciplinaryEntry dc = new CreateDisciplinaryEntry();

			try {
				dc.createDisciplinary(stdNo, text, dispName);
			}
			catch(Exception e) {
				dcStdNo.setText("Error: "+e.getMessage());
			}
			finally {
				dcSurName.setText(null);
				dcOtherNames.setText(null);
				dcAge.setText(null);
				dcSex.setValue("select option");
				dcBorderStatus.setValue("select option");
				dcClass.setValue("select option");
				dcTextflow.getChildren().clear();
				dcTxtArea.clear();
			}
		}
		catch(Exception e2) {
			dcStdNo.setText("variables error: "+e2.getMessage());
		}
		
		try {
			//String cardNo = dcStdNo.getText().toUpperCase();
			
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			DisciplinaryEntry std = entitymanager.find(DisciplinaryEntry.class, stdNo);
			
			LinkedList<String> list = std.getDcTextFlow();
	
			for(String text : list) {
				TextArea area = new TextArea(text);
				area.setWrapText(true);
				area.setPrefSize(780, 100);
				area.setFocusTraversable(true);
				dcTextflow.getChildren().add(area);
				area.toBack();
			}
			
			entitymanager.persist(std);
		
			entitymanager.getTransaction().commit();
			
			entitymanager.close();
			emfactory.close();
		}
		catch(Exception e) {
			dcStdNo.setText("Fetch Error: "+ e.getMessage());
		}
	}
	
	//fetch dc
	@FXML public void fetchDcButton(ActionEvent event) {
		String stdNo = dcStdNo.getText().toUpperCase();
		dcTextflow.getChildren().clear();
		try {
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			DisciplinaryEntry std = entitymanager.find(DisciplinaryEntry.class, stdNo);
			
			LinkedList<String> list = std.getDcTextFlow();
	
			for(String text : list) {
				TextArea area = new TextArea(text);
				area.setWrapText(true);
				area.setPrefSize(780, 100);
				area.setFocusTraversable(true);
				dcTextflow.getChildren().add(area);
				area.toBack();
			}
			
			entitymanager.persist(std);
		
			entitymanager.getTransaction().commit();
			
			entitymanager.close();
			emfactory.close();
		}
		catch(Exception e) {
			dcStdNo.setText("Fetch Error: "+ e.getMessage());
		}
	}
	
	@FXML public void fetchDcSideButton(ActionEvent event) {
		String stdNo = dcStdNo.getText().toUpperCase();
		dcTextflow.getChildren().clear();
		try {
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			DisciplinaryEntry std = entitymanager.find(DisciplinaryEntry.class, stdNo);
			
			LinkedList<String> list = std.getDcTextFlow();
	
			for(String text : list) {
				TextArea area = new TextArea(text);
				area.setWrapText(true);
				area.setPrefSize(780, 100);
				area.setFocusTraversable(true);
				dcTextflow.getChildren().add(area);
				area.toBack();
			}
			
			entitymanager.persist(std);
		
			entitymanager.getTransaction().commit();
			
			entitymanager.close();
			emfactory.close();
		}
		catch(Exception e) {
			dcStdNo.setText("Fetch Error: "+ e.getMessage());
		}
	}
	
//	//function to fetch txtflow
//	public void fetchTextFlow(String stdId) {
//		String stdNo = stdId;
//		dcTextflow.getChildren().clear();
//		try {
//			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
//			EntityManager entitymanager = emfactory.createEntityManager();
//			entitymanager.getTransaction().begin();
//			
//			DisciplinaryEntry std = entitymanager.find(DisciplinaryEntry.class, stdNo);
//			
//			LinkedList<String> list = std.getDcTextFlow();
//	
//			for(String text : list) {
//				TextArea area = new TextArea(text);
//				area.setWrapText(true);
//				area.setPrefSize(780, 100);
//				area.setFocusTraversable(true);
//				dcTextflow.getChildren().add(area);
//				area.toBack();
//			}
//			
//			entitymanager.persist(std);
//		
//			entitymanager.getTransaction().commit();
//			
//			entitymanager.close();
//			emfactory.close();
//		}
//		catch(Exception e) {
//			dcStdNo.setText("Fetch Error: "+ e.getMessage());
//		}
//	}
	
	//Commendation and Awards
	@FXML private Button enterFpBarcodeBtn;
	
	@FXML public void commendEntryButton(ActionEvent event) {
		dcTextflow.getChildren().clear();
		TextInputDialog dialog = new TextInputDialog(dcTxtArea.getText());
		dialog.setTitle("Enter student's Commendation report...");
		dialog.resizableProperty();
		dialog.setHeight(300);
		dialog.setWidth(400);
		Optional<String> result = dialog.showAndWait();
		if(result.isPresent()) {
			DateTimeFormatter formatter2 = DateTimeFormatter.ofLocalizedDate(FormatStyle.MEDIUM);
			LocalDate today = LocalDate.now();
			String date = formatter2.format(today);
			
			TextArea text = new TextArea(date+"\n"+ dcTxtArea.getText());//result.get());
			text.setWrapText(true);
			text.setPrefSize(780, 100);
			text.setFocusTraversable(true);
//			text.setEditable(false);
			
//			text.setFill(Color.rgb(100, 50, 200));
			text.resize(780, 100);
			text.autosize();
			Font tahoma = Font.font("Tahoma", 14);
			text.setFont(tahoma);
			
			dcTextflow.getChildren().add(text);
			
			text.toBack();
			
		}
	}
	
	//save disc
	@FXML public void saveCommendButton(ActionEvent event) {
		String stdNo = dcStdNo.getText().toUpperCase();
		
		try {
			
			ObservableList<Node> data = dcTextflow.getChildren();
			
			StringBuilder sb = new StringBuilder();
			
			Node item = data.get(0);
			if(item instanceof TextArea) {
				sb.append(((TextArea)item).getText());
			}
			
			String text = sb.toString();
			
			CreateCommendationEntry comend = new CreateCommendationEntry();

			try {
				comend.createCommendation(stdNo, text, dispName);
			}
			catch(Exception e) {
				dcStdNo.setText("Error: "+e.getMessage());
			}
			finally {
				dcSurName.setText(null);
				dcOtherNames.setText(null);
				dcAge.setText(null);
				dcSex.setValue("select option");
				dcBorderStatus.setValue("select option");
				dcClass.setValue("select option");
				dcTextflow.getChildren().clear();
				dcTxtArea.clear();
			}
		}
		catch(Exception e2) {
			dcStdNo.setText("variables error: "+e2.getMessage());
		}
		
		try {
			//String cardNo = dcStdNo.getText().toUpperCase();
			
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			CommendationEntry std = entitymanager.find(CommendationEntry.class, stdNo);
			
			LinkedList<String> list = std.getCommendTextFlow();
	
			for(String text : list) {
				TextArea area = new TextArea(text);
				area.setWrapText(true);
				area.setPrefSize(780, 100);
				area.setFocusTraversable(true);
				dcTextflow.getChildren().add(area);
				area.toBack();
			}
			
			entitymanager.persist(std);
		
			entitymanager.getTransaction().commit();
			
			entitymanager.close();
			emfactory.close();
		}
		catch(Exception e) {
			dcStdNo.setText("Fetch Error: "+ e.getMessage());
		}
	}
	
	//fetch commend
	@FXML public void fetchCommendButton(ActionEvent event) {
		String stdNo = dcStdNo.getText().toUpperCase();
		dcTextflow.getChildren().clear();
		try {
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			CommendationEntry std = entitymanager.find(CommendationEntry.class, stdNo);
			
			LinkedList<String> list = std.getCommendTextFlow();
	
			for(String text : list) {
				TextArea area = new TextArea(text);
				area.setWrapText(true);
				area.setPrefSize(780, 100);
				area.setFocusTraversable(true);
				dcTextflow.getChildren().add(area);
				area.toBack();
			}
			
			entitymanager.persist(std);
		
			entitymanager.getTransaction().commit();
			
			entitymanager.close();
			emfactory.close();
		}
		catch(Exception e) {
			dcStdNo.setText("Fetch Error: "+ e.getMessage());
		}
	}
	
	@FXML public void fetchCommendSideButton(ActionEvent event) {
		String stdNo = dcStdNo.getText().toUpperCase();
		dcTextflow.getChildren().clear();
		try {
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			CommendationEntry std = entitymanager.find(CommendationEntry.class, stdNo);
			
			LinkedList<String> list = std.getCommendTextFlow();
	
			for(String text : list) {
				TextArea area = new TextArea(text);
				area.setWrapText(true);
				area.setPrefSize(780, 100);
				area.setFocusTraversable(true);
				dcTextflow.getChildren().add(area);
				area.toBack();
			}
			
			entitymanager.persist(std);
		
			entitymanager.getTransaction().commit();
			
			entitymanager.close();
			emfactory.close();
		}
		catch(Exception e) {
			dcStdNo.setText("Fetch Error: "+ e.getMessage());
		}
	}
	
	//Suspension and Expulsion
	@FXML public void dcTakeActionButton(ActionEvent event) {
		
		String stdNo = dcStdNo.getText().toUpperCase().trim();
		String surName = dcSurName.getText();
		String otherNames = dcOtherNames.getText();
		String reason = dcTxtArea.getText();
		String sex = dcSex.getValue(); 
		String borderStatus = dcBorderStatus.getValue();
		String stdClass = dcClass.getValue();
		String user = dispName;
		LocalDate entryDate = LocalDate.now();
		LocalDate suspUntilDate = dcDate.getValue();
		String status = dcCombo.getValue();
		
		try {
			if(stdNo.trim().length() != 0 && surName.trim().length() != 0 && otherNames.trim().length() != 0) {
				
				String classId, setIdX, stdNameX, setYearX, stdClassX;
				double outstandingBalX; 
				LocalDate txnDateX = suspUntilDate;
				
				EntityManagerFactory emfactoryX = Persistence.createEntityManagerFactory("SchoolMgtSystem");
				EntityManager entitymanagerX = emfactoryX.createEntityManager();
				entitymanagerX.getTransaction().begin();
				
				Students stdX = entitymanagerX.find(Students.class, stdNo);
				
				AccountBalance balX = entitymanagerX.find(AccountBalance.class, stdNo);
				
				classId = stdX.getEntryClassAssigned();
				stdNameX = stdX.getSurName()+", "+stdX.getOtherNames();
				
				outstandingBalX = balX.getBalance();
				
				entitymanagerX.getTransaction().commit();
				
				entitymanagerX.close();
				emfactoryX.close();
				
				EntityManagerFactory emfactoryY = Persistence.createEntityManagerFactory("SchoolMgtSystem");
				EntityManager entitymanagerY = emfactoryY.createEntityManager();
				entitymanagerY.getTransaction().begin();
				
				StudentClasses stdCX = entitymanagerY.find(StudentClasses.class, classId);
				
				stdClassX = stdCX.getClassNo()+stdCX.getClassLetter();
				setYearX = stdCX.getYear();
				setIdX = stdClassX+setYearX+stdCX.getTerm();
				
				entitymanagerY.getTransaction().commit();
				
				entitymanagerY.close();
				emfactoryY.close();
				
				//Real deal
				LocalDateTime dateTime = LocalDateTime.now();
				String sid = stdNo + dateTime;
				
				if(status.trim().equals("Suspended")) {
					dcTextflow.getChildren().clear();
					TextInputDialog dialog = new TextInputDialog(dcTxtArea.getText());
					dialog.setTitle("Enter Action...");
					dialog.resizableProperty();
					dialog.setHeight(300);
					dialog.setWidth(400);
					Optional<String> result = dialog.showAndWait();
					if(result.isPresent()) {
						DateTimeFormatter formatter2 = DateTimeFormatter.ofLocalizedDate(FormatStyle.MEDIUM);
						LocalDate today = LocalDate.now();
						String date = formatter2.format(today);
						
						TextArea text = new TextArea(date+"\n"+ dcTxtArea.getText());//result.get());
						text.setWrapText(true);
						text.setPrefSize(700, 100);
						text.setFocusTraversable(true);
//						text.setEditable(false);
						
//						text.setFill(Color.rgb(100, 50, 200));
						text.resize(400, 100);
						text.autosize();
						Font tahoma = Font.font("Tahoma", 14);
						text.setFont(tahoma);
						
						dcTextflow.getChildren().add(text);
						
						text.toBack();
						
					}
					
					//String stdNo = dcStdNo.getText().toUpperCase();
					
					if(stdNo.trim().equals(dcStdNo.getText().toUpperCase().trim())) {
						Alert alert = new Alert(Alert.AlertType.CONFIRMATION);
						alert.setContentText("Click Ok to save Suspension to the database, if all is okay...");
						Optional<ButtonType> resultz = alert.showAndWait();
						if(resultz.get() == ButtonType.OK) {
							try {
								
								ObservableList<Node> data = dcTextflow.getChildren();
								
								StringBuilder sb = new StringBuilder();
								
								Node item = data.get(0);
								if(item instanceof TextArea) {
									sb.append(((TextArea)item).getText());
								}
								
								String text = sb.toString();
								
								//String name = surName+", "+otherNames;
								
								CreateSuspensionEntry suspend = new CreateSuspensionEntry();
								CreateSuspended suspended = new CreateSuspended();

								try {
									suspend.createSuspension(stdNo, text, user);
									
									suspended.createSuspended(sid, stdNo, surName, otherNames, reason, sex, borderStatus, stdClass, 
											user, entryDate, suspUntilDate, status);
									
									suspended.createSuspendedStdUpdate(stdNo, status, user);
								
								}
								catch(Exception e) {
									dcStdNo.setText("Error: "+e.getMessage());
								}
								finally {
									dcSurName.setText(null);
									dcOtherNames.setText(null);
									dcAge.setText(null);
									dcSex.setValue("select option");
									dcBorderStatus.setValue("select option");
									dcClass.setValue("select option");
									dcTxtArea.clear();
									dcTextflow.getChildren().clear();
								}
							}
							catch(Exception e2) {
								dcStdNo.setText("variables error: "+e2.getMessage());
							}
						}
						else {
							alert.close();
						}
					}
				}
				else if(status.trim().equals("Rusticated")) {
					dcTextflow.getChildren().clear();
					TextInputDialog dialog = new TextInputDialog(dcTxtArea.getText());
					dialog.setTitle("Enter Action...");
					dialog.resizableProperty();
					dialog.setHeight(300);
					dialog.setWidth(400);
					Optional<String> result = dialog.showAndWait();
					if(result.isPresent()) {
						DateTimeFormatter formatter2 = DateTimeFormatter.ofLocalizedDate(FormatStyle.MEDIUM);
						LocalDate today = LocalDate.now();
						String date = formatter2.format(today);
						
						TextArea text = new TextArea(date+"\n"+ dcTxtArea.getText());//result.get());
						text.setWrapText(true);
						text.setPrefSize(700, 100);
						text.setFocusTraversable(true);
//						text.setEditable(false);
						
//						text.setFill(Color.rgb(100, 50, 200));
						text.resize(400, 100);
						text.autosize();
						Font tahoma = Font.font("Tahoma", 14);
						text.setFont(tahoma);
						
						dcTextflow.getChildren().add(text);
						
						text.toBack();
						
					}
					
					//String stdNo = dcStdNo.getText().toUpperCase();
					
					if(stdNo.trim().equals(dcStdNo.getText().toUpperCase().trim())) {
						Alert alert = new Alert(Alert.AlertType.CONFIRMATION);
						alert.setContentText("Click Ok to save Rusticate to the database, if all is okay...");
						Optional<ButtonType> resultz = alert.showAndWait();
						if(resultz.get() == ButtonType.OK) {
							try {
								
								ObservableList<Node> data = dcTextflow.getChildren();
								
								StringBuilder sb = new StringBuilder();
								
								Node item = data.get(0);
								if(item instanceof TextArea) {
									sb.append(((TextArea)item).getText());
								}
								
								String text = sb.toString();
								
								//String name = surName+", "+otherNames;
								
								CreateRusticateEntry rusticate = new CreateRusticateEntry();
								CreateRusticated rusticated = new CreateRusticated();

								try {
									rusticate.createRusticate(stdNo, text, user);
									
									rusticated.createRusticated(sid, stdNo, surName, otherNames, reason, sex, borderStatus, stdClass, user, 
											entryDate, status);
									
									rusticated.createRusticatedStdUpdate(stdNo, status, user);
								
								}
								catch(Exception e) {
									dcStdNo.setText("Error: "+e.getMessage());
								}
								finally {
									dcSurName.setText(null);
									dcOtherNames.setText(null);
									dcAge.setText(null);
									dcSex.setValue("select option");
									dcBorderStatus.setValue("select option");
									dcClass.setValue("select option");
									dcTxtArea.clear();
									dcTextflow.getChildren().clear();
								}
							}
							catch(Exception e2) {
								dcStdNo.setText("variables error: "+e2.getMessage());
							}
						}
						else {
							alert.close();
						}
					}
				}
				else if(status.trim().equals("Transferred") || status.trim().equals("Withdrawn")) {
					
					//get your action word from choicedialog
					String action;
					ChoiceDialog<String> dialog = new ChoiceDialog<>("Transferred",statusCombo);
					dialog.setTitle("Make a choice...");
					dialog.setHeaderText("Your choice determines your action on a class. You can only"
							+ " transfer or withdraw a student here though...");
					dialog.setContentText("Select a status: ");
					
					Optional<String> resultDialog = dialog.showAndWait();
					//resultDialog.ifPresent(res -> action = res);
					if(resultDialog.isPresent()) {
						action = resultDialog.get();
					}
					else {
						action = "";
					}
					
					if(action.equals("Transferred") || action.equals("Withdrawn")) {
						//action
						//remove std from current class and add to transferwithdrawn class
						//select new choice class
						//get your action word from choicedialog
						ComboBox<String> combo = new ComboBox<>();
						populateStdClassesCombo2(jssClass, combo);
						String actionClass;
						ChoiceDialog<String> dialog2 = new ChoiceDialog<>("TRSFA20191",jssClass);
						dialog2.setTitle("Make a choice...");
						dialog2.setHeaderText("The transferred or withdrawn student"
								+ " will be added to this class...");
						dialog2.setContentText("Select a class: ");
						
						Optional<String> resultDialog2 = dialog2.showAndWait();
						//resultDialog.ifPresent(res -> action = res);
						if(resultDialog2.isPresent()) {
							actionClass = resultDialog2.get();
						}
						else {
							actionClass = "";
						}
						
						try {
							EntityManagerFactory emfactoryZ = Persistence.createEntityManagerFactory("SchoolMgtSystem");
							EntityManager entitymanagerZ = emfactoryZ.createEntityManager();
							entitymanagerZ.getTransaction().begin();
							
							StudentClasses stdCZ = entitymanagerZ.find(StudentClasses.class, classId);
							
							stdCZ.getStdList().remove(stdNo);
							
							entitymanagerZ.getTransaction().commit();
							
							entitymanagerZ.close();
							emfactoryZ.close();
						}
						catch(Exception etw) {
							etw.printStackTrace();
						}
						
						//setnew class
						try {
							EntityManagerFactory emfactoryZ = Persistence.createEntityManagerFactory("SchoolMgtSystem");
							EntityManager entitymanagerZ = emfactoryZ.createEntityManager();
							entitymanagerZ.getTransaction().begin();
							
							StudentClasses stdCZ = entitymanagerZ.find(StudentClasses.class, actionClass);
							
							stdCZ.setStdList(stdNo);
							
							entitymanagerZ.getTransaction().commit();
							
							entitymanagerZ.close();
							emfactoryZ.close();
						}
						catch(Exception etw) {
							etw.printStackTrace();
						}
						
						try {
							String twid = classId + stdNo;
							CreateTransferredWithdrawn withD = new CreateTransferredWithdrawn();
							withD.createTransferredWithdrawn(twid, setIdX, stdNo, stdNameX, 
									setYearX, stdClassX, outstandingBalX, txnDateX, user);
							
						}
						catch(Exception e) {
							e.printStackTrace();
						}
						
						//update status
						EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
						EntityManager entitymanager = emfactory.createEntityManager();
						entitymanager.getTransaction().begin();
						
						Students std = entitymanager.find(Students.class, stdNo);
						
						std.setStatus(action);
						std.setEntryClassAssigned(actionClass);
						
						entitymanager.getTransaction().commit();
						
						entitymanager.close();
						emfactory.close();
						
						//populate std list with new status
						//populate bac table
						//populateAssignStd2ClassGrad(actionClass);
						
						Alert alertz = new Alert(Alert.AlertType.INFORMATION);
						alertz.setContentText(stdNameX+" was successfully transferred/Withdrawn - "+setYearX+" session!");
						alertz.setHeaderText("SUCCESS!");
						Optional<ButtonType> resultz = alertz.showAndWait();
						if(resultz.get() == ButtonType.OK) {
							alertz.close();
						}
						else {
							alertz.close();
						}
					}
					else {
						Alert alertu = new Alert(Alert.AlertType.INFORMATION);
						alertu.setContentText("You can only transfer/withdraw a student here...");
						alertu.setHeaderText("Pick the appropriate option");
						Optional<ButtonType> resultu = alertu.showAndWait();
						if(resultu.get() == ButtonType.OK) {
							alertu.close();
						}
						else {
							alertu.close();
						}
					}
				}
				else if(status.trim().equals("Deferred")) {
					
					//get your action word from choicedialog
					String action;
					ChoiceDialog<String> dialog = new ChoiceDialog<>("Deferred",statusCombo);
					dialog.setTitle("Make a choice...");
					dialog.setHeaderText("Your choice determines your action on a student. You can only"
							+ " defer a student here though...");
					dialog.setContentText("Select a status: ");
					
					Optional<String> resultDialog = dialog.showAndWait();
					//resultDialog.ifPresent(res -> action = res);
					if(resultDialog.isPresent()) {
						action = resultDialog.get();
					}
					else {
						action = "";
					}
					
					if(action.equals("Deferred")) {
						//action
						//remove std from current class and add to transferwithdrawn class
						//select new choice class
						//get your action word from choicedialog
						ComboBox<String> combo = new ComboBox<>();
						populateStdClassesCombo2(jssClass, combo);
						String actionClass;
						ChoiceDialog<String> dialog2 = new ChoiceDialog<>("DEFER20191",jssClass);
						dialog2.setTitle("Make a choice...");
						dialog2.setHeaderText("Deferred student"
								+ " will be added to this class...");
						dialog2.setContentText("Select a class: ");
						
						Optional<String> resultDialog2 = dialog2.showAndWait();
						//resultDialog.ifPresent(res -> action = res);
						if(resultDialog2.isPresent()) {
							actionClass = resultDialog2.get();
						}
						else {
							actionClass = "";
						}
						
						try {
							EntityManagerFactory emfactoryZ = Persistence.createEntityManagerFactory("SchoolMgtSystem");
							EntityManager entitymanagerZ = emfactoryZ.createEntityManager();
							entitymanagerZ.getTransaction().begin();
							
							StudentClasses stdCZ = entitymanagerZ.find(StudentClasses.class, classId);
							
							stdCZ.getStdList().remove(stdNo);
							
							entitymanagerZ.getTransaction().commit();
							
							entitymanagerZ.close();
							emfactoryZ.close();
						}
						catch(Exception etw) {
							etw.printStackTrace();
						}
						
						//setnew class
						try {
							EntityManagerFactory emfactoryZ = Persistence.createEntityManagerFactory("SchoolMgtSystem");
							EntityManager entitymanagerZ = emfactoryZ.createEntityManager();
							entitymanagerZ.getTransaction().begin();
							
							StudentClasses stdCZ = entitymanagerZ.find(StudentClasses.class, actionClass);
							
							stdCZ.setStdList(stdNo);
							
							entitymanagerZ.getTransaction().commit();
							
							entitymanagerZ.close();
							emfactoryZ.close();
						}
						catch(Exception etw) {
							etw.printStackTrace();
						}
						
						try {
							String did = classId + stdNo;
							CreateDeferred defr = new CreateDeferred();
							defr.createDefer(did, setIdX, stdNo, stdNameX, setYearX, 
									stdClassX, outstandingBalX, txnDateX, user);
							
						}
						catch(Exception e) {
							e.printStackTrace();
						}
						
						//update status
						EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
						EntityManager entitymanager = emfactory.createEntityManager();
						entitymanager.getTransaction().begin();
						
						Students std = entitymanager.find(Students.class, stdNo);
						
						std.setStatus(action);
						std.setEntryClassAssigned(actionClass);
						
						entitymanager.getTransaction().commit();
						
						entitymanager.close();
						emfactory.close();
						
						//populate std list with new status
						//populate bac table
						//populateAssignStd2ClassGrad(actionClass);
						
						Alert alertz = new Alert(Alert.AlertType.INFORMATION);
						alertz.setContentText(stdNameX+" was successfully Deferred - "+setYearX+" session!");
						alertz.setHeaderText("SUCCESS!");
						Optional<ButtonType> resultz = alertz.showAndWait();
						if(resultz.get() == ButtonType.OK) {
							alertz.close();
						}
						else {
							alertz.close();
						}
					}
					else {
						Alert alertu = new Alert(Alert.AlertType.INFORMATION);
						alertu.setContentText("You can only transfer/withdraw a student here...");
						alertu.setHeaderText("Pick the appropriate option");
						Optional<ButtonType> resultu = alertu.showAndWait();
						if(resultu.get() == ButtonType.OK) {
							alertu.close();
						}
						else {
							alertu.close();
						}
					}
				}
				else if(status.trim().equals("Graduated")) {
					
					Alert alert = new Alert(Alert.AlertType.CONFIRMATION);
					alert.setContentText("You are about to graduate "+stdNameX +" for the "+setYearX+" session...");
					alert.setHeaderText("Std status will change to graduated");
					Optional<ButtonType> result = alert.showAndWait();
					if(result.get() == ButtonType.OK) {
						//get your action word from choicedialog
						String action;
						ChoiceDialog<String> dialog = new ChoiceDialog<>("Graduated",statusCombo);
						dialog.setTitle("Make a choice...");
						dialog.setHeaderText("Your choice determines your action on a student. You can only"
								+ " graduate a student here though...");
						dialog.setContentText("Select a new status: ");
						
						Optional<String> resultDialog = dialog.showAndWait();
						//resultDialog.ifPresent(res -> action = res);
						if(resultDialog.isPresent()) {
							action = resultDialog.get();
						}
						else {
							action = "";
						}
						
						if(action.equals("Graduated")) {
							//action							
							try {
								EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
								EntityManager entitymanager = emfactory.createEntityManager();
								entitymanager.getTransaction().begin();
								
								Students std = entitymanager.find(Students.class, stdNo);
								
								std.setStatus(action);
								
								entitymanager.getTransaction().commit();
								entitymanager.close();
								emfactory.close();
								
								String gid = classId + stdNo;
								CreateGraduated graduated = new CreateGraduated();
								graduated.createGraduate(gid, setIdX, stdNo, stdNameX, setYearX, stdClassX,
										outstandingBalX, txnDateX, user);
								
							}
							catch(Exception e) {
								e.printStackTrace();
							}
							
							Alert alertz = new Alert(Alert.AlertType.INFORMATION);
							alertz.setContentText(stdNameX+" was successfully graduated for "+setYearX+" session!");
							alertz.setHeaderText("SUCCESS!");
							Optional<ButtonType> resultz = alertz.showAndWait();
							if(resultz.get() == ButtonType.OK) {
								alertz.close();
							}
							else {
								alertz.close();
							}
						}
						else {
							Alert alertu = new Alert(Alert.AlertType.INFORMATION);
							alertu.setContentText("You can only graduate a student here...");
							alertu.setHeaderText("Pick the appropriate option - Graduated");
							Optional<ButtonType> resultu = alertu.showAndWait();
							if(resultu.get() == ButtonType.OK) {
								alertu.close();
							}
							else {
								alertu.close();
							}
						}
					}
					else {
						alert.close();
					}
				}
				else {
					dcTextflow.getChildren().clear();
					TextInputDialog dialog = new TextInputDialog(dcTxtArea.getText());
					dialog.setTitle("Enter Action...");
					dialog.resizableProperty();
					dialog.setHeight(300);
					dialog.setWidth(400);
					Optional<String> result = dialog.showAndWait();
					if(result.isPresent()) {
						DateTimeFormatter formatter2 = DateTimeFormatter.ofLocalizedDate(FormatStyle.MEDIUM);
						LocalDate today = LocalDate.now();
						String date = formatter2.format(today);
						
						TextArea text = new TextArea(date+"\n"+ dcTxtArea.getText());//result.get());
						text.setWrapText(true);
						text.setPrefSize(700, 100);
						text.setFocusTraversable(true);
//						text.setEditable(false);
						
//						text.setFill(Color.rgb(100, 50, 200));
						text.resize(400, 100);
						text.autosize();
						Font tahoma = Font.font("Tahoma", 14);
						text.setFont(tahoma);
						
						dcTextflow.getChildren().add(text);
						
						text.toBack();
						
					}
					
					//String stdNo = dcStdNo.getText().toUpperCase();
					
					if(stdNo.equals(dcStdNo.getText().toUpperCase())) {
						Alert alert = new Alert(Alert.AlertType.CONFIRMATION);
						alert.setContentText("Click Ok to save Suspension to the database, if all is okay...");
						Optional<ButtonType> resultz = alert.showAndWait();
						if(resultz.get() == ButtonType.OK) {
							try {
								
								ObservableList<Node> data = dcTextflow.getChildren();
								
								StringBuilder sb = new StringBuilder();
								
								Node item = data.get(0);
								if(item instanceof TextArea) {
									sb.append(((TextArea)item).getText());
								}
								
								String text = sb.toString();
								
								//String name = surName+", "+otherNames;
								
								CreateSuspensionEntry suspend = new CreateSuspensionEntry();
								CreateSuspended suspended = new CreateSuspended();

								try {
									suspend.createSuspension(stdNo, text, user);
									
									suspended.createSuspended(sid, stdNo, surName, otherNames, reason, sex, borderStatus, stdClass, 
											user, entryDate, suspUntilDate, status);
									
									suspended.createSuspendedStdUpdate(stdNo, status, user);
								
								}
								catch(Exception e) {
									dcStdNo.setText("Error: "+e.getMessage());
								}
								finally {
									dcSurName.setText(null);
									dcOtherNames.setText(null);
									dcAge.setText(null);
									dcSex.setValue("select option");
									dcBorderStatus.setValue("select option");
									dcClass.setValue("select option");
									dcTxtArea.clear();
									dcTextflow.getChildren().clear();
								}
							}
							catch(Exception e2) {
								dcStdNo.setText("variables error: "+e2.getMessage());
							}
						}
						else {
							alert.close();
						}
					}
				}
			}
			else {
				Alert alert = new Alert(Alert.AlertType.ERROR);
				alert.setTitle("Error");
				alert.setContentText("Invalid entries... Please ensure that you have selected an appropriate "
						+ "date and all other parameters.");
				alert.setHeaderText("INVALID ENTRIES - Error Handler");
				Optional<ButtonType> result = alert.showAndWait();
				if(result.get() == ButtonType.OK) {
					alert.close();
				}
				else {
					alert.close();
				}
			}
			
		}
		catch(Exception dcExcept) {
//			dcExcept.printStackTrace();
			Alert alert = new Alert(Alert.AlertType.ERROR);
			alert.setTitle("Exception");
			alert.setContentText("Invalid entries... Please ensure that you have selected an appropriate "
					+ "date and all other parameters. "+ dcExcept.getMessage());
			alert.setHeaderText("INVALID ENTRIES - Exception Handler");
			Optional<ButtonType> result = alert.showAndWait();
			if(result.get() == ButtonType.OK) {
				alert.close();
			}
			else {
				alert.close();
			}
		}
		
	}
	
	//fetch suspension entry
	@FXML public void fetchSuspensionSideButton(ActionEvent event) {
		String stdNo = dcStdNo.getText().toUpperCase();
		dcTextflow.getChildren().clear();
		try {
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			SuspensionEntry std = entitymanager.find(SuspensionEntry.class, stdNo);
			
			LinkedList<String> list = std.getSuspendTextFlow();
	
			for(String text : list) {
				TextArea area = new TextArea(text);
				area.setWrapText(true);
				area.setPrefSize(780, 100);
				area.setFocusTraversable(true);
				dcTextflow.getChildren().add(area);
				area.toBack();
			}
			
			entitymanager.persist(std);
		
			entitymanager.getTransaction().commit();
			
			entitymanager.close();
			emfactory.close();
		}
		catch(Exception e) {
			dcStdNo.setText("Fetch Error: "+ e.getMessage());
		}
	}
	
	//fetch Rusticate entry
	@FXML public void fetchRusticateSideButton(ActionEvent event) {
		String stdNo = dcStdNo.getText().toUpperCase();
		dcTextflow.getChildren().clear();
		try {
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			RusticateEntry std = entitymanager.find(RusticateEntry.class, stdNo);
			
			LinkedList<String> list = std.getRusticateTextFlow();
	
			for(String text : list) {
				TextArea area = new TextArea(text);
				area.setWrapText(true);
				area.setPrefSize(780, 100);
				area.setFocusTraversable(true);
				dcTextflow.getChildren().add(area);
				area.toBack();
			}
			
			entitymanager.persist(std);
		
			entitymanager.getTransaction().commit();
			
			entitymanager.close();
			emfactory.close();
		}
		catch(Exception e) {
			dcStdNo.setText("Fetch Error: "+ e.getMessage());
		}
	}
	
	//Delete DC, Suspension and expulsion
	@FXML public void deleteDcTextButton(ActionEvent event) {
		
		String stdNo = dcStdNo.getText().toUpperCase();
		
		Alert alert = new Alert(AlertType.CONFIRMATION);
		alert.setTitle("Entries Deletion Confirmation");
		alert.setHeaderText("Make your choice carefully to delete an entry... "
				+ "\n Please note that this action is irreversible!");
		alert.setContentText("Make your choice carefuly (entry to be deleted)");
		
		ButtonType Disc = new ButtonType("Disciplinary");
		ButtonType Com = new ButtonType("Commendation");
		ButtonType Susp = new ButtonType("Suspension");
		ButtonType Rust = new ButtonType("Rusticate");
		ButtonType Canc = new ButtonType("Cancel", ButtonData.CANCEL_CLOSE);
		
		alert.getButtonTypes().setAll(Disc, Com, Susp, Rust, Canc);
		
		Optional<ButtonType> result = alert.showAndWait();
		
		if(result.get() == Disc) {
			try {
				EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
				EntityManager entitymanager = emfactory.createEntityManager();
				entitymanager.getTransaction().begin();
				
				DisciplinaryEntry std = entitymanager.find(DisciplinaryEntry.class, stdNo);
				
				LinkedList<String> list = std.getDcTextFlow();
		
				for(String text2 : list) {
					TextArea area = new TextArea(text2);
					area.setWrapText(true);
					area.setPrefSize(780, 100);
					area.setFocusTraversable(true);
					dcTextflow.getChildren().add(area);
					area.toBack();
				}
				
				entitymanager.persist(std);
			
				entitymanager.getTransaction().commit();
				
				entitymanager.close();
				emfactory.close();
			}
			catch(Exception e) {
				dcStdNo.setText("Fetch Error: "+ e.getMessage());
			}
			
			ObservableList<Node> data = dcTextflow.getChildren();
			
			StringBuilder sb = new StringBuilder();
			Node item = data.get(0);
			if(item instanceof TextArea) {
				sb.append(((TextArea)item).getText());
			}
			String text = sb.toString();
			
			try {
				DeleteDisciplinaryEntry delete = new DeleteDisciplinaryEntry();
				delete.deleteDisciplinaryEntryText(stdNo, text);
			}
			catch(Exception e) {
				dcStdNo.setText("Disc text delete error: "+ e.getLocalizedMessage());
			}
			finally {
				dcSurName.setText(null);
				dcOtherNames.setText(null);
				dcAge.setText(null);
				dcSex.setValue("select option");
				dcBorderStatus.setValue("select option");
				dcClass.setValue("select option");
				dcTextflow.getChildren().clear();
			}
			
			try {
				EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
				EntityManager entitymanager = emfactory.createEntityManager();
				entitymanager.getTransaction().begin();
				
				DisciplinaryEntry std = entitymanager.find(DisciplinaryEntry.class, stdNo);
				
				LinkedList<String> list = std.getDcTextFlow();
		
				for(String text2 : list) {
					TextArea area = new TextArea(text2);
					area.setWrapText(true);
					area.setPrefSize(780, 100);
					area.setFocusTraversable(true);
					dcTextflow.getChildren().add(area);
					area.toBack();
				}
				
				entitymanager.persist(std);
			
				entitymanager.getTransaction().commit();
				
				entitymanager.close();
				emfactory.close();
			}
			catch(Exception e) {
				dcStdNo.setText("Fetch Error: "+ e.getMessage());
			}
		}
		else if(result.get() == Com) {
			try {
				EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
				EntityManager entitymanager = emfactory.createEntityManager();
				entitymanager.getTransaction().begin();
				
				CommendationEntry std = entitymanager.find(CommendationEntry.class, stdNo);
				
				LinkedList<String> list = std.getCommendTextFlow();
		
				for(String text2 : list) {
					TextArea area = new TextArea(text2);
					area.setWrapText(true);
					area.setPrefSize(780, 100);
					area.setFocusTraversable(true);
					dcTextflow.getChildren().add(area);
					area.toBack();
				}
				
				entitymanager.persist(std);
			
				entitymanager.getTransaction().commit();
				
				entitymanager.close();
				emfactory.close();
			}
			catch(Exception e) {
				dcStdNo.setText("Fetch Error: "+ e.getMessage());
			}
			
			ObservableList<Node> data = dcTextflow.getChildren();
			
			StringBuilder sb = new StringBuilder();
			Node item = data.get(0);
			if(item instanceof TextArea) {
				sb.append(((TextArea)item).getText());
			}
			String text = sb.toString();
			
			try {
				DeleteCommendationEntry delete = new DeleteCommendationEntry();
				delete.deleteCommendationEntryText(stdNo, text);
			}
			catch(Exception e) {
				dcStdNo.setText("commend text delete error: "+ e.getLocalizedMessage());
			}
			finally {
				dcSurName.setText(null);
				dcOtherNames.setText(null);
				dcAge.setText(null);
				dcSex.setValue("select option");
				dcBorderStatus.setValue("select option");
				dcClass.setValue("select option");
				dcTextflow.getChildren().clear();
			}
			
			try {
				EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
				EntityManager entitymanager = emfactory.createEntityManager();
				entitymanager.getTransaction().begin();
				
				CommendationEntry std = entitymanager.find(CommendationEntry.class, stdNo);
				
				LinkedList<String> list = std.getCommendTextFlow();
		
				for(String text2 : list) {
					TextArea area = new TextArea(text2);
					area.setWrapText(true);
					area.setPrefSize(780, 100);
					area.setFocusTraversable(true);
					dcTextflow.getChildren().add(area);
					area.toBack();
				}
				
				entitymanager.persist(std);
			
				entitymanager.getTransaction().commit();
				
				entitymanager.close();
				emfactory.close();
			}
			catch(Exception e) {
				dcStdNo.setText("Fetch Error: "+ e.getMessage());
			}
		}
		else if(result.get() == Susp) {
			try {
				EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
				EntityManager entitymanager = emfactory.createEntityManager();
				entitymanager.getTransaction().begin();
				
				SuspensionEntry std = entitymanager.find(SuspensionEntry.class, stdNo);
				
				LinkedList<String> list = std.getSuspendTextFlow();
		
				for(String text2 : list) {
					TextArea area = new TextArea(text2);
					area.setWrapText(true);
					area.setPrefSize(780, 100);
					area.setFocusTraversable(true);
					dcTextflow.getChildren().add(area);
					area.toBack();
				}
				
				entitymanager.persist(std);
			
				entitymanager.getTransaction().commit();
				
				entitymanager.close();
				emfactory.close();
			}
			catch(Exception e) {
				dcStdNo.setText("Fetch Error: "+ e.getMessage());
			}
			
			ObservableList<Node> data = dcTextflow.getChildren();
			
			StringBuilder sb = new StringBuilder();
			Node item = data.get(0);
			if(item instanceof TextArea) {
				sb.append(((TextArea)item).getText());
			}
			String text = sb.toString();
			
			try {
				DeleteSuspensionEntry delete = new DeleteSuspensionEntry();
				delete.deleteSuspensionEntryText(stdNo, text);
			}
			catch(Exception e) {
				dcStdNo.setText("Suspension text delete error: "+ e.getLocalizedMessage());
			}
			finally {
				dcSurName.setText(null);
				dcOtherNames.setText(null);
				dcAge.setText(null);
				dcSex.setValue("select option");
				dcBorderStatus.setValue("select option");
				dcClass.setValue("select option");
				dcTextflow.getChildren().clear();
			}
			
			try {
				EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
				EntityManager entitymanager = emfactory.createEntityManager();
				entitymanager.getTransaction().begin();
				
				SuspensionEntry std = entitymanager.find(SuspensionEntry.class, stdNo);
				
				LinkedList<String> list = std.getSuspendTextFlow();
		
				for(String text2 : list) {
					TextArea area = new TextArea(text2);
					area.setWrapText(true);
					area.setPrefSize(780, 100);
					area.setFocusTraversable(true);
					dcTextflow.getChildren().add(area);
					area.toBack();
				}
				
				entitymanager.persist(std);
			
				entitymanager.getTransaction().commit();
				
				entitymanager.close();
				emfactory.close();
			}
			catch(Exception e) {
				dcStdNo.setText("Fetch Error: "+ e.getMessage());
			}
		}
		else if(result.get() == Rust) {
			try {
				EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
				EntityManager entitymanager = emfactory.createEntityManager();
				entitymanager.getTransaction().begin();
				
				RusticateEntry std = entitymanager.find(RusticateEntry.class, stdNo);
				
				LinkedList<String> list = std.getRusticateTextFlow();
		
				for(String text2 : list) {
					TextArea area = new TextArea(text2);
					area.setWrapText(true);
					area.setPrefSize(780, 100);
					area.setFocusTraversable(true);
					dcTextflow.getChildren().add(area);
					area.toBack();
				}
				
				entitymanager.persist(std);
			
				entitymanager.getTransaction().commit();
				
				entitymanager.close();
				emfactory.close();
			}
			catch(Exception e) {
				dcStdNo.setText("Fetch Error: "+ e.getMessage());
			}
			
			ObservableList<Node> data = dcTextflow.getChildren();
			
			StringBuilder sb = new StringBuilder();
			Node item = data.get(0);
			if(item instanceof TextArea) {
				sb.append(((TextArea)item).getText());
			}
			String text = sb.toString();
			
			try {
				DeleteRusticateEntry delete = new DeleteRusticateEntry();
				delete.deleteRusticateEntryText(stdNo, text);
			}
			catch(Exception e) {
				dcStdNo.setText("Suspension text delete error: "+ e.getLocalizedMessage());
			}
			finally {
				dcSurName.setText(null);
				dcOtherNames.setText(null);
				dcAge.setText(null);
				dcSex.setValue("select option");
				dcBorderStatus.setValue("select option");
				dcClass.setValue("select option");
				dcTextflow.getChildren().clear();
			}
			
			try {
				EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
				EntityManager entitymanager = emfactory.createEntityManager();
				entitymanager.getTransaction().begin();
				
				RusticateEntry std = entitymanager.find(RusticateEntry.class, stdNo);
				
				LinkedList<String> list = std.getRusticateTextFlow();
		
				for(String text2 : list) {
					TextArea area = new TextArea(text2);
					area.setWrapText(true);
					area.setPrefSize(780, 100);
					area.setFocusTraversable(true);
					dcTextflow.getChildren().add(area);
					area.toBack();
				}
				
				entitymanager.persist(std);
			
				entitymanager.getTransaction().commit();
				
				entitymanager.close();
				emfactory.close();
			}
			catch(Exception e) {
				dcStdNo.setText("Fetch Error: "+ e.getMessage());
			}
		}
		else {
			alert.close();
		}
	}
	
	//Disciplinary Entry Controller
	@FXML private TextFlow dcTextflow2;
	@FXML private TextField dcStdNo2;
	@FXML private TextArea dcTxtArea2;
	@FXML private Label dcSurName2, dcOtherNames2, dcAge2;
	@FXML private ComboBox<String> dcSex2, dcBorderStatus2, dcClass2, dcCombo2;
	@FXML private ImageView imageViewDc2;
	@FXML private DatePicker dcDate2;
	
	//init combo
	@FXML public void initDC2(MouseEvent event) {
		dcCombo2.setItems(statusCombo);
	}
	
	//init
	@FXML public void dcStdBasics2(MouseEvent event) {
		String stdNo = dcStdNo2.getText().toUpperCase();
		try {
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			Students std = entitymanager.find(Students.class, stdNo);
			
			dcSurName2.setText(std.getSurName());
			dcOtherNames2.setText(std.getOtherNames());
			dcAge2.setText(String.valueOf(LocalDate.now().getYear() - std.getDateOfBirth().getYear()));
			dcSex2.setValue(std.getSex());
			dcBorderStatus2.setValue(std.getEntryBorderStatus());
			dcClass2.setValue(std.getEntryClassAssigned());
		
			entitymanager.getTransaction().commit();
			
			entitymanager.close();
			emfactory.close();
		}
		catch(Exception e) {
			dcStdNo2.setText("Error: "+e.getMessage());
			dcSurName2.setText(null);
			dcOtherNames2.setText(null);
			dcAge2.setText(null);
			dcSex2.setValue("select option");
			dcBorderStatus2.setValue("select option");
			dcClass2.setValue("select option");
		}
		
		//view image
		try {
			String stdId = stdNo;
			
			String jdbcUrl = dbURL;
			String username = dbUSR;
			String password = dbPWD;
			
			String sql = "SELECT * FROM stdImages WHERE stdid = ?";
			
			try(Connection conn = DriverManager.getConnection(jdbcUrl, username, password);
					){
				
				try(PreparedStatement stmt = conn.prepareStatement(sql);
						){
					stmt.setString(1, stdId);		
					
					ResultSet result = stmt.executeQuery();
					
					
					if(result.next()) {
						InputStream imageStream = result.getBinaryStream("image");
						Image img = new Image(imageStream);
						imageViewDc2.setImage(img);
					}
					else {
						imageViewDc2.setImage(null);
					}
				
					result.close();
					stmt.close();
					conn.close();
				}
				catch(SQLException io) {
					dcStdNo2.setText(io.getMessage());
					imageViewDc2.setImage(null);
				}
			}
			catch(SQLException eq) {
				dcStdNo2.setText(eq.getMessage());
				imageViewDc2.setImage(null);
			}
		}
		catch(Exception e) {
			dcStdNo2.setText(e.getMessage());
			imageViewDc2.setImage(null);
		}
	}
	
	@FXML public void discEntryButton2(ActionEvent event) {
		dcTextflow2.getChildren().clear();
		TextInputDialog dialog = new TextInputDialog(dcTxtArea2.getText());
		dialog.setTitle("Enter student's disciplinary report...");
		dialog.resizableProperty();
		dialog.setHeight(300);
		dialog.setWidth(400);
		Optional<String> result = dialog.showAndWait();
		if(result.isPresent()) {
			DateTimeFormatter formatter2 = DateTimeFormatter.ofLocalizedDate(FormatStyle.MEDIUM);
			LocalDate today = LocalDate.now();
			String date = formatter2.format(today);
			
			TextArea text = new TextArea(date+"\n"+ dcTxtArea2.getText());//result.get());
			text.setWrapText(true);
			text.setPrefSize(780, 100);
			text.setFocusTraversable(true);
//			text.setEditable(false);
			
//			text.setFill(Color.rgb(100, 50, 200));
			text.resize(780, 100);
			text.autosize();
			Font tahoma = Font.font("Tahoma", 14);
			text.setFont(tahoma);
			
			dcTextflow2.getChildren().add(text);
			
			text.toBack();
			
		}
	}
	
	//save disc
	@FXML public void saveDiagButton2(ActionEvent event) {
		String stdNo = dcStdNo2.getText().toUpperCase();
		
		try {
			
			ObservableList<Node> data = dcTextflow2.getChildren();
			
			StringBuilder sb = new StringBuilder();
			
			Node item = data.get(0);
			if(item instanceof TextArea) {
				sb.append(((TextArea)item).getText());
			}
			
			String text = sb.toString();
			
			CreateDisciplinaryEntry dc = new CreateDisciplinaryEntry();

			try {
				dc.createDisciplinary(stdNo, text, dispName);
			}
			catch(Exception e) {
				dcStdNo2.setText("Error: "+e.getMessage());
			}
			finally {
				dcSurName2.setText(null);
				dcOtherNames2.setText(null);
				dcAge2.setText(null);
				dcSex2.setValue("select option");
				dcBorderStatus2.setValue("select option");
				dcClass2.setValue("select option");
				dcTextflow2.getChildren().clear();
				dcTxtArea2.clear();
			}
		}
		catch(Exception e2) {
			dcStdNo2.setText("variables error: "+e2.getMessage());
		}
		
		try {
			//String cardNo = dcStdNo2.getText().toUpperCase();
			
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			DisciplinaryEntry std = entitymanager.find(DisciplinaryEntry.class, stdNo);
			
			LinkedList<String> list = std.getDcTextFlow();
	
			for(String text : list) {
				TextArea area = new TextArea(text);
				area.setWrapText(true);
				area.setPrefSize(780, 100);
				area.setFocusTraversable(true);
				dcTextflow2.getChildren().add(area);
				area.toBack();
			}
			
			entitymanager.persist(std);
		
			entitymanager.getTransaction().commit();
			
			entitymanager.close();
			emfactory.close();
		}
		catch(Exception e) {
			dcStdNo2.setText("Fetch Error: "+ e.getMessage());
		}
	}
	
	//fetch dc
	@FXML public void fetchDcButton2(ActionEvent event) {
		String stdNo = dcStdNo2.getText().toUpperCase();
		dcTextflow2.getChildren().clear();
		try {
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			DisciplinaryEntry std = entitymanager.find(DisciplinaryEntry.class, stdNo);
			
			LinkedList<String> list = std.getDcTextFlow();
	
			for(String text : list) {
				TextArea area = new TextArea(text);
				area.setWrapText(true);
				area.setPrefSize(780, 100);
				area.setFocusTraversable(true);
				dcTextflow2.getChildren().add(area);
				area.toBack();
			}
			
			entitymanager.persist(std);
		
			entitymanager.getTransaction().commit();
			
			entitymanager.close();
			emfactory.close();
		}
		catch(Exception e) {
			dcStdNo2.setText("Fetch Error: "+ e.getMessage());
		}
	}
	
	@FXML public void fetchDcSideButton2(ActionEvent event) {
		String stdNo = dcStdNo2.getText().toUpperCase();
		dcTextflow2.getChildren().clear();
		try {
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			DisciplinaryEntry std = entitymanager.find(DisciplinaryEntry.class, stdNo);
			
			LinkedList<String> list = std.getDcTextFlow();
	
			for(String text : list) {
				TextArea area = new TextArea(text);
				area.setWrapText(true);
				area.setPrefSize(780, 100);
				area.setFocusTraversable(true);
				dcTextflow2.getChildren().add(area);
				area.toBack();
			}
			
			entitymanager.persist(std);
		
			entitymanager.getTransaction().commit();
			
			entitymanager.close();
			emfactory.close();
		}
		catch(Exception e) {
			dcStdNo2.setText("Fetch Error: "+ e.getMessage());
		}
	}
	
//	//function to fetch txtflow
//	public void fetchTextFlow(String stdId) {
//		String stdNo = stdId;
//		dcTextflow2.getChildren().clear();
//		try {
//			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
//			EntityManager entitymanager = emfactory.createEntityManager();
//			entitymanager.getTransaction().begin();
//			
//			DisciplinaryEntry std = entitymanager.find(DisciplinaryEntry.class, stdNo);
//			
//			LinkedList<String> list = std.getdcTextflow2();
//	
//			for(String text : list) {
//				TextArea area = new TextArea(text);
//				area.setWrapText(true);
//				area.setPrefSize(780, 100);
//				area.setFocusTraversable(true);
//				dcTextflow2.getChildren().add(area);
//				area.toBack();
//			}
//			
//			entitymanager.persist(std);
//		
//			entitymanager.getTransaction().commit();
//			
//			entitymanager.close();
//			emfactory.close();
//		}
//		catch(Exception e) {
//			dcStdNo2.setText("Fetch Error: "+ e.getMessage());
//		}
//	}
	
	//Commendation and Awards
	//@FXML private Button enterFpBarcodeBtn;
	
	@FXML public void commendEntryButton2(ActionEvent event) {
		dcTextflow2.getChildren().clear();
		TextInputDialog dialog = new TextInputDialog(dcTxtArea2.getText());
		dialog.setTitle("Enter student's Commendation report...");
		dialog.resizableProperty();
		dialog.setHeight(300);
		dialog.setWidth(400);
		Optional<String> result = dialog.showAndWait();
		if(result.isPresent()) {
			DateTimeFormatter formatter2 = DateTimeFormatter.ofLocalizedDate(FormatStyle.MEDIUM);
			LocalDate today = LocalDate.now();
			String date = formatter2.format(today);
			
			TextArea text = new TextArea(date+"\n"+ dcTxtArea2.getText());//result.get());
			text.setWrapText(true);
			text.setPrefSize(780, 100);
			text.setFocusTraversable(true);
//			text.setEditable(false);
			
//			text.setFill(Color.rgb(100, 50, 200));
			text.resize(780, 100);
			text.autosize();
			Font tahoma = Font.font("Tahoma", 14);
			text.setFont(tahoma);
			
			dcTextflow2.getChildren().add(text);
			
			text.toBack();
			
		}
	}
	
	//save disc
	@FXML public void saveCommendButton2(ActionEvent event) {
		String stdNo = dcStdNo2.getText().toUpperCase();
		
		try {
			
			ObservableList<Node> data = dcTextflow2.getChildren();
			
			StringBuilder sb = new StringBuilder();
			
			Node item = data.get(0);
			if(item instanceof TextArea) {
				sb.append(((TextArea)item).getText());
			}
			
			String text = sb.toString();
			
			CreateCommendationEntry comend = new CreateCommendationEntry();

			try {
				comend.createCommendation(stdNo, text, dispName);
			}
			catch(Exception e) {
				dcStdNo2.setText("Error: "+e.getMessage());
			}
			finally {
				dcSurName2.setText(null);
				dcOtherNames2.setText(null);
				dcAge2.setText(null);
				dcSex2.setValue("select option");
				dcBorderStatus2.setValue("select option");
				dcClass2.setValue("select option");
				dcTextflow2.getChildren().clear();
				dcTxtArea2.clear();
			}
		}
		catch(Exception e2) {
			dcStdNo2.setText("variables error: "+e2.getMessage());
		}
		
		try {
			//String cardNo = dcStdNo2.getText().toUpperCase();
			
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			CommendationEntry std = entitymanager.find(CommendationEntry.class, stdNo);
			
			LinkedList<String> list = std.getCommendTextFlow();
	
			for(String text : list) {
				TextArea area = new TextArea(text);
				area.setWrapText(true);
				area.setPrefSize(780, 100);
				area.setFocusTraversable(true);
				dcTextflow2.getChildren().add(area);
				area.toBack();
			}
			
			entitymanager.persist(std);
		
			entitymanager.getTransaction().commit();
			
			entitymanager.close();
			emfactory.close();
		}
		catch(Exception e) {
			dcStdNo2.setText("Fetch Error: "+ e.getMessage());
		}
	}
	
	//fetch commend
	@FXML public void fetchCommendButton2(ActionEvent event) {
		String stdNo = dcStdNo2.getText().toUpperCase();
		dcTextflow2.getChildren().clear();
		try {
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			CommendationEntry std = entitymanager.find(CommendationEntry.class, stdNo);
			
			LinkedList<String> list = std.getCommendTextFlow();
	
			for(String text : list) {
				TextArea area = new TextArea(text);
				area.setWrapText(true);
				area.setPrefSize(780, 100);
				area.setFocusTraversable(true);
				dcTextflow2.getChildren().add(area);
				area.toBack();
			}
			
			entitymanager.persist(std);
		
			entitymanager.getTransaction().commit();
			
			entitymanager.close();
			emfactory.close();
		}
		catch(Exception e) {
			dcStdNo2.setText("Fetch Error: "+ e.getMessage());
		}
	}
	
	@FXML public void fetchCommendSideButton2(ActionEvent event) {
		String stdNo = dcStdNo2.getText().toUpperCase();
		dcTextflow2.getChildren().clear();
		try {
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			CommendationEntry std = entitymanager.find(CommendationEntry.class, stdNo);
			
			LinkedList<String> list = std.getCommendTextFlow();
	
			for(String text : list) {
				TextArea area = new TextArea(text);
				area.setWrapText(true);
				area.setPrefSize(780, 100);
				area.setFocusTraversable(true);
				dcTextflow2.getChildren().add(area);
				area.toBack();
			}
			
			entitymanager.persist(std);
		
			entitymanager.getTransaction().commit();
			
			entitymanager.close();
			emfactory.close();
		}
		catch(Exception e) {
			dcStdNo2.setText("Fetch Error: "+ e.getMessage());
		}
	}
	
	//Suspension and Expulsion
	@FXML public void dcTakeActionButton2(ActionEvent event) {
		
		String stdNo = dcStdNo2.getText().toUpperCase().trim();
		String surName = dcSurName2.getText();
		String otherNames = dcOtherNames2.getText();
		String reason = dcTxtArea2.getText();
		String sex = dcSex2.getValue(); 
		String borderStatus = dcBorderStatus2.getValue();
		String stdClass = dcClass2.getValue();
		String user = dispName;
		LocalDate entryDate = LocalDate.now();
		LocalDate suspUntilDate = dcDate2.getValue();
		String status = dcCombo2.getValue();
		
		try {
			if(stdNo.trim().length() != 0 && surName.trim().length() != 0 && otherNames.trim().length() != 0) {
				
				String classId, setIdX, stdNameX, setYearX, stdClassX;
				double outstandingBalX; 
				LocalDate txnDateX = suspUntilDate;
				
				EntityManagerFactory emfactoryX = Persistence.createEntityManagerFactory("SchoolMgtSystem");
				EntityManager entitymanagerX = emfactoryX.createEntityManager();
				entitymanagerX.getTransaction().begin();
				
				Students stdX = entitymanagerX.find(Students.class, stdNo);
				
				AccountBalance balX = entitymanagerX.find(AccountBalance.class, stdNo);
				
				classId = stdX.getEntryClassAssigned();
				stdNameX = stdX.getSurName()+", "+stdX.getOtherNames();
				
				outstandingBalX = balX.getBalance();
				
				entitymanagerX.getTransaction().commit();
				
				entitymanagerX.close();
				emfactoryX.close();
				
				EntityManagerFactory emfactoryY = Persistence.createEntityManagerFactory("SchoolMgtSystem");
				EntityManager entitymanagerY = emfactoryY.createEntityManager();
				entitymanagerY.getTransaction().begin();
				
				StudentClasses stdCX = entitymanagerY.find(StudentClasses.class, classId);
				
				stdClassX = stdCX.getClassNo()+stdCX.getClassLetter();
				setYearX = stdCX.getYear();
				setIdX = stdClassX+setYearX+stdCX.getTerm();
				
				entitymanagerY.getTransaction().commit();
				
				entitymanagerY.close();
				emfactoryY.close();
				
				//Real deal
				LocalDateTime dateTime = LocalDateTime.now();
				String sid = stdNo + dateTime;
				
				if(status.trim().equals("Suspended")) {
					dcTextflow2.getChildren().clear();
					TextInputDialog dialog = new TextInputDialog(dcTxtArea2.getText());
					dialog.setTitle("Enter Action...");
					dialog.resizableProperty();
					dialog.setHeight(300);
					dialog.setWidth(400);
					Optional<String> result = dialog.showAndWait();
					if(result.isPresent()) {
						DateTimeFormatter formatter2 = DateTimeFormatter.ofLocalizedDate(FormatStyle.MEDIUM);
						LocalDate today = LocalDate.now();
						String date = formatter2.format(today);
						
						TextArea text = new TextArea(date+"\n"+ dcTxtArea2.getText());//result.get());
						text.setWrapText(true);
						text.setPrefSize(700, 100);
						text.setFocusTraversable(true);
//						text.setEditable(false);
						
//						text.setFill(Color.rgb(100, 50, 200));
						text.resize(400, 100);
						text.autosize();
						Font tahoma = Font.font("Tahoma", 14);
						text.setFont(tahoma);
						
						dcTextflow2.getChildren().add(text);
						
						text.toBack();
						
					}
					
					//String stdNo = dcStdNo2.getText().toUpperCase();
					
					if(stdNo.trim().equals(dcStdNo2.getText().toUpperCase().trim())) {
						Alert alert = new Alert(Alert.AlertType.CONFIRMATION);
						alert.setContentText("Click Ok to save Suspension to the database, if all is okay...");
						Optional<ButtonType> resultz = alert.showAndWait();
						if(resultz.get() == ButtonType.OK) {
							try {
								
								ObservableList<Node> data = dcTextflow2.getChildren();
								
								StringBuilder sb = new StringBuilder();
								
								Node item = data.get(0);
								if(item instanceof TextArea) {
									sb.append(((TextArea)item).getText());
								}
								
								String text = sb.toString();
								
								//String name = surName+", "+otherNames;
								
								CreateSuspensionEntry suspend = new CreateSuspensionEntry();
								CreateSuspended suspended = new CreateSuspended();

								try {
									suspend.createSuspension(stdNo, text, user);
									
									suspended.createSuspended(sid, stdNo, surName, otherNames, reason, sex, borderStatus, stdClass, 
											user, entryDate, suspUntilDate, status);
									
									suspended.createSuspendedStdUpdate(stdNo, status, user);
								
								}
								catch(Exception e) {
									dcStdNo2.setText("Error: "+e.getMessage());
								}
								finally {
									dcSurName2.setText(null);
									dcOtherNames2.setText(null);
									dcAge2.setText(null);
									dcSex2.setValue("select option");
									dcBorderStatus2.setValue("select option");
									dcClass2.setValue("select option");
									dcTxtArea2.clear();
									dcTextflow2.getChildren().clear();
								}
							}
							catch(Exception e2) {
								dcStdNo2.setText("variables error: "+e2.getMessage());
							}
						}
						else {
							alert.close();
						}
					}
				}
				else if(status.trim().equals("Rusticated")) {
					dcTextflow2.getChildren().clear();
					TextInputDialog dialog = new TextInputDialog(dcTxtArea2.getText());
					dialog.setTitle("Enter Action...");
					dialog.resizableProperty();
					dialog.setHeight(300);
					dialog.setWidth(400);
					Optional<String> result = dialog.showAndWait();
					if(result.isPresent()) {
						DateTimeFormatter formatter2 = DateTimeFormatter.ofLocalizedDate(FormatStyle.MEDIUM);
						LocalDate today = LocalDate.now();
						String date = formatter2.format(today);
						
						TextArea text = new TextArea(date+"\n"+ dcTxtArea2.getText());//result.get());
						text.setWrapText(true);
						text.setPrefSize(700, 100);
						text.setFocusTraversable(true);
//						text.setEditable(false);
						
//						text.setFill(Color.rgb(100, 50, 200));
						text.resize(400, 100);
						text.autosize();
						Font tahoma = Font.font("Tahoma", 14);
						text.setFont(tahoma);
						
						dcTextflow2.getChildren().add(text);
						
						text.toBack();
						
					}
					
					//String stdNo = dcStdNo2.getText().toUpperCase();
					
					if(stdNo.trim().equals(dcStdNo2.getText().toUpperCase().trim())) {
						Alert alert = new Alert(Alert.AlertType.CONFIRMATION);
						alert.setContentText("Click Ok to save Rusticate to the database, if all is okay...");
						Optional<ButtonType> resultz = alert.showAndWait();
						if(resultz.get() == ButtonType.OK) {
							try {
								
								ObservableList<Node> data = dcTextflow2.getChildren();
								
								StringBuilder sb = new StringBuilder();
								
								Node item = data.get(0);
								if(item instanceof TextArea) {
									sb.append(((TextArea)item).getText());
								}
								
								String text = sb.toString();
								
								//String name = surName+", "+otherNames;
								
								CreateRusticateEntry rusticate = new CreateRusticateEntry();
								CreateRusticated rusticated = new CreateRusticated();

								try {
									rusticate.createRusticate(stdNo, text, user);
									
									rusticated.createRusticated(sid, stdNo, surName, otherNames, reason, sex, borderStatus, stdClass, user, 
											entryDate, status);
									
									rusticated.createRusticatedStdUpdate(stdNo, status, user);
								
								}
								catch(Exception e) {
									dcStdNo2.setText("Error: "+e.getMessage());
								}
								finally {
									dcSurName2.setText(null);
									dcOtherNames2.setText(null);
									dcAge2.setText(null);
									dcSex2.setValue("select option");
									dcBorderStatus2.setValue("select option");
									dcClass2.setValue("select option");
									dcTxtArea2.clear();
									dcTextflow2.getChildren().clear();
								}
							}
							catch(Exception e2) {
								dcStdNo2.setText("variables error: "+e2.getMessage());
							}
						}
						else {
							alert.close();
						}
					}
				}
				else if(status.trim().equals("Transferred") || status.trim().equals("Withdrawn")) {
					
					//get your action word from choicedialog
					String action;
					ChoiceDialog<String> dialog = new ChoiceDialog<>("Transferred",statusCombo);
					dialog.setTitle("Make a choice...");
					dialog.setHeaderText("Your choice determines your action on a class. You can only"
							+ " transfer or withdraw a student here though...");
					dialog.setContentText("Select a status: ");
					
					Optional<String> resultDialog = dialog.showAndWait();
					//resultDialog.ifPresent(res -> action = res);
					if(resultDialog.isPresent()) {
						action = resultDialog.get();
					}
					else {
						action = "";
					}
					
					if(action.equals("Transferred") || action.equals("Withdrawn")) {
						//action
						//remove std from current class and add to transferwithdrawn class
						//select new choice class
						//get your action word from choicedialog
						ComboBox<String> combo = new ComboBox<>();
						populateStdClassesCombo2(jssClass, combo);
						String actionClass;
						ChoiceDialog<String> dialog2 = new ChoiceDialog<>("TRSFA20191",jssClass);
						dialog2.setTitle("Make a choice...");
						dialog2.setHeaderText("The transferred or withdrawn student"
								+ " will be added to this class...");
						dialog2.setContentText("Select a class: ");
						
						Optional<String> resultDialog2 = dialog2.showAndWait();
						//resultDialog.ifPresent(res -> action = res);
						if(resultDialog2.isPresent()) {
							actionClass = resultDialog2.get();
						}
						else {
							actionClass = "";
						}
						
						try {
							EntityManagerFactory emfactoryZ = Persistence.createEntityManagerFactory("SchoolMgtSystem");
							EntityManager entitymanagerZ = emfactoryZ.createEntityManager();
							entitymanagerZ.getTransaction().begin();
							
							StudentClasses stdCZ = entitymanagerZ.find(StudentClasses.class, classId);
							
							stdCZ.getStdList().remove(stdNo);
							
							entitymanagerZ.getTransaction().commit();
							
							entitymanagerZ.close();
							emfactoryZ.close();
						}
						catch(Exception etw) {
							etw.printStackTrace();
						}
						
						//setnew class
						try {
							EntityManagerFactory emfactoryZ = Persistence.createEntityManagerFactory("SchoolMgtSystem");
							EntityManager entitymanagerZ = emfactoryZ.createEntityManager();
							entitymanagerZ.getTransaction().begin();
							
							StudentClasses stdCZ = entitymanagerZ.find(StudentClasses.class, actionClass);
							
							stdCZ.setStdList(stdNo);
							
							entitymanagerZ.getTransaction().commit();
							
							entitymanagerZ.close();
							emfactoryZ.close();
						}
						catch(Exception etw) {
							etw.printStackTrace();
						}
						
						try {
							String twid = classId + stdNo;
							CreateTransferredWithdrawn withD = new CreateTransferredWithdrawn();
							withD.createTransferredWithdrawn(twid, setIdX, stdNo, stdNameX, 
									setYearX, stdClassX, outstandingBalX, txnDateX, user);
							
						}
						catch(Exception e) {
							e.printStackTrace();
						}
						
						//update status
						EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
						EntityManager entitymanager = emfactory.createEntityManager();
						entitymanager.getTransaction().begin();
						
						Students std = entitymanager.find(Students.class, stdNo);
						
						std.setStatus(action);
						std.setEntryClassAssigned(actionClass);
						
						entitymanager.getTransaction().commit();
						
						entitymanager.close();
						emfactory.close();
						
						//populate std list with new status
						//populate bac table
						//populateAssignStd2ClassGrad(actionClass);
						
						Alert alertz = new Alert(Alert.AlertType.INFORMATION);
						alertz.setContentText(stdNameX+" was successfully transferred/Withdrawn - "+setYearX+" session!");
						alertz.setHeaderText("SUCCESS!");
						Optional<ButtonType> resultz = alertz.showAndWait();
						if(resultz.get() == ButtonType.OK) {
							alertz.close();
						}
						else {
							alertz.close();
						}
					}
					else {
						Alert alertu = new Alert(Alert.AlertType.INFORMATION);
						alertu.setContentText("You can only transfer/withdraw a student here...");
						alertu.setHeaderText("Pick the appropriate option");
						Optional<ButtonType> resultu = alertu.showAndWait();
						if(resultu.get() == ButtonType.OK) {
							alertu.close();
						}
						else {
							alertu.close();
						}
					}
				}
				else if(status.trim().equals("Deferred")) {
					
					//get your action word from choicedialog
					String action;
					ChoiceDialog<String> dialog = new ChoiceDialog<>("Deferred",statusCombo);
					dialog.setTitle("Make a choice...");
					dialog.setHeaderText("Your choice determines your action on a student. You can only"
							+ " defer a student here though...");
					dialog.setContentText("Select a status: ");
					
					Optional<String> resultDialog = dialog.showAndWait();
					//resultDialog.ifPresent(res -> action = res);
					if(resultDialog.isPresent()) {
						action = resultDialog.get();
					}
					else {
						action = "";
					}
					
					if(action.equals("Deferred")) {
						//action
						//remove std from current class and add to transferwithdrawn class
						//select new choice class
						//get your action word from choicedialog
						ComboBox<String> combo = new ComboBox<>();
						populateStdClassesCombo2(jssClass, combo);
						String actionClass;
						ChoiceDialog<String> dialog2 = new ChoiceDialog<>("DEFER20191",jssClass);
						dialog2.setTitle("Make a choice...");
						dialog2.setHeaderText("Deferred student"
								+ " will be added to this class...");
						dialog2.setContentText("Select a class: ");
						
						Optional<String> resultDialog2 = dialog2.showAndWait();
						//resultDialog.ifPresent(res -> action = res);
						if(resultDialog2.isPresent()) {
							actionClass = resultDialog2.get();
						}
						else {
							actionClass = "";
						}
						
						try {
							EntityManagerFactory emfactoryZ = Persistence.createEntityManagerFactory("SchoolMgtSystem");
							EntityManager entitymanagerZ = emfactoryZ.createEntityManager();
							entitymanagerZ.getTransaction().begin();
							
							StudentClasses stdCZ = entitymanagerZ.find(StudentClasses.class, classId);
							
							stdCZ.getStdList().remove(stdNo);
							
							entitymanagerZ.getTransaction().commit();
							
							entitymanagerZ.close();
							emfactoryZ.close();
						}
						catch(Exception etw) {
							etw.printStackTrace();
						}
						
						//setnew class
						try {
							EntityManagerFactory emfactoryZ = Persistence.createEntityManagerFactory("SchoolMgtSystem");
							EntityManager entitymanagerZ = emfactoryZ.createEntityManager();
							entitymanagerZ.getTransaction().begin();
							
							StudentClasses stdCZ = entitymanagerZ.find(StudentClasses.class, actionClass);
							
							stdCZ.setStdList(stdNo);
							
							entitymanagerZ.getTransaction().commit();
							
							entitymanagerZ.close();
							emfactoryZ.close();
						}
						catch(Exception etw) {
							etw.printStackTrace();
						}
						
						try {
							String did = classId + stdNo;
							CreateDeferred defr = new CreateDeferred();
							defr.createDefer(did, setIdX, stdNo, stdNameX, setYearX, 
									stdClassX, outstandingBalX, txnDateX, user);
							
						}
						catch(Exception e) {
							e.printStackTrace();
						}
						
						//update status
						EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
						EntityManager entitymanager = emfactory.createEntityManager();
						entitymanager.getTransaction().begin();
						
						Students std = entitymanager.find(Students.class, stdNo);
						
						std.setStatus(action);
						std.setEntryClassAssigned(actionClass);
						
						entitymanager.getTransaction().commit();
						
						entitymanager.close();
						emfactory.close();
						
						//populate std list with new status
						//populate bac table
						//populateAssignStd2ClassGrad(actionClass);
						
						Alert alertz = new Alert(Alert.AlertType.INFORMATION);
						alertz.setContentText(stdNameX+" was successfully Deferred - "+setYearX+" session!");
						alertz.setHeaderText("SUCCESS!");
						Optional<ButtonType> resultz = alertz.showAndWait();
						if(resultz.get() == ButtonType.OK) {
							alertz.close();
						}
						else {
							alertz.close();
						}
					}
					else {
						Alert alertu = new Alert(Alert.AlertType.INFORMATION);
						alertu.setContentText("You can only transfer/withdraw a student here...");
						alertu.setHeaderText("Pick the appropriate option");
						Optional<ButtonType> resultu = alertu.showAndWait();
						if(resultu.get() == ButtonType.OK) {
							alertu.close();
						}
						else {
							alertu.close();
						}
					}
				}
				else if(status.trim().equals("Graduated")) {
					
					Alert alert = new Alert(Alert.AlertType.CONFIRMATION);
					alert.setContentText("You are about to graduate "+stdNameX +" for the "+setYearX+" session...");
					alert.setHeaderText("Std status will change to graduated");
					Optional<ButtonType> result = alert.showAndWait();
					if(result.get() == ButtonType.OK) {
						//get your action word from choicedialog
						String action;
						ChoiceDialog<String> dialog = new ChoiceDialog<>("Graduated",statusCombo);
						dialog.setTitle("Make a choice...");
						dialog.setHeaderText("Your choice determines your action on a student. You can only"
								+ " graduate a student here though...");
						dialog.setContentText("Select a new status: ");
						
						Optional<String> resultDialog = dialog.showAndWait();
						//resultDialog.ifPresent(res -> action = res);
						if(resultDialog.isPresent()) {
							action = resultDialog.get();
						}
						else {
							action = "";
						}
						
						if(action.equals("Graduated")) {
							//action							
							try {
								EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
								EntityManager entitymanager = emfactory.createEntityManager();
								entitymanager.getTransaction().begin();
								
								Students std = entitymanager.find(Students.class, stdNo);
								
								std.setStatus(action);
								
								entitymanager.getTransaction().commit();
								entitymanager.close();
								emfactory.close();
								
								String gid = classId + stdNo;
								CreateGraduated graduated = new CreateGraduated();
								graduated.createGraduate(gid, setIdX, stdNo, stdNameX, setYearX, stdClassX,
										outstandingBalX, txnDateX, user);
								
							}
							catch(Exception e) {
								e.printStackTrace();
							}
							
							Alert alertz = new Alert(Alert.AlertType.INFORMATION);
							alertz.setContentText(stdNameX+" was successfully graduated for "+setYearX+" session!");
							alertz.setHeaderText("SUCCESS!");
							Optional<ButtonType> resultz = alertz.showAndWait();
							if(resultz.get() == ButtonType.OK) {
								alertz.close();
							}
							else {
								alertz.close();
							}
						}
						else {
							Alert alertu = new Alert(Alert.AlertType.INFORMATION);
							alertu.setContentText("You can only graduate a student here...");
							alertu.setHeaderText("Pick the appropriate option - Graduated");
							Optional<ButtonType> resultu = alertu.showAndWait();
							if(resultu.get() == ButtonType.OK) {
								alertu.close();
							}
							else {
								alertu.close();
							}
						}
					}
					else {
						alert.close();
					}
				}
				else {
					dcTextflow2.getChildren().clear();
					TextInputDialog dialog = new TextInputDialog(dcTxtArea2.getText());
					dialog.setTitle("Enter Action...");
					dialog.resizableProperty();
					dialog.setHeight(300);
					dialog.setWidth(400);
					Optional<String> result = dialog.showAndWait();
					if(result.isPresent()) {
						DateTimeFormatter formatter2 = DateTimeFormatter.ofLocalizedDate(FormatStyle.MEDIUM);
						LocalDate today = LocalDate.now();
						String date = formatter2.format(today);
						
						TextArea text = new TextArea(date+"\n"+ dcTxtArea2.getText());//result.get());
						text.setWrapText(true);
						text.setPrefSize(700, 100);
						text.setFocusTraversable(true);
//						text.setEditable(false);
						
//						text.setFill(Color.rgb(100, 50, 200));
						text.resize(400, 100);
						text.autosize();
						Font tahoma = Font.font("Tahoma", 14);
						text.setFont(tahoma);
						
						dcTextflow2.getChildren().add(text);
						
						text.toBack();
						
					}
					
					//String stdNo = dcStdNo2.getText().toUpperCase();
					
					if(stdNo.equals(dcStdNo2.getText().toUpperCase())) {
						Alert alert = new Alert(Alert.AlertType.CONFIRMATION);
						alert.setContentText("Click Ok to save Suspension to the database, if all is okay...");
						Optional<ButtonType> resultz = alert.showAndWait();
						if(resultz.get() == ButtonType.OK) {
							try {
								
								ObservableList<Node> data = dcTextflow2.getChildren();
								
								StringBuilder sb = new StringBuilder();
								
								Node item = data.get(0);
								if(item instanceof TextArea) {
									sb.append(((TextArea)item).getText());
								}
								
								String text = sb.toString();
								
								//String name = surName+", "+otherNames;
								
								CreateSuspensionEntry suspend = new CreateSuspensionEntry();
								CreateSuspended suspended = new CreateSuspended();

								try {
									suspend.createSuspension(stdNo, text, user);
									
									suspended.createSuspended(sid, stdNo, surName, otherNames, reason, sex, borderStatus, stdClass, 
											user, entryDate, suspUntilDate, status);
									
									suspended.createSuspendedStdUpdate(stdNo, status, user);
								
								}
								catch(Exception e) {
									dcStdNo2.setText("Error: "+e.getMessage());
								}
								finally {
									dcSurName2.setText(null);
									dcOtherNames2.setText(null);
									dcAge2.setText(null);
									dcSex2.setValue("select option");
									dcBorderStatus2.setValue("select option");
									dcClass2.setValue("select option");
									dcTxtArea2.clear();
									dcTextflow2.getChildren().clear();
								}
							}
							catch(Exception e2) {
								dcStdNo2.setText("variables error: "+e2.getMessage());
							}
						}
						else {
							alert.close();
						}
					}
				}
			}
			else {
				Alert alert = new Alert(Alert.AlertType.ERROR);
				alert.setTitle("Error");
				alert.setContentText("Invalid entries... Please ensure that you have selected an appropriate "
						+ "date and all other parameters.");
				alert.setHeaderText("INVALID ENTRIES - Error Handler");
				Optional<ButtonType> result = alert.showAndWait();
				if(result.get() == ButtonType.OK) {
					alert.close();
				}
				else {
					alert.close();
				}
			}
			
		}
		catch(Exception dcExcept) {
//			dcExcept.printStackTrace();
			Alert alert = new Alert(Alert.AlertType.ERROR);
			alert.setTitle("Exception");
			alert.setContentText("Invalid entries... Please ensure that you have selected an appropriate "
					+ "date and all other parameters. "+ dcExcept.getMessage());
			alert.setHeaderText("INVALID ENTRIES - Exception Handler");
			Optional<ButtonType> result = alert.showAndWait();
			if(result.get() == ButtonType.OK) {
				alert.close();
			}
			else {
				alert.close();
			}
		}
		
	}
	
	//fetch suspension entry
	@FXML public void fetchSuspensionSideButton2(ActionEvent event) {
		String stdNo = dcStdNo2.getText().toUpperCase();
		dcTextflow2.getChildren().clear();
		try {
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			SuspensionEntry std = entitymanager.find(SuspensionEntry.class, stdNo);
			
			LinkedList<String> list = std.getSuspendTextFlow();
	
			for(String text : list) {
				TextArea area = new TextArea(text);
				area.setWrapText(true);
				area.setPrefSize(780, 100);
				area.setFocusTraversable(true);
				dcTextflow2.getChildren().add(area);
				area.toBack();
			}
			
			entitymanager.persist(std);
		
			entitymanager.getTransaction().commit();
			
			entitymanager.close();
			emfactory.close();
		}
		catch(Exception e) {
			dcStdNo2.setText("Fetch Error: "+ e.getMessage());
		}
	}
	
	//fetch Rusticate entry
	@FXML public void fetchRusticateSideButton2(ActionEvent event) {
		String stdNo = dcStdNo2.getText().toUpperCase();
		dcTextflow2.getChildren().clear();
		try {
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			RusticateEntry std = entitymanager.find(RusticateEntry.class, stdNo);
			
			LinkedList<String> list = std.getRusticateTextFlow();
	
			for(String text : list) {
				TextArea area = new TextArea(text);
				area.setWrapText(true);
				area.setPrefSize(780, 100);
				area.setFocusTraversable(true);
				dcTextflow2.getChildren().add(area);
				area.toBack();
			}
			
			entitymanager.persist(std);
		
			entitymanager.getTransaction().commit();
			
			entitymanager.close();
			emfactory.close();
		}
		catch(Exception e) {
			dcStdNo2.setText("Fetch Error: "+ e.getMessage());
		}
	}
	
	//Delete DC, Suspension and expulsion
	@FXML public void deleteDcTextButton2(ActionEvent event) {
		
		String stdNo = dcStdNo2.getText().toUpperCase();
		
		Alert alert = new Alert(AlertType.CONFIRMATION);
		alert.setTitle("Entries Deletion Confirmation");
		alert.setHeaderText("Make your choice carefully to delete an entry... "
				+ "\n Please note that this action is irreversible!");
		alert.setContentText("Make your choice carefuly (entry to be deleted)");
		
		ButtonType Disc = new ButtonType("Disciplinary");
		ButtonType Com = new ButtonType("Commendation");
		ButtonType Susp = new ButtonType("Suspension");
		ButtonType Rust = new ButtonType("Rusticate");
		ButtonType Canc = new ButtonType("Cancel", ButtonData.CANCEL_CLOSE);
		
		alert.getButtonTypes().setAll(Disc, Com, Susp, Rust, Canc);
		
		Optional<ButtonType> result = alert.showAndWait();
		
		if(result.get() == Disc) {
			try {
				EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
				EntityManager entitymanager = emfactory.createEntityManager();
				entitymanager.getTransaction().begin();
				
				DisciplinaryEntry std = entitymanager.find(DisciplinaryEntry.class, stdNo);
				
				LinkedList<String> list = std.getDcTextFlow();
		
				for(String text2 : list) {
					TextArea area = new TextArea(text2);
					area.setWrapText(true);
					area.setPrefSize(780, 100);
					area.setFocusTraversable(true);
					dcTextflow2.getChildren().add(area);
					area.toBack();
				}
				
				entitymanager.persist(std);
			
				entitymanager.getTransaction().commit();
				
				entitymanager.close();
				emfactory.close();
			}
			catch(Exception e) {
				dcStdNo2.setText("Fetch Error: "+ e.getMessage());
			}
			
			ObservableList<Node> data = dcTextflow2.getChildren();
			
			StringBuilder sb = new StringBuilder();
			Node item = data.get(0);
			if(item instanceof TextArea) {
				sb.append(((TextArea)item).getText());
			}
			String text = sb.toString();
			
			try {
				DeleteDisciplinaryEntry delete = new DeleteDisciplinaryEntry();
				delete.deleteDisciplinaryEntryText(stdNo, text);
			}
			catch(Exception e) {
				dcStdNo2.setText("Disc text delete error: "+ e.getLocalizedMessage());
			}
			finally {
				dcSurName2.setText(null);
				dcOtherNames2.setText(null);
				dcAge2.setText(null);
				dcSex2.setValue("select option");
				dcBorderStatus2.setValue("select option");
				dcClass2.setValue("select option");
				dcTextflow2.getChildren().clear();
			}
			
			try {
				EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
				EntityManager entitymanager = emfactory.createEntityManager();
				entitymanager.getTransaction().begin();
				
				DisciplinaryEntry std = entitymanager.find(DisciplinaryEntry.class, stdNo);
				
				LinkedList<String> list = std.getDcTextFlow();
		
				for(String text2 : list) {
					TextArea area = new TextArea(text2);
					area.setWrapText(true);
					area.setPrefSize(780, 100);
					area.setFocusTraversable(true);
					dcTextflow2.getChildren().add(area);
					area.toBack();
				}
				
				entitymanager.persist(std);
			
				entitymanager.getTransaction().commit();
				
				entitymanager.close();
				emfactory.close();
			}
			catch(Exception e) {
				dcStdNo2.setText("Fetch Error: "+ e.getMessage());
			}
		}
		else if(result.get() == Com) {
			try {
				EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
				EntityManager entitymanager = emfactory.createEntityManager();
				entitymanager.getTransaction().begin();
				
				CommendationEntry std = entitymanager.find(CommendationEntry.class, stdNo);
				
				LinkedList<String> list = std.getCommendTextFlow();
		
				for(String text2 : list) {
					TextArea area = new TextArea(text2);
					area.setWrapText(true);
					area.setPrefSize(780, 100);
					area.setFocusTraversable(true);
					dcTextflow2.getChildren().add(area);
					area.toBack();
				}
				
				entitymanager.persist(std);
			
				entitymanager.getTransaction().commit();
				
				entitymanager.close();
				emfactory.close();
			}
			catch(Exception e) {
				dcStdNo2.setText("Fetch Error: "+ e.getMessage());
			}
			
			ObservableList<Node> data = dcTextflow2.getChildren();
			
			StringBuilder sb = new StringBuilder();
			Node item = data.get(0);
			if(item instanceof TextArea) {
				sb.append(((TextArea)item).getText());
			}
			String text = sb.toString();
			
			try {
				DeleteCommendationEntry delete = new DeleteCommendationEntry();
				delete.deleteCommendationEntryText(stdNo, text);
			}
			catch(Exception e) {
				dcStdNo2.setText("commend text delete error: "+ e.getLocalizedMessage());
			}
			finally {
				dcSurName2.setText(null);
				dcOtherNames2.setText(null);
				dcAge2.setText(null);
				dcSex2.setValue("select option");
				dcBorderStatus2.setValue("select option");
				dcClass2.setValue("select option");
				dcTextflow2.getChildren().clear();
			}
			
			try {
				EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
				EntityManager entitymanager = emfactory.createEntityManager();
				entitymanager.getTransaction().begin();
				
				CommendationEntry std = entitymanager.find(CommendationEntry.class, stdNo);
				
				LinkedList<String> list = std.getCommendTextFlow();
		
				for(String text2 : list) {
					TextArea area = new TextArea(text2);
					area.setWrapText(true);
					area.setPrefSize(780, 100);
					area.setFocusTraversable(true);
					dcTextflow2.getChildren().add(area);
					area.toBack();
				}
				
				entitymanager.persist(std);
			
				entitymanager.getTransaction().commit();
				
				entitymanager.close();
				emfactory.close();
			}
			catch(Exception e) {
				dcStdNo2.setText("Fetch Error: "+ e.getMessage());
			}
		}
		else if(result.get() == Susp) {
			try {
				EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
				EntityManager entitymanager = emfactory.createEntityManager();
				entitymanager.getTransaction().begin();
				
				SuspensionEntry std = entitymanager.find(SuspensionEntry.class, stdNo);
				
				LinkedList<String> list = std.getSuspendTextFlow();
		
				for(String text2 : list) {
					TextArea area = new TextArea(text2);
					area.setWrapText(true);
					area.setPrefSize(780, 100);
					area.setFocusTraversable(true);
					dcTextflow2.getChildren().add(area);
					area.toBack();
				}
				
				entitymanager.persist(std);
			
				entitymanager.getTransaction().commit();
				
				entitymanager.close();
				emfactory.close();
			}
			catch(Exception e) {
				dcStdNo2.setText("Fetch Error: "+ e.getMessage());
			}
			
			ObservableList<Node> data = dcTextflow2.getChildren();
			
			StringBuilder sb = new StringBuilder();
			Node item = data.get(0);
			if(item instanceof TextArea) {
				sb.append(((TextArea)item).getText());
			}
			String text = sb.toString();
			
			try {
				DeleteSuspensionEntry delete = new DeleteSuspensionEntry();
				delete.deleteSuspensionEntryText(stdNo, text);
			}
			catch(Exception e) {
				dcStdNo2.setText("Suspension text delete error: "+ e.getLocalizedMessage());
			}
			finally {
				dcSurName2.setText(null);
				dcOtherNames2.setText(null);
				dcAge2.setText(null);
				dcSex2.setValue("select option");
				dcBorderStatus2.setValue("select option");
				dcClass2.setValue("select option");
				dcTextflow2.getChildren().clear();
			}
			
			try {
				EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
				EntityManager entitymanager = emfactory.createEntityManager();
				entitymanager.getTransaction().begin();
				
				SuspensionEntry std = entitymanager.find(SuspensionEntry.class, stdNo);
				
				LinkedList<String> list = std.getSuspendTextFlow();
		
				for(String text2 : list) {
					TextArea area = new TextArea(text2);
					area.setWrapText(true);
					area.setPrefSize(780, 100);
					area.setFocusTraversable(true);
					dcTextflow2.getChildren().add(area);
					area.toBack();
				}
				
				entitymanager.persist(std);
			
				entitymanager.getTransaction().commit();
				
				entitymanager.close();
				emfactory.close();
			}
			catch(Exception e) {
				dcStdNo2.setText("Fetch Error: "+ e.getMessage());
			}
		}
		else if(result.get() == Rust) {
			try {
				EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
				EntityManager entitymanager = emfactory.createEntityManager();
				entitymanager.getTransaction().begin();
				
				RusticateEntry std = entitymanager.find(RusticateEntry.class, stdNo);
				
				LinkedList<String> list = std.getRusticateTextFlow();
		
				for(String text2 : list) {
					TextArea area = new TextArea(text2);
					area.setWrapText(true);
					area.setPrefSize(780, 100);
					area.setFocusTraversable(true);
					dcTextflow2.getChildren().add(area);
					area.toBack();
				}
				
				entitymanager.persist(std);
			
				entitymanager.getTransaction().commit();
				
				entitymanager.close();
				emfactory.close();
			}
			catch(Exception e) {
				dcStdNo2.setText("Fetch Error: "+ e.getMessage());
			}
			
			ObservableList<Node> data = dcTextflow2.getChildren();
			
			StringBuilder sb = new StringBuilder();
			Node item = data.get(0);
			if(item instanceof TextArea) {
				sb.append(((TextArea)item).getText());
			}
			String text = sb.toString();
			
			try {
				DeleteRusticateEntry delete = new DeleteRusticateEntry();
				delete.deleteRusticateEntryText(stdNo, text);
			}
			catch(Exception e) {
				dcStdNo2.setText("Suspension text delete error: "+ e.getLocalizedMessage());
			}
			finally {
				dcSurName2.setText(null);
				dcOtherNames2.setText(null);
				dcAge2.setText(null);
				dcSex2.setValue("select option");
				dcBorderStatus2.setValue("select option");
				dcClass2.setValue("select option");
				dcTextflow2.getChildren().clear();
			}
			
			try {
				EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
				EntityManager entitymanager = emfactory.createEntityManager();
				entitymanager.getTransaction().begin();
				
				RusticateEntry std = entitymanager.find(RusticateEntry.class, stdNo);
				
				LinkedList<String> list = std.getRusticateTextFlow();
		
				for(String text2 : list) {
					TextArea area = new TextArea(text2);
					area.setWrapText(true);
					area.setPrefSize(780, 100);
					area.setFocusTraversable(true);
					dcTextflow2.getChildren().add(area);
					area.toBack();
				}
				
				entitymanager.persist(std);
			
				entitymanager.getTransaction().commit();
				
				entitymanager.close();
				emfactory.close();
			}
			catch(Exception e) {
				dcStdNo2.setText("Fetch Error: "+ e.getMessage());
			}
		}
		else {
			alert.close();
		}
	}
	
	//Statement generator
	@FXML private Button spoolStmtBtn, xcelStmtPrtBtn, xcelStmtGenBtn;
	@FXML private SplitPane printPaneStmt;
	@FXML private TableView<StatementDataTable> statementDataTable;
	@FXML private TableColumn<InvoicingDataTable,String> stmtDateCol, stmtDescCol, 
		stmtCRCol, stmtDRCol, stmtBalCol;
	@FXML private Label stmtName_lb, stmtPhone_lb, stmtCBal_lb, stmtAddr_lb, 
		stmtTotalCR_lb, stmtTotalDR_lb, stmtAvailBal_lb;
	@FXML private TextField stmtStdNo, stmtStdTxtError;
	@FXML private DatePicker stmtStdStartDate, stmtStdEndDate;
	@FXML private ComboBox<String> stmtOptionCombo;
	ObservableList<String> stmtOptCmb = FXCollections.observableArrayList("GL","Regular","Till");
	
	@FXML public void stmtOptInit(MouseEvent event) {
		stmtOptionCombo.setItems(stmtOptCmb);
	}
	
	@FXML public void splitPeriodicInit(MouseEvent event) {
		stmtStdTxtError.clear();
		stmtStdTxtError.setVisible(false);
	}
	
	@SuppressWarnings({ "rawtypes", "unchecked" })
	@FXML public void spoolStmtButton(ActionEvent event) {
		
		try {
			String stdNo = stmtStdNo.getText().toUpperCase();
			String option = stmtOptionCombo.getValue();
			LocalDate startDate = stmtStdStartDate.getValue();
			LocalDate endDate = stmtStdEndDate.getValue();
			Date startDate2 = Date.valueOf(startDate);
			Date endDate2 = Date.valueOf(endDate);
			
			ObservableList<StatementDataTable> data = FXCollections.observableArrayList();
			Vector<Transactions> stmtData = new Vector<>();

			try {
				
				EntityManagerFactory emfactory = Persistence.createEntityManagerFactory
						("SchoolMgtSystem");
				EntityManager entitymanager = emfactory.createEntityManager();
				entitymanager.getTransaction().begin();
						
//				Query query =
//						entitymanager.createQuery("select e from Transactions e ");
//				stmtData = (Vector<Transactions>) query.getResultList();
				
				stmtData = getTransactionsByStdNo(entitymanager, stdNo);
				
				entitymanager.close();
				emfactory.close();
			}
			catch(Exception e) {
				stmtStdTxtError.setVisible(true);
				stmtStdTxtError.setText("Stmt Spool Error: "+e.getLocalizedMessage());
				//e.printStackTrace();
			}
			
			//query for tilltransactions instead
			final String JDBC_Driver_GL = "com.mysql.jdbc.Driver";
			final String DB_URL_GL = dbURL;
			final String DB_User_GL = dbUSR;
			final String DB_PWD_GL = dbPWD;
												
												
			Connection conn_GL = null;
			PreparedStatement stmt_GL = null;
												
			try {
				Class.forName(JDBC_Driver_GL );
				conn_GL = DriverManager.getConnection(DB_URL_GL, DB_User_GL, DB_PWD_GL);
													
				String sql;
				sql = "select * from tilltransactions where TILLACCTNO = ? and TXNDATE between ? and ?";
													
				stmt_GL = conn_GL.prepareStatement(sql);
												
				stmt_GL.setString(1, stdNo);
				stmt_GL.setDate(2, startDate2);
				stmt_GL.setDate(3, endDate2);
													
				ResultSet rs = stmt_GL.executeQuery();
													
													
				while(rs.next()) {
					if(option.equals("GL")) {
						data.add(new StatementDataTable(
								rs.getString("TXNDATE"), rs.getString("CUSTOMERACCTNAME")+" - "+ rs.getString("CUSTOMERACCTNO"), 
								rs.getString("CREDITS"), rs.getString("DEBITS"), rs.getString("BALANCE")));
						stmtName_lb.setText(rs.getString("TILLACCTNAME"));
					}
					else if(option.equals("Till")) {
						data.add(new StatementDataTable(
								rs.getString("TXNDATE"), rs.getString("CUSTOMERACCTNAME")+" - "+ rs.getString("CUSTOMERACCTNO"), 
								rs.getString("CREDITS"), rs.getString("DEBITS"), rs.getString("BALANCE")));
						stmtName_lb.setText(rs.getString("TILLACCTNAME"));
					}
					else {
						//
					}
				}

				rs.close();
				stmt_GL.close();
				conn_GL.close();
			}
			catch(SQLException es) {
				stmtStdTxtError.setVisible(true);
				stmtStdTxtError.setText("Error JDBC: "+ es.getSQLState());
			}
			catch(Exception es2) {
				stmtStdTxtError.setVisible(true);
				stmtStdTxtError.setText("Error JDBC: "+ es2.getMessage());
			}
			finally {
				try {
					if(stmt_GL != null ) {
						stmt_GL.close();
					}
				}
				catch(SQLException ces) {
					stmtStdTxtError.setVisible(true);
					stmtStdTxtError.setText("Error JDBC: "+ ces.getSQLState());
				}
				try {
					if(conn_GL != null ) {
						conn_GL.close();
					}
				}
				catch(Exception ces2) {
					stmtStdTxtError.setVisible(true);
					stmtStdTxtError.setText("JDBC: "+ces2.getMessage());
				}
													
			}
			
			String date, desc, credit, debit, balance;

			if(option.equals("Regular")) {
				for(Transactions txn : stmtData) {
					if(txn.getAccountNumber().equals(stdNo) || 
							txn.getAccountNumber().equals(stdNo.toLowerCase()) ||
							txn.getAccountNumber().trim().toUpperCase().equals(stdNo.trim().toUpperCase())) {
						if(txn.getTxnDate().toEpochDay() >=  startDate.toEpochDay() && 
								txn.getTxnDate().toEpochDay() <= endDate.toEpochDay()) {
							
							date = txn.getTxnDate().toString();
							desc = txn.getDepWithdrawal();
							credit = txn.getCredits();
							debit = txn.getDebits();
							balance = txn.getAvailableBalance();
							
							data.add(new StatementDataTable(
									date, desc, credit, debit, balance));
							
							EntityManagerFactory emfactory = Persistence.createEntityManagerFactory
									("SchoolMgtSystem");
							EntityManager entitymanager = emfactory.createEntityManager();
							entitymanager.getTransaction().begin();
									
							Students std = entitymanager.find(Students.class, stdNo);
														
							stmtName_lb.setText(std.getOtherNames() + " " + std.getSurName());
							stmtPhone_lb.setText(std.getFatherPhone());
							stmtAddr_lb.setText(std.getAddress());
							
							entitymanager.getTransaction().commit();
							entitymanager.close();
							emfactory.close();
						}
					}
				}
			}
			else {
				EntityManagerFactory emfactory = Persistence.createEntityManagerFactory
						("SchoolMgtSystem");
				EntityManager entitymanager = emfactory.createEntityManager();
				entitymanager.getTransaction().begin();
										
				Tills stdTill = entitymanager.find(Tills.class, stdNo);
				
				stmtName_lb.setText(stdTill.getTillName());
				
				entitymanager.getTransaction().commit();
				entitymanager.close();
				emfactory.close();
			}
			
			stmtDateCol.setCellValueFactory(new PropertyValueFactory("date_Data"));
			stmtDescCol.setCellValueFactory(new PropertyValueFactory("description_Data"));
			stmtCRCol.setCellValueFactory(new PropertyValueFactory("credit_Data"));
			stmtDRCol.setCellValueFactory(new PropertyValueFactory("debit_Data"));
			stmtBalCol.setCellValueFactory(new PropertyValueFactory("balance_Data"));
			
			statementDataTable.setItems(data);
		
			double totalCR = 0, totalDR = 0;
			if(!(data.isEmpty())) {
				for(StatementDataTable datum : data) {
					totalCR = totalCR + Double.parseDouble(datum.getCredit_Data());
					totalDR = totalDR + Double.parseDouble(datum.getDebit_Data());
				}
			}
			
			stmtTotalCR_lb.setText(fm2.format(totalCR));
			stmtTotalDR_lb.setText(fm2.format(totalDR));
			if(option.equals("Regular") || option.equals("GL")) {
				stmtCBal_lb.setText(fm2.format(totalCR - totalDR));
			}
			else {
				stmtCBal_lb.setText(fm2.format(totalCR + totalDR));
			}
			
			//Available Balance
			EntityManagerFactory emf = Persistence.createEntityManagerFactory
					("SchoolMgtSystem");
			EntityManager em = emf.createEntityManager();
			em.getTransaction().begin();
					
			AccountBalance bx = em.find(AccountBalance.class, stdNo);
			
			Tills Xx = em.find(Tills.class, stdNo);
			
			if(option.equals("Regular")) {
				stmtAvailBal_lb.setText(fm2.format(bx.getBalance()));
				if(bx.getBalance() < 0) {
					stmtAvailBal_lb.setTextFill(Color.RED);
				}
				else if(bx.getBalance() == 0) {
					stmtAvailBal_lb.setTextFill(Color.BLUE);
				}
				else {
					stmtAvailBal_lb.setTextFill(Color.GREEN);
				}
			}
			else {
				stmtAvailBal_lb.setText(fm2.format(Xx.getBalance()));
				if(Xx.getBalance() < 0) {
					stmtAvailBal_lb.setTextFill(Color.RED);
				}
				else if(Xx.getBalance() == 0) {
					stmtAvailBal_lb.setTextFill(Color.BLUE);
				}
				else {
					stmtAvailBal_lb.setTextFill(Color.GREEN);
				}
			}
			
			em.close();
			emf.close();
		}
		catch(Exception exxx) {
			exxx.printStackTrace();
			stmtStdTxtError.setVisible(true);
			stmtStdTxtError.setText("Error: "+exxx.getLocalizedMessage());
			stmtName_lb.setText(null);
			stmtPhone_lb.setText(null); 
			stmtCBal_lb.setText(null);
			stmtAddr_lb.setText(null); 
			stmtTotalCR_lb.setText(null); 
			stmtTotalDR_lb.setText(null); 
			stmtAvailBal_lb.setText(null);
		}
	}
	
	@FXML public void xcelStmtPrtButton(ActionEvent event) {
		spoolStmtBtn.setVisible(false); 
		xcelStmtPrtBtn.setVisible(false); 
		xcelStmtGenBtn.setVisible(false);
		returnEnterPatientStmBtn.setVisible(false);
		stmtStdTxtError.setVisible(false);
		try {
			printNode(printPaneStmt);
		}
		catch(Exception exception) {
			stmtStdTxtError.setVisible(true);
			stmtStdTxtError.setText("Print Error: "+ exception.getLocalizedMessage());
		}
		finally {
			spoolStmtBtn.setVisible(true); 
			xcelStmtPrtBtn.setVisible(true); 
			xcelStmtGenBtn.setVisible(true);
			returnEnterPatientStmBtn.setVisible(true);
		}
	}
	
	@FXML public void xcelStmtGenButton(ActionEvent event) {
		Workbook workbook = new HSSFWorkbook();
		Sheet spreadSheet = workbook.createSheet("sheet");
		Row row = spreadSheet.createRow(0);
		
		for(int j = 0; j < statementDataTable.getColumns().size(); j++) {
			row.createCell(j).setCellValue(statementDataTable.getColumns().get(j).getText());
		}
		
		for(int i = 0; i < statementDataTable.getItems().size(); i++) {
			row = spreadSheet.createRow(i + 1);
			for(int j = 0; j < statementDataTable.getColumns().size(); j++) {
				if(statementDataTable.getColumns().get(j).getCellData(i) != null) {
					row.createCell(j).setCellValue(statementDataTable.getColumns().get(j).getCellData(i).toString());
				}
				else {
					row.createCell(j).setCellValue("");
				}
			}
		}
		
		String localDate = LocalDate.now().toString();
		String txt = "statementDataTable"+localDate+".xls";
		String filePath = "C:\\workbook\\"+txt;
		
		try {
			FileOutputStream fileOut = new FileOutputStream(filePath);
			try {
				workbook.write(fileOut);
				fileOut.close();
				stmtStdTxtError.setVisible(true);
				stmtStdTxtError.setText(filePath);
			} catch (IOException e2) {
				stmtStdTxtError.setVisible(true);
				stmtStdTxtError.setText("Write Error: "+ e2.getMessage());
			}
		} catch (FileNotFoundException e) {
			stmtStdTxtError.setVisible(true);
			stmtStdTxtError.setText("File Error: "+ e.getMessage());
		}
	}
	
	//Payments Analysis
	@FXML private Button enterPayAnalysisBtn, returnPayAnalysisBtn;
	@FXML private ComboBox<String> payAnalTypeCombo;
	@FXML private DatePicker payTypeFroDate, payTypeToDate;
	@FXML private TableView<PayAnalysisDataTable> payAnalysisDataTable;
	@FXML private TableColumn<PayAnalysisDataTable,String> payAnalSNCol, payAnalStdNoCol, payAnalNameCol, 
		payAnalTypeCol, payAnalCRCol, payAnalDRCol, payAnalDescCol, payAnalDateCol;
	@FXML private Label payTypeLabel;
	@FXML private VBox vboxPane;
	
	ObservableList<String> payType = FXCollections.observableArrayList("Cash","Teller","POS","All");
	
	@FXML public void payType_Init(MouseEvent event) {
		payAnalTypeCombo.setItems(payType);
	}
	
	@SuppressWarnings({ "unchecked", "rawtypes" })
	@FXML public void spoolPayTypeAnalysisButton(ActionEvent event) {
		try {
			String payType = payAnalTypeCombo.getValue();
			LocalDate froDate = payTypeFroDate.getValue();
			LocalDate toDate = payTypeToDate.getValue();
			
			ObservableList<PayAnalysisDataTable> data = FXCollections.observableArrayList();
			Vector<CashTransactions> cashData = new Vector<>();
			Vector<TellerTransactions> tellerData = new Vector<>();
			Vector<POSTransactions> posData = new Vector<>();
			double sum = 0, sum2 = 0, sum3 = 0, total = 0;
			
			try {
				EntityManagerFactory emfactorys = Persistence.createEntityManagerFactory("SchoolMgtSystem");
				EntityManager entitymanagers = emfactorys.createEntityManager();
				entitymanagers.getTransaction().begin();
				
				Query queryX =
						entitymanagers.createQuery("select e from CashTransactions e ");
				cashData = (Vector<CashTransactions>) queryX.getResultList();
				
				Query queryY =
						entitymanagers.createQuery("select e from TellerTransactions e ");
				tellerData = (Vector<TellerTransactions>) queryY.getResultList();
				
				Query queryZ =
						entitymanagers.createQuery("select e from POSTransactions e ");
				posData = (Vector<POSTransactions>) queryZ.getResultList();
				
				entitymanagers.getTransaction().commit();
				entitymanagers.close();
				emfactorys.close();
				
				for(CashTransactions x : cashData) {
					if(x.getTxnDate().toEpochDay() >= froDate.toEpochDay() && 
							x.getTxnDate().toEpochDay() <= toDate.toEpochDay()) {
						sum = sum + Double.parseDouble(x.getAmount());
					}
				}
				
				for(TellerTransactions x : tellerData) {
					if(x.getTxnDate().toEpochDay() >= froDate.toEpochDay() && 
							x.getTxnDate().toEpochDay() <= toDate.toEpochDay()) {
						sum2 = sum2 + Double.parseDouble(x.getAmount());
					}
				}
				
				for(POSTransactions x : posData) {
					if(x.getTxnDate().toEpochDay() >= froDate.toEpochDay() && 
							x.getTxnDate().toEpochDay() <= toDate.toEpochDay()) {
						sum3 = sum3 + Double.parseDouble(x.getAmount());
					}
				}
				
				total = sum + sum2 + sum3;
				payTypeLabel.setText("Cash: "+fm2.format(sum) + ", Teller: "+ fm2.format(sum2) + ", POS: "+ fm2.format(sum3) + 
						", Till: "+ fm2.format(total));
				
				//populate table
				int sNo = 0;
				String SN, stdNo, stdName, paymentType, cred, deb, desc, date;
				
				if(payType.trim().equalsIgnoreCase("Cash")) {
					for(CashTransactions x : cashData) {
						if(x.getTxnDate().toEpochDay() >= froDate.toEpochDay() && 
								x.getTxnDate().toEpochDay() <= toDate.toEpochDay()) {
							sNo = sNo + 1;
							SN = String.valueOf(sNo);
							stdNo = x.getAccountNumber();
							stdName = x.getAccountName();
							paymentType = payType;
							cred = x.getCredits();
							deb = x.getDebits();
							desc = x.getDepWithdrawal();
							date = x.getTxnDate().toString();
							
							data.add(new PayAnalysisDataTable(
									SN, stdNo, stdName, paymentType, cred, deb, desc, date));
						}
					}
				}
				else if(payType.trim().equalsIgnoreCase("Teller")) {
					for(TellerTransactions x : tellerData) {
						if(x.getTxnDate().toEpochDay() >= froDate.toEpochDay() && 
								x.getTxnDate().toEpochDay() <= toDate.toEpochDay()) {
							sNo = sNo + 1;
							SN = String.valueOf(sNo);
							stdNo = x.getAccountNumber();
							stdName = x.getAccountName();
							paymentType = payType;
							cred = x.getCredits();
							deb = x.getDebits();
							desc = x.getDepWithdrawal();
							date = x.getTxnDate().toString();
							
							data.add(new PayAnalysisDataTable(
									SN, stdNo, stdName, paymentType, cred, deb, desc, date));
						}
					}
				}
				else if(payType.trim().equalsIgnoreCase("POS")) {
					for(POSTransactions x : posData) {
						if(x.getTxnDate().toEpochDay() >= froDate.toEpochDay() && 
								x.getTxnDate().toEpochDay() <= toDate.toEpochDay()) {
							sNo = sNo + 1;
							SN = String.valueOf(sNo);
							stdNo = x.getAccountNumber();
							stdName = x.getAccountName();
							paymentType = payType;
							cred = x.getCredits();
							deb = x.getDebits();
							desc = x.getDepWithdrawal();
							date = x.getTxnDate().toString();
							
							data.add(new PayAnalysisDataTable(
									SN, stdNo, stdName, paymentType, cred, deb, desc, date));
						}
					}
				}
				else {
					for(CashTransactions x : cashData) {
						if(x.getTxnDate().toEpochDay() >= froDate.toEpochDay() && 
								x.getTxnDate().toEpochDay() <= toDate.toEpochDay()) {
							sNo = sNo + 1;
							SN = String.valueOf(sNo);
							stdNo = x.getAccountNumber();
							stdName = x.getAccountName();
							if(x.getClass().equals(CashTransactions.class)) {
								paymentType = "Cash";
							}
							else {
								paymentType = payType;
							}
							cred = x.getCredits();
							deb = x.getDebits();
							desc = x.getDepWithdrawal();
							date = x.getTxnDate().toString();
							
							data.add(new PayAnalysisDataTable(
									SN, stdNo, stdName, paymentType, cred, deb, desc, date));
						}
					}
					
					for(TellerTransactions x : tellerData) {
						if(x.getTxnDate().toEpochDay() >= froDate.toEpochDay() && 
								x.getTxnDate().toEpochDay() <= toDate.toEpochDay()) {
							sNo = sNo + 1;
							SN = String.valueOf(sNo);
							stdNo = x.getAccountNumber();
							stdName = x.getAccountName();
							if(x.getClass().equals(TellerTransactions.class)) {
								paymentType = "Teller";
							}
							else {
								paymentType = payType;
							}
							cred = x.getCredits();
							deb = x.getDebits();
							desc = x.getDepWithdrawal();
							date = x.getTxnDate().toString();
							
							data.add(new PayAnalysisDataTable(
									SN, stdNo, stdName, paymentType, cred, deb, desc, date));
						}
					}
					
					for(POSTransactions x : posData) {
						if(x.getTxnDate().toEpochDay() >= froDate.toEpochDay() && 
								x.getTxnDate().toEpochDay() <= toDate.toEpochDay()) {
							sNo = sNo + 1;
							SN = String.valueOf(sNo);
							stdNo = x.getAccountNumber();
							stdName = x.getAccountName();
							if(x.getClass().equals(POSTransactions.class)) {
								paymentType = "POS";
							}
							else {
								paymentType = payType;
							}
							cred = x.getCredits();
							deb = x.getDebits();
							desc = x.getDepWithdrawal();
							date = x.getTxnDate().toString();
							
							data.add(new PayAnalysisDataTable(
									SN, stdNo, stdName, paymentType, cred, deb, desc, date));
						}
					}
				}

				
				payAnalSNCol.setCellValueFactory(new PropertyValueFactory("sNo_Data"));
				payAnalStdNoCol.setCellValueFactory(new PropertyValueFactory("stdNo_Data"));
				payAnalNameCol.setCellValueFactory(new PropertyValueFactory("stdName_Data"));
				payAnalTypeCol.setCellValueFactory(new PropertyValueFactory("payType_Data"));
				payAnalCRCol.setCellValueFactory(new PropertyValueFactory("credit_Data"));
				payAnalDRCol.setCellValueFactory(new PropertyValueFactory("debit_Data"));
				payAnalDescCol.setCellValueFactory(new PropertyValueFactory("desc_Data"));
				payAnalDateCol.setCellValueFactory(new PropertyValueFactory("date_Data"));
				
				payAnalysisDataTable.setItems(data);
			}
			catch(Exception ex) {
				payTypeLabel.setText(ex.getMessage());
				payAnalysisDataTable.setItems(null);
			}
		}
		catch(Exception exception) {
			exception.printStackTrace();
		}
	}
	
	@FXML private Button spoolPayTypeAnalBtn, printPayTypeAnalysisBtn, xcelPayTypeAnalBtn;
	@FXML public void printPayTypeAnalysisButton(ActionEvent event) {
		spoolPayTypeAnalBtn.setVisible(false); 
		printPayTypeAnalysisBtn.setVisible(false); 
		xcelPayTypeAnalBtn.setVisible(false);
		returnPayAnalysisBtn.setVisible(false);
		try {
			printNode(vboxPane);
		}
		catch(Exception exception) {
			payTypeLabel.setText(exception.getMessage());
		}
		finally {
			spoolPayTypeAnalBtn.setVisible(true); 
			printPayTypeAnalysisBtn.setVisible(true); 
			xcelPayTypeAnalBtn.setVisible(true);
			returnPayAnalysisBtn.setVisible(true);
		}
	}
	
	@FXML public void xcelPayTypeAnalButton(ActionEvent event) {
		Workbook workbook = new HSSFWorkbook();
		Sheet spreadSheet = workbook.createSheet("sheet");
		Row row = spreadSheet.createRow(0);
		
		for(int j = 0; j < payAnalysisDataTable.getColumns().size(); j++) {
			row.createCell(j).setCellValue(payAnalysisDataTable.getColumns().get(j).getText());
		}
		
		for(int i = 0; i < payAnalysisDataTable.getItems().size(); i++) {
			row = spreadSheet.createRow(i + 1);
			for(int j = 0; j < payAnalysisDataTable.getColumns().size(); j++) {
				if(payAnalysisDataTable.getColumns().get(j).getCellData(i) != null) {
					row.createCell(j).setCellValue(payAnalysisDataTable.getColumns().get(j).getCellData(i).toString());
				}
				else {
					row.createCell(j).setCellValue("");
				}
			}
		}
		
		String localDate = LocalDate.now().toString();
		String txt = "payAnalysisDataTable"+localDate+".xls";
		String filePath = "C:\\workbook\\"+txt;
		
		try {
			FileOutputStream fileOut = new FileOutputStream(filePath);
			try {
				workbook.write(fileOut);
				fileOut.close();
				payTypeLabel.setText(filePath);
			} catch (IOException e2) {
				payTypeLabel.setText("Write Error: "+ e2.getMessage());
			}
		} catch (FileNotFoundException e) {
			payTypeLabel.setText("File Error: "+ e.getMessage());
		}
	}
	
	//Re-Print Receipt
	@FXML public void tellerPrintPreview(ActionEvent event) {
		String TID = TIDTF.getValue();
		String printTID, thisAcct, name, amt, pDate, avBal, desc, txnTypeStr = "";
		LinkedList<String> cash = new LinkedList<>();
		LinkedList<String> teller = new LinkedList<>();
		LinkedList<String> pos = new LinkedList<>();
		
		EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
		EntityManager entitymanager = emfactory.createEntityManager();
		entitymanager.getTransaction().begin();
		
		Transactions transact = entitymanager.find(Transactions.class, TID);
		
		printTID = TID;
		thisAcct = transact.getAccountNumber();
		name = transact.getAccountName();
		amt = transact.getAmount();
		pDate = transact.getTxnDate().toString();
		avBal = transact.getAvailableBalance();
		desc = transact.getDepWithdrawal();
	
		//entitymanager.getTransaction().commit();
		
		entitymanager.close();
		emfactory.close();
		
		try {
			Vector<CashTransactions> cashData = new Vector<>();
			Vector<TellerTransactions> tellerData = new Vector<>();
			Vector<POSTransactions> posData = new Vector<>();
			
			EntityManagerFactory emfactorys = Persistence.createEntityManagerFactory("SchoolMgtSystem");
			EntityManager entitymanagers = emfactorys.createEntityManager();
			entitymanagers.getTransaction().begin();
			
			Query queryX =
					entitymanagers.createQuery("select e from CashTransactions e ");
			//cashData = (Vector<CashTransactions>) queryX.getResultList();
			if(!(queryX.getResultList().isEmpty())) {
				cashData = (Vector<CashTransactions>) queryX.getResultList();
			}
			
			Query queryY =
					entitymanagers.createQuery("select e from TellerTransactions e ");
			//tellerData = (Vector<TellerTransactions>) queryY.getResultList();
			if(!(queryY.getResultList().isEmpty())) {
				tellerData = (Vector<TellerTransactions>) queryY.getResultList();
			}
			
			Query queryZ =
					entitymanagers.createQuery("select e from POSTransactions e ");
			//posData = (Vector<POSTransactions>) queryZ.getResultList();
			if(!(queryZ.getResultList().isEmpty())) {
				posData = (Vector<POSTransactions>) queryZ.getResultList();
			}
			
			//entitymanagers.getTransaction().commit();
			entitymanagers.close();
			emfactorys.close();
			
			try {
				if(!(cashData.isEmpty())) {
					for(CashTransactions x : cashData) {
//						if(x.getTID().equals(TID)) {
//							txnTypeStr = "Cash";
//						}
						cash.add(x.getTID());
					}
				}
			}
			catch(Exception e1) {
				e1.printStackTrace();
			}
			
			try {
				if(!(tellerData.isEmpty())) {
					for(TellerTransactions y : tellerData) {
//						if(y.getTID().equals(TID)) {
//							txnTypeStr = "Teller";
//						}
						teller.add(y.getTID());
					}
				}
			}
			catch(Exception e2) {
				e2.printStackTrace();
			}
			
			try {
				if(!(posData.isEmpty())) {
					for(POSTransactions z : posData) {
//						if(z.getTID().equals(TID)) {
//							txnTypeStr = "POS";
//						}
						pos.add(z.getTID());
					}
				}
			}
			catch(Exception e3) {
				e3.printStackTrace();
			}
	
		}
		catch(Exception e) {
			e.printStackTrace();
		}
		
		if(!(cash.isEmpty()) || !(teller.isEmpty()) || !(pos.isEmpty()) ) {
			if(cash.contains(TID.toUpperCase()) || cash.contains(TID.toUpperCase().replace("K", "k"))) {
				txnTypeStr = "Cash";
			}
			else if(teller.contains(TID.toUpperCase()) || teller.contains(TID.toUpperCase().replace("K", "k"))) {
				txnTypeStr = "Teller";
			}
			else if(pos.contains(TID.toUpperCase()) || pos.contains(TID.toUpperCase().replace("K", "k"))) {
				txnTypeStr = "POS";
			}
			else {
				txnTypeStr = "NA";
			}
		}
		
		Alert alert = new Alert(Alert.AlertType.INFORMATION);
		alert.setContentText("Date: "+pDate+
				" TID: " +printTID+ "\n" +
				"Std ID: "+ thisAcct + " Name: "+ name + "\n" +
				"Description: "+desc+ "\n"+
				"Amt Paid: "+ amt + " Balance: "+ avBal +"\n"+ "Payment Mode: "+txnTypeStr);
		Optional<ButtonType> result = alert.showAndWait();
		if(result.get() == ButtonType.OK) {
			alert.close();
		}
		else {
			alert.close();
		}
	}
	
	@FXML public void tellerRePrintTxn(ActionEvent event) {
		String TID = TIDTF.getValue();
		String printTID, thisAcct, name, stdClass = "", amt, pDate, avBal, desc, txnTypeStr = "";
		LinkedList<String> cash = new LinkedList<>();
		LinkedList<String> teller = new LinkedList<>();
		LinkedList<String> pos = new LinkedList<>();
		
		EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
		EntityManager entitymanager = emfactory.createEntityManager();
		entitymanager.getTransaction().begin();
		
		Transactions transact = entitymanager.find(Transactions.class, TID);
		
		printTID = TID;
		thisAcct = transact.getAccountNumber();
		name = transact.getAccountName();
		amt = fm2.format(Double.parseDouble(transact.getAmount()));
		pDate = transact.getTxnDate().toString();
		avBal = fm2.format(Double.parseDouble(transact.getAvailableBalance()));
		desc = transact.getDepWithdrawal();
	
		//entitymanager.getTransaction().commit();
		
		entitymanager.close();
		emfactory.close();
		
		try {
			Vector<CashTransactions> cashData = new Vector<>();
			Vector<TellerTransactions> tellerData = new Vector<>();
			Vector<POSTransactions> posData = new Vector<>();
			
			EntityManagerFactory emfactorys = Persistence.createEntityManagerFactory("SchoolMgtSystem");
			EntityManager entitymanagers = emfactorys.createEntityManager();
			entitymanagers.getTransaction().begin();
			
			Students cstx = entitymanagers.find(Students.class, thisAcct);
			stdClass = cstx.getEntryClassAssigned();
			
			Query queryX =
					entitymanagers.createQuery("select e from CashTransactions e ");
			//cashData = (Vector<CashTransactions>) queryX.getResultList();
			if(!(queryX.getResultList().isEmpty())) {
				cashData = (Vector<CashTransactions>) queryX.getResultList();
			}
			
			Query queryY =
					entitymanagers.createQuery("select e from TellerTransactions e ");
			//tellerData = (Vector<TellerTransactions>) queryY.getResultList();
			if(!(queryY.getResultList().isEmpty())) {
				tellerData = (Vector<TellerTransactions>) queryY.getResultList();
			}
			
			Query queryZ =
					entitymanagers.createQuery("select e from POSTransactions e ");
			//posData = (Vector<POSTransactions>) queryZ.getResultList();
			if(!(queryZ.getResultList().isEmpty())) {
				posData = (Vector<POSTransactions>) queryZ.getResultList();
			}
			
			//entitymanagers.getTransaction().commit();
			entitymanagers.close();
			emfactorys.close();
			
			try {
				if(!(cashData.isEmpty())) {
					for(CashTransactions x : cashData) {
//						if(x.getTID().equals(TID)) {
//							txnTypeStr = "Cash";
//						}
						cash.add(x.getTID());
					}
				}
			}
			catch(Exception e1) {
				e1.printStackTrace();
			}
			
			try {
				if(!(tellerData.isEmpty())) {
					for(TellerTransactions y : tellerData) {
//						if(y.getTID().equals(TID)) {
//							txnTypeStr = "Teller";
//						}
						teller.add(y.getTID());
					}
				}
			}
			catch(Exception e2) {
				e2.printStackTrace();
			}
			
			try {
				if(!(posData.isEmpty())) {
					for(POSTransactions z : posData) {
//						if(z.getTID().equals(TID)) {
//							txnTypeStr = "POS";
//						}
						pos.add(z.getTID());
					}
				}
			}
			catch(Exception e3) {
				e3.printStackTrace();
			}
	
		}
		catch(Exception e) {
			e.printStackTrace();
		}
		
		if(!(cash.isEmpty()) || !(teller.isEmpty()) || !(pos.isEmpty()) ) {
			if(cash.contains(TID.toUpperCase()) || cash.contains(TID.toUpperCase().replace("K", "k"))) {
				txnTypeStr = "Cash";
			}
			else if(teller.contains(TID.toUpperCase()) || teller.contains(TID.toUpperCase().replace("K", "k"))) {
				txnTypeStr = "Teller";
			}
			else if(pos.contains(TID.toUpperCase()) || pos.contains(TID.toUpperCase().replace("K", "k"))) {
				txnTypeStr = "POS";
			}
			else {
				txnTypeStr = "NA";
			}
		}
		
		//generate barcode for receipt
		File directory = new File("C:\\BarCode\\receipt");
				if(!(directory.exists())) {
					directory.mkdirs();
				}
		try {
						
			String barCodeData = thisAcct.toUpperCase();
			
			String filePath = "C:\\BarCode\\receipt\\barcode.png";
			String charset = "UTF-8";
			
			Map<EncodeHintType, ErrorCorrectionLevel> hintMap = new HashMap<>();
			hintMap.put(EncodeHintType.ERROR_CORRECTION, ErrorCorrectionLevel.L);
			
			BitMatrix matrix = new MultiFormatWriter().encode(
				new String(barCodeData.getBytes(charset), charset), 
				BarcodeFormat.CODE_39, 250,25, hintMap);
			MatrixToImageWriter.writeToFile(matrix, filePath.substring(
				filePath.lastIndexOf('.') + 1), new File(filePath));
	
		}
		catch(Exception e) {
			e.printStackTrace();
		}
		
		//print
	 	UIManager.put("swing.boldMetal", Boolean.FALSE);
        JFrame f = new JFrame("Receipt Printer");
        f.addWindowListener(new WindowAdapter() {
           public void windowClosing(WindowEvent e) {
        	   //System.exit(0);
        	   }
        });
        
        JButton printButton = new JButton("Click HERE to Re-Print Receipt");
        printButton.addActionListener(new HelloWorldPrinter(printTID, thisAcct, name, stdClass, 
        		amt, pDate, avBal, desc, txnTypeStr));
        f.add("Center", printButton);
        f.pack();
        f.setVisible(true);
	}
	
	//Barcode System Controller
	@FXML private TextField barcodeBrowseIdNo, barcodeBrowseFP;
	@FXML private TextArea barcodeBrowseName;
	@FXML private ImageView imageViewBarcode;
	@FXML private DatePicker barcodeBrowseDate;
	@FXML Stage stage1;
	
	@FXML public void barcodeUploadBrowseButton(ActionEvent event) throws FileNotFoundException {
		
		FileChooser fileChooser = new FileChooser();
		fileChooser.setTitle("select video for upload...");
		File file = fileChooser.showOpenDialog(stage1);
//		FileInputStream input = new FileInputStream(file.getAbsolutePath());
		if(file != null) {
			
			ImageResizer sizer = new ImageResizer();
			
			try {
				//sizer.resize(file.getAbsolutePath(), "C:\\images\\photo2.jpg", 0.5);
				sizer.resize(file.getAbsolutePath(), "C:\\Barcode\\barcode.png", 250, 25);
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			FileInputStream input = new FileInputStream("C:\\Barcode\\barcode.png");
			
			barcodeBrowseFP.setText("C:\\Barcode\\barcode.png");
			
			Image image = new Image(input);
				
			imageViewBarcode.setImage(image);
		}
	}
	
	@FXML public void barcodeBrowseDetailsInit(MouseEvent event) {
		
		File directory = new File("C:\\Barcode");
		if(!(directory.exists())) {
			directory.mkdirs();
		}
		
		//create image table if not exists
		String jdbcUrl = dbURL;
		String username = dbUSR;
		String password = dbPWD;
		
		String sql2 = "create table if not exists stdBarcodes (stdid varchar(100) not null, name varchar(255) not null, "
				+ "barcode blob null, date varchar(100) null, user varchar(255) not null, primary key(stdid))";
		
		try(Connection conn = DriverManager.getConnection(jdbcUrl, username, password);
				){
			//File photo = new File(filePath);
			
			PreparedStatement stmt = conn.prepareStatement(sql2);
			stmt.executeUpdate();
		}
		catch(SQLException eq) {
			barcodeBrowseIdNo.setText(eq.getMessage());
		}
		
		String stdId = barcodeBrowseIdNo.getText();
		
		try {
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			Students std = entitymanager.find(Students.class, stdId);
			
			barcodeBrowseName.setText(std.getSurName() + ", "+ std.getOtherNames());
			
			entitymanager.getTransaction().commit();
			
			entitymanager.close();
			emfactory.close();
		}
		catch(Exception e) {
			barcodeBrowseIdNo.setText(e.getLocalizedMessage());
		}
		
		try {
			String barCodeData = stdId;
			String filePath = "C:\\BarCode\\barcode.png";
			String charset = "UTF-8";
			
			Map<EncodeHintType, ErrorCorrectionLevel> hintMap = new HashMap<>();
			hintMap.put(EncodeHintType.ERROR_CORRECTION, ErrorCorrectionLevel.L);
			
			BitMatrix matrix = new MultiFormatWriter().encode(
					new String(barCodeData.getBytes(charset), charset), 
					BarcodeFormat.CODE_39, 250,25, hintMap);
			MatrixToImageWriter.writeToFile(matrix, filePath.substring(
					filePath.lastIndexOf('.') + 1), new File(filePath));
			
			System.out.println("Barcode Image Sucessfully created...");
			
			FileInputStream input;
			input = new FileInputStream(filePath);
			barcodeBrowseFP.setText(filePath);
			
			Image image = new Image(input);
				
			imageViewBarcode.setImage(image);
		}
		catch(Exception e) {
			e.printStackTrace();
		}
		
	}
	
	//upload image
	@FXML public void uploadBrowseBarcodeButton(ActionEvent event) {
		String stdId = barcodeBrowseIdNo.getText();
		String name = barcodeBrowseName.getText();
		//Image image = imageView.getImage();
		String filePath = barcodeBrowseFP.getText();
		String user = dispName;
		
		LocalDate d1 = barcodeBrowseDate.getValue();
		DateTimeFormatter formatter = DateTimeFormatter.ofLocalizedDate(FormatStyle.MEDIUM);
		
		String date = formatter.format(d1);
		
		String jdbcUrl = dbURL;
		String username = dbUSR;
		String password = dbPWD;
		
		String sql = "INSERT INTO stdBarcodes(stdid, name, barcode, date, user) VALUES(?, ?, ?, ?, ?)";
		
		try(Connection conn = DriverManager.getConnection(jdbcUrl, username, password);
				){
			File photo = new File(filePath);
			
			try(FileInputStream inputStream = new FileInputStream(photo);
					PreparedStatement stmt = conn.prepareStatement(sql);
					){
				stmt.setString(1, stdId);
				stmt.setString(2, name);
				stmt.setBinaryStream(3, inputStream, photo.length());
				stmt.setString(4, date);
				stmt.setString(5, user);
				
				stmt.executeUpdate();
				
				barcodeBrowseFP.setText("Image Saved Successfully...");
			}
			catch(IOException io) {
				imageBrowseIdNo.setText(io.getMessage());
			}
		}
		catch(SQLException eq) {
			barcodeBrowseIdNo.setText(eq.getMessage());
		}
	}
	
	//Read from barcode
	@FXML private TextField barcodeViewIdNo, barcodeViewSex, barcodeViewAge, barcodeViewClass, barcodeViewYear, 
		barcodeViewTerm, barcodeViewBalance, barcodeViewName;
	@FXML private TextArea barcodeViewStatus;
	@FXML private ImageView imageView2Barcode, imageView2Barcode2;
	
	@FXML public void barcodeViewDetailsInit(MouseEvent event) {
		
//		String stdNo = barcodeViewIdNo.getText().toUpperCase();
//				
//		File directory = new File("C:\\BarCode");
//		if(!(directory.exists())) {
//			directory.mkdirs();
//		}
//		
//		try {
//			int count = 0;
//			try {
//			
//				String barCodeData = stdNo;
//				
//				String filePath = "C:\\BarCode\\barcode.png";
//				String charset = "UTF-8";
//				
//				Map<EncodeHintType, ErrorCorrectionLevel> hintMap = new HashMap<>();
//				hintMap.put(EncodeHintType.ERROR_CORRECTION, ErrorCorrectionLevel.L);
//				
//				BitMatrix matrix = new MultiFormatWriter().encode(
//					new String(barCodeData.getBytes(charset), charset), 
//					BarcodeFormat.CODE_39, 250,25, hintMap);
//				MatrixToImageWriter.writeToFile(matrix, filePath.substring(
//					filePath.lastIndexOf('.') + 1), new File(filePath));
//				count++;
//			}
//			catch(Exception e) {
//				e.printStackTrace();
//			}
//			Alert alert = new Alert(Alert.AlertType.INFORMATION);
//			alert.setContentText("Barcode Generated Successfully...");
//			alert.setHeaderText("SUCCESS");
//			Optional<ButtonType> result = alert.showAndWait();
//			if(result.get() == ButtonType.OK) {
//				alert.close();
//			}
//			else {
//				alert.close();
//			}
//		}
//		catch(Exception exx) {
//			exx.printStackTrace();
//		}
//		
//		//stdBarcodeId.setText(stdId + "'s barcode generated"); 
//
//		try {
//			String filePath = "C:\\BarCode\\barcode.png";
//			String charset = "UTF-8";
//			
//			Map<EncodeHintType, ErrorCorrectionLevel> hintMap = new HashMap<>();
//			hintMap.put(EncodeHintType.ERROR_CORRECTION, ErrorCorrectionLevel.L);
//			
//			System.out.println("Data read from barcode: "+ readBarCode(filePath, charset, hintMap) );
//			
//			barcodeViewIdNo.setText(readBarCode(filePath, charset, hintMap));
//			
//			FileInputStream input;
//			input = new FileInputStream(filePath);			
//			Image image = new Image(input);
//				
//			imageView2Barcode2.setImage(image);
//			
//		}
//		catch(Exception e) {
//			e.printStackTrace();
//		}
//		
////		String stdNo = barcodeViewIdNo.getText().toUpperCase();
//		
//		try{
//			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory
//					("SchoolMgtSystem");
//			EntityManager entitymanager = emfactory.createEntityManager();
//			entitymanager.getTransaction().begin();
//			
//			Students std = entitymanager.find(Students.class, stdNo);
//			
//			barcodeViewName.setText(std.getSurName()+ ", "+std.getOtherNames());
//			barcodeViewSex.setText(std.getSex());
//	
//			LocalDate dateAgeStr2 = std.getDateOfBirth();
//			LocalDate currentDateStr = LocalDate.now();
//			int diffDateStr = currentDateStr.getYear() - dateAgeStr2.getYear();
//			barcodeViewAge.setText(String.valueOf(diffDateStr));
//			
//			if(std.getStatus().equalsIgnoreCase("Suspended")) {
//				EntityManagerFactory emfactoryq = Persistence.createEntityManagerFactory
//						("SchoolMgtSystem");
//				EntityManager entitymanagerq = emfactoryq.createEntityManager();
//				entitymanagerq.getTransaction().begin();
//				SuspensionEntry entry = entitymanagerq.find(SuspensionEntry.class, stdNo);
//				
//				String msg = entry.getSuspendTextFlow().getLast();
//				
//				barcodeViewStatus.setText(std.getStatus()+" ("+msg+")");
//				
//				entitymanagerq.getTransaction().commit();
//				entitymanagerq.close();
//				emfactoryq.close();
//			}
//			else {
//				barcodeViewStatus.setText(std.getStatus());
//			}
//			
//			String classId = std.getEntryClassAssigned();
//			
//			EntityManagerFactory emfactory2 = Persistence.createEntityManagerFactory
//					("SchoolMgtSystem");
//			EntityManager entitymanager2 = emfactory2.createEntityManager();
//			entitymanager2.getTransaction().begin();
//			
//			StudentClasses clas = entitymanager2.find(StudentClasses.class, classId);
//			
//			barcodeViewClass.setText(clas.getClassNo()+clas.getClassLetter());
//			barcodeViewYear.setText(clas.getYear());
//			barcodeViewTerm.setText(clas.getTerm());
//			
//			entitymanager2.getTransaction().commit();
//			entitymanager2.close();
//			emfactory2.close();
//			
//			EntityManagerFactory emfactory3 = Persistence.createEntityManagerFactory
//					("SchoolMgtSystem");
//			EntityManager entitymanager3 = emfactory3.createEntityManager();
//			entitymanager3.getTransaction().begin();
//			
//			AccountBalance bal = entitymanager3.find(AccountBalance.class, stdNo);
//			
//			barcodeViewBalance.setText(fm2.format(bal.getBalance()));
//			
//			entitymanager3.getTransaction().commit();
//			entitymanager3.close();
//			emfactory3.close();
//			
//			entitymanager.getTransaction().commit();
//			entitymanager.close();
//			emfactory.close();
//			
//		}
//		catch(Exception e) {
//			barcodeViewIdNo.setText("Error: " + e.getLocalizedMessage());
//			barcodeViewName.clear();
//			barcodeViewSex.clear();
//			barcodeViewAge.clear();
//			barcodeViewClass.clear();
//			barcodeViewYear.clear();
//			barcodeViewTerm.clear();
//			barcodeViewBalance.clear();
//		}
//		
//		//view photo
//		try {
//			String stdId = stdNo;
//			
//			String jdbcUrl = dbURL;
//			String username = dbUSR;
//			String password = dbPWD;
//			
//			String sql = "SELECT * FROM stdImages WHERE stdid = ?";
//			
//			try(Connection conn = DriverManager.getConnection(jdbcUrl, username, password);
//					){
//				
//				try(PreparedStatement stmt = conn.prepareStatement(sql);
//						){
//					stmt.setString(1, stdId);		
//					
//					ResultSet result = stmt.executeQuery();
//					
//					
//					if(result.next()) {
//						InputStream imageStream = result.getBinaryStream("image");
//						Image img = new Image(imageStream);
//						imageView2Barcode.setImage(img);
//						String stdName = result.getString("name");
//						barcodeViewName.setText(stdName);
//					}
//					else {
//						imageView2Barcode.setImage(null);
//					}
//				
//					result.close();
//					stmt.close();
//					conn.close();
//				}
//				catch(SQLException io) {
//					barcodeViewIdNo.setText(io.getMessage());
//					barcodeViewName.clear();
//					imageView2Barcode.setImage(null);
//				}
//			}
//			catch(SQLException eq) {
//				barcodeViewIdNo.setText(eq.getMessage());
//				barcodeViewName.clear();
//				imageView2Barcode.setImage(null);
//			}
//		}
//		catch(Exception e) {
//			barcodeViewIdNo.setText(e.getMessage());
//			barcodeViewName.clear();
//			imageView2Barcode.setImage(null);
//		}
	}
	
	//read barcode function
	public static String readBarCode(String filePath, String charset, Map hintMap) throws 
	FileNotFoundException, IOException, NotFoundException {
		BinaryBitmap  binaryBitmap = new BinaryBitmap(new HybridBinarizer(
				new BufferedImageLuminanceSource(
						ImageIO.read(new FileInputStream(filePath)))));
		Result barCodeResult = new MultiFormatReader().decode(binaryBitmap, hintMap);
		return barCodeResult.getText();
	}
	
	@FXML public void barcodeStdDetailsReqButton(ActionEvent event) {
		
		String stdNo = barcodeViewIdNo.getText().toUpperCase();
		
		File directory = new File("C:\\BarCode");
		if(!(directory.exists())) {
			directory.mkdirs();
		}
		
		try {
			int count = 0;
			try {
			
				String barCodeData = stdNo;
				
				String filePath = "C:\\BarCode\\barcode.png";
				String charset = "UTF-8";
				
				Map<EncodeHintType, ErrorCorrectionLevel> hintMap = new HashMap<>();
				hintMap.put(EncodeHintType.ERROR_CORRECTION, ErrorCorrectionLevel.L);
				
				BitMatrix matrix = new MultiFormatWriter().encode(
					new String(barCodeData.getBytes(charset), charset), 
					BarcodeFormat.CODE_39, 300,80, hintMap);
				MatrixToImageWriter.writeToFile(matrix, filePath.substring(
					filePath.lastIndexOf('.') + 1), new File(filePath));
				count++;
			}
			catch(Exception e) {
				e.printStackTrace();
			}
			Alert alert = new Alert(Alert.AlertType.INFORMATION);
			alert.setContentText("Barcode Generated Successfully...");
			alert.setHeaderText("SUCCESS");
			Optional<ButtonType> result = alert.showAndWait();
			if(result.get() == ButtonType.OK) {
				alert.close();
			}
			else {
				alert.close();
			}
		}
		catch(Exception exx) {
			exx.printStackTrace();
		}
		
		//stdBarcodeId.setText(stdId + "'s barcode generated"); 

		try {
			String filePath = "C:\\BarCode\\barcode.png";
			String charset = "UTF-8";
			
			Map<EncodeHintType, ErrorCorrectionLevel> hintMap = new HashMap<>();
			hintMap.put(EncodeHintType.ERROR_CORRECTION, ErrorCorrectionLevel.L);
			
			System.out.println("Data read from barcode: "+ readBarCode(filePath, charset, hintMap) );
			
			barcodeViewIdNo.setText(readBarCode(filePath, charset, hintMap));
			
			FileInputStream input;
			input = new FileInputStream(filePath);			
			Image image = new Image(input);
				
			imageView2Barcode2.setImage(image);
			
		}
		catch(Exception e) {
			e.printStackTrace();
		}
		
//		String stdNo = barcodeViewIdNo.getText().toUpperCase();
		
		try{
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory
					("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			Students std = entitymanager.find(Students.class, stdNo);
			
			barcodeViewName.setText(std.getSurName()+ ", "+std.getOtherNames());
			barcodeViewSex.setText(std.getSex());
	
			LocalDate dateAgeStr2 = std.getDateOfBirth();
			LocalDate currentDateStr = LocalDate.now();
			int diffDateStr = currentDateStr.getYear() - dateAgeStr2.getYear();
			barcodeViewAge.setText(String.valueOf(diffDateStr));
			
			if(std.getStatus().equalsIgnoreCase("Suspended")) {
				EntityManagerFactory emfactoryq = Persistence.createEntityManagerFactory
						("SchoolMgtSystem");
				EntityManager entitymanagerq = emfactoryq.createEntityManager();
				entitymanagerq.getTransaction().begin();
				SuspensionEntry entry = entitymanagerq.find(SuspensionEntry.class, stdNo);
				
				String msg = entry.getSuspendTextFlow().getLast();
				
				barcodeViewStatus.setText(std.getStatus()+" ("+msg+")");
				
				entitymanagerq.getTransaction().commit();
				entitymanagerq.close();
				emfactoryq.close();
			}
			else {
				barcodeViewStatus.setText(std.getStatus());
			}
			
			String classId = std.getEntryClassAssigned();
			
			EntityManagerFactory emfactory2 = Persistence.createEntityManagerFactory
					("SchoolMgtSystem");
			EntityManager entitymanager2 = emfactory2.createEntityManager();
			entitymanager2.getTransaction().begin();
			
			StudentClasses clas = entitymanager2.find(StudentClasses.class, classId);
			
			barcodeViewClass.setText(clas.getClassNo()+clas.getClassLetter());
			barcodeViewYear.setText(clas.getYear());
			barcodeViewTerm.setText(clas.getTerm());
			
			entitymanager2.getTransaction().commit();
			entitymanager2.close();
			emfactory2.close();
			
			EntityManagerFactory emfactory3 = Persistence.createEntityManagerFactory
					("SchoolMgtSystem");
			EntityManager entitymanager3 = emfactory3.createEntityManager();
			entitymanager3.getTransaction().begin();
			
			AccountBalance bal = entitymanager3.find(AccountBalance.class, stdNo);
			
			barcodeViewBalance.setText(fm2.format(bal.getBalance()));
			
			entitymanager3.getTransaction().commit();
			entitymanager3.close();
			emfactory3.close();
			
			entitymanager.getTransaction().commit();
			entitymanager.close();
			emfactory.close();
			
		}
		catch(Exception e) {
			barcodeViewIdNo.setText("Error: " + e.getLocalizedMessage());
			barcodeViewName.clear();
			barcodeViewSex.clear();
			barcodeViewAge.clear();
			barcodeViewClass.clear();
			barcodeViewYear.clear();
			barcodeViewTerm.clear();
			barcodeViewBalance.clear();
		}
		
		//view photo
		try {
			String stdId = stdNo;
			
			String jdbcUrl = dbURL;
			String username = dbUSR;
			String password = dbPWD;
			
			String sql = "SELECT * FROM stdImages WHERE stdid = ?";
			
			try(Connection conn = DriverManager.getConnection(jdbcUrl, username, password);
					){
				
				try(PreparedStatement stmt = conn.prepareStatement(sql);
						){
					stmt.setString(1, stdId);		
					
					ResultSet result = stmt.executeQuery();
					
					
					if(result.next()) {
						InputStream imageStream = result.getBinaryStream("image");
						Image img = new Image(imageStream);
						imageView2Barcode.setImage(img);
						String stdName = result.getString("name");
						barcodeViewName.setText(stdName);
					}
					else {
						imageView2Barcode.setImage(null);
					}
				
					result.close();
					stmt.close();
					conn.close();
				}
				catch(SQLException io) {
					barcodeViewIdNo.setText(io.getMessage());
					barcodeViewName.clear();
					imageView2Barcode.setImage(null);
				}
			}
			catch(SQLException eq) {
				barcodeViewIdNo.setText(eq.getMessage());
				barcodeViewName.clear();
				imageView2Barcode.setImage(null);
			}
		}
		catch(Exception e) {
			barcodeViewIdNo.setText(e.getMessage());
			barcodeViewName.clear();
			imageView2Barcode.setImage(null);
		}
	}
	
	//Print Barcode exam card
	@FXML private Button printBarcodeCardBtn, barcodeGenCardBtn;
	@FXML private VBox barcodePane;
	
	@FXML public void printBarcodeCardButton(ActionEvent event) {
		returnCreateButton.setVisible(false);
		printBarcodeCardBtn.setVisible(false);
		barcodeGenCardBtn.setVisible(false);
	
		try {
			printNodeNewSize(barcodePane);
		}
		catch(Exception exception) {
			exception.printStackTrace();
			Alert alert = new Alert(Alert.AlertType.ERROR);
			alert.setContentText("Print Error. "+ exception.getMessage());
			alert.setHeaderText("ERROR");
			Optional<ButtonType> result = alert.showAndWait();
			if(result.get() == ButtonType.OK) {
				alert.close();
			}
			else {
				alert.close();
			}
		}
		finally {
			returnCreateButton.setVisible(true);
			printBarcodeCardBtn.setVisible(true);
			barcodeGenCardBtn.setVisible(true);
		}
	}
	
	//Photo ID Card
	@FXML private TextField photoIdViewIdNo;
	@FXML private TextField photoIdViewName;
	@FXML private ImageView imageView2PhotoId, imageView2PhotoId2;
	@FXML public void photoIdCardButton(ActionEvent event) {
		
		String stdNo = photoIdViewIdNo.getText().toUpperCase();
		
		File directory = new File("C:\\BarCode");
		if(!(directory.exists())) {
			directory.mkdirs();
		}
		
		try {
			int count = 0;
			try {
			
				String barCodeData = stdNo;
				
				String filePath = "C:\\BarCode\\barcode.png";
				String charset = "UTF-8";
				
				Map<EncodeHintType, ErrorCorrectionLevel> hintMap = new HashMap<>();
				hintMap.put(EncodeHintType.ERROR_CORRECTION, ErrorCorrectionLevel.L);
				
				BitMatrix matrix = new MultiFormatWriter().encode(
					new String(barCodeData.getBytes(charset), charset), 
					BarcodeFormat.CODE_39, 300,80, hintMap);
				MatrixToImageWriter.writeToFile(matrix, filePath.substring(
					filePath.lastIndexOf('.') + 1), new File(filePath));
				count++;
			}
			catch(Exception e) {
				e.printStackTrace();
			}
			Alert alert = new Alert(Alert.AlertType.INFORMATION);
			alert.setContentText("Barcode Generated Successfully...");
			alert.setHeaderText("SUCCESS");
			Optional<ButtonType> result = alert.showAndWait();
			if(result.get() == ButtonType.OK) {
				alert.close();
			}
			else {
				alert.close();
			}
		}
		catch(Exception exx) {
			exx.printStackTrace();
		}
		
		//stdBarcodeId.setText(stdId + "'s barcode generated"); 

		try {
			String filePath = "C:\\BarCode\\barcode.png";
			String charset = "UTF-8";
			
			Map<EncodeHintType, ErrorCorrectionLevel> hintMap = new HashMap<>();
			hintMap.put(EncodeHintType.ERROR_CORRECTION, ErrorCorrectionLevel.L);
			
			System.out.println("Data read from barcode: "+ readBarCode(filePath, charset, hintMap) );
			
			photoIdViewIdNo.setText(readBarCode(filePath, charset, hintMap));
			
			FileInputStream input;
			input = new FileInputStream(filePath);			
			Image image = new Image(input);
				
			imageView2PhotoId2.setImage(image);
			
		}
		catch(Exception e) {
			e.printStackTrace();
		}
		
//		String stdNo = barcodeViewIdNo.getText().toUpperCase();
		
		try{
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory
					("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			Students std = entitymanager.find(Students.class, stdNo);
			
			photoIdViewName.setText(std.getSurName()+ ", "+std.getOtherNames());
			
		}
		catch(Exception e) {
			photoIdViewIdNo.setText("Error: " + e.getLocalizedMessage());
			photoIdViewName.clear();
		}
		
		//view photo
		try {
			String stdId = stdNo;
			
			String jdbcUrl = dbURL;
			String username = dbUSR;
			String password = dbPWD;
			
			String sql = "SELECT * FROM stdImages WHERE stdid = ?";
			
			try(Connection conn = DriverManager.getConnection(jdbcUrl, username, password);
					){
				
				try(PreparedStatement stmt = conn.prepareStatement(sql);
						){
					stmt.setString(1, stdId);		
					
					ResultSet result = stmt.executeQuery();
					
					
					if(result.next()) {
						InputStream imageStream = result.getBinaryStream("image");
						Image img = new Image(imageStream);
						imageView2PhotoId.setImage(img);
						String stdName = result.getString("name");
						photoIdViewName.setText(stdName);
					}
					else {
						imageView2PhotoId.setImage(null);
					}
				
					result.close();
					stmt.close();
					conn.close();
				}
				catch(SQLException io) {
					photoIdViewIdNo.setText(io.getMessage());
					photoIdViewName.clear();
					imageView2PhotoId.setImage(null);
				}
			}
			catch(SQLException eq) {
				photoIdViewIdNo.setText(eq.getMessage());
				photoIdViewName.clear();
				imageView2PhotoId.setImage(null);
			}
		}
		catch(Exception e) {
			photoIdViewIdNo.setText(e.getMessage());
			photoIdViewName.clear();
			imageView2PhotoId.setImage(null);
		}
	}
	
	
	@FXML private Button printPhotoIdCardBtn, photoIdCardBtn, returnCreateButton2;
	@FXML private GridPane photoIdPane;
	
	@FXML public void printPhotoIdCardButton(ActionEvent event) {
		returnCreateButton2.setVisible(false);
		printPhotoIdCardBtn.setVisible(false);
		photoIdCardBtn.setVisible(false);
	
		try {
			printNodeNewSize(photoIdPane);
		}
		catch(Exception exception) {
			exception.printStackTrace();
			Alert alert = new Alert(Alert.AlertType.ERROR);
			alert.setContentText("Print Error. "+ exception.getMessage());
			alert.setHeaderText("ERROR");
			Optional<ButtonType> result = alert.showAndWait();
			if(result.get() == ButtonType.OK) {
				alert.close();
			}
			else {
				alert.close();
			}
		}
		finally {
			returnCreateButton2.setVisible(true);
			printPhotoIdCardBtn.setVisible(true);
			photoIdCardBtn.setVisible(true);
		}
	}
	
	
	public static void printNodeNewSize(final GridPane printPane) throws NoSuchMethodException, 
	InstantiationException, IllegalAccessException, InvocationTargetException {
	
    	Printer printer = Printer.getDefaultPrinter();
    	PageLayout pageLayout
        	= printer.createPageLayout(Paper.JAPANESE_POSTCARD, PageOrientation.PORTRAIT, Printer.MarginType.HARDWARE_MINIMUM);
    	//PrinterAttributes attr = printer.getPrinterAttributes();
	    PrinterJob job = PrinterJob.createPrinterJob();
	    double scaleX
	        = pageLayout.getPrintableWidth() / printPane.getBoundsInParent().getWidth();
	    double scaleY
	        = pageLayout.getPrintableHeight() / printPane.getBoundsInParent().getHeight();
	    Scale scale = new Scale(scaleX, scaleY);
	    printPane.getTransforms().add(scale);

	    if (job != null && job.showPrintDialog(printPane.getScene().getWindow())) {
	    	boolean success = job.printPage(pageLayout, printPane);
	    	if (success) {
	    		job.endJob();

	    	}
	    }
	    printPane.getTransforms().remove(scale);
  }
	
	
	public static void printNodeNewSize(final VBox printPane) throws NoSuchMethodException, 
	InstantiationException, IllegalAccessException, InvocationTargetException {
	
    	Printer printer = Printer.getDefaultPrinter();
    	PageLayout pageLayout
        	= printer.createPageLayout(Paper.JAPANESE_POSTCARD, PageOrientation.PORTRAIT, Printer.MarginType.HARDWARE_MINIMUM);
    	//PrinterAttributes attr = printer.getPrinterAttributes();
	    PrinterJob job = PrinterJob.createPrinterJob();
	    double scaleX
	        = pageLayout.getPrintableWidth() / printPane.getBoundsInParent().getWidth();
	    double scaleY
	        = pageLayout.getPrintableHeight() / printPane.getBoundsInParent().getHeight();
	    Scale scale = new Scale(scaleX, scaleY);
	    printPane.getTransforms().add(scale);

	    if (job != null && job.showPrintDialog(printPane.getScene().getWindow())) {
	    	boolean success = job.printPage(pageLayout, printPane);
	    	if (success) {
	    		job.endJob();

	    	}
	    }
	    printPane.getTransforms().remove(scale);
  }
	
	//Generate Barcodes to file for printing
	@FXML private TextField classBarcodeStatus, stdBarcodeId;
	@FXML private ComboBox<String> barcodeCurrentClass, barcodeStdId;
	@FXML private DatePicker barcodeEntryDate;
	@FXML private TextArea barcodeDisplayStatus;
	@FXML TableView<BarcodeClassGenDataTable> barcodeClassGenDataTable;
	@FXML TableColumn<BarcodeClassGenDataTable,String> astcSNoCol5, astcStdIdCol5, astcNameCol5, astcSexCol5,
		astcAgeCol5, astcBorderCol5, barcodeGenStatusCol;
	
//	ObservableList<String> moveCurrentList = FXCollections.observableArrayList();
//	ObservableList<String> moveNewList = FXCollections.observableArrayList();
//	ObservableList<String> moveStdList = FXCollections.observableArrayList();
	
	@FXML public void barClassComboInit(MouseEvent event) {
		populateStdClassesCombo(moveCurrentList, barcodeCurrentClass);
		
		//populate from current class
		String currentClassId = barcodeCurrentClass.getValue();
		
		ObservableList<String> data = FXCollections.observableArrayList();
		LinkedHashSet<String> set = new LinkedHashSet<>();
		try {
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			StudentClasses stds = entitymanager.find(StudentClasses.class, currentClassId);
			
			set = stds.getStdList();
			
			entitymanager.getTransaction().commit();
			entitymanager.close();
			emfactory.close();
			
		}
		catch(Exception e) {
			e.printStackTrace();
		}
		
		for(String STID : set) {
			
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			Students info = entitymanager.find(Students.class, STID);
			
			try {
				data.add(info.getId());
			}
			catch(Exception cat) {
				cat.printStackTrace();
			}
			
			entitymanager.getTransaction().commit();
			entitymanager.close();
			emfactory.close();
		}
		
		barcodeStdId.setItems(data);
	}
	
	@FXML public void cscInfoInitX3(MouseEvent event) {
		barcodeEntryDate.setValue(LocalDate.now());
	}
	
	//Generate barcode for class 
	@FXML public void genBarcode4ClassButton(ActionEvent event) {
		String bClass = barcodeCurrentClass.getValue();
		LocalDate entryDate = barcodeEntryDate.getValue();
		
		File directory = new File("C:\\BarCode\\"+bClass);
		if(!(directory.exists())) {
			directory.mkdirs();
		}
		
		LinkedHashSet<String> set = new LinkedHashSet<>();
		
		try {
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			StudentClasses stds = entitymanager.find(StudentClasses.class, bClass);
			
			set = stds.getStdList();
			
			entitymanager.getTransaction().commit();
			entitymanager.close();
			emfactory.close();
			
		}
		catch(Exception e) {
			e.printStackTrace();
		}
		
		try {
			int count = 0;
			for (String id : set) {
				try {
					String bId = id.toUpperCase().replace('/', '_');
					String barCodeData = id.toUpperCase();
					
					String filePath = "C:\\BarCode\\"+bClass+"\\" + bId + ".png";
					String charset = "UTF-8";
					
					Map<EncodeHintType, ErrorCorrectionLevel> hintMap = new HashMap<>();
					hintMap.put(EncodeHintType.ERROR_CORRECTION, ErrorCorrectionLevel.L);
					
					BitMatrix matrix = new MultiFormatWriter().encode(
						new String(barCodeData.getBytes(charset), charset), 
						BarcodeFormat.CODE_39, 250,25, hintMap);
					MatrixToImageWriter.writeToFile(matrix, filePath.substring(
						filePath.lastIndexOf('.') + 1), new File(filePath));
					count++;
				}
				catch(Exception e) {
					e.printStackTrace();
				}
			}
			barcodeDisplayStatus.setText(String.valueOf(count) + " in " + bClass+" barcodes generation successful...");
		}
		catch(Exception exx) {
			exx.printStackTrace();
		}
		
		populateBarcodeStdTable(bClass, barcodeClassGenDataTable, astcSNoCol5, astcStdIdCol5, 
				astcNameCol5, astcSexCol5, astcAgeCol5, astcBorderCol5, barcodeGenStatusCol, classBarcodeStatus);
	}
	
	//populate barcode std table
	public void populateBarcodeStdTable(String stdclassesId, TableView<BarcodeClassGenDataTable> assignStdToClassDataTable2,
			TableColumn<BarcodeClassGenDataTable,String> astcSNoCol2, TableColumn<BarcodeClassGenDataTable,String> astcStdIdCol2, 
			TableColumn<BarcodeClassGenDataTable,String> astcNameCol2, TableColumn<BarcodeClassGenDataTable,String> astcSexCol2,
			TableColumn<BarcodeClassGenDataTable,String> astcAgeCol2, TableColumn<BarcodeClassGenDataTable,String> astcBorderCol2, 
			TableColumn<BarcodeClassGenDataTable,String> astcBalanceCol2, TextField statusTxt){
		
		LinkedHashSet<String> studentList = new LinkedHashSet<>();
		ObservableList<BarcodeClassGenDataTable> data = FXCollections.observableArrayList();
	
		try {
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			StudentClasses clas = entitymanager.find(StudentClasses.class, stdclassesId);
			
			studentList = clas.getStdList();
			
			entitymanager.getTransaction().commit();
			entitymanager.close();
			emfactory.close();
			
			int i = 1;
			if(studentList.size() > 0) {
				for(String stdid : studentList) {
					
					String sNo = "", stdID = "", nameStr = "", sex = "", age = "", border = "", status = "";
					
					EntityManagerFactory emfactoryx = Persistence.createEntityManagerFactory("SchoolMgtSystem");
					EntityManager entitymanagerx = emfactoryx.createEntityManager();
					entitymanagerx.getTransaction().begin();
					
					Students std = entitymanagerx.find(Students.class, stdid);
					
					sNo = String.valueOf(i);
					stdID = stdid; 
					nameStr = std.getOtherNames()+" "+std.getSurName();
					sex = std.getSex();
					age = String.valueOf(LocalDate.now().getYear() - std.getDateOfBirth().getYear());
					border = std.getEntryBorderStatus();
					status = stdid +"'s barcode generated";
					
					try {
						data.add(new BarcodeClassGenDataTable(sNo, stdID, nameStr, sex, age, border, status));
						i = i + 1;
					}
					catch(Exception exet) {
						exet.printStackTrace();
					}
					
					entitymanagerx.getTransaction().commit();
					entitymanagerx.close();
					emfactoryx.close();
					
					astcSNoCol2.setCellValueFactory(new PropertyValueFactory("sNo_Data"));
					astcStdIdCol2.setCellValueFactory(new PropertyValueFactory("stdId_Data"));
					astcNameCol2.setCellValueFactory(new PropertyValueFactory("name_Data"));
					astcSexCol2.setCellValueFactory(new PropertyValueFactory("sex_Data"));
					astcAgeCol2.setCellValueFactory(new PropertyValueFactory("age_Data"));
					astcBorderCol2.setCellValueFactory(new PropertyValueFactory("border_Data"));
					astcBalanceCol2.setCellValueFactory(new PropertyValueFactory("barcodeStatus_Data"));
					
					assignStdToClassDataTable2.setItems(data);
				}
			}
			else {
				assignStdToClassDataTable2.setItems(null);
			}
		}
		catch(Exception ex3) {
			ex3.printStackTrace();
			assignStdToClassDataTable2.setItems(null);
		}
	}
	
	@FXML public void genBarcode4StdButton(ActionEvent event) {
		String bClass = barcodeCurrentClass.getValue();
		String stdId = barcodeStdId.getValue();
		LocalDate entryDate = barcodeEntryDate.getValue();
		
		File directory = new File("C:\\BarCode\\"+bClass);
		if(!(directory.exists())) {
			directory.mkdirs();
		}
		
		try {
			int count = 0;
			try {
				String bId = stdId.toUpperCase().replace('/', '_');
				String barCodeData = stdId.toUpperCase();
				
				String filePath = "C:\\BarCode\\"+bClass+"\\" + bId + ".png";
				String charset = "UTF-8";
				
				Map<EncodeHintType, ErrorCorrectionLevel> hintMap = new HashMap<>();
				hintMap.put(EncodeHintType.ERROR_CORRECTION, ErrorCorrectionLevel.L);
				
				BitMatrix matrix = new MultiFormatWriter().encode(
					new String(barCodeData.getBytes(charset), charset), 
					BarcodeFormat.CODE_39, 250,25, hintMap);
				MatrixToImageWriter.writeToFile(matrix, filePath.substring(
					filePath.lastIndexOf('.') + 1), new File(filePath));
				count++;
			}
			catch(Exception e) {
				e.printStackTrace();
			}
			barcodeDisplayStatus.setText(String.valueOf(count) + " in " + bClass+" barcodes generation successful...");
		}
		catch(Exception exx) {
			exx.printStackTrace();
		}
		
		stdBarcodeId.setText(stdId + "'s barcode generated"); 
		
	}
	
	//Barcode Reader input from barcode scanner
	@FXML private TextField barcodeEnqInput, barcodeEnqIdNo, barcodeEnqSex, barcodeEnqAge, barcodeEnqClass, barcodeEnqYear, 
		barcodeEnqTerm, barcodeEnqBalance, barcodeEnqName;
	@FXML private TextArea barcodeEnqStatus;
	@FXML private ImageView barcodeEnqImageView;
	
	@FXML public void barcodeEnqDetailsInit(KeyEvent event) {
		
		String bcInput = barcodeEnqInput.getText();
		if(bcInput.trim().length() != 0 && !bcInput.contains("Error") && 
				!bcInput.contains("null")) {
			
			if(event.getCode() == KeyCode.ENTER) {
				//String bcInput = barcodeEnqInput.getText();
				barcodeEnqIdNo.setText(bcInput);
				
				String soundStatus = "";
				double soundBal = 0;
				LocalDateTime dateTime = LocalDateTime.now();
				LocalDate date = dateTime.toLocalDate();
				String stdNo = barcodeEnqIdNo.getText();
				String bsId = stdNo + date;
				String surName = "", otherNames = "", stdClass = ""; 
				double balance = 0.0;
				String concessionStatus = "";
				LocalDate concPayDate = null;
				
				try{
					EntityManagerFactory emfactory = Persistence.createEntityManagerFactory
							("SchoolMgtSystem");
					EntityManager entitymanager = emfactory.createEntityManager();
					entitymanager.getTransaction().begin();
					
					Students std = entitymanager.find(Students.class, stdNo);
					
					barcodeEnqName.setText(std.getSurName()+ ", "+std.getOtherNames());
					barcodeEnqSex.setText(std.getSex());
					
					surName = std.getSurName();
					otherNames = std.getOtherNames();
					stdClass = std.getEntryClassAssigned();
					
					String cid = stdNo + stdClass;
					try {
						EntityManagerFactory emfactoryr = Persistence.createEntityManagerFactory
								("SchoolMgtSystem");
						EntityManager entitymanagerr = emfactoryr.createEntityManager();
						entitymanagerr.getTransaction().begin();
						FeeConcession conc = entitymanagerr.find(FeeConcession.class, cid);
						
						concessionStatus = conc.getConcessionStatus();
						concPayDate = conc.getExpectedPayDate();
						
						entitymanagerr.getTransaction().commit();
						entitymanagerr.close();
						emfactoryr.close();
					}
					catch(Exception e) {
						e.printStackTrace();
					}
					
					soundStatus = std.getStatus();
			
					LocalDate dateAgeStr2 = std.getDateOfBirth();
					LocalDate currentDateStr = LocalDate.now();
					int diffDateStr = currentDateStr.getYear() - dateAgeStr2.getYear();
					barcodeEnqAge.setText(String.valueOf(diffDateStr));
					
					if(std.getStatus().equalsIgnoreCase("Suspended") || 
							std.getStatus().equalsIgnoreCase("Rusticated")) {
						EntityManagerFactory emfactoryq = Persistence.createEntityManagerFactory
								("SchoolMgtSystem");
						EntityManager entitymanagerq = emfactoryq.createEntityManager();
						entitymanagerq.getTransaction().begin();
						SuspensionEntry entry = entitymanagerq.find(SuspensionEntry.class, stdNo);
						
						String msg = entry.getSuspendTextFlow().getLast();
						
						barcodeEnqStatus.setText(std.getStatus()+" ("+msg+")");
						
						entitymanagerq.getTransaction().commit();
						entitymanagerq.close();
						emfactoryq.close();
					}
					else {
						barcodeEnqStatus.setText(std.getStatus());
					}
					
					String classId = std.getEntryClassAssigned();
					
					EntityManagerFactory emfactory2 = Persistence.createEntityManagerFactory
							("SchoolMgtSystem");
					EntityManager entitymanager2 = emfactory2.createEntityManager();
					entitymanager2.getTransaction().begin();
					
					StudentClasses clas = entitymanager2.find(StudentClasses.class, classId);
					
					barcodeEnqClass.setText(clas.getClassNo()+clas.getClassLetter());
					barcodeEnqYear.setText(clas.getYear());
					barcodeEnqTerm.setText(clas.getTerm());
					
					entitymanager2.getTransaction().commit();
					entitymanager2.close();
					emfactory2.close();
					
					EntityManagerFactory emfactory3 = Persistence.createEntityManagerFactory
							("SchoolMgtSystem");
					EntityManager entitymanager3 = emfactory3.createEntityManager();
					entitymanager3.getTransaction().begin();
					
					AccountBalance bal = entitymanager3.find(AccountBalance.class, stdNo);
					
					barcodeEnqBalance.setText(fm2.format(bal.getBalance()));
					
					if(bal.getBalance() < 0) {
						barcodeEnqBalance.setStyle("-fX-text-fill: red;");
					}
					else if(bal.getBalance() == 0) {
						barcodeEnqBalance.setStyle("-fX-text-fill: blue;");
					}
					else {
						barcodeEnqBalance.setStyle("-fX-text-fill: black;");
					}
					
					soundBal = bal.getBalance();
					balance = bal.getBalance();
					
					entitymanager3.getTransaction().commit();
					entitymanager3.close();
					emfactory3.close();
					
					entitymanager.getTransaction().commit();
					entitymanager.close();
					emfactory.close();
					
				}
				catch(Exception e) {
					//barcodeEnqIdNo.setText("Error: " + e.getLocalizedMessage());
					e.printStackTrace();
					barcodeEnqName.clear();
					barcodeEnqSex.clear();
					barcodeEnqAge.clear();
					barcodeEnqClass.clear();
					barcodeEnqYear.clear();
					barcodeEnqTerm.clear();
					barcodeEnqBalance.clear();
				}
				
				//view photo
				try {
					String stdId = stdNo; // barcodeEnqIdNo.getText();
					
					String jdbcUrl = dbURL;
					String username = dbUSR;
					String password = dbPWD;
					
					String sql = "SELECT * FROM stdImages WHERE stdid = ?";
					
					try(Connection conn = DriverManager.getConnection(jdbcUrl, username, password);
							){
						
						try(PreparedStatement stmt = conn.prepareStatement(sql);
								){
							stmt.setString(1, stdId);		
							
							ResultSet result = stmt.executeQuery();
							
							
							if(result.next()) {
								InputStream imageStream = result.getBinaryStream("image");
								Image img = new Image(imageStream);
								barcodeEnqImageView.setImage(img);
								String stdName = result.getString("name");
								barcodeEnqName.setText(stdName);
							}
							else {
								barcodeEnqImageView.setImage(null);
							}
						
							result.close();
							stmt.close();
							conn.close();
						}
						catch(SQLException io) {
							//barcodeEnqIdNo.setText(io.getMessage());
							io.printStackTrace();
							barcodeEnqName.clear();
							barcodeEnqImageView.setImage(null);
						}
					}
					catch(SQLException eq) {
						//barcodeEnqIdNo.setText(eq.getMessage());
						eq.printStackTrace();
						barcodeEnqName.clear();
						barcodeEnqImageView.setImage(null);
					}
					
					//clear barcode input
					barcodeEnqInput.clear();
				}
				catch(Exception e) {
					//barcodeEnqIdNo.setText(e.getMessage());
					e.printStackTrace();
					barcodeEnqName.clear();
					barcodeEnqImageView.setImage(null);
				}
				
				LinkedHashSet<String> DataId = new LinkedHashSet<>();
				
				final String JDBC_Driver2 = "com.mysql.jdbc.Driver";
				final String DB_URL2 = dbURL;
				final String DB_User2 = dbUSR;
				final String DB_PWD2 = dbPWD;
				
				
				Connection conn2 = null;
				PreparedStatement stmt2 = null;
				
				try {
					Class.forName(JDBC_Driver2);
					conn2 = DriverManager.getConnection(DB_URL2, DB_User2, DB_PWD2);
					
					String sql;
					sql = "SELECT * FROM BarcodeScannedGate WHERE Date = ?";
					
					stmt2 = conn2.prepareStatement(sql);
				
					Date date2 = Date.valueOf(date);
					stmt2.setDate(1, date2);
					
					ResultSet rs2 = stmt2.executeQuery();
					
					
					while(rs2.next()) {
						DataId.add(rs2.getString("STDNO"));
					}
					rs2.close();
					stmt2.close();
					conn2.close();
				}
				catch(SQLException es) {
					//studentNumberTF.setText("Error JDBC: "+ es.getSQLState());
					es.printStackTrace();
				}
				catch(Exception es2) {
					//studentNumberTF.setText("Error JDBC: "+ es2.getMessage());
					es2.printStackTrace();
				}
				finally {
					try {
						if(stmt2 != null ) {
							stmt2.close();
						}
					}
					catch(SQLException ces) {
						//studentNumberTF.setText("Error JDBC: "+ ces.getSQLState());
						ces.printStackTrace();
					}
					try {
						if(conn2 != null ) {
							conn2.close();
						}
					}
					catch(Exception ces2) {
						//studentNumberTF.setText("JDBC: "+ces2.getMessage());
						ces2.printStackTrace();
					}
					
				}
				if(soundBal < 0 && soundStatus.equalsIgnoreCase("Regular") && 
						concessionStatus.equals("Activate") && 
						date.toEpochDay() <= concPayDate.toEpochDay()) {
					try {
						sound(400,300);
						
						String status = "Approved";
						String reason = "Concession and Regular";
						
						try {
							
							if(DataId.contains(stdNo)) {
								sound(1000,2000);
								Alert alert = new Alert(Alert.AlertType.ERROR);
								alert.setContentText("This Student: "+ stdNo + " has already been scanned today...");
								Optional<ButtonType> result = alert.showAndWait();
								if(result.get() == ButtonType.OK) {
									alert.close();
								}
								else {
									alert.close();
								}
								
							}
							else {
								CreateBarcodeScannedGate scanned = new CreateBarcodeScannedGate();
								
								if(validateStdNo(stdNo)) {
									scanned.createBarcodeScannedGate(bsId, stdNo, surName, otherNames, balance, date, dateTime, 
											stdClass, dispName, status, reason);
								}
							}
							
						}
						catch(Exception bc) {
							Alert alert = new Alert(Alert.AlertType.ERROR);
							alert.setContentText("Error: "+ bc.getMessage());
							Optional<ButtonType> result = alert.showAndWait();
							if(result.get() == ButtonType.OK) {
								alert.close();
							}
							else {
								alert.close();
							}
						}
					}
					catch(Exception e) {
						e.printStackTrace();
					}
				}
				else if(soundBal >= 0 && soundStatus.equalsIgnoreCase("Regular")) {
					try {
						sound(400,300);
						
						String status = "Approved";
						String reason = "Paid and Regular";
						
						try {
							
							if(DataId.contains(stdNo)) {
								sound(1000,2000);
								Alert alert = new Alert(Alert.AlertType.ERROR);
								alert.setContentText("This Student: "+ stdNo + " has already been scanned today...");
								Optional<ButtonType> result = alert.showAndWait();
								if(result.get() == ButtonType.OK) {
									alert.close();
								}
								else {
									alert.close();
								}
								
							}
							else {
								CreateBarcodeScannedGate scanned = new CreateBarcodeScannedGate();
								
								if(validateStdNo(stdNo)) {
									scanned.createBarcodeScannedGate(bsId, stdNo, surName, otherNames, balance, date, dateTime, 
											stdClass, dispName, status, reason);
								}
							}
							
						}
						catch(Exception bc) {
							Alert alert = new Alert(Alert.AlertType.ERROR);
							alert.setContentText("Error: "+ bc.getMessage());
							Optional<ButtonType> result = alert.showAndWait();
							if(result.get() == ButtonType.OK) {
								alert.close();
							}
							else {
								alert.close();
							}
						}
					}
					catch(Exception e) {
						e.printStackTrace();
					}
				}
				else if(soundBal < 0 && soundStatus.equalsIgnoreCase("Regular")) {
					try {
						
						sound(600,1000);
						
						String status = "Declined";
						String reason = "Not Paid and Regular";
						
						try {
							
							if(DataId.contains(stdNo)) {
								sound(1000,2000);
								Alert alert = new Alert(Alert.AlertType.ERROR);
								alert.setContentText("This Student: "+ stdNo + " has already been scanned today...");
								Optional<ButtonType> result = alert.showAndWait();
								if(result.get() == ButtonType.OK) {
									alert.close();
								}
								else {
									alert.close();
								}
								
							}
							else {
								CreateBarcodeScannedGate scanned = new CreateBarcodeScannedGate();
								
								if(validateStdNo(stdNo)) {
									scanned.createBarcodeScannedGate(bsId, stdNo, surName, otherNames, balance, date, dateTime, 
											stdClass, dispName, status, reason);
								}
							}
							
						}
						catch(Exception bc) {
							Alert alert = new Alert(Alert.AlertType.ERROR);
							alert.setContentText("Error: "+ bc.getMessage());
							Optional<ButtonType> result = alert.showAndWait();
							if(result.get() == ButtonType.OK) {
								alert.close();
							}
							else {
								alert.close();
							}
						}
					}
					catch(Exception e) {
						e.printStackTrace();
					}
				}
				else {
					try {
						sound(800,1500);
						
						String status = "Declined";
						String reason = "Irregular";
						
						try {
							
							if(DataId.contains(stdNo)) {
								sound(1000,2000);
								Alert alert = new Alert(Alert.AlertType.ERROR);
								alert.setContentText("This Student: "+ stdNo + " has already been scanned today...");
								Optional<ButtonType> result = alert.showAndWait();
								if(result.get() == ButtonType.OK) {
									alert.close();
								}
								else {
									alert.close();
								}
								
							}
							else {
								CreateBarcodeScannedGate scanned = new CreateBarcodeScannedGate();
								
								if(validateStdNo(stdNo)) {
									scanned.createBarcodeScannedGate(bsId, stdNo, surName, otherNames, balance, date, dateTime, 
											stdClass, dispName, status, reason);
								}
							}
							
						}
						catch(Exception bc) {
							Alert alert = new Alert(Alert.AlertType.ERROR);
							alert.setContentText("Error: "+ bc.getMessage());
							Optional<ButtonType> result = alert.showAndWait();
							if(result.get() == ButtonType.OK) {
								alert.close();
							}
							else {
								alert.close();
							}
						}
					}
					catch(Exception e) {
						e.printStackTrace();
					}
				}
				
			}
			
		}
	}
	
	@FXML public void submitBarcodeEnqViewButton(ActionEvent event) {
		
		String bcInput = barcodeEnqInput.getText();
		if(bcInput.trim().length() != 0 && !bcInput.contains("Error") && 
				!bcInput.contains("null")) {
			
			barcodeEnqIdNo.setText(bcInput);
			
			String soundStatus = "";
			double soundBal = 0;
			LocalDateTime dateTime = LocalDateTime.now();
			LocalDate date = dateTime.toLocalDate();
			String stdNo = barcodeEnqIdNo.getText();
			String bsId = stdNo + date;
			String surName = "", otherNames = "", stdClass = ""; 
			double balance = 0.0; 
			String concessionStatus = "";
			LocalDate concPayDate = null;
			
			try{
				EntityManagerFactory emfactory = Persistence.createEntityManagerFactory
						("SchoolMgtSystem");
				EntityManager entitymanager = emfactory.createEntityManager();
				entitymanager.getTransaction().begin();
				
				Students std = entitymanager.find(Students.class, stdNo);
				
				barcodeEnqName.setText(std.getSurName()+ ", "+std.getOtherNames());
				barcodeEnqSex.setText(std.getSex());
				
				surName = std.getSurName();
				otherNames = std.getOtherNames();
				stdClass = std.getEntryClassAssigned();
				
				String cid = stdNo + stdClass;
				try {
					EntityManagerFactory emfactoryr = Persistence.createEntityManagerFactory
							("SchoolMgtSystem");
					EntityManager entitymanagerr = emfactoryr.createEntityManager();
					entitymanagerr.getTransaction().begin();
					FeeConcession conc = entitymanagerr.find(FeeConcession.class, cid);
					
					concessionStatus = conc.getConcessionStatus();
					concPayDate = conc.getExpectedPayDate();
					
					entitymanagerr.getTransaction().commit();
					entitymanagerr.close();
					emfactoryr.close();
				}
				catch(Exception e) {
					e.printStackTrace();
				}
				
				soundStatus = std.getStatus();
		
				LocalDate dateAgeStr2 = std.getDateOfBirth();
				LocalDate currentDateStr = LocalDate.now();
				int diffDateStr = currentDateStr.getYear() - dateAgeStr2.getYear();
				barcodeEnqAge.setText(String.valueOf(diffDateStr));
				
				if(std.getStatus().equalsIgnoreCase("Suspended") || 
						std.getStatus().equalsIgnoreCase("Rusticated")) {
					EntityManagerFactory emfactoryq = Persistence.createEntityManagerFactory
							("SchoolMgtSystem");
					EntityManager entitymanagerq = emfactoryq.createEntityManager();
					entitymanagerq.getTransaction().begin();
					SuspensionEntry entry = entitymanagerq.find(SuspensionEntry.class, stdNo);
					
					String msg = entry.getSuspendTextFlow().getLast();
					
					barcodeEnqStatus.setText(std.getStatus()+" ("+msg+")");
					
					entitymanagerq.getTransaction().commit();
					entitymanagerq.close();
					emfactoryq.close();
				}
				else {
					barcodeEnqStatus.setText(std.getStatus());
				}
				
				String classId = std.getEntryClassAssigned();
				
				EntityManagerFactory emfactory2 = Persistence.createEntityManagerFactory
						("SchoolMgtSystem");
				EntityManager entitymanager2 = emfactory2.createEntityManager();
				entitymanager2.getTransaction().begin();
				
				StudentClasses clas = entitymanager2.find(StudentClasses.class, classId);
				
				barcodeEnqClass.setText(clas.getClassNo()+clas.getClassLetter());
				barcodeEnqYear.setText(clas.getYear());
				barcodeEnqTerm.setText(clas.getTerm());
				
				entitymanager2.getTransaction().commit();
				entitymanager2.close();
				emfactory2.close();
				
				EntityManagerFactory emfactory3 = Persistence.createEntityManagerFactory
						("SchoolMgtSystem");
				EntityManager entitymanager3 = emfactory3.createEntityManager();
				entitymanager3.getTransaction().begin();
				
				AccountBalance bal = entitymanager3.find(AccountBalance.class, stdNo);
				
				barcodeEnqBalance.setText(fm2.format(bal.getBalance()));
				
				if(bal.getBalance() < 0) {
					barcodeEnqBalance.setStyle("-fX-text-fill: red;");
				}
				else if(bal.getBalance() == 0) {
					barcodeEnqBalance.setStyle("-fX-text-fill: blue;");
				}
				else {
					barcodeEnqBalance.setStyle("-fX-text-fill: black;");
				}
				
				soundBal = bal.getBalance();
				balance = bal.getBalance();
				
				entitymanager3.getTransaction().commit();
				entitymanager3.close();
				emfactory3.close();
				
				entitymanager.getTransaction().commit();
				entitymanager.close();
				emfactory.close();
				
			}
			catch(Exception e) {
				//barcodeEnqIdNo.setText("Error: " + e.getLocalizedMessage());
				e.printStackTrace();
				barcodeEnqName.clear();
				barcodeEnqSex.clear();
				barcodeEnqAge.clear();
				barcodeEnqClass.clear();
				barcodeEnqYear.clear();
				barcodeEnqTerm.clear();
				barcodeEnqBalance.clear();
			}
			
			//view photo
			try {
				String stdId = stdNo; // barcodeEnqIdNo.getText();
				
				String jdbcUrl = dbURL;
				String username = dbUSR;
				String password = dbPWD;
				
				String sql = "SELECT * FROM stdImages WHERE stdid = ?";
				
				try(Connection conn = DriverManager.getConnection(jdbcUrl, username, password);
						){
					
					try(PreparedStatement stmt = conn.prepareStatement(sql);
							){
						stmt.setString(1, stdId);		
						
						ResultSet result = stmt.executeQuery();
						
						
						if(result.next()) {
							InputStream imageStream = result.getBinaryStream("image");
							Image img = new Image(imageStream);
							barcodeEnqImageView.setImage(img);
							String stdName = result.getString("name");
							barcodeEnqName.setText(stdName);
						}
						else {
							barcodeEnqImageView.setImage(null);
						}
					
						result.close();
						stmt.close();
						conn.close();
					}
					catch(SQLException io) {
						//barcodeEnqIdNo.setText(io.getMessage());
						io.printStackTrace();
						barcodeEnqName.clear();
						barcodeEnqImageView.setImage(null);
					}
				}
				catch(SQLException eq) {
					//barcodeEnqIdNo.setText(eq.getMessage());
					eq.printStackTrace();
					barcodeEnqName.clear();
					barcodeEnqImageView.setImage(null);
				}
				
				//clear barcode input
				barcodeEnqInput.clear();
			}
			catch(Exception e) {
				//barcodeEnqIdNo.setText(e.getMessage());
				e.printStackTrace();
				barcodeEnqName.clear();
				barcodeEnqImageView.setImage(null);
			}
			
			LinkedHashSet<String> DataId = new LinkedHashSet<>();
			
			final String JDBC_Driver2 = "com.mysql.jdbc.Driver";
			final String DB_URL2 = dbURL;
			final String DB_User2 = dbUSR;
			final String DB_PWD2 = dbPWD;
			
			
			Connection conn2 = null;
			PreparedStatement stmt2 = null;
			
			try {
				Class.forName(JDBC_Driver2);
				conn2 = DriverManager.getConnection(DB_URL2, DB_User2, DB_PWD2);
				
				String sql;
				sql = "SELECT * FROM BarcodeScannedGate WHERE Date = ?";
				
				stmt2 = conn2.prepareStatement(sql);
			
				Date date2 = Date.valueOf(date);
				stmt2.setDate(1, date2);
				
				ResultSet rs2 = stmt2.executeQuery();
				
				
				while(rs2.next()) {
					DataId.add(rs2.getString("STDNO"));
				}
				rs2.close();
				stmt2.close();
				conn2.close();
			}
			catch(SQLException es) {
				//studentNumberTF.setText("Error JDBC: "+ es.getSQLState());
				es.printStackTrace();
			}
			catch(Exception es2) {
				//studentNumberTF.setText("Error JDBC: "+ es2.getMessage());
				es2.printStackTrace();
			}
			finally {
				try {
					if(stmt2 != null ) {
						stmt2.close();
					}
				}
				catch(SQLException ces) {
					//studentNumberTF.setText("Error JDBC: "+ ces.getSQLState());
					ces.printStackTrace();
				}
				try {
					if(conn2 != null ) {
						conn2.close();
					}
				}
				catch(Exception ces2) {
					//studentNumberTF.setText("JDBC: "+ces2.getMessage());
					ces2.printStackTrace();
				}
				
			}
			
			if(soundBal < 0 && soundStatus.equalsIgnoreCase("Regular") && 
					concessionStatus.equals("Activate") && 
					date.toEpochDay() <= concPayDate.toEpochDay()) {
				try {
					sound(400,300);
					
					String status = "Approved";
					String reason = "Concession and Regular";
					
					try {
						
						if(DataId.contains(stdNo)) {
							sound(1000,2000);
							Alert alert = new Alert(Alert.AlertType.ERROR);
							alert.setContentText("This Student: "+ stdNo + " has already been scanned today...");
							Optional<ButtonType> result = alert.showAndWait();
							if(result.get() == ButtonType.OK) {
								alert.close();
							}
							else {
								alert.close();
							}
							
						}
						else {
							CreateBarcodeScannedGate scanned = new CreateBarcodeScannedGate();
							
							if(validateStdNo(stdNo)) {
								scanned.createBarcodeScannedGate(bsId, stdNo, surName, otherNames, balance, date, dateTime, 
										stdClass, dispName, status, reason);
							}
						}
						
					}
					catch(Exception bc) {
						Alert alert = new Alert(Alert.AlertType.ERROR);
						alert.setContentText("Error: "+ bc.getMessage());
						Optional<ButtonType> result = alert.showAndWait();
						if(result.get() == ButtonType.OK) {
							alert.close();
						}
						else {
							alert.close();
						}
					}
				}
				catch(Exception e) {
					e.printStackTrace();
				}
			}
			else if(soundBal >= 0 && soundStatus.equalsIgnoreCase("Regular")) {
				try {
					sound(400,300);
					
					String status = "Approved";
					String reason = "Paid and Regular";
					
					try {
						
						if(DataId.contains(stdNo)) {
							sound(1000,2000);
							Alert alert = new Alert(Alert.AlertType.ERROR);
							alert.setContentText("This Student: "+ stdNo + " has already been scanned today...");
							Optional<ButtonType> result = alert.showAndWait();
							if(result.get() == ButtonType.OK) {
								alert.close();
							}
							else {
								alert.close();
							}
							
						}
						else {
							CreateBarcodeScannedGate scanned = new CreateBarcodeScannedGate();
							
							if(validateStdNo(stdNo)) {
								scanned.createBarcodeScannedGate(bsId, stdNo, surName, otherNames, balance, date, dateTime, 
										stdClass, dispName, status, reason);
							}
							
						}
						
					}
					catch(Exception bc) {
						Alert alert = new Alert(Alert.AlertType.ERROR);
						alert.setContentText("Error: "+ bc.getMessage());
						Optional<ButtonType> result = alert.showAndWait();
						if(result.get() == ButtonType.OK) {
							alert.close();
						}
						else {
							alert.close();
						}
					}
				}
				catch(Exception e) {
					e.printStackTrace();
				}
			}
			else if(soundBal < 0 && soundStatus.equalsIgnoreCase("Regular")) {
				try {
					
					sound(600,1000);
					
					String status = "Declined";
					String reason = "Not Paid and Regular";
					
					try {
						
						if(DataId.contains(stdNo)) {
							sound(1000,2000);
							Alert alert = new Alert(Alert.AlertType.ERROR);
							alert.setContentText("This Student: "+ stdNo + " has already been scanned today...");
							Optional<ButtonType> result = alert.showAndWait();
							if(result.get() == ButtonType.OK) {
								alert.close();
							}
							else {
								alert.close();
							}
							
						}
						else {
							CreateBarcodeScannedGate scanned = new CreateBarcodeScannedGate();
							
							if(validateStdNo(stdNo)) {
								scanned.createBarcodeScannedGate(bsId, stdNo, surName, otherNames, balance, date, dateTime, 
										stdClass, dispName, status, reason);
							}
							
						}
						
					}
					catch(Exception bc) {
						Alert alert = new Alert(Alert.AlertType.ERROR);
						alert.setContentText("Error: "+ bc.getMessage());
						Optional<ButtonType> result = alert.showAndWait();
						if(result.get() == ButtonType.OK) {
							alert.close();
						}
						else {
							alert.close();
						}
					}
				}
				catch(Exception e) {
					e.printStackTrace();
				}
			}
			else {
				try {
					sound(800,1500);
					
					String status = "Declined";
					String reason = "Irregular";
					
					try {
						
						if(DataId.contains(stdNo)) {
							sound(1000,2000);
							Alert alert = new Alert(Alert.AlertType.ERROR);
							alert.setContentText("This Student: "+ stdNo + " has already been scanned today...");
							Optional<ButtonType> result = alert.showAndWait();
							if(result.get() == ButtonType.OK) {
								alert.close();
							}
							else {
								alert.close();
							}
							
						}
						else {
							CreateBarcodeScannedGate scanned = new CreateBarcodeScannedGate();
							
							if(validateStdNo(stdNo)) {
								scanned.createBarcodeScannedGate(bsId, stdNo, surName, otherNames, balance, date, dateTime, 
										stdClass, dispName, status, reason);
							}
							
						}
						
					}
					catch(Exception bc) {
						Alert alert = new Alert(Alert.AlertType.ERROR);
						alert.setContentText("Error: "+ bc.getMessage());
						Optional<ButtonType> result = alert.showAndWait();
						if(result.get() == ButtonType.OK) {
							alert.close();
						}
						else {
							alert.close();
						}
					}
				}
				catch(Exception e) {
					e.printStackTrace();
				}
			}
			
		}		
	}
	
	//Barcode Special Attendance - Director
	@FXML private TextField barcodeEnqInput2, barcodeEnqIdNo2, barcodeEnqSex2, barcodeEnqAge2, barcodeEnqClass2, barcodeEnqYear2, 
		barcodeEnqTerm2, barcodeEnqBalance2, barcodeEnqName2;
	@FXML private TextArea barcodeEnqStatus2;
	@FXML private ImageView barcodeEnqImageView2;
	
	@FXML public void barcodeEnqDetailsInit2(KeyEvent event) {
		
		String bcInput = barcodeEnqInput2.getText();
		if(bcInput.trim().length() != 0 && !bcInput.contains("Error") && 
				!bcInput.contains("null")) {
			
			if(event.getCode() == KeyCode.ENTER) {
				barcodeEnqIdNo2.setText(bcInput);
				
				String soundStatus = "";
				double soundBal = 0;
				LocalDateTime dateTime = LocalDateTime.now();
				LocalDate date = dateTime.toLocalDate();
				String stdNo = barcodeEnqIdNo2.getText();
				String bsId = stdNo + date;
				String surName = "", otherNames = "", stdClass = ""; 
				double balance = 0.0; 
				
				try{
					EntityManagerFactory emfactory = Persistence.createEntityManagerFactory
							("SchoolMgtSystem");
					EntityManager entitymanager = emfactory.createEntityManager();
					entitymanager.getTransaction().begin();
					
					Students std = entitymanager.find(Students.class, stdNo);
					
					barcodeEnqName2.setText(std.getSurName()+ ", "+std.getOtherNames());
					barcodeEnqSex2.setText(std.getSex());
					
					surName = std.getSurName();
					otherNames = std.getOtherNames();
					stdClass = std.getEntryClassAssigned();
					
					soundStatus = std.getStatus();
			
					LocalDate dateAgeStr2 = std.getDateOfBirth();
					LocalDate currentDateStr = LocalDate.now();
					int diffDateStr = currentDateStr.getYear() - dateAgeStr2.getYear();
					barcodeEnqAge2.setText(String.valueOf(diffDateStr));
					
					if(std.getStatus().equalsIgnoreCase("Suspended") || 
							std.getStatus().equalsIgnoreCase("Rusticated")) {
						EntityManagerFactory emfactoryq = Persistence.createEntityManagerFactory
								("SchoolMgtSystem");
						EntityManager entitymanagerq = emfactoryq.createEntityManager();
						entitymanagerq.getTransaction().begin();
						SuspensionEntry entry = entitymanagerq.find(SuspensionEntry.class, stdNo);
						
						String msg = entry.getSuspendTextFlow().getLast();
						
						barcodeEnqStatus2.setText(std.getStatus()+" ("+msg+")");
						
						entitymanagerq.getTransaction().commit();
						entitymanagerq.close();
						emfactoryq.close();
					}
					else {
						barcodeEnqStatus2.setText(std.getStatus());
					}
					
					String classId = std.getEntryClassAssigned();
					
					EntityManagerFactory emfactory2 = Persistence.createEntityManagerFactory
							("SchoolMgtSystem");
					EntityManager entitymanager2 = emfactory2.createEntityManager();
					entitymanager2.getTransaction().begin();
					
					StudentClasses clas = entitymanager2.find(StudentClasses.class, classId);
					
					barcodeEnqClass2.setText(clas.getClassNo()+clas.getClassLetter());
					barcodeEnqYear2.setText(clas.getYear());
					barcodeEnqTerm2.setText(clas.getTerm());
					
					entitymanager2.getTransaction().commit();
					entitymanager2.close();
					emfactory2.close();
					
					EntityManagerFactory emfactory3 = Persistence.createEntityManagerFactory
							("SchoolMgtSystem");
					EntityManager entitymanager3 = emfactory3.createEntityManager();
					entitymanager3.getTransaction().begin();
					
					AccountBalance bal = entitymanager3.find(AccountBalance.class, stdNo);
					
					barcodeEnqBalance2.setText(fm2.format(bal.getBalance()));
					
					if(bal.getBalance() < 0) {
						barcodeEnqBalance2.setStyle("-fX-text-fill: red;");
					}
					else if(bal.getBalance() == 0) {
						barcodeEnqBalance2.setStyle("-fX-text-fill: blue;");
					}
					else {
						barcodeEnqBalance2.setStyle("-fX-text-fill: black;");
					}
					
					soundBal = bal.getBalance();
					balance = bal.getBalance();
					
					entitymanager3.getTransaction().commit();
					entitymanager3.close();
					emfactory3.close();
					
					entitymanager.getTransaction().commit();
					entitymanager.close();
					emfactory.close();
					
				}
				catch(Exception e) {
					e.printStackTrace();
					barcodeEnqName2.clear();
					barcodeEnqSex2.clear();
					barcodeEnqAge2.clear();
					barcodeEnqClass2.clear();
					barcodeEnqYear2.clear();
					barcodeEnqTerm2.clear();
					barcodeEnqBalance2.clear();
				}
				
				//view photo
				try {
					String stdId = stdNo; // barcodeEnqIdNo.getText();
					
					String jdbcUrl = dbURL;
					String username = dbUSR;
					String password = dbPWD;
					
					String sql = "SELECT * FROM stdImages WHERE stdid = ?";
					
					try(Connection conn = DriverManager.getConnection(jdbcUrl, username, password);
							){
						
						try(PreparedStatement stmt = conn.prepareStatement(sql);
								){
							stmt.setString(1, stdId);		
							
							ResultSet result = stmt.executeQuery();
							
							
							if(result.next()) {
								InputStream imageStream = result.getBinaryStream("image");
								Image img = new Image(imageStream);
								barcodeEnqImageView2.setImage(img);
								String stdName = result.getString("name");
								barcodeEnqName2.setText(stdName);
							}
							else {
								barcodeEnqImageView2.setImage(null);
							}
						
							result.close();
							stmt.close();
							conn.close();
						}
						catch(SQLException io) {
							//barcodeEnqIdNo.setText(io.getMessage());
							io.printStackTrace();
							barcodeEnqName2.clear();
							barcodeEnqImageView2.setImage(null);
						}
					}
					catch(SQLException eq) {
						//barcodeEnqIdNo.setText(eq.getMessage());
						eq.printStackTrace();
						barcodeEnqName2.clear();
						barcodeEnqImageView2.setImage(null);
					}
					
					//clear barcode input
					barcodeEnqInput2.clear();
				}
				catch(Exception e) {
					//barcodeEnqIdNo.setText(e.getMessage());
					e.printStackTrace();
					barcodeEnqName2.clear();
					barcodeEnqImageView2.setImage(null);
				}
				
//				LinkedHashSet<String> DataId = new LinkedHashSet<>();
//				
//				final String JDBC_Driver2 = "com.mysql.jdbc.Driver";
//				final String DB_URL2 = dbURL;
//				final String DB_User2 = dbUSR;
//				final String DB_PWD2 = dbPWD;
//				
//				
//				Connection conn2 = null;
//				PreparedStatement stmt2 = null;
//				
//				try {
//					Class.forName(JDBC_Driver2);
//					conn2 = DriverManager.getConnection(DB_URL2, DB_User2, DB_PWD2);
//					
//					String sql;
//					sql = "SELECT * FROM BarcodeScannedGate WHERE Date = ?";
//					
//					stmt2 = conn2.prepareStatement(sql);
//				
//					Date date2 = Date.valueOf(date);
//					stmt2.setDate(1, date2);
//					
//					ResultSet rs2 = stmt2.executeQuery();
//					
//					
//					while(rs2.next()) {
//						DataId.add(rs2.getString("STDNO"));
//					}
//					rs2.close();
//					stmt2.close();
//					conn2.close();
//				}
//				catch(SQLException es) {
//					//studentNumberTF.setText("Error JDBC: "+ es.getSQLState());
//					es.printStackTrace();
//				}
//				catch(Exception es2) {
//					//studentNumberTF.setText("Error JDBC: "+ es2.getMessage());
//					es2.printStackTrace();
//				}
//				finally {
//					try {
//						if(stmt2 != null ) {
//							stmt2.close();
//						}
//					}
//					catch(SQLException ces) {
//						//studentNumberTF.setText("Error JDBC: "+ ces.getSQLState());
//						ces.printStackTrace();
//					}
//					try {
//						if(conn2 != null ) {
//							conn2.close();
//						}
//					}
//					catch(Exception ces2) {
//						//studentNumberTF.setText("JDBC: "+ces2.getMessage());
//						ces2.printStackTrace();
//					}
//					
//				}
				
				if(soundBal >= 0 && soundStatus.equalsIgnoreCase("Regular")) {
					try {
						sound(400,300);
						
						String status = "Approved";
						String reason = "Paid and Regular";
						
						try {
							
							CreateBarcodeScannedSpecial scanned = new CreateBarcodeScannedSpecial();
							
							if(validateStdNo(stdNo)) {
								scanned.createBarcodeScannedSpecial(bsId, stdNo, surName, otherNames, balance, date, dateTime, 
										stdClass, dispName, status, reason);
							}
							
						}
						catch(Exception bc) {
							bc.printStackTrace();
//							Alert alert = new Alert(Alert.AlertType.ERROR);
//							alert.setContentText("Error: "+ bc.getMessage());
//							Optional<ButtonType> result = alert.showAndWait();
//							if(result.get() == ButtonType.OK) {
//								alert.close();
//							}
//							else {
//								alert.close();
//							}
						}
					}
					catch(Exception e) {
						e.printStackTrace();
					}
				}
				else if(soundBal < 0 && soundStatus.equalsIgnoreCase("Regular")) {
					try {
						
						sound(600,1000);
						
						String status = "Declined";
						String reason = "Not Paid and Regular";
						
						try {
							
							CreateBarcodeScannedSpecial scanned = new CreateBarcodeScannedSpecial();
							
							if(validateStdNo(stdNo)) {
								scanned.createBarcodeScannedSpecial(bsId, stdNo, surName, otherNames, balance, date, dateTime, 
										stdClass, dispName, status, reason);
							}
							
						}
						catch(Exception bc) {
							bc.printStackTrace();
//							Alert alert = new Alert(Alert.AlertType.ERROR);
//							alert.setContentText("Error: "+ bc.getMessage());
//							Optional<ButtonType> result = alert.showAndWait();
//							if(result.get() == ButtonType.OK) {
//								alert.close();
//							}
//							else {
//								alert.close();
//							}
						}
					}
					catch(Exception e) {
						e.printStackTrace();
					}
				}
				else {
					try {
						sound(800,1500);
						
						String status = "Declined";
						String reason = "Irregular";
						
						try {
							
							CreateBarcodeScannedSpecial scanned = new CreateBarcodeScannedSpecial();
							
							if(validateStdNo(stdNo)) {
								scanned.createBarcodeScannedSpecial(bsId, stdNo, surName, otherNames, balance, date, dateTime, 
										stdClass, dispName, status, reason);
							}
							
						}
						catch(Exception bc) {
							bc.printStackTrace();
//							Alert alert = new Alert(Alert.AlertType.ERROR);
//							alert.setContentText("Error: "+ bc.getMessage());
//							Optional<ButtonType> result = alert.showAndWait();
//							if(result.get() == ButtonType.OK) {
//								alert.close();
//							}
//							else {
//								alert.close();
//							}
						}
					}
					catch(Exception e) {
						e.printStackTrace();
					}
				}
				
			}
			
		}
	}
	
	@FXML public void submitBarcodeEnqViewButton2(ActionEvent event) {
		
		String bcInput = barcodeEnqInput2.getText();
		if(bcInput.trim().length() != 0 && !bcInput.contains("Error") && 
				!bcInput.contains("null")) {
			
			barcodeEnqIdNo2.setText(bcInput);
			
			String soundStatus = "";
			double soundBal = 0;
			LocalDateTime dateTime = LocalDateTime.now();
			LocalDate date = dateTime.toLocalDate();
			String stdNo = barcodeEnqIdNo2.getText();
			String bsId = stdNo + date;
			String surName = "", otherNames = "", stdClass = ""; 
			double balance = 0.0; 
			
			try{
				EntityManagerFactory emfactory = Persistence.createEntityManagerFactory
						("SchoolMgtSystem");
				EntityManager entitymanager = emfactory.createEntityManager();
				entitymanager.getTransaction().begin();
				
				Students std = entitymanager.find(Students.class, stdNo);
				
				barcodeEnqName2.setText(std.getSurName()+ ", "+std.getOtherNames());
				barcodeEnqSex2.setText(std.getSex());
				
				surName = std.getSurName();
				otherNames = std.getOtherNames();
				stdClass = std.getEntryClassAssigned();
				
				soundStatus = std.getStatus();
		
				LocalDate dateAgeStr2 = std.getDateOfBirth();
				LocalDate currentDateStr = LocalDate.now();
				int diffDateStr = currentDateStr.getYear() - dateAgeStr2.getYear();
				barcodeEnqAge2.setText(String.valueOf(diffDateStr));
				
				if(std.getStatus().equalsIgnoreCase("Suspended") || 
						std.getStatus().equalsIgnoreCase("Rusticated")) {
					EntityManagerFactory emfactoryq = Persistence.createEntityManagerFactory
							("SchoolMgtSystem");
					EntityManager entitymanagerq = emfactoryq.createEntityManager();
					entitymanagerq.getTransaction().begin();
					SuspensionEntry entry = entitymanagerq.find(SuspensionEntry.class, stdNo);
					
					String msg = entry.getSuspendTextFlow().getLast();
					
					barcodeEnqStatus2.setText(std.getStatus()+" ("+msg+")");
					
					entitymanagerq.getTransaction().commit();
					entitymanagerq.close();
					emfactoryq.close();
				}
				else {
					barcodeEnqStatus2.setText(std.getStatus());
				}
				
				String classId = std.getEntryClassAssigned();
				
				EntityManagerFactory emfactory2 = Persistence.createEntityManagerFactory
						("SchoolMgtSystem");
				EntityManager entitymanager2 = emfactory2.createEntityManager();
				entitymanager2.getTransaction().begin();
				
				StudentClasses clas = entitymanager2.find(StudentClasses.class, classId);
				
				barcodeEnqClass2.setText(clas.getClassNo()+clas.getClassLetter());
				barcodeEnqYear2.setText(clas.getYear());
				barcodeEnqTerm2.setText(clas.getTerm());
				
				entitymanager2.getTransaction().commit();
				entitymanager2.close();
				emfactory2.close();
				
				EntityManagerFactory emfactory3 = Persistence.createEntityManagerFactory
						("SchoolMgtSystem");
				EntityManager entitymanager3 = emfactory3.createEntityManager();
				entitymanager3.getTransaction().begin();
				
				AccountBalance bal = entitymanager3.find(AccountBalance.class, stdNo);
				
				barcodeEnqBalance2.setText(fm2.format(bal.getBalance()));
				
				if(bal.getBalance() < 0) {
					barcodeEnqBalance2.setStyle("-fX-text-fill: red;");
				}
				else if(bal.getBalance() == 0) {
					barcodeEnqBalance2.setStyle("-fX-text-fill: blue;");
				}
				else {
					barcodeEnqBalance2.setStyle("-fX-text-fill: black;");
				}
				
				soundBal = bal.getBalance();
				balance = bal.getBalance();
				
				entitymanager3.getTransaction().commit();
				entitymanager3.close();
				emfactory3.close();
				
				entitymanager.getTransaction().commit();
				entitymanager.close();
				emfactory.close();
				
			}
			catch(Exception e) {
				e.printStackTrace();
				barcodeEnqName2.clear();
				barcodeEnqSex2.clear();
				barcodeEnqAge2.clear();
				barcodeEnqClass2.clear();
				barcodeEnqYear2.clear();
				barcodeEnqTerm2.clear();
				barcodeEnqBalance2.clear();
			}
			
			//view photo
			try {
				String stdId = stdNo; // barcodeEnqIdNo.getText();
				
				String jdbcUrl = dbURL;
				String username = dbUSR;
				String password = dbPWD;
				
				String sql = "SELECT * FROM stdImages WHERE stdid = ?";
				
				try(Connection conn = DriverManager.getConnection(jdbcUrl, username, password);
						){
					
					try(PreparedStatement stmt = conn.prepareStatement(sql);
							){
						stmt.setString(1, stdId);		
						
						ResultSet result = stmt.executeQuery();
						
						
						if(result.next()) {
							InputStream imageStream = result.getBinaryStream("image");
							Image img = new Image(imageStream);
							barcodeEnqImageView2.setImage(img);
							String stdName = result.getString("name");
							barcodeEnqName2.setText(stdName);
						}
						else {
							barcodeEnqImageView2.setImage(null);
						}
					
						result.close();
						stmt.close();
						conn.close();
					}
					catch(SQLException io) {
						io.printStackTrace();
						barcodeEnqName2.clear();
						barcodeEnqImageView2.setImage(null);
					}
				}
				catch(SQLException eq) {
					eq.printStackTrace();
					barcodeEnqName2.clear();
					barcodeEnqImageView2.setImage(null);
				}
				
				//clear barcode input
				barcodeEnqInput2.clear();
			}
			catch(Exception e) {
				e.printStackTrace();
				barcodeEnqName2.clear();
				barcodeEnqImageView2.setImage(null);
			}
			
//			LinkedHashSet<String> DataId = new LinkedHashSet<>();
//			
//			final String JDBC_Driver2 = "com.mysql.jdbc.Driver";
//			final String DB_URL2 = dbURL;
//			final String DB_User2 = dbUSR;
//			final String DB_PWD2 = dbPWD;
//			
//			
//			Connection conn2 = null;
//			PreparedStatement stmt2 = null;
//			
//			try {
//				Class.forName(JDBC_Driver2);
//				conn2 = DriverManager.getConnection(DB_URL2, DB_User2, DB_PWD2);
//				
//				String sql;
//				sql = "SELECT * FROM BarcodeScannedGate WHERE Date = ?";
//				
//				stmt2 = conn2.prepareStatement(sql);
//			
//				Date date2 = Date.valueOf(date);
//				stmt2.setDate(1, date2);
//				
//				ResultSet rs2 = stmt2.executeQuery();
//				
//				
//				while(rs2.next()) {
//					DataId.add(rs2.getString("STDNO"));
//				}
//				rs2.close();
//				stmt2.close();
//				conn2.close();
//			}
//			catch(SQLException es) {
//				//studentNumberTF.setText("Error JDBC: "+ es.getSQLState());
//				es.printStackTrace();
//			}
//			catch(Exception es2) {
//				//studentNumberTF.setText("Error JDBC: "+ es2.getMessage());
//				es2.printStackTrace();
//			}
//			finally {
//				try {
//					if(stmt2 != null ) {
//						stmt2.close();
//					}
//				}
//				catch(SQLException ces) {
//					//studentNumberTF.setText("Error JDBC: "+ ces.getSQLState());
//					ces.printStackTrace();
//				}
//				try {
//					if(conn2 != null ) {
//						conn2.close();
//					}
//				}
//				catch(Exception ces2) {
//					//studentNumberTF.setText("JDBC: "+ces2.getMessage());
//					ces2.printStackTrace();
//				}
//				
//			}
			
			if(soundBal >= 0 && soundStatus.equalsIgnoreCase("Regular")) {
				try {
					sound(400,300);
					
					String status = "Approved";
					String reason = "Paid and Regular";
					
					try {
						
						CreateBarcodeScannedSpecial scanned = new CreateBarcodeScannedSpecial();
						
						if(validateStdNo(stdNo)) {
							scanned.createBarcodeScannedSpecial(bsId, stdNo, surName, otherNames, balance, date, dateTime, 
									stdClass, dispName, status, reason);
						}
						
					}
					catch(Exception bc) {
						bc.printStackTrace();
//						Alert alert = new Alert(Alert.AlertType.ERROR);
//						alert.setContentText("Error: "+ bc.getMessage());
//						Optional<ButtonType> result = alert.showAndWait();
//						if(result.get() == ButtonType.OK) {
//							alert.close();
//						}
//						else {
//							alert.close();
//						}
					}
				}
				catch(Exception e) {
					e.printStackTrace();
				}
			}
			else if(soundBal < 0 && soundStatus.equalsIgnoreCase("Regular")) {
				try {
					
					sound(600,1000);
					
					String status = "Declined";
					String reason = "Not Paid and Regular";
					
					try {
						
						CreateBarcodeScannedSpecial scanned = new CreateBarcodeScannedSpecial();
						
						if(validateStdNo(stdNo)) {
							scanned.createBarcodeScannedSpecial(bsId, stdNo, surName, otherNames, balance, date, dateTime, 
									stdClass, dispName, status, reason);
						}
						
					}
					catch(Exception bc) {
						bc.printStackTrace();
//						Alert alert = new Alert(Alert.AlertType.ERROR);
//						alert.setContentText("Error: "+ bc.getMessage());
//						Optional<ButtonType> result = alert.showAndWait();
//						if(result.get() == ButtonType.OK) {
//							alert.close();
//						}
//						else {
//							alert.close();
//						}
					}
				}
				catch(Exception e) {
					e.printStackTrace();
				}
			}
			else {
				try {
					sound(800,1500);
					
					String status = "Declined";
					String reason = "Irregular";
					
					try {
						
						CreateBarcodeScannedSpecial scanned = new CreateBarcodeScannedSpecial();
						
						if(validateStdNo(stdNo)) {
							scanned.createBarcodeScannedSpecial(bsId, stdNo, surName, otherNames, balance, date, dateTime, 
									stdClass, dispName, status, reason);
						}
						
					}
					catch(Exception bc) {
						bc.printStackTrace();
//						Alert alert = new Alert(Alert.AlertType.ERROR);
//						alert.setContentText("Error: "+ bc.getMessage());
//						Optional<ButtonType> result = alert.showAndWait();
//						if(result.get() == ButtonType.OK) {
//							alert.close();
//						}
//						else {
//							alert.close();
//						}
					}
				}
				catch(Exception e) {
					e.printStackTrace();
				}
			}
			
		}		
	}
	
	//test sound
	private static final int SAMPLING_FREQUENCY_IN_HZ = 8000;
	private static final int NUMBER_OF_FADE_SAMPLES = 80;

	private static void sound(int hz, int msecs) throws LineUnavailableException {
	    byte[] buf = new byte[msecs * Byte.SIZE];
	    for (int i = 0; i < buf.length; i++) {
	       // double angle = i / (SAMPLING_FREQUENCY_IN_HZ / hz) * 2 * Math.PI;
	    	double angle = 2 * Math.PI * i * hz / SAMPLING_FREQUENCY_IN_HZ;
	        buf[i] = (byte) (Math.sin(angle) * Byte.MAX_VALUE);
	    }
	    for (int i = 0; i < NUMBER_OF_FADE_SAMPLES && i < buf.length / 2; i++) {
	        buf[i] = (byte) (buf[i] * i / NUMBER_OF_FADE_SAMPLES);
	        buf[buf.length - 1 - i] = (byte) (buf[buf.length - 1 - i] * i / NUMBER_OF_FADE_SAMPLES);
	    }
	    AudioFormat af = new AudioFormat(SAMPLING_FREQUENCY_IN_HZ, Byte.SIZE, 1, true, false);
	    SourceDataLine sdl = AudioSystem.getSourceDataLine(af);
	    sdl.open(af);
	    sdl.start();
	    sdl.write(buf, 0, buf.length);
	    sdl.drain();
	    sdl.close();
	}
	
	//Display scanned barcode list in a table
	@FXML private Button bslSpoolBtn;
	@FXML private Label bslList;
	@FXML private ComboBox<String> bslStatus, bslTableCombo, bslStdClass;
	@FXML private DatePicker bslFroDate, bslToDate;
	@FXML private TableView<BarcodeScannedListDataTable> barcodeScannedListDataTable;
	@FXML private TableColumn<BarcodeScannedListDataTable,String> bslSNoCol, bslDateCol, bslIdCol, bslNameCol, 
		bslClassCol, bslTimeCol, bslStatusCol, bslReasonCol;
	
	ObservableList<String> bslCombo = FXCollections.observableArrayList("All","Approved","Declined");
	ObservableList<String> bslTable = FXCollections.observableArrayList("Gate","Special");
	ObservableList<String> bslListW = FXCollections.observableArrayList("All");
	
	@FXML public void bsl_Init(MouseEvent event) {
		bslTableCombo.setItems(bslTable);
		bslStatus.setItems(bslCombo);
	}
	
	@FXML public void bsl_Init2(MouseEvent event) {
		populateStdClassesCombo3(bslListW, bslStdClass);
	}
	
	@FXML public void bslSpoolButton(ActionEvent event) {
		try {
			String whr = bslTableCombo.getValue();
			String myBslClass = bslStdClass.getValue();
			String status = bslStatus.getValue();
			LocalDate froDate = bslFroDate.getValue();
			LocalDate toDate = bslToDate.getValue();
			
			if(whr.equalsIgnoreCase("Gate") && myBslClass.equalsIgnoreCase("All")) {
				ObservableList<BarcodeScannedListDataTable> data = FXCollections.observableArrayList();
				
				if(status.equalsIgnoreCase("Approved")) {
					//LinkedHashSet<String> DataId = new LinkedHashSet<>();
					LinkedHashSet<String> BarcodeScannedId = new LinkedHashSet<>();
					
					final String JDBC_Driver2 = "com.mysql.jdbc.Driver";
					final String DB_URL2 = dbURL;
					final String DB_User2 = dbUSR;
					final String DB_PWD2 = dbPWD;
					
					
					Connection conn2 = null;
					PreparedStatement stmt2 = null;
					
					try {
						Class.forName(JDBC_Driver2);
						conn2 = DriverManager.getConnection(DB_URL2, DB_User2, DB_PWD2);
						
						String sql;
						sql = "SELECT * FROM BarcodeScannedGate WHERE Status = ? "
								+ "AND Date BETWEEN ? AND ?";
						
						stmt2 = conn2.prepareStatement(sql);
					
						Date froDate2 = Date.valueOf(froDate);
						Date toDate2 = Date.valueOf(toDate);
						
						stmt2.setString(1, status);
						stmt2.setDate(2, froDate2);
						stmt2.setDate(3, toDate2);
						
						ResultSet rs2 = stmt2.executeQuery();
						
						
						while(rs2.next()) {
							//DataId.add(rs2.getString("STDNO"));
							BarcodeScannedId.add(rs2.getString("BSID"));
						}
						rs2.close();
						stmt2.close();
						conn2.close();
					}
					catch(SQLException es) {
						//studentNumberTF.setText("Error JDBC: "+ es.getSQLState());
						es.printStackTrace();
					}
					catch(Exception es2) {
						//studentNumberTF.setText("Error JDBC: "+ es2.getMessage());
						es2.printStackTrace();
					}
					finally {
						try {
							if(stmt2 != null ) {
								stmt2.close();
							}
						}
						catch(SQLException ces) {
							//studentNumberTF.setText("Error JDBC: "+ ces.getSQLState());
							ces.printStackTrace();
						}
						try {
							if(conn2 != null ) {
								conn2.close();
							}
						}
						catch(Exception ces2) {
							//studentNumberTF.setText("JDBC: "+ces2.getMessage());
							ces2.printStackTrace();
						}
						
					}
					//populate
					int sNo = 1;
					for(String bsid : BarcodeScannedId) {
						EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
						EntityManager entitymanager = emfactory.createEntityManager();
						entitymanager.getTransaction().begin();
						
						BarcodeScannedGate gate = entitymanager.find(BarcodeScannedGate.class, bsid);
						
						data.add(new BarcodeScannedListDataTable(
								String.valueOf(sNo),
								gate.getDate().toString(),
								gate.getStdNo(),
								gate.getOtherNames() + " " + gate.getSurName(),
								gate.getStdClass(),
								String.valueOf(gate.getDateTime().getHour()) + ":"+ String.valueOf(gate.getDateTime().getMinute())
									+":"+ String.valueOf(gate.getDateTime().getSecond()),
								gate.getStatus(),
								gate.getReason()
								));
						
						entitymanager.getTransaction().commit();
						entitymanager.close();
						emfactory.close();
						
						sNo = sNo + 1;
					}	
				}
				else if(status.equalsIgnoreCase("Declined")) {
					//LinkedHashSet<String> DataId = new LinkedHashSet<>();
					LinkedHashSet<String> BarcodeScannedId = new LinkedHashSet<>();
					
					final String JDBC_Driver2 = "com.mysql.jdbc.Driver";
					final String DB_URL2 = dbURL;
					final String DB_User2 = dbUSR;
					final String DB_PWD2 = dbPWD;
					
					
					Connection conn2 = null;
					PreparedStatement stmt2 = null;
					
					try {
						Class.forName(JDBC_Driver2);
						conn2 = DriverManager.getConnection(DB_URL2, DB_User2, DB_PWD2);
						
						String sql;
						sql = "SELECT * FROM BarcodeScannedGate WHERE Status = ? "
								+ "AND Date BETWEEN ? AND ?";
						
						stmt2 = conn2.prepareStatement(sql);
					
						Date froDate2 = Date.valueOf(froDate);
						Date toDate2 = Date.valueOf(toDate);
						
						stmt2.setString(1, status);
						stmt2.setDate(2, froDate2);
						stmt2.setDate(3, toDate2);
						
						ResultSet rs2 = stmt2.executeQuery();
						
						
						while(rs2.next()) {
							//DataId.add(rs2.getString("STDNO"));
							BarcodeScannedId.add(rs2.getString("BSID"));
						}
						rs2.close();
						stmt2.close();
						conn2.close();
					}
					catch(SQLException es) {
						//studentNumberTF.setText("Error JDBC: "+ es.getSQLState());
						es.printStackTrace();
					}
					catch(Exception es2) {
						//studentNumberTF.setText("Error JDBC: "+ es2.getMessage());
						es2.printStackTrace();
					}
					finally {
						try {
							if(stmt2 != null ) {
								stmt2.close();
							}
						}
						catch(SQLException ces) {
							//studentNumberTF.setText("Error JDBC: "+ ces.getSQLState());
							ces.printStackTrace();
						}
						try {
							if(conn2 != null ) {
								conn2.close();
							}
						}
						catch(Exception ces2) {
							//studentNumberTF.setText("JDBC: "+ces2.getMessage());
							ces2.printStackTrace();
						}
						
					}
					//populate
					int sNo = 1;
					for(String bsid : BarcodeScannedId) {
						EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
						EntityManager entitymanager = emfactory.createEntityManager();
						entitymanager.getTransaction().begin();
						
						BarcodeScannedGate gate = entitymanager.find(BarcodeScannedGate.class, bsid);
						
						data.add(new BarcodeScannedListDataTable(
								String.valueOf(sNo),
								gate.getDate().toString(),
								gate.getStdNo(),
								gate.getOtherNames() + " " + gate.getSurName(),
								gate.getStdClass(),
								String.valueOf(gate.getDateTime().getHour()) + ":"+ String.valueOf(gate.getDateTime().getMinute())
									+":"+ String.valueOf(gate.getDateTime().getSecond()),
								gate.getStatus(),
								gate.getReason()
								));
						
						entitymanager.getTransaction().commit();
						entitymanager.close();
						emfactory.close();
						
						sNo = sNo + 1;
					}
				}
				else {
					//LinkedHashSet<String> DataId = new LinkedHashSet<>();
					LinkedHashSet<String> BarcodeScannedId = new LinkedHashSet<>();
					
					final String JDBC_Driver2 = "com.mysql.jdbc.Driver";
					final String DB_URL2 = dbURL;
					final String DB_User2 = dbUSR;
					final String DB_PWD2 = dbPWD;
					
					
					Connection conn2 = null;
					PreparedStatement stmt2 = null;
					
					try {
						Class.forName(JDBC_Driver2);
						conn2 = DriverManager.getConnection(DB_URL2, DB_User2, DB_PWD2);
						
						String sql;
						sql = "SELECT * FROM BarcodeScannedGate WHERE Date BETWEEN ? AND ?";
						
						stmt2 = conn2.prepareStatement(sql);
					
						Date froDate2 = Date.valueOf(froDate);
						Date toDate2 = Date.valueOf(toDate);
						
						stmt2.setDate(1, froDate2);
						stmt2.setDate(2, toDate2);
						
						ResultSet rs2 = stmt2.executeQuery();
						
						
						while(rs2.next()) {
							//DataId.add(rs2.getString("STDNO"));
							BarcodeScannedId.add(rs2.getString("BSID"));
						}
						rs2.close();
						stmt2.close();
						conn2.close();
					}
					catch(SQLException es) {
						//studentNumberTF.setText("Error JDBC: "+ es.getSQLState());
						es.printStackTrace();
					}
					catch(Exception es2) {
						//studentNumberTF.setText("Error JDBC: "+ es2.getMessage());
						es2.printStackTrace();
					}
					finally {
						try {
							if(stmt2 != null ) {
								stmt2.close();
							}
						}
						catch(SQLException ces) {
							//studentNumberTF.setText("Error JDBC: "+ ces.getSQLState());
							ces.printStackTrace();
						}
						try {
							if(conn2 != null ) {
								conn2.close();
							}
						}
						catch(Exception ces2) {
							//studentNumberTF.setText("JDBC: "+ces2.getMessage());
							ces2.printStackTrace();
						}
						
					}
					//populate
					int sNo = 1;
					for(String bsid : BarcodeScannedId) {
						EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
						EntityManager entitymanager = emfactory.createEntityManager();
						entitymanager.getTransaction().begin();
						
						BarcodeScannedGate gate = entitymanager.find(BarcodeScannedGate.class, bsid);
						
						data.add(new BarcodeScannedListDataTable(
								String.valueOf(sNo),
								gate.getDate().toString(),
								gate.getStdNo(),
								gate.getOtherNames() + " " + gate.getSurName(),
								gate.getStdClass(),
								String.valueOf(gate.getDateTime().getHour()) + ":"+ String.valueOf(gate.getDateTime().getMinute())
									+":"+ String.valueOf(gate.getDateTime().getSecond()),
								gate.getStatus(),
								gate.getReason()
								));
						
						entitymanager.getTransaction().commit();
						entitymanager.close();
						emfactory.close();
						
						sNo = sNo + 1;
					}
					//
				}
					
				bslSNoCol.setCellValueFactory(new PropertyValueFactory("sNo_Data"));
				bslDateCol.setCellValueFactory(new PropertyValueFactory("date_Data"));
				bslIdCol.setCellValueFactory(new PropertyValueFactory("stdId_Data"));
				bslNameCol.setCellValueFactory(new PropertyValueFactory("name_Data"));
				bslClassCol.setCellValueFactory(new PropertyValueFactory("stdClass_Data"));
				bslTimeCol.setCellValueFactory(new PropertyValueFactory("time_Data"));
				bslStatusCol.setCellValueFactory(new PropertyValueFactory("barcodeStatus_Data"));
				bslReasonCol.setCellValueFactory(new PropertyValueFactory("reason_Data"));

				
				try {	
					barcodeScannedListDataTable.setItems(data);
				}
				catch(Exception ex) {
					barcodeScannedListDataTable.setItems(null);
					bslList.setText("Error: "+ ex.getMessage());
				}
				
				bslList.setText("No of Stds: "+ String.valueOf(data.size()));
			}
			else if(whr.equalsIgnoreCase("Gate")) {
				ObservableList<BarcodeScannedListDataTable> data = FXCollections.observableArrayList();
				
				if(status.equalsIgnoreCase("Approved")) {
					//LinkedHashSet<String> DataId = new LinkedHashSet<>();
					LinkedHashSet<String> BarcodeScannedId = new LinkedHashSet<>();
					
					final String JDBC_Driver2 = "com.mysql.jdbc.Driver";
					final String DB_URL2 = dbURL;
					final String DB_User2 = dbUSR;
					final String DB_PWD2 = dbPWD;
					
					
					Connection conn2 = null;
					PreparedStatement stmt2 = null;
					
					try {
						Class.forName(JDBC_Driver2);
						conn2 = DriverManager.getConnection(DB_URL2, DB_User2, DB_PWD2);
						
						String sql;
						sql = "SELECT * FROM BarcodeScannedGate WHERE Status = ? AND stdClass = ? "
								+ "AND Date BETWEEN ? AND ?";
						
						stmt2 = conn2.prepareStatement(sql);
					
						Date froDate2 = Date.valueOf(froDate);
						Date toDate2 = Date.valueOf(toDate);
						
						stmt2.setString(1, status);
						stmt2.setString(2, myBslClass);
						stmt2.setDate(3, froDate2);
						stmt2.setDate(4, toDate2);
						
						ResultSet rs2 = stmt2.executeQuery();
						
						
						while(rs2.next()) {
							//DataId.add(rs2.getString("STDNO"));
							BarcodeScannedId.add(rs2.getString("BSID"));
						}
						rs2.close();
						stmt2.close();
						conn2.close();
					}
					catch(SQLException es) {
						//studentNumberTF.setText("Error JDBC: "+ es.getSQLState());
						es.printStackTrace();
					}
					catch(Exception es2) {
						//studentNumberTF.setText("Error JDBC: "+ es2.getMessage());
						es2.printStackTrace();
					}
					finally {
						try {
							if(stmt2 != null ) {
								stmt2.close();
							}
						}
						catch(SQLException ces) {
							//studentNumberTF.setText("Error JDBC: "+ ces.getSQLState());
							ces.printStackTrace();
						}
						try {
							if(conn2 != null ) {
								conn2.close();
							}
						}
						catch(Exception ces2) {
							//studentNumberTF.setText("JDBC: "+ces2.getMessage());
							ces2.printStackTrace();
						}
						
					}
					//populate
					int sNo = 1;
					for(String bsid : BarcodeScannedId) {
						EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
						EntityManager entitymanager = emfactory.createEntityManager();
						entitymanager.getTransaction().begin();
						
						BarcodeScannedGate gate = entitymanager.find(BarcodeScannedGate.class, bsid);
						
						data.add(new BarcodeScannedListDataTable(
								String.valueOf(sNo),
								gate.getDate().toString(),
								gate.getStdNo(),
								gate.getOtherNames() + " " + gate.getSurName(),
								gate.getStdClass(),
								String.valueOf(gate.getDateTime().getHour()) + ":"+ String.valueOf(gate.getDateTime().getMinute())
									+":"+ String.valueOf(gate.getDateTime().getSecond()),
								gate.getStatus(),
								gate.getReason()
								));
						
						entitymanager.getTransaction().commit();
						entitymanager.close();
						emfactory.close();
						
						sNo = sNo + 1;
					}	
				}
				else if(status.equalsIgnoreCase("Declined")) {
					//LinkedHashSet<String> DataId = new LinkedHashSet<>();
					LinkedHashSet<String> BarcodeScannedId = new LinkedHashSet<>();
					
					final String JDBC_Driver2 = "com.mysql.jdbc.Driver";
					final String DB_URL2 = dbURL;
					final String DB_User2 = dbUSR;
					final String DB_PWD2 = dbPWD;
					
					
					Connection conn2 = null;
					PreparedStatement stmt2 = null;
					
					try {
						Class.forName(JDBC_Driver2);
						conn2 = DriverManager.getConnection(DB_URL2, DB_User2, DB_PWD2);
						
						String sql;
						sql = "SELECT * FROM BarcodeScannedGate WHERE Status = ? AND stdClass = ? "
								+ "AND Date BETWEEN ? AND ?";
						
						stmt2 = conn2.prepareStatement(sql);
					
						Date froDate2 = Date.valueOf(froDate);
						Date toDate2 = Date.valueOf(toDate);
						
						stmt2.setString(1, status);
						stmt2.setString(2, myBslClass);
						stmt2.setDate(3, froDate2);
						stmt2.setDate(4, toDate2);
						
						ResultSet rs2 = stmt2.executeQuery();
						
						
						while(rs2.next()) {
							//DataId.add(rs2.getString("STDNO"));
							BarcodeScannedId.add(rs2.getString("BSID"));
						}
						rs2.close();
						stmt2.close();
						conn2.close();
					}
					catch(SQLException es) {
						//studentNumberTF.setText("Error JDBC: "+ es.getSQLState());
						es.printStackTrace();
					}
					catch(Exception es2) {
						//studentNumberTF.setText("Error JDBC: "+ es2.getMessage());
						es2.printStackTrace();
					}
					finally {
						try {
							if(stmt2 != null ) {
								stmt2.close();
							}
						}
						catch(SQLException ces) {
							//studentNumberTF.setText("Error JDBC: "+ ces.getSQLState());
							ces.printStackTrace();
						}
						try {
							if(conn2 != null ) {
								conn2.close();
							}
						}
						catch(Exception ces2) {
							//studentNumberTF.setText("JDBC: "+ces2.getMessage());
							ces2.printStackTrace();
						}
						
					}
					//populate
					int sNo = 1;
					for(String bsid : BarcodeScannedId) {
						EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
						EntityManager entitymanager = emfactory.createEntityManager();
						entitymanager.getTransaction().begin();
						
						BarcodeScannedGate gate = entitymanager.find(BarcodeScannedGate.class, bsid);
						
						data.add(new BarcodeScannedListDataTable(
								String.valueOf(sNo),
								gate.getDate().toString(),
								gate.getStdNo(),
								gate.getOtherNames() + " " + gate.getSurName(),
								gate.getStdClass(),
								String.valueOf(gate.getDateTime().getHour()) + ":"+ String.valueOf(gate.getDateTime().getMinute())
									+":"+ String.valueOf(gate.getDateTime().getSecond()),
								gate.getStatus(),
								gate.getReason()
								));
						
						entitymanager.getTransaction().commit();
						entitymanager.close();
						emfactory.close();
						
						sNo = sNo + 1;
					}
				}
				else {
					//LinkedHashSet<String> DataId = new LinkedHashSet<>();
					LinkedHashSet<String> BarcodeScannedId = new LinkedHashSet<>();
					
					final String JDBC_Driver2 = "com.mysql.jdbc.Driver";
					final String DB_URL2 = dbURL;
					final String DB_User2 = dbUSR;
					final String DB_PWD2 = dbPWD;
					
					
					Connection conn2 = null;
					PreparedStatement stmt2 = null;
					
					try {
						Class.forName(JDBC_Driver2);
						conn2 = DriverManager.getConnection(DB_URL2, DB_User2, DB_PWD2);
						
						String sql;
						sql = "SELECT * FROM BarcodeScannedGate WHERE stdClass = ? AND Date BETWEEN ? AND ?";
						
						stmt2 = conn2.prepareStatement(sql);
					
						Date froDate2 = Date.valueOf(froDate);
						Date toDate2 = Date.valueOf(toDate);
						
						stmt2.setString(1, myBslClass);
						stmt2.setDate(2, froDate2);
						stmt2.setDate(3, toDate2);
						
						ResultSet rs2 = stmt2.executeQuery();
						
						
						while(rs2.next()) {
							//DataId.add(rs2.getString("STDNO"));
							BarcodeScannedId.add(rs2.getString("BSID"));
						}
						rs2.close();
						stmt2.close();
						conn2.close();
					}
					catch(SQLException es) {
						//studentNumberTF.setText("Error JDBC: "+ es.getSQLState());
						es.printStackTrace();
					}
					catch(Exception es2) {
						//studentNumberTF.setText("Error JDBC: "+ es2.getMessage());
						es2.printStackTrace();
					}
					finally {
						try {
							if(stmt2 != null ) {
								stmt2.close();
							}
						}
						catch(SQLException ces) {
							//studentNumberTF.setText("Error JDBC: "+ ces.getSQLState());
							ces.printStackTrace();
						}
						try {
							if(conn2 != null ) {
								conn2.close();
							}
						}
						catch(Exception ces2) {
							//studentNumberTF.setText("JDBC: "+ces2.getMessage());
							ces2.printStackTrace();
						}
						
					}
					//populate
					int sNo = 1;
					for(String bsid : BarcodeScannedId) {
						EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
						EntityManager entitymanager = emfactory.createEntityManager();
						entitymanager.getTransaction().begin();
						
						BarcodeScannedGate gate = entitymanager.find(BarcodeScannedGate.class, bsid);
						
						data.add(new BarcodeScannedListDataTable(
								String.valueOf(sNo),
								gate.getDate().toString(),
								gate.getStdNo(),
								gate.getOtherNames() + " " + gate.getSurName(),
								gate.getStdClass(),
								String.valueOf(gate.getDateTime().getHour()) + ":"+ String.valueOf(gate.getDateTime().getMinute())
									+":"+ String.valueOf(gate.getDateTime().getSecond()),
								gate.getStatus(),
								gate.getReason()
								));
						
						entitymanager.getTransaction().commit();
						entitymanager.close();
						emfactory.close();
						
						sNo = sNo + 1;
					}
					//
				}
					
				bslSNoCol.setCellValueFactory(new PropertyValueFactory("sNo_Data"));
				bslDateCol.setCellValueFactory(new PropertyValueFactory("date_Data"));
				bslIdCol.setCellValueFactory(new PropertyValueFactory("stdId_Data"));
				bslNameCol.setCellValueFactory(new PropertyValueFactory("name_Data"));
				bslClassCol.setCellValueFactory(new PropertyValueFactory("stdClass_Data"));
				bslTimeCol.setCellValueFactory(new PropertyValueFactory("time_Data"));
				bslStatusCol.setCellValueFactory(new PropertyValueFactory("barcodeStatus_Data"));
				bslReasonCol.setCellValueFactory(new PropertyValueFactory("reason_Data"));

				
				try {	
					barcodeScannedListDataTable.setItems(data);
				}
				catch(Exception ex) {
					barcodeScannedListDataTable.setItems(null);
					bslList.setText("Error: "+ ex.getMessage());
				}
				
				bslList.setText("No of Stds: "+ String.valueOf(data.size()));
			}
			else if(whr.equalsIgnoreCase("Special") && myBslClass.equalsIgnoreCase("All")) {
				ObservableList<BarcodeScannedListDataTable> data = FXCollections.observableArrayList();
				
				if(status.equalsIgnoreCase("Approved")) {
					//LinkedHashSet<String> DataId = new LinkedHashSet<>();
					LinkedHashSet<String> BarcodeScannedId = new LinkedHashSet<>();
					
					final String JDBC_Driver2 = "com.mysql.jdbc.Driver";
					final String DB_URL2 = dbURL;
					final String DB_User2 = dbUSR;
					final String DB_PWD2 = dbPWD;
					
					
					Connection conn2 = null;
					PreparedStatement stmt2 = null;
					
					try {
						Class.forName(JDBC_Driver2);
						conn2 = DriverManager.getConnection(DB_URL2, DB_User2, DB_PWD2);
						
						String sql;
						sql = "SELECT * FROM BarcodeScannedSpecial WHERE Status = ? "
								+ "AND Date BETWEEN ? AND ?";
						
						stmt2 = conn2.prepareStatement(sql);
					
						Date froDate2 = Date.valueOf(froDate);
						Date toDate2 = Date.valueOf(toDate);
						
						stmt2.setString(1, status);
						stmt2.setDate(2, froDate2);
						stmt2.setDate(3, toDate2);
						
						ResultSet rs2 = stmt2.executeQuery();
						
						
						while(rs2.next()) {
							//DataId.add(rs2.getString("STDNO"));
							BarcodeScannedId.add(rs2.getString("BSID"));
						}
						rs2.close();
						stmt2.close();
						conn2.close();
					}
					catch(SQLException es) {
						//studentNumberTF.setText("Error JDBC: "+ es.getSQLState());
						es.printStackTrace();
					}
					catch(Exception es2) {
						//studentNumberTF.setText("Error JDBC: "+ es2.getMessage());
						es2.printStackTrace();
					}
					finally {
						try {
							if(stmt2 != null ) {
								stmt2.close();
							}
						}
						catch(SQLException ces) {
							//studentNumberTF.setText("Error JDBC: "+ ces.getSQLState());
							ces.printStackTrace();
						}
						try {
							if(conn2 != null ) {
								conn2.close();
							}
						}
						catch(Exception ces2) {
							//studentNumberTF.setText("JDBC: "+ces2.getMessage());
							ces2.printStackTrace();
						}
						
					}
					//populate
					int sNo = 1;
					for(String bsid : BarcodeScannedId) {
						EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
						EntityManager entitymanager = emfactory.createEntityManager();
						entitymanager.getTransaction().begin();
						
						BarcodeScannedSpecial gate = entitymanager.find(BarcodeScannedSpecial.class, bsid);
						
						data.add(new BarcodeScannedListDataTable(
								String.valueOf(sNo),
								gate.getDate().toString(),
								gate.getStdNo(),
								gate.getOtherNames() + " " + gate.getSurName(),
								gate.getStdClass(),
								String.valueOf(gate.getDateTime().getHour()) + ":"+ String.valueOf(gate.getDateTime().getMinute())
									+":"+ String.valueOf(gate.getDateTime().getSecond()),
								gate.getStatus(),
								gate.getReason()
								));
						
						entitymanager.getTransaction().commit();
						entitymanager.close();
						emfactory.close();
						
						sNo = sNo + 1;
					}	
				}
				else if(status.equalsIgnoreCase("Declined")) {
					//LinkedHashSet<String> DataId = new LinkedHashSet<>();
					LinkedHashSet<String> BarcodeScannedId = new LinkedHashSet<>();
					
					final String JDBC_Driver2 = "com.mysql.jdbc.Driver";
					final String DB_URL2 = dbURL;
					final String DB_User2 = dbUSR;
					final String DB_PWD2 = dbPWD;
					
					
					Connection conn2 = null;
					PreparedStatement stmt2 = null;
					
					try {
						Class.forName(JDBC_Driver2);
						conn2 = DriverManager.getConnection(DB_URL2, DB_User2, DB_PWD2);
						
						String sql;
						sql = "SELECT * FROM BarcodeScannedSpecial WHERE Status = ? "
								+ "AND Date BETWEEN ? AND ?";
						
						stmt2 = conn2.prepareStatement(sql);
					
						Date froDate2 = Date.valueOf(froDate);
						Date toDate2 = Date.valueOf(toDate);
						
						stmt2.setString(1, status);
						stmt2.setDate(2, froDate2);
						stmt2.setDate(3, toDate2);
						
						ResultSet rs2 = stmt2.executeQuery();
						
						
						while(rs2.next()) {
							//DataId.add(rs2.getString("STDNO"));
							BarcodeScannedId.add(rs2.getString("BSID"));
						}
						rs2.close();
						stmt2.close();
						conn2.close();
					}
					catch(SQLException es) {
						//studentNumberTF.setText("Error JDBC: "+ es.getSQLState());
						es.printStackTrace();
					}
					catch(Exception es2) {
						//studentNumberTF.setText("Error JDBC: "+ es2.getMessage());
						es2.printStackTrace();
					}
					finally {
						try {
							if(stmt2 != null ) {
								stmt2.close();
							}
						}
						catch(SQLException ces) {
							//studentNumberTF.setText("Error JDBC: "+ ces.getSQLState());
							ces.printStackTrace();
						}
						try {
							if(conn2 != null ) {
								conn2.close();
							}
						}
						catch(Exception ces2) {
							//studentNumberTF.setText("JDBC: "+ces2.getMessage());
							ces2.printStackTrace();
						}
						
					}
					//populate
					int sNo = 1;
					for(String bsid : BarcodeScannedId) {
						EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
						EntityManager entitymanager = emfactory.createEntityManager();
						entitymanager.getTransaction().begin();
						
						BarcodeScannedSpecial gate = entitymanager.find(BarcodeScannedSpecial.class, bsid);
						
						data.add(new BarcodeScannedListDataTable(
								String.valueOf(sNo),
								gate.getDate().toString(),
								gate.getStdNo(),
								gate.getOtherNames() + " " + gate.getSurName(),
								gate.getStdClass(),
								String.valueOf(gate.getDateTime().getHour()) + ":"+ String.valueOf(gate.getDateTime().getMinute())
									+":"+ String.valueOf(gate.getDateTime().getSecond()),
								gate.getStatus(),
								gate.getReason()
								));
						
						entitymanager.getTransaction().commit();
						entitymanager.close();
						emfactory.close();
						
						sNo = sNo + 1;
					}
				}
				else {
					//LinkedHashSet<String> DataId = new LinkedHashSet<>();
					LinkedHashSet<String> BarcodeScannedId = new LinkedHashSet<>();
					
					final String JDBC_Driver2 = "com.mysql.jdbc.Driver";
					final String DB_URL2 = dbURL;
					final String DB_User2 = dbUSR;
					final String DB_PWD2 = dbPWD;
					
					
					Connection conn2 = null;
					PreparedStatement stmt2 = null;
					
					try {
						Class.forName(JDBC_Driver2);
						conn2 = DriverManager.getConnection(DB_URL2, DB_User2, DB_PWD2);
						
						String sql;
						sql = "SELECT * FROM BarcodeScannedSpecial WHERE Date BETWEEN ? AND ?";
						
						stmt2 = conn2.prepareStatement(sql);
					
						Date froDate2 = Date.valueOf(froDate);
						Date toDate2 = Date.valueOf(toDate);
						
						stmt2.setDate(1, froDate2);
						stmt2.setDate(2, toDate2);
						
						ResultSet rs2 = stmt2.executeQuery();
						
						
						while(rs2.next()) {
							//DataId.add(rs2.getString("STDNO"));
							BarcodeScannedId.add(rs2.getString("BSID"));
						}
						rs2.close();
						stmt2.close();
						conn2.close();
					}
					catch(SQLException es) {
						//studentNumberTF.setText("Error JDBC: "+ es.getSQLState());
						es.printStackTrace();
					}
					catch(Exception es2) {
						//studentNumberTF.setText("Error JDBC: "+ es2.getMessage());
						es2.printStackTrace();
					}
					finally {
						try {
							if(stmt2 != null ) {
								stmt2.close();
							}
						}
						catch(SQLException ces) {
							//studentNumberTF.setText("Error JDBC: "+ ces.getSQLState());
							ces.printStackTrace();
						}
						try {
							if(conn2 != null ) {
								conn2.close();
							}
						}
						catch(Exception ces2) {
							//studentNumberTF.setText("JDBC: "+ces2.getMessage());
							ces2.printStackTrace();
						}
						
					}
					//populate
					int sNo = 1;
					for(String bsid : BarcodeScannedId) {
						EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
						EntityManager entitymanager = emfactory.createEntityManager();
						entitymanager.getTransaction().begin();
						
						BarcodeScannedSpecial gate = entitymanager.find(BarcodeScannedSpecial.class, bsid);
						
						data.add(new BarcodeScannedListDataTable(
								String.valueOf(sNo),
								gate.getDate().toString(),
								gate.getStdNo(),
								gate.getOtherNames() + " " + gate.getSurName(),
								gate.getStdClass(),
								String.valueOf(gate.getDateTime().getHour()) + ":"+ String.valueOf(gate.getDateTime().getMinute())
									+":"+ String.valueOf(gate.getDateTime().getSecond()),
								gate.getStatus(),
								gate.getReason()
								));
						
						entitymanager.getTransaction().commit();
						entitymanager.close();
						emfactory.close();
						
						sNo = sNo + 1;
					}
					//
				}
					
				bslSNoCol.setCellValueFactory(new PropertyValueFactory("sNo_Data"));
				bslDateCol.setCellValueFactory(new PropertyValueFactory("date_Data"));
				bslIdCol.setCellValueFactory(new PropertyValueFactory("stdId_Data"));
				bslNameCol.setCellValueFactory(new PropertyValueFactory("name_Data"));
				bslClassCol.setCellValueFactory(new PropertyValueFactory("stdClass_Data"));
				bslTimeCol.setCellValueFactory(new PropertyValueFactory("time_Data"));
				bslStatusCol.setCellValueFactory(new PropertyValueFactory("barcodeStatus_Data"));
				bslReasonCol.setCellValueFactory(new PropertyValueFactory("reason_Data"));

				
				try {	
					barcodeScannedListDataTable.setItems(data);
				}
				catch(Exception ex) {
					barcodeScannedListDataTable.setItems(null);
					bslList.setText("Error: "+ ex.getMessage());
				}
				
				bslList.setText("No of Stds: "+ String.valueOf(data.size()));
			}
			else if(whr.equalsIgnoreCase("Special")) {
				ObservableList<BarcodeScannedListDataTable> data = FXCollections.observableArrayList();
				
				if(status.equalsIgnoreCase("Approved")) {
					//LinkedHashSet<String> DataId = new LinkedHashSet<>();
					LinkedHashSet<String> BarcodeScannedId = new LinkedHashSet<>();
					
					final String JDBC_Driver2 = "com.mysql.jdbc.Driver";
					final String DB_URL2 = dbURL;
					final String DB_User2 = dbUSR;
					final String DB_PWD2 = dbPWD;
					
					
					Connection conn2 = null;
					PreparedStatement stmt2 = null;
					
					try {
						Class.forName(JDBC_Driver2);
						conn2 = DriverManager.getConnection(DB_URL2, DB_User2, DB_PWD2);
						
						String sql;
						sql = "SELECT * FROM BarcodeScannedSpecial WHERE Status = ? AND stdClass = ? "
								+ "AND Date BETWEEN ? AND ?";
						
						stmt2 = conn2.prepareStatement(sql);
					
						Date froDate2 = Date.valueOf(froDate);
						Date toDate2 = Date.valueOf(toDate);
						
						stmt2.setString(1, status);
						stmt2.setString(2, myBslClass);
						stmt2.setDate(3, froDate2);
						stmt2.setDate(4, toDate2);
						
						ResultSet rs2 = stmt2.executeQuery();
						
						
						while(rs2.next()) {
							//DataId.add(rs2.getString("STDNO"));
							BarcodeScannedId.add(rs2.getString("BSID"));
						}
						rs2.close();
						stmt2.close();
						conn2.close();
					}
					catch(SQLException es) {
						//studentNumberTF.setText("Error JDBC: "+ es.getSQLState());
						es.printStackTrace();
					}
					catch(Exception es2) {
						//studentNumberTF.setText("Error JDBC: "+ es2.getMessage());
						es2.printStackTrace();
					}
					finally {
						try {
							if(stmt2 != null ) {
								stmt2.close();
							}
						}
						catch(SQLException ces) {
							//studentNumberTF.setText("Error JDBC: "+ ces.getSQLState());
							ces.printStackTrace();
						}
						try {
							if(conn2 != null ) {
								conn2.close();
							}
						}
						catch(Exception ces2) {
							//studentNumberTF.setText("JDBC: "+ces2.getMessage());
							ces2.printStackTrace();
						}
						
					}
					//populate
					int sNo = 1;
					for(String bsid : BarcodeScannedId) {
						EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
						EntityManager entitymanager = emfactory.createEntityManager();
						entitymanager.getTransaction().begin();
						
						BarcodeScannedSpecial gate = entitymanager.find(BarcodeScannedSpecial.class, bsid);
						
						data.add(new BarcodeScannedListDataTable(
								String.valueOf(sNo),
								gate.getDate().toString(),
								gate.getStdNo(),
								gate.getOtherNames() + " " + gate.getSurName(),
								gate.getStdClass(),
								String.valueOf(gate.getDateTime().getHour()) + ":"+ String.valueOf(gate.getDateTime().getMinute())
									+":"+ String.valueOf(gate.getDateTime().getSecond()),
								gate.getStatus(),
								gate.getReason()
								));
						
						entitymanager.getTransaction().commit();
						entitymanager.close();
						emfactory.close();
						
						sNo = sNo + 1;
					}	
				}
				else if(status.equalsIgnoreCase("Declined")) {
					//LinkedHashSet<String> DataId = new LinkedHashSet<>();
					LinkedHashSet<String> BarcodeScannedId = new LinkedHashSet<>();
					
					final String JDBC_Driver2 = "com.mysql.jdbc.Driver";
					final String DB_URL2 = dbURL;
					final String DB_User2 = dbUSR;
					final String DB_PWD2 = dbPWD;
					
					
					Connection conn2 = null;
					PreparedStatement stmt2 = null;
					
					try {
						Class.forName(JDBC_Driver2);
						conn2 = DriverManager.getConnection(DB_URL2, DB_User2, DB_PWD2);
						
						String sql;
						sql = "SELECT * FROM BarcodeScannedSpecial WHERE Status = ? AND stdClass = ? "
								+ "AND Date BETWEEN ? AND ?";
						
						stmt2 = conn2.prepareStatement(sql);
					
						Date froDate2 = Date.valueOf(froDate);
						Date toDate2 = Date.valueOf(toDate);
						
						stmt2.setString(1, status);
						stmt2.setString(2, myBslClass);
						stmt2.setDate(3, froDate2);
						stmt2.setDate(4, toDate2);
						
						ResultSet rs2 = stmt2.executeQuery();
						
						
						while(rs2.next()) {
							//DataId.add(rs2.getString("STDNO"));
							BarcodeScannedId.add(rs2.getString("BSID"));
						}
						rs2.close();
						stmt2.close();
						conn2.close();
					}
					catch(SQLException es) {
						//studentNumberTF.setText("Error JDBC: "+ es.getSQLState());
						es.printStackTrace();
					}
					catch(Exception es2) {
						//studentNumberTF.setText("Error JDBC: "+ es2.getMessage());
						es2.printStackTrace();
					}
					finally {
						try {
							if(stmt2 != null ) {
								stmt2.close();
							}
						}
						catch(SQLException ces) {
							//studentNumberTF.setText("Error JDBC: "+ ces.getSQLState());
							ces.printStackTrace();
						}
						try {
							if(conn2 != null ) {
								conn2.close();
							}
						}
						catch(Exception ces2) {
							//studentNumberTF.setText("JDBC: "+ces2.getMessage());
							ces2.printStackTrace();
						}
						
					}
					//populate
					int sNo = 1;
					for(String bsid : BarcodeScannedId) {
						EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
						EntityManager entitymanager = emfactory.createEntityManager();
						entitymanager.getTransaction().begin();
						
						BarcodeScannedSpecial gate = entitymanager.find(BarcodeScannedSpecial.class, bsid);
						
						data.add(new BarcodeScannedListDataTable(
								String.valueOf(sNo),
								gate.getDate().toString(),
								gate.getStdNo(),
								gate.getOtherNames() + " " + gate.getSurName(),
								gate.getStdClass(),
								String.valueOf(gate.getDateTime().getHour()) + ":"+ String.valueOf(gate.getDateTime().getMinute())
									+":"+ String.valueOf(gate.getDateTime().getSecond()),
								gate.getStatus(),
								gate.getReason()
								));
						
						entitymanager.getTransaction().commit();
						entitymanager.close();
						emfactory.close();
						
						sNo = sNo + 1;
					}
				}
				else {
					//LinkedHashSet<String> DataId = new LinkedHashSet<>();
					LinkedHashSet<String> BarcodeScannedId = new LinkedHashSet<>();
					
					final String JDBC_Driver2 = "com.mysql.jdbc.Driver";
					final String DB_URL2 = dbURL;
					final String DB_User2 = dbUSR;
					final String DB_PWD2 = dbPWD;
					
					
					Connection conn2 = null;
					PreparedStatement stmt2 = null;
					
					try {
						Class.forName(JDBC_Driver2);
						conn2 = DriverManager.getConnection(DB_URL2, DB_User2, DB_PWD2);
						
						String sql;
						sql = "SELECT * FROM BarcodeScannedSpecial WHERE stdClass = ? AND Date BETWEEN ? AND ?";
						
						stmt2 = conn2.prepareStatement(sql);
					
						Date froDate2 = Date.valueOf(froDate);
						Date toDate2 = Date.valueOf(toDate);
						
						stmt2.setString(1, myBslClass);
						stmt2.setDate(2, froDate2);
						stmt2.setDate(3, toDate2);
						
						ResultSet rs2 = stmt2.executeQuery();
						
						
						while(rs2.next()) {
							//DataId.add(rs2.getString("STDNO"));
							BarcodeScannedId.add(rs2.getString("BSID"));
						}
						rs2.close();
						stmt2.close();
						conn2.close();
					}
					catch(SQLException es) {
						//studentNumberTF.setText("Error JDBC: "+ es.getSQLState());
						es.printStackTrace();
					}
					catch(Exception es2) {
						//studentNumberTF.setText("Error JDBC: "+ es2.getMessage());
						es2.printStackTrace();
					}
					finally {
						try {
							if(stmt2 != null ) {
								stmt2.close();
							}
						}
						catch(SQLException ces) {
							//studentNumberTF.setText("Error JDBC: "+ ces.getSQLState());
							ces.printStackTrace();
						}
						try {
							if(conn2 != null ) {
								conn2.close();
							}
						}
						catch(Exception ces2) {
							//studentNumberTF.setText("JDBC: "+ces2.getMessage());
							ces2.printStackTrace();
						}
						
					}
					//populate
					int sNo = 1;
					for(String bsid : BarcodeScannedId) {
						EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
						EntityManager entitymanager = emfactory.createEntityManager();
						entitymanager.getTransaction().begin();
						
						BarcodeScannedSpecial gate = entitymanager.find(BarcodeScannedSpecial.class, bsid);
						
						data.add(new BarcodeScannedListDataTable(
								String.valueOf(sNo),
								gate.getDate().toString(),
								gate.getStdNo(),
								gate.getOtherNames() + " " + gate.getSurName(),
								gate.getStdClass(),
								String.valueOf(gate.getDateTime().getHour()) + ":"+ String.valueOf(gate.getDateTime().getMinute())
									+":"+ String.valueOf(gate.getDateTime().getSecond()),
								gate.getStatus(),
								gate.getReason()
								));
						
						entitymanager.getTransaction().commit();
						entitymanager.close();
						emfactory.close();
						
						sNo = sNo + 1;
					}
					//
				}
					
				bslSNoCol.setCellValueFactory(new PropertyValueFactory("sNo_Data"));
				bslDateCol.setCellValueFactory(new PropertyValueFactory("date_Data"));
				bslIdCol.setCellValueFactory(new PropertyValueFactory("stdId_Data"));
				bslNameCol.setCellValueFactory(new PropertyValueFactory("name_Data"));
				bslClassCol.setCellValueFactory(new PropertyValueFactory("stdClass_Data"));
				bslTimeCol.setCellValueFactory(new PropertyValueFactory("time_Data"));
				bslStatusCol.setCellValueFactory(new PropertyValueFactory("barcodeStatus_Data"));
				bslReasonCol.setCellValueFactory(new PropertyValueFactory("reason_Data"));

				
				try {	
					barcodeScannedListDataTable.setItems(data);
				}
				catch(Exception ex) {
					barcodeScannedListDataTable.setItems(null);
					bslList.setText("Error: "+ ex.getMessage());
				}
				
				bslList.setText("No of Stds: "+ String.valueOf(data.size()));
			}
			else {
				Alert alert = new Alert(Alert.AlertType.INFORMATION);
				alert.setContentText("Please select your location/where...");
				Optional<ButtonType> result = alert.showAndWait();
				if(result.get() == ButtonType.OK) {
					alert.close();
				}
				else {
					alert.close();
				}
			}
		}
		catch(Exception exc) {
			exc.printStackTrace();
			Alert alert = new Alert(Alert.AlertType.ERROR);
			alert.setContentText("Error: "+ exc.getMessage());
			Optional<ButtonType> result = alert.showAndWait();
			if(result.get() == ButtonType.OK) {
				alert.close();
			}
			else {
				alert.close();
			}
		}
	}
	
	//Excel BSL
	@FXML public void bslXcelButton(ActionEvent event) {
		Workbook workbook = new HSSFWorkbook();
		Sheet spreadSheet = workbook.createSheet("sample");
		Row row = spreadSheet.createRow(0);
		
		for(int j = 0; j < barcodeScannedListDataTable.getColumns().size(); j++) {
			row.createCell(j).setCellValue(barcodeScannedListDataTable.getColumns().get(j).getText());
		}
		
		for(int i = 0; i < barcodeScannedListDataTable.getItems().size(); i++) {
			row = spreadSheet.createRow(i + 1);
			for(int j = 0; j < barcodeScannedListDataTable.getColumns().size(); j++) {
				if(barcodeScannedListDataTable.getColumns().get(j).getCellData(i) != null) {
					row.createCell(j).setCellValue(barcodeScannedListDataTable.getColumns().get(j).getCellData(i).toString());
				}
				else {
					row.createCell(j).setCellValue("");
				}
			}
		}
		String dateStr = LocalDate.now().toString();
		String txt = dateStr + "barcodeScannedListDataTable"+".xls";
		String filePath = "C:\\workbook\\"+txt;
		
		try {
			FileOutputStream fileOut = new FileOutputStream(filePath);
			try {
				workbook.write(fileOut);
				fileOut.close();
				bslList.setText(filePath);
			} catch (IOException e2) {
				bslList.setText("Write Error: "+ e2.getMessage());
			}
		} catch (FileNotFoundException e) {
			bslList.setText("File Error: "+ e.getMessage());
		}
	}
			
	//temp solution
	@FXML public void deleteIDSETs_Temp(ActionEvent event) {
//		try {
//			String sid = sId_TF.getText();
//			EntityManagerFactory emfact = Persistence.createEntityManagerFactory("SchoolMgtSystem");
//			EntityManager entityman = emfact.createEntityManager();
//			entityman.getTransaction().begin();
//			
//			Students std2 = entityman.find(Students.class, stdId_TF.getText().toUpperCase());
//			
//			//std2.setAnnualSummaryIdSet(sumId);
//			try {
//				if(std2.getAnnualScoresTotalIdSet().contains(sid)) {
//					std2.getAnnualScoresTotalIdSet().remove(sid);
//				}
//			}
//			catch(Exception ox) {
//				ox.printStackTrace();
//			}
//			
//			try {
//				if(std2.getAnnualSummaryIdSet().contains(sid)) {
//					std2.getAnnualSummaryIdSet().remove(sid);
//				}
//			}
//			catch(Exception ox2) {
//				ox2.printStackTrace();
//			}
//			
//			try {
//				if(std2.getSummaryIdSet().contains(sid)) {
//					std2.getSummaryIdSet().remove(sid);
//				}
//			}
//			catch(Exception ox3) {
//				ox3.printStackTrace();
//			}
//			
//			try {
//				if(std2.getScores_sId().contains(sid)) {
//					std2.getScores_sId().remove(sid);
//				}
//			}
//			catch(Exception ox4) {
//				ox4.printStackTrace();
//			}
//			
//			//entityman.persist(std2);
//			entityman.getTransaction().commit();
//			
//			entityman.close();
//			emfact.close();
//			
//			//Annual scores total
//			try {
//				EntityManagerFactory emfact2 = Persistence.createEntityManagerFactory("SchoolMgtSystem");
//				EntityManager entityman2 = emfact2.createEntityManager();
//				entityman2.getTransaction().begin();
//				
//				AnnualScoresTotal annual = entityman2.find(AnnualScoresTotal.class, sid);
//				
//				entityman2.remove(annual);
//				
//				entityman2.persist(annual);
//				entityman2.getTransaction().commit();
//				
//				entityman2.close();
//				emfact2.close();
//			}
//			catch(Exception e2) {
//				e2.printStackTrace();
//			}
//			
//			try {
//				//Annual scoresheet sum
//				EntityManagerFactory emfact3 = Persistence.createEntityManagerFactory("SchoolMgtSystem");
//				EntityManager entityman3 = emfact3.createEntityManager();
//				entityman3.getTransaction().begin();
//				
//				AnnualScoreSheetsSummary annual2 = entityman3.find(AnnualScoreSheetsSummary.class, sid);
//				
//				entityman3.remove(annual2);
//				
//				entityman3.persist(annual2);
//				entityman3.getTransaction().commit();
//				
//				entityman3.close();
//				emfact3.close();
//			}
//			catch(Exception e3) {
//				e3.printStackTrace();
//			}
//			
//			try {
//				//remove scoresheets summary
//				EntityManagerFactory emfact4 = Persistence.createEntityManagerFactory("SchoolMgtSystem");
//				EntityManager entityman4 = emfact4.createEntityManager();
//				entityman4.getTransaction().begin();
//				
//				ScoreSheetsSummary sum = entityman4.find(ScoreSheetsSummary.class, sid);
//				
//				try {
//					entityman4.remove(sum);
//				}
//				catch(Exception eo) {
//					eo.printStackTrace();
//				}
//				
//				//entityman4.persist(sum);
//				entityman4.getTransaction().commit();
//				
//				entityman4.close();
//				emfact4.close();
//			}
//			catch(Exception e4) {
//				e4.printStackTrace();
//			}
//		}
//		catch(Exception e) {
//			e.printStackTrace();
//		}
	}
	
	//Clear TIDs
	@FXML private TableView<TTIDDataTable> ttidDataTable;
	@FXML private TableColumn<TTIDDataTable,String> tidSnoCol, ttidValCol;
	@FXML private ComboBox<String> TIDComboRemove, TIDComboRetrieve;
	@FXML private TextField TTIDTxtEntry;
	
	ObservableList<String> thisTIDs = FXCollections.observableArrayList("AccountBalance-TIDSet",
			"Tills-TIDSet","Student-ScoresId","Student-SummaryIdSet","Student-AnnualSummary",
			"Student-AnnualScoresTotalIdSet","StudentClasses");
	
	@FXML public void TID_TTID_Init(MouseEvent event) {
		//TIDComboRemove.setItems(thisTIDs);
		TIDComboRetrieve.setItems(thisTIDs);
	}
	
	@FXML public void spoolTTIDButton(ActionEvent event) {
		try {
			String year, term, stdClass;
			
			String stdNo = TTIDTxtEntry.getText().toUpperCase();
			String TIDDetails = TIDComboRetrieve.getValue();
			
			if(TIDDetails.contains("AccountBalance")) {
				ObservableList<TTIDDataTable> data = FXCollections.observableArrayList();
				LinkedHashSet<String> set = new LinkedHashSet<>();
				
				EntityManagerFactory emfactory3 = Persistence.createEntityManagerFactory
						("SchoolMgtSystem");
				EntityManager entitymanager3 = emfactory3.createEntityManager();
				entitymanager3.getTransaction().begin();
				
				AccountBalance bal = entitymanager3.find(AccountBalance.class, stdNo);
				
				set = bal.getTIDSet();
				
				entitymanager3.getTransaction().commit();
				entitymanager3.close();
				emfactory3.close();
				
				try {
					int SNo = 1;
					for(String str : set) {
						System.out.println(str);
						data.add(new TTIDDataTable(String.valueOf(SNo), str));
						SNo = SNo + 1;
					}
					
					tidSnoCol.setCellValueFactory(new PropertyValueFactory("sNo_Data"));
					ttidValCol.setCellValueFactory(new PropertyValueFactory("TID_Data"));
					
					ttidDataTable.setItems(data);
				}
				catch(Exception e2) {
					e2.printStackTrace();
				}
				
				
			}
			else if(TIDDetails.contains("Tills")) {
				ObservableList<TTIDDataTable> data = FXCollections.observableArrayList();
				LinkedHashSet<String> set = new LinkedHashSet<>();
				
				EntityManagerFactory emfactory3 = Persistence.createEntityManagerFactory
						("SchoolMgtSystem");
				EntityManager entitymanager3 = emfactory3.createEntityManager();
				entitymanager3.getTransaction().begin();
				
				Tills bal = entitymanager3.find(Tills.class, stdNo);
				
				set = bal.getTTIDSet();
				
				entitymanager3.getTransaction().commit();
				entitymanager3.close();
				emfactory3.close();
				
				try {
					int SNo = 1;
					for(String str : set) {
						System.out.println(str);
						data.add(new TTIDDataTable(String.valueOf(SNo), str));
						SNo = SNo + 1;
					}
					
					tidSnoCol.setCellValueFactory(new PropertyValueFactory("sNo_Data"));
					ttidValCol.setCellValueFactory(new PropertyValueFactory("TID_Data"));
					
					ttidDataTable.setItems(data);
				}
				catch(Exception e2) {
					e2.printStackTrace();
				}
			}
			else if(TIDDetails.contains("ScoresId")) {
				ObservableList<TTIDDataTable> data = FXCollections.observableArrayList();
				LinkedHashSet<String> set = new LinkedHashSet<>();
				
				EntityManagerFactory emfactory3 = Persistence.createEntityManagerFactory
						("SchoolMgtSystem");
				EntityManager entitymanager3 = emfactory3.createEntityManager();
				entitymanager3.getTransaction().begin();
				
				Students std = entitymanager3.find(Students.class, stdNo);
				
				String stdClassId = std.getEntryClassAssigned();
				
				//***
				//set = std.getScores_sId();
				
				entitymanager3.getTransaction().commit();
				entitymanager3.close();
				emfactory3.close();
				
				EntityManagerFactory emfactory33 = Persistence.createEntityManagerFactory
						("SchoolMgtSystem");
				EntityManager entitymanager33 = emfactory33.createEntityManager();
				entitymanager33.getTransaction().begin();
				
				StudentClasses stdC = entitymanager33.find(StudentClasses.class, stdClassId);
				stdClass = stdC.getClassNo()+stdC.getClassLetter();
				year = stdC.getYear();
				term = stdC.getTerm();
				
//				String stdClass2 = getPrimeClassOnly(stdClassId, year, term, stdClass);
				String stdClass2 = getPrimeClass(stdClass);
				
				LinkedHashSet<String> elements2 = new LinkedHashSet<>();
				
				if(stdClass2.contains("JSS")) {
					Vector<JssScoreSheets> SID_elements = new Vector<>();
									
					try {
						
						SID_elements = getJssScoreSheetsByStdNoClassYearTerm(entitymanager33, stdNo, stdClass2, 
								year, term);
					}
					catch(Exception jssEx) {
						jssEx.printStackTrace();
					}
					
					for(JssScoreSheets sheet : SID_elements) {
						elements2.add(sheet.getSId());
					}
					set = elements2;
				}
				else if(stdClass2.contains("SSS")) {
					Vector<ScoreSheets> SID_elements = new Vector<>();
					
					try {
						
						SID_elements = getScoreSheetsByStdNoClassYearTerm(entitymanager33, stdNo, stdClass2, 
								year, term);
					}
					catch(Exception sssEx) {
						sssEx.printStackTrace();
					}
					
					for(ScoreSheets sheet : SID_elements) {
						elements2.add(sheet.getSId());
					}
					set = elements2;
				}
				else {
					//
				}
				
				entitymanager33.getTransaction().commit();
				entitymanager33.close();
				emfactory33.close();
				
				try {
					int SNo = 1;
					for(String str : set) {
						System.out.println(str);
						data.add(new TTIDDataTable(String.valueOf(SNo), str));
						SNo = SNo + 1;
					}
					
					tidSnoCol.setCellValueFactory(new PropertyValueFactory("sNo_Data"));
					ttidValCol.setCellValueFactory(new PropertyValueFactory("TID_Data"));
					
					ttidDataTable.setItems(data);
				}
				catch(Exception e2) {
					e2.printStackTrace();
				}
			}
			else if(TIDDetails.contains("SummaryIdSet")) {
				ObservableList<TTIDDataTable> data = FXCollections.observableArrayList();
				LinkedHashSet<String> set = new LinkedHashSet<>();
				
				EntityManagerFactory emfactory3 = Persistence.createEntityManagerFactory
						("SchoolMgtSystem");
				EntityManager entitymanager3 = emfactory3.createEntityManager();
				entitymanager3.getTransaction().begin();
				
				Students std = entitymanager3.find(Students.class, stdNo);
				
				String stdClassId = std.getEntryClassAssigned();
				
				//set = std.getSummaryIdSet();
				
				entitymanager3.getTransaction().commit();
				entitymanager3.close();
				emfactory3.close();
				
				EntityManagerFactory emfactory33 = Persistence.createEntityManagerFactory
						("SchoolMgtSystem");
				EntityManager entitymanager33 = emfactory33.createEntityManager();
				entitymanager33.getTransaction().begin();
				
				StudentClasses stdC = entitymanager33.find(StudentClasses.class, stdClassId);
				stdClass = stdC.getClassNo()+stdC.getClassLetter();
				year = stdC.getYear();
				term = stdC.getTerm();
				
//				String stdClass2 = getPrimeClassOnly(stdClassId, year, term, stdClass);
				String stdClass2 = getPrimeClass(stdClass);
				
				LinkedHashSet<String> elements2 = new LinkedHashSet<>();
				
				Vector<ScoreSheetsSummary> SUMID_elements = new Vector<>();
				
				SUMID_elements = getScoreSheetSummaryByStdNoClassYearTerm(entitymanager33, stdNo, 
						stdClass2, year, term);
				
				for(ScoreSheetsSummary sheet : SUMID_elements) {
					elements2.add(sheet.getSumId());
				}
				
				set = elements2;
				
				try {
					int SNo = 1;
					for(String str : set) {
						System.out.println(str);
						data.add(new TTIDDataTable(String.valueOf(SNo), str));
						SNo = SNo + 1;
					}
					
					tidSnoCol.setCellValueFactory(new PropertyValueFactory("sNo_Data"));
					ttidValCol.setCellValueFactory(new PropertyValueFactory("TID_Data"));
					
					ttidDataTable.setItems(data);
				}
				catch(Exception e2) {
					e2.printStackTrace();
				}
			}
			
			else if(TIDDetails.contains("AnnualSummary")) {
				ObservableList<TTIDDataTable> data = FXCollections.observableArrayList();
				LinkedHashSet<String> set = new LinkedHashSet<>();
				
				EntityManagerFactory emfactory3 = Persistence.createEntityManagerFactory
						("SchoolMgtSystem");
				EntityManager entitymanager3 = emfactory3.createEntityManager();
				entitymanager3.getTransaction().begin();
				
				Students std = entitymanager3.find(Students.class, stdNo);
				String stdClassId = std.getEntryClassAssigned();
				
				//set = std.getAnnualSummaryIdSet();
				
				entitymanager3.getTransaction().commit();
				entitymanager3.close();
				emfactory3.close();
				
				EntityManagerFactory emfactory33 = Persistence.createEntityManagerFactory
						("SchoolMgtSystem");
				EntityManager entitymanager33 = emfactory33.createEntityManager();
				entitymanager33.getTransaction().begin();
				
				StudentClasses stdC = entitymanager33.find(StudentClasses.class, stdClassId);
				stdClass = stdC.getClassNo()+stdC.getClassLetter();
				year = stdC.getYear();
				term = stdC.getTerm();
				
//				String stdClass2 = getPrimeClassOnly(stdClassId, year, term, stdClass);
				String stdClass2 = getPrimeClass(stdClass);
				
				LinkedHashSet<String> elements2 = new LinkedHashSet<>();
				
				Vector<AnnualScoreSheetsSummary> SUMID_elements = new Vector<>();
				
				SUMID_elements = getAnnualScoreSheetSummaryByStdClassYear(entitymanager33, stdNo, 
						stdClass2, year);
				
				for(AnnualScoreSheetsSummary sheet : SUMID_elements) {
					elements2.add(sheet.getSumId());
				}
				
				set = elements2;
				
				try {
					int SNo = 1;
					for(String str : set) {
						System.out.println(str);
						data.add(new TTIDDataTable(String.valueOf(SNo), str));
						SNo = SNo + 1;
					}
					
					tidSnoCol.setCellValueFactory(new PropertyValueFactory("sNo_Data"));
					ttidValCol.setCellValueFactory(new PropertyValueFactory("TID_Data"));
					
					ttidDataTable.setItems(data);
				}
				catch(Exception e2) {
					e2.printStackTrace();
				}
			}
			
			else if(TIDDetails.contains("AnnualScoresTotalIdSet")) {
				ObservableList<TTIDDataTable> data = FXCollections.observableArrayList();
				LinkedHashSet<String> set = new LinkedHashSet<>();
				
				EntityManagerFactory emfactory3 = Persistence.createEntityManagerFactory
						("SchoolMgtSystem");
				EntityManager entitymanager3 = emfactory3.createEntityManager();
				entitymanager3.getTransaction().begin();
				
				Students std = entitymanager3.find(Students.class, stdNo);
				String stdClassId = std.getEntryClassAssigned();
				
				//set = std.getAnnualScoresTotalIdSet();
				
				entitymanager3.getTransaction().commit();
				entitymanager3.close();
				emfactory3.close();
				
				EntityManagerFactory emfactory33 = Persistence.createEntityManagerFactory
						("SchoolMgtSystem");
				EntityManager entitymanager33 = emfactory33.createEntityManager();
				entitymanager33.getTransaction().begin();
				
				StudentClasses stdC = entitymanager33.find(StudentClasses.class, stdClassId);
				stdClass = stdC.getClassNo()+stdC.getClassLetter();
				year = stdC.getYear();
				term = stdC.getTerm();
				
//				String stdClass2 = getPrimeClassOnly(stdClassId, year, term, stdClass);
				String stdClass2 = getPrimeClass(stdClass);
				
				LinkedHashSet<String> elements2 = new LinkedHashSet<>();
				
				Vector<AnnualScoresTotal> SUMID_elements = new Vector<>();
				
				SUMID_elements = getAnnualScoresTotalByStdClassYear(entitymanager33, stdNo, 
						stdClass2, year);
				
				for(AnnualScoresTotal sheet : SUMID_elements) {
					elements2.add(sheet.getSumId());
				}
				
				set = elements2;
				
				try {
					int SNo = 1;
					for(String str : set) {
						System.out.println(str);
						data.add(new TTIDDataTable(String.valueOf(SNo), str));
						SNo = SNo + 1;
					}
					
					tidSnoCol.setCellValueFactory(new PropertyValueFactory("sNo_Data"));
					ttidValCol.setCellValueFactory(new PropertyValueFactory("TID_Data"));
					
					ttidDataTable.setItems(data);
				}
				catch(Exception e2) {
					e2.printStackTrace();
				}
			}
			else if(TIDDetails.contains("StudentClasses")) {
				ObservableList<TTIDDataTable> data = FXCollections.observableArrayList();
				LinkedHashSet<String> set = new LinkedHashSet<>();
				
				EntityManagerFactory emfactory3 = Persistence.createEntityManagerFactory
						("SchoolMgtSystem");
				EntityManager entitymanager3 = emfactory3.createEntityManager();
				entitymanager3.getTransaction().begin();
				
				StudentClasses std = entitymanager3.find(StudentClasses.class, stdNo);
				
				set = std.getStdList();
				
				entitymanager3.getTransaction().commit();
				entitymanager3.close();
				emfactory3.close();
				
				try {
					int SNo = 1;
					for(String str : set) {
						System.out.println(str);
						data.add(new TTIDDataTable(String.valueOf(SNo), str));
						SNo = SNo + 1;
					}
					
					tidSnoCol.setCellValueFactory(new PropertyValueFactory("sNo_Data"));
					ttidValCol.setCellValueFactory(new PropertyValueFactory("TID_Data"));
					
					ttidDataTable.setItems(data);
				}
				catch(Exception e2) {
					e2.printStackTrace();
				}
			}
			
		}
		catch(Exception e) {
			e.printStackTrace();
		}
		
		
	}
	
	//excel TTID
	@FXML public void excelClrTIDButton(ActionEvent event) {
		Workbook workbook = new HSSFWorkbook();
		Sheet spreadSheet = workbook.createSheet("sample");
		Row row = spreadSheet.createRow(0);
		
		for(int j = 0; j < ttidDataTable.getColumns().size(); j++) {
			row.createCell(j).setCellValue(ttidDataTable.getColumns().get(j).getText());
		}
		
		for(int i = 0; i < ttidDataTable.getItems().size(); i++) {
			row = spreadSheet.createRow(i + 1);
			for(int j = 0; j < ttidDataTable.getColumns().size(); j++) {
				if(ttidDataTable.getColumns().get(j).getCellData(i) != null) {
					row.createCell(j).setCellValue(ttidDataTable.getColumns().get(j).getCellData(i).toString());
				}
				else {
					row.createCell(j).setCellValue("");
				}
			}
		}
		
		String txt = TTIDTxtEntry.getText().toUpperCase().replace('/', '_')+
				LocalDate.now().toString()+".xls";
		String filePath = "C:\\workbook\\"+txt;
		
		try {
			FileOutputStream fileOut = new FileOutputStream(filePath);
			try {
				workbook.write(fileOut);
				fileOut.close();
				Alert alert = new Alert(Alert.AlertType.INFORMATION);
				alert.setContentText("filePath: "+ filePath);
				Optional<ButtonType> result = alert.showAndWait();
				if(result.get() == ButtonType.OK) {
					alert.close();
				}
				else {
					alert.close();
				}
			} catch (IOException e2) {
				Alert alert = new Alert(Alert.AlertType.ERROR);
				alert.setContentText("Error: "+ e2.getMessage());
				Optional<ButtonType> result = alert.showAndWait();
				if(result.get() == ButtonType.OK) {
					alert.close();
				}
				else {
					alert.close();
				}
				
			}
		} catch (FileNotFoundException e) {
			Alert alert = new Alert(Alert.AlertType.ERROR);
			alert.setContentText("Error: "+ e.getMessage());
			Optional<ButtonType> result = alert.showAndWait();
			if(result.get() == ButtonType.OK) {
				alert.close();
			}
			else {
				alert.close();
			}
		}
	}
	
	//Remove TTID
	@FXML public void removeTTIDButton(ActionEvent event) {
		String stdNo = TTIDTxtEntry.getText().toUpperCase();
		String switchCombo = TIDComboRetrieve.getValue();
		String stdNoRemove = TIDComboRemove.getValue();
		try {
			
			if(switchCombo.contains("AccountBalance")) {
				
//				LinkedHashSet<String> set = new LinkedHashSet<>();
//				
//				EntityManagerFactory emfactory3 = Persistence.createEntityManagerFactory
//						("SchoolMgtSystem");
//				EntityManager entitymanager3 = emfactory3.createEntityManager();
//				entitymanager3.getTransaction().begin();
//				
//				AccountBalance bal = entitymanager3.find(AccountBalance.class, stdNo);
//				
//				set = bal.getTIDSet();
//				
//				entitymanager3.getTransaction().commit();
//				entitymanager3.close();
//				emfactory3.close();
//				
//				try {
//					for(String str : set) {
//						
//						EntityManagerFactory emfactory = Persistence.createEntityManagerFactory
//								("SchoolMgtSystem");
//						EntityManager entitymanager = emfactory.createEntityManager();
//						entitymanager.getTransaction().begin();
//						
//						try {
//							Transactions trans = entitymanager.find(Transactions.class, str);
//							entitymanager.remove(trans);
//						}
//						catch(Exception e3) {
//							e3.printStackTrace();
//						}
//						
//						try {
//							TillTransactions trans2 = entitymanager.find(TillTransactions.class, str);
//							entitymanager.remove(trans2);
//						}
//						catch(Exception e4) {
//							e4.printStackTrace();
//						}
//						
//						try {
//							Invoicing trans3 = entitymanager.find(Invoicing.class, str);
//							entitymanager.remove(trans3);
//						}
//						catch(Exception e5) {
//							e5.printStackTrace();
//						}
//						
//						try {
//							BillingsInformation trans4 = entitymanager.find(BillingsInformation.class, str);
//							entitymanager.remove(trans4);
//						}
//						catch(Exception e6) {
//							e6.printStackTrace();
//						}
//						
//						entitymanager.getTransaction().commit();
//						entitymanager.close();
//						emfactory.close();
//						
//						EntityManagerFactory emfactory2 = Persistence.createEntityManagerFactory
//								("SchoolMgtSystem");
//						EntityManager entitymanager2 = emfactory2.createEntityManager();
//						entitymanager2.getTransaction().begin();
//						
//						AccountBalance bal2 = entitymanager2.find(AccountBalance.class, stdNo);
//						
//						bal2.getTIDSet().remove(str);
//						
//						entitymanager2.getTransaction().commit();
//						entitymanager2.close();
//						emfactory2.close();
//						
//					}
//				}
//				catch(Exception e2) {
//					e2.printStackTrace();
//				}
				
			}
			else if(switchCombo.contains("TIDSet")) {
				
			}
			else if(switchCombo.contains("ScoresId")) {
				EntityManagerFactory emfactory3 = Persistence.createEntityManagerFactory
						("SchoolMgtSystem");
				EntityManager entitymanager3 = emfactory3.createEntityManager();
				entitymanager3.getTransaction().begin();
				
				Students stdCla = entitymanager3.find(Students.class, stdNo);
				
				//***
				//stdCla.getScores_sId().remove(stdNoRemove);
				
				entitymanager3.getTransaction().commit();
				entitymanager3.close();
				emfactory3.close();
			}
			else if(switchCombo.contains("SummaryIdSet")) {
				EntityManagerFactory emfactory3 = Persistence.createEntityManagerFactory
						("SchoolMgtSystem");
				EntityManager entitymanager3 = emfactory3.createEntityManager();
				entitymanager3.getTransaction().begin();
				
				Students stdCla = entitymanager3.find(Students.class, stdNo);
				
				//***
				//stdCla.getSummaryIdSet().remove(stdNoRemove);
				
				entitymanager3.getTransaction().commit();
				entitymanager3.close();
				emfactory3.close();
			}
			else if(switchCombo.contains("AnnualSummary")) {
				EntityManagerFactory emfactory3 = Persistence.createEntityManagerFactory
						("SchoolMgtSystem");
				EntityManager entitymanager3 = emfactory3.createEntityManager();
				entitymanager3.getTransaction().begin();
				
				Students stdCla = entitymanager3.find(Students.class, stdNo);
				
				//***
				//stdCla.getAnnualSummaryIdSet().remove(stdNoRemove);
				
				entitymanager3.getTransaction().commit();
				entitymanager3.close();
				emfactory3.close();
			}
			else if(switchCombo.contains("AnnualScoresTotalIdSet")){
				EntityManagerFactory emfactory3 = Persistence.createEntityManagerFactory
						("SchoolMgtSystem");
				EntityManager entitymanager3 = emfactory3.createEntityManager();
				entitymanager3.getTransaction().begin();
				
				Students stdCla = entitymanager3.find(Students.class, stdNo);
				
				//***
				//stdCla.getAnnualScoresTotalIdSet().remove(stdNoRemove);
				
				entitymanager3.getTransaction().commit();
				entitymanager3.close();
				emfactory3.close();
			}
			else if(switchCombo.contains("StudentClasses")) {
				EntityManagerFactory emfactory3 = Persistence.createEntityManagerFactory
						("SchoolMgtSystem");
				EntityManager entitymanager3 = emfactory3.createEntityManager();
				entitymanager3.getTransaction().begin();
				
				StudentClasses stdCla = entitymanager3.find(StudentClasses.class, stdNo);
				
				stdCla.getStdList().remove(stdNoRemove);
				
				entitymanager3.getTransaction().commit();
				entitymanager3.close();
				emfactory3.close();
			}

		}
		catch(Exception e) {
			e.printStackTrace();
		}
		
	}
	
	public void populateStdClassesCombo2(ObservableList<String> list, ComboBox<String> combo) {
		try {
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			Vector<StudentClasses> userData = new Vector<>();
			Query queryX =
					entitymanager.createQuery("select e from StudentClasses e ");
			userData = (Vector<StudentClasses>) queryX.getResultList();
			
			for(StudentClasses x : userData) {
				if(!(list.contains(x.getClassId()))) {
					if(x.getStatus().equals("Active") && !x.getClassId().contains("ADMISSION") ) { 
						list.add(x.getClassId());
					}
				}
			}
			
			combo.setItems(list);
			
			entitymanager.getTransaction().commit();
			entitymanager.close();
			emfactory.close();
			
			new AutoCompleteComboBoxListener<>(combo);
		}
		catch(Exception e) {
			//cscId.setText("Error initializing classes: "+ e.getMessage());
			e.printStackTrace();
		}
	}
	
	public void populateStdClassesCombo3(ObservableList<String> list, ComboBox<String> combo) {
		try {
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			Vector<StudentClasses> userData = new Vector<>();
			Query queryX =
					entitymanager.createQuery("select e from StudentClasses e ");
			userData = (Vector<StudentClasses>) queryX.getResultList();
			
			for(StudentClasses x : userData) {
				if(!(list.contains(x.getClassId()))) {
					if(x.getStatus().equals("Active") && x.getClassId().contains("JSS") || 
							x.getStatus().equals("Active") && x.getClassId().contains("SSS")) {
					
						list.add(x.getClassId());
					}
				}
			}
			
			combo.setItems(list);
			
			entitymanager.getTransaction().commit();
			entitymanager.close();
			emfactory.close();
			
			new AutoCompleteComboBoxListener<>(combo);
		}
		catch(Exception e) {
			e.printStackTrace();
		}
	}
	
	public void populateStdClassesCombo4(ComboBox<String> combo) {
		ObservableList<String> list = FXCollections.observableArrayList();
		try {
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			Vector<StudentClasses> userData = new Vector<>();
			Query queryX =
					entitymanager.createQuery("select e from StudentClasses e ");
			userData = (Vector<StudentClasses>) queryX.getResultList();
			
			for(StudentClasses x : userData) {
				if(!(list.contains(x.getClassId()))) {
					if(x.getStatus().equals("Active") && x.getClassId().contains("JSS") || 
							x.getStatus().equals("Active") && x.getClassId().contains("SSS")) {
					
						list.add(x.getClassId());
					}
				}
			}
			
			combo.setItems(list);
			
			entitymanager.getTransaction().commit();
			entitymanager.close();
			emfactory.close();
			
			new AutoCompleteComboBoxListener<>(combo);
		}
		catch(Exception e) {
			e.printStackTrace();
		}
	}
	
	//clear TTID VBox init
	@FXML public void clearTTIDsInit(MouseEvent event) {
		
		if(dispUserClass.equals("Admin") && !(dispName.equalsIgnoreCase("Tony Lifu"))) {
			clearScoresBtn.setDisable(true);
			dropScoresTablesBtn.setDisable(true);
		}
		
		clearScoresBtn.setOnMouseEntered(e -> {
			clearScoresBtn.setTextFill(Color.RED);
		});
		clearScoresBtn.setOnMouseExited(e -> {
			clearScoresBtn.setTextFill(Color.DARKBLUE);
		});
		
		dropScoresTablesBtn.setOnMouseEntered(e -> {
			dropScoresTablesBtn.setTextFill(Color.RED);
		});
		dropScoresTablesBtn.setOnMouseExited(e -> {
			dropScoresTablesBtn.setTextFill(Color.DARKBLUE);
		});
	}
	
	//Clear All SIDs
	@FXML private Button clearScoresBtn, dropScoresTablesBtn;
	@FXML public void clearAllSIDsButton(ActionEvent event) {
		
		clearScoresBtn.setTextFill(Color.RED);
	
		
		try {
			Vector<AnnualScoresTotal> annualData = new Vector<AnnualScoresTotal>();
			//LinkedHashSet<String> studentIdList = new LinkedHashSet<>();
			
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			annualData = getAnnualScoresTotalData(entitymanager);
			
			entitymanager.getTransaction().commit();
			entitymanager.close();
			emfactory.close();
			
			for(AnnualScoresTotal score : annualData) {
				try {
					EntityManagerFactory emfactory2 = Persistence.createEntityManagerFactory("SchoolMgtSystem");
					EntityManager entitymanager2 = emfactory2.createEntityManager();
					entitymanager2.getTransaction().begin();
					
					Students std = entitymanager2.find(Students.class, score.getStudentId());
					
//					try {
//						std.getScores_sId().clear();
//					}
//					catch(Exception exx) {
//						exx.printStackTrace();
//					}
//					
//					try {
//						std.getSummaryIdSet().clear();
//					}
//					catch(Exception exx) {
//						exx.printStackTrace();
//					}
//					
//					try {
//						std.getAnnualSummaryIdSet().clear();
//					}
//					catch(Exception exx) {
//						exx.printStackTrace();
//					}
//					
//					try {
//						std.getAnnualScoresTotalIdSet().clear();
//					}
//					catch(Exception exx) {
//						exx.printStackTrace();
//					}
					
					entitymanager2.getTransaction().commit();
					entitymanager2.close();
					emfactory2.close();
				}
				catch(Exception ex) {
					ex.printStackTrace();
//					Alert alert = new Alert(Alert.AlertType.ERROR);
//					alert.setContentText("Error: "+ ex.getMessage());
//					alert.setHeaderText("ERROR");
//					Optional<ButtonType> result = alert.showAndWait();
//					if(result.get() == ButtonType.OK) {
//						alert.close();
//					}
//					else {
//						alert.close();
//					}
				}
			}
			
			clearScoresBtn.setTextFill(Color.DARKBLUE);
		}
		catch(Exception e) {
			e.printStackTrace();
			Alert alert = new Alert(Alert.AlertType.ERROR);
			alert.setContentText("Error: "+ e.getMessage());
			alert.setHeaderText("ERROR");
			Optional<ButtonType> result = alert.showAndWait();
			if(result.get() == ButtonType.OK) {
				alert.close();
			}
			else {
				alert.close();
			}
		}
		
		//success
		Alert alert = new Alert(Alert.AlertType.INFORMATION);
		alert.setContentText("All SIDs cleared..!");
		alert.setHeaderText("SUCCESS");
		Optional<ButtonType> result = alert.showAndWait();
		if(result.get() == ButtonType.OK) {
			alert.close();
		}
		else {
			alert.close();
		}
	}
	
	
	//drop all scores tables
	@FXML public void dropAllScoresTable(ActionEvent event) {
		String jdbcUrl = dbURL;
		String username = dbUSR;
		String password = dbPWD;
		
		String sql2 = "drop tables JssScoreSheets, ScoreSheets, ScoreSheetsSummary, "
				+ "AnnualScoreSheetsSummary, AnnualScoresTotal";
		
		try(Connection conn = DriverManager.getConnection(jdbcUrl, username, password);
				){
			
			PreparedStatement stmt = conn.prepareStatement(sql2);
			stmt.executeUpdate();
		}
		catch(SQLException eq) {
			Alert alert = new Alert(Alert.AlertType.ERROR);
			alert.setContentText(eq.getMessage());
			alert.setHeaderText("ERROR");
			Optional<ButtonType> result = alert.showAndWait();
			if(result.get() == ButtonType.OK) {
				alert.close();
			}
			else {
				alert.close();
			}
		}
		
		//success
		Alert alert = new Alert(Alert.AlertType.INFORMATION);
		alert.setContentText("JssScoreSheets, ScoreSheets, ScoreSheetsSummary, "
				+ "AnnualScoreSheetsSummary and AnnualScoresTotal dropped!");
		alert.setHeaderText("SUCCESS");
		Optional<ButtonType> result = alert.showAndWait();
		if(result.get() == ButtonType.OK) {
			alert.close();
		}
		else {
			alert.close();
		}
	}
	
	
	//JSS Scoresheets Manager - TableView
	@FXML private Label JSSClassLabel;
	@FXML private ComboBox<String> JSSClassCombo, jssSubjectCombo, jssSubjCodeCombo;
	@FXML private TableView <JSSScoreSheetEntryDataTable> jssScoreSheetEntryDataTable;
	@FXML private TableColumn<JSSScoreSheetEntryDataTable,String> jssEntrySNoCol, jssEntryStdNoCol, 
		jssEntryStdNameCol, jssEntryCA1Col, jssEntryCA2Col, jssEntryCA3Col, jssEntryCA4Col, jssEntryCA5Col,
		jssEntryCA6Col, jssEntryExamCol, jssEntryTotalCol, jssEntryGradeCol;
	ObservableList<String> jssClass = FXCollections.observableArrayList();
	ObservableList<String> jssSubject = FXCollections.observableArrayList();
	
	@FXML public void jssEntryInit(MouseEvent event) {
		populateStdClassesCombo3(jssClass, JSSClassCombo);
	}
	
	@FXML public void jssEntryInit2(MouseEvent event) {
		//search by subject name
		Vector<SubjectNames> userData3 = new Vector<>();
		if(dispUserClass.equals("Teacher")) {
			String user = dispUserName;
			String staffId = "";
			
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			Query query2 =
					entitymanager.createQuery("select e from SubjectNames e ");
			userData3 = (Vector<SubjectNames>) query2.getResultList();
			
			Users usr = entitymanager.find(Users.class, user);
			
			staffId = usr.getUserStaffID();
			
			entitymanager.getTransaction().commit();
			entitymanager.close();
			emfactory.close();
			
			//assigned subjects
			LinkedHashSet<String> subCodeList = new LinkedHashSet<>();
			LinkedHashSet<String> subList = new LinkedHashSet<>();
			
			EntityManagerFactory emfactorys = Persistence.createEntityManagerFactory("SchoolMgtSystem");
			EntityManager entitymanagers = emfactorys.createEntityManager();
			entitymanagers.getTransaction().begin();
			
			AssignedSubjects sub = entitymanagers.find(AssignedSubjects.class, staffId);
			
			subCodeList = sub.getSubjectCodeList();
			subList = sub.getSubjectList();
			
			entitymanagers.getTransaction().commit();
			entitymanagers.close();
			emfactorys.close();
			
			for(String code : subCodeList) {
				EntityManagerFactory emfactoryy = Persistence.createEntityManagerFactory("SchoolMgtSystem");
				EntityManager entitymanagery = emfactoryy.createEntityManager();
				entitymanagery.getTransaction().begin();
				
				SubjectNames subName = entitymanagery.find(SubjectNames.class, Integer.parseInt(code));
				
				if(!(jssSubject.contains(subName.getSubjectName()))) {
					jssSubject.add(subName.getSubjectName());
				}
				
				entitymanagery.getTransaction().commit();
				entitymanagery.close();
				emfactoryy.close();
			}
			
			jssSubjectCombo.setItems(jssSubject);
			new AutoCompleteComboBoxListener<>(jssSubjectCombo);
			
			if(!(jssSubjectCombo.getValue().isEmpty())) {
				String name = jssSubjectCombo.getValue();
				for(SubjectNames std : userData3) {
					if((std.getSubjectName().equals(name))) {
						jssSubjCodeCombo.setValue(String.valueOf(std.getSubjectCode()));
					}
				}
			}
			
		}
		else {
			
			//subjectCode_TF.setItems(subjectCodeN);
			
			try {
				EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
				EntityManager entitymanager = emfactory.createEntityManager();
				entitymanager.getTransaction().begin();
				
				Query query2 =
						entitymanager.createQuery("select e from SubjectNames e ");
				userData3 = (Vector<SubjectNames>) query2.getResultList();
				
				for(SubjectNames x : userData3) {
					if(!(jssSubject.contains(x.getSubjectName()))) {
						jssSubject.add(x.getSubjectName());
					}
				}
				
				jssSubjectCombo.setItems(jssSubject);
				
				entitymanager.getTransaction().commit();
				entitymanager.close();
				emfactory.close();
				
				new AutoCompleteComboBoxListener<>(jssSubjectCombo);
			}
			catch(Exception e) {
				e.printStackTrace();
			}
			
			if(!(jssSubjectCombo.getValue().isEmpty())) {
				String name = jssSubjectCombo.getValue();
				for(SubjectNames std : userData3) {
					if((std.getSubjectName().equals(name))) {
						jssSubjCodeCombo.setValue(String.valueOf(std.getSubjectCode()));
					}
				}
			}
		}
	}
	
	//populate tableview
	@FXML public void spoolJssScoresheetsButton(ActionEvent event) {
		try {
			String stdClassId = JSSClassCombo.getValue();
			
			if(stdClassId.contains("JSS")) {
				String stdSubject = jssSubjectCombo.getValue();
				String stdSubjCode2 = jssSubjCodeCombo.getValue();
				int stdSubjCode = Integer.parseInt(stdSubjCode2);
				
				try {
					String studentClass, year, term;
					
					ObservableList<JSSScoreSheetEntryDataTable> data = FXCollections.observableArrayList();
					LinkedHashSet<String> SID = new LinkedHashSet<>();
					LinkedHashSet<String> STDID_JssScoreSheet = new LinkedHashSet<>();
					LinkedHashSet<String> STDID_ClassList = new LinkedHashSet<>();
					
					EntityManagerFactory emfactory = Persistence.createEntityManagerFactory
							("SchoolMgtSystem");
					EntityManager entitymanager = emfactory.createEntityManager();
					entitymanager.getTransaction().begin();
					
					StudentClasses std = entitymanager.find(StudentClasses.class, stdClassId);
					
					STDID_ClassList = std.getStdList();
					studentClass = std.getClassNo()+std.getClassLetter();
					year = std.getYear();
					term = std.getTerm();
					
					entitymanager.getTransaction().commit();
					entitymanager.close();
					emfactory.close();
					
//					String stdClass2 = getPrimeClassOnly(stdClassId, year, term, studentClass);
					String stdClass2 = getPrimeClass(studentClass);
					
					//get jss scoresheet list
					final String JDBC_Driver2 = "com.mysql.jdbc.Driver";
					final String DB_URL2 = dbURL;
					final String DB_User2 = dbUSR;
					final String DB_PWD2 = dbPWD;
					
					
					Connection conn2 = null;
					PreparedStatement stmt2 = null;
					
					try {
						Class.forName(JDBC_Driver2);
						conn2 = DriverManager.getConnection(DB_URL2, DB_User2, DB_PWD2);
						
						String sql;
						
						sql = "SELECT * FROM jssscoresheets where "
								+ "STDCLASS = ? "
								+ "and SCORESYEAR = ? "
								+ "and TERM = ? "
								+ "and SUBJECTNAME = ? "
								+ "and SUBJECTCODE = ?";
						
						stmt2 = conn2.prepareStatement(sql);
						
						stmt2.setString(1, stdClass2);
						stmt2.setString(2, year);
						stmt2.setString(3, term);
						stmt2.setString(4, stdSubject);
						stmt2.setInt(5, stdSubjCode);
						
						ResultSet rs = stmt2.executeQuery();
						
						while(rs.next()) {
							SID.add(rs.getString("SID"));
							STDID_JssScoreSheet.add(rs.getString("STDID"));
						}
						rs.close();
						stmt2.close();
						conn2.close();
					}
					catch(SQLException es) {
						JSSClassLabel.setText("Error JDBC: "+ es.getSQLState());
					}
					catch(Exception es2) {
						JSSClassLabel.setText("Error JDBC: "+ es2.getMessage());
					}
					finally {
						try {
							if(stmt2 != null ) {
								stmt2.close();
							}
						}
						catch(SQLException ces) {
							JSSClassLabel.setText("Error JDBC: "+ ces.getSQLState());
						}
						try {
							if(conn2 != null ) {
								conn2.close();
							}
						}
						catch(Exception ces2) {
							JSSClassLabel.setText("JDBC: "+ces2.getMessage());
						}
					}
					
					int sNo = 1;
					for(String sid : SID) {
						EntityManagerFactory emfactory2 = Persistence.createEntityManagerFactory
								("SchoolMgtSystem");
						EntityManager entitymanager2 = emfactory2.createEntityManager();
						entitymanager2.getTransaction().begin();
						
						JssScoreSheets score = entitymanager2.find(JssScoreSheets.class, sid);
						
						data.add(new JSSScoreSheetEntryDataTable(
								String.valueOf(sNo),
								score.getStdId(),
								score.getName(),
								String.valueOf(score.getCA1()),
								String.valueOf(score.getCA2()),
								String.valueOf(score.getCA3()),
								String.valueOf(score.getCA4()),
								String.valueOf(score.getCA5()),
								String.valueOf(score.getCA6()),
								String.valueOf(score.getExamScore()),
								String.valueOf(score.getTotal()),
								score.getGrade()
								));
						
						entitymanager2.getTransaction().commit();
						entitymanager2.close();
						emfactory2.close();
						
						sNo = sNo + 1;
					}
					
					for(String stdNo2 : STDID_ClassList) {
						if(!STDID_JssScoreSheet.contains(stdNo2)) {
							
							EntityManagerFactory emfactory2 = Persistence.createEntityManagerFactory
									("SchoolMgtSystem");
							EntityManager entitymanager2 = emfactory2.createEntityManager();
							entitymanager2.getTransaction().begin();
							
							Students std2 = entitymanager2.find(Students.class, stdNo2);
							
							data.add(new JSSScoreSheetEntryDataTable(
									String.valueOf(sNo),
									std2.getId(),
									std2.getOtherNames() + " " + std2.getSurName(),
									String.valueOf(0),
									String.valueOf(0),
									String.valueOf(0),
									String.valueOf(0),
									String.valueOf(0),
									String.valueOf(0),
									String.valueOf(0),
									String.valueOf(0),
									"E"
									));
							
							entitymanager2.getTransaction().commit();
							entitymanager2.close();
							emfactory2.close();
							
							sNo = sNo + 1;
							
						}
					}
					
					jssEntrySNoCol.setCellValueFactory(new PropertyValueFactory("sNo_Data"));
					jssEntryStdNoCol.setCellValueFactory(new PropertyValueFactory("stdNo_Data"));
					jssEntryStdNameCol.setCellValueFactory(new PropertyValueFactory("stdName_Data"));
					jssEntryCA1Col.setCellValueFactory(new PropertyValueFactory("CA1_Data"));
					jssEntryCA2Col.setCellValueFactory(new PropertyValueFactory("CA2_Data"));
					jssEntryCA3Col.setCellValueFactory(new PropertyValueFactory("CA3_Data"));
					jssEntryCA4Col.setCellValueFactory(new PropertyValueFactory("CA4_Data"));
					jssEntryCA5Col.setCellValueFactory(new PropertyValueFactory("CA5_Data"));
					jssEntryCA6Col.setCellValueFactory(new PropertyValueFactory("CA6_Data"));
					jssEntryExamCol.setCellValueFactory(new PropertyValueFactory("exam_Data"));
					jssEntryTotalCol.setCellValueFactory(new PropertyValueFactory("total_Data"));
					jssEntryGradeCol.setCellValueFactory(new PropertyValueFactory("grade_Data"));
					
					jssScoreSheetEntryDataTable.setItems(data);
					
				}
				catch(Exception e2) {
					e2.printStackTrace();
				}
			}
			else {
				Alert alert = new Alert(Alert.AlertType.ERROR);
				alert.setContentText("Invalid Selections or entries... Select the right class category");
				Optional<ButtonType> result = alert.showAndWait();
				if(result.get() == ButtonType.OK) {
					alert.close();
				}
				else {
					alert.close();
				}
			}
		}
		catch(Exception e) {
			JSSClassLabel.setText("Error: "+ e.getMessage());
			jssScoreSheetEntryDataTable.setItems(null);
		}
		
		//set table uneditable
		jssScoreSheetEntryDataTable.setEditable(false);
		jssScoreSheetEntryDataTable.getSelectionModel().cellSelectionEnabledProperty().set(false);
	}
	
	//JssScoreSheetsNew - Spool
	@FXML public void spoolJssNewScoresheetsButton(ActionEvent event) {
		try {
			String stdClassId = JSSNewClassCombo.getValue();
			
			if(stdClassId.contains("JSS")) {
				String stdSubject = jssNewSubjectCombo.getValue();
				String stdSubjCode2 = jssNewSubjCodeCombo.getValue();
				int stdSubjCode = Integer.parseInt(stdSubjCode2);
				
				try {
					String studentClass, year, term;
					
					ObservableList<JSSScoreSheetNewEntryDataTable> data = FXCollections.observableArrayList();
					LinkedHashSet<String> SID = new LinkedHashSet<>();
					LinkedHashSet<String> STDID_JssScoreSheet = new LinkedHashSet<>();
					LinkedHashSet<String> STDID_ClassList = new LinkedHashSet<>();
					
					EntityManagerFactory emfactory = Persistence.createEntityManagerFactory
							("SchoolMgtSystem");
					EntityManager entitymanager = emfactory.createEntityManager();
					entitymanager.getTransaction().begin();
					
					StudentClasses std = entitymanager.find(StudentClasses.class, stdClassId);
					
					STDID_ClassList = std.getStdList();
					studentClass = std.getClassNo()+std.getClassLetter();
					year = std.getYear();
					term = std.getTerm();
					
					entitymanager.getTransaction().commit();
					entitymanager.close();
					emfactory.close();
					
//					String stdClass2 = getPrimeClassOnly(stdClassId, year, term, studentClass);
					String stdClass2 = getPrimeClass(studentClass);
					
					//get jss scoresheet list
					final String JDBC_Driver2 = "com.mysql.jdbc.Driver";
					final String DB_URL2 = dbURL;
					final String DB_User2 = dbUSR;
					final String DB_PWD2 = dbPWD;
					
					
					Connection conn2 = null;
					PreparedStatement stmt2 = null;
					
					try {
						Class.forName(JDBC_Driver2);
						conn2 = DriverManager.getConnection(DB_URL2, DB_User2, DB_PWD2);
						
						String sql;
						
						sql = "SELECT * FROM jssscoresheetsNew where "
								+ "STDCLASS = ? "
								+ "and SCORESYEAR = ? "
								+ "and TERM = ? "
								+ "and SUBJECTNAME = ? "
								+ "and SUBJECTCODE = ?";
						
						stmt2 = conn2.prepareStatement(sql);
						
						stmt2.setString(1, stdClass2);
						stmt2.setString(2, year);
						stmt2.setString(3, term);
						stmt2.setString(4, stdSubject);
						stmt2.setInt(5, stdSubjCode);
						
						ResultSet rs = stmt2.executeQuery();
						
						while(rs.next()) {
							SID.add(rs.getString("SID"));
							STDID_JssScoreSheet.add(rs.getString("STDID"));
						}
						rs.close();
						stmt2.close();
						conn2.close();
					}
					catch(SQLException es) {
						JssNewClassLabel.setText("Error JDBC: "+ es.getSQLState());
					}
					catch(Exception es2) {
						JssNewClassLabel.setText("Error JDBC: "+ es2.getMessage());
					}
					finally {
						try {
							if(stmt2 != null ) {
								stmt2.close();
							}
						}
						catch(SQLException ces) {
							JssNewClassLabel.setText("Error JDBC: "+ ces.getSQLState());
						}
						try {
							if(conn2 != null ) {
								conn2.close();
							}
						}
						catch(Exception ces2) {
							JssNewClassLabel.setText("JDBC: "+ces2.getMessage());
						}
					}
					
					int sNo = 1;
					for(String sid : SID) {
						EntityManagerFactory emfactory2 = Persistence.createEntityManagerFactory
								("SchoolMgtSystem");
						EntityManager entitymanager2 = emfactory2.createEntityManager();
						entitymanager2.getTransaction().begin();
						
						JssScoreSheetsNew score = entitymanager2.find(JssScoreSheetsNew.class, sid);
						
						data.add(new JSSScoreSheetNewEntryDataTable(
								String.valueOf(sNo),
								score.getStdId(),
								score.getName(),
								String.valueOf(score.getTest1()),
								String.valueOf(score.getASS1()),
								String.valueOf(score.getClassWork1()),
								String.valueOf(score.getProject()),
								String.valueOf(score.getASS2()),
								String.valueOf(score.getClassWork2()),
								String.valueOf(score.getTest2()),													
								String.valueOf(score.getASS3()),
								String.valueOf(score.getClassWork3()),
								String.valueOf(
										score.getTest1() + score.getASS1() + score.getClassWork1()
										+ score.getProject() + score.getTest2() + score.getASS2() 
										+ score.getClassWork2() + score.getASS3() + score.getClassWork3()
										),
								String.valueOf(score.getExamScore()),
								String.valueOf(score.getTotal()),
								score.getGrade()
								));
						
						entitymanager2.getTransaction().commit();
						entitymanager2.close();
						emfactory2.close();
						
						sNo = sNo + 1;
					}
					
					for(String stdNo2 : STDID_ClassList) {
						if(!STDID_JssScoreSheet.contains(stdNo2)) {
							
							EntityManagerFactory emfactory2 = Persistence.createEntityManagerFactory
									("SchoolMgtSystem");
							EntityManager entitymanager2 = emfactory2.createEntityManager();
							entitymanager2.getTransaction().begin();
							
							Students std2 = entitymanager2.find(Students.class, stdNo2);
							
							data.add(new JSSScoreSheetNewEntryDataTable(
									String.valueOf(sNo),
									std2.getId(),
									std2.getOtherNames() + " " + std2.getSurName(),
									String.valueOf(0),
									String.valueOf(0),
									String.valueOf(0),
									String.valueOf(0),
									String.valueOf(0),
									String.valueOf(0),
									String.valueOf(0),
									String.valueOf(0),
									String.valueOf(0),
									String.valueOf(0),
									String.valueOf(0),
									String.valueOf(0),
									"E"
									));
							
							entitymanager2.getTransaction().commit();
							entitymanager2.close();
							emfactory2.close();
							
							sNo = sNo + 1;
							
						}
					}
					
					jssNewSNoCol.setCellValueFactory(new PropertyValueFactory("sNo_Data"));
					jssNewStdNoCol.setCellValueFactory(new PropertyValueFactory("stdNo_Data"));
					jssNewStdNameCol.setCellValueFactory(new PropertyValueFactory("stdName_Data"));					
					jssNewTest1Col.setCellValueFactory(new PropertyValueFactory("test1_Data"));					
					jssNewAss1Col.setCellValueFactory(new PropertyValueFactory("ASS1_Data"));
					jssNewCWK1Col.setCellValueFactory(new PropertyValueFactory("CWK1_Data"));
					jssNewProjCol.setCellValueFactory(new PropertyValueFactory("proj_Data"));
					jssNewAss2Col.setCellValueFactory(new PropertyValueFactory("ASS2_Data"));
					jssNewCWK2Col.setCellValueFactory(new PropertyValueFactory("CWK2_Data"));
					jssNewTest2Col.setCellValueFactory(new PropertyValueFactory("test2_Data"));
					jssNewAss3Col.setCellValueFactory(new PropertyValueFactory("ASS3_Data"));
					jssNewCWK3Col.setCellValueFactory(new PropertyValueFactory("CWK3_Data"));
					jssNewTotalCAsCol.setCellValueFactory(new PropertyValueFactory("totalCAs_Data"));
					jssNewExamCol.setCellValueFactory(new PropertyValueFactory("exam_Data"));
					jssNewTotalCol.setCellValueFactory(new PropertyValueFactory("total_Data"));
					jssNewGradeCol.setCellValueFactory(new PropertyValueFactory("grade_Data"));
					
					jssScoreSheetNewEntryDataTable.setItems(data);
					
				}
				catch(Exception e2) {
					e2.printStackTrace();
				}
			}
			else {
				Alert alert = new Alert(Alert.AlertType.ERROR);
				alert.setContentText("Invalid Selections or entries... Select the right class category");
				Optional<ButtonType> result = alert.showAndWait();
				if(result.get() == ButtonType.OK) {
					alert.close();
				}
				else {
					alert.close();
				}
			}
		}
		catch(Exception e) {
			JssNewClassLabel.setText("Error: "+ e.getMessage());
			jssScoreSheetNewEntryDataTable.setItems(null);
		}
		
		//set table uneditable
		jssScoreSheetNewEntryDataTable.setEditable(false);
		jssScoreSheetNewEntryDataTable.getSelectionModel().cellSelectionEnabledProperty().set(false);
	}
	
	//Resfresh JssScoreSheetsNew
	public void refreshJssTableScoresNewEntry(ActionEvent event) {
		try {
			String stdClassId = JSSNewClassCombo.getValue();
			
			if(stdClassId.contains("JSS")) {
				String stdSubject = jssNewSubjectCombo.getValue();
				String stdSubjCode2 = jssNewSubjCodeCombo.getValue();
				int stdSubjCode = Integer.parseInt(stdSubjCode2);
				
				try {
					String studentClass, year, term;
					
					ObservableList<JSSScoreSheetNewEntryDataTable> data = FXCollections.observableArrayList();
					LinkedHashSet<String> SID = new LinkedHashSet<>();
					LinkedHashSet<String> STDID_JssScoreSheet = new LinkedHashSet<>();
					LinkedHashSet<String> STDID_ClassList = new LinkedHashSet<>();
					
					EntityManagerFactory emfactory = Persistence.createEntityManagerFactory
							("SchoolMgtSystem");
					EntityManager entitymanager = emfactory.createEntityManager();
					entitymanager.getTransaction().begin();
					
					StudentClasses std = entitymanager.find(StudentClasses.class, stdClassId);
					
					STDID_ClassList = std.getStdList();
					studentClass = std.getClassNo()+std.getClassLetter();
					year = std.getYear();
					term = std.getTerm();
					
					entitymanager.getTransaction().commit();
					entitymanager.close();
					emfactory.close();
					
//					String stdClass2 = getPrimeClassOnly(stdClassId, year, term, studentClass);
					String stdClass2 = getPrimeClass(studentClass);
					
					//get jss scoresheet list
					final String JDBC_Driver2 = "com.mysql.jdbc.Driver";
					final String DB_URL2 = dbURL;
					final String DB_User2 = dbUSR;
					final String DB_PWD2 = dbPWD;
					
					
					Connection conn2 = null;
					PreparedStatement stmt2 = null;
					
					try {
						Class.forName(JDBC_Driver2);
						conn2 = DriverManager.getConnection(DB_URL2, DB_User2, DB_PWD2);
						
						String sql;
						
						sql = "SELECT * FROM jssscoresheetsNew where "
								+ "STDCLASS = ? "
								+ "and SCORESYEAR = ? "
								+ "and TERM = ? "
								+ "and SUBJECTNAME = ? "
								+ "and SUBJECTCODE = ?";
						
						stmt2 = conn2.prepareStatement(sql);
						
						stmt2.setString(1, stdClass2);
						stmt2.setString(2, year);
						stmt2.setString(3, term);
						stmt2.setString(4, stdSubject);
						stmt2.setInt(5, stdSubjCode);
						
						ResultSet rs = stmt2.executeQuery();
						
						while(rs.next()) {
							SID.add(rs.getString("SID"));
							STDID_JssScoreSheet.add(rs.getString("STDID"));
						}
						rs.close();
						stmt2.close();
						conn2.close();
					}
					catch(SQLException es) {
						JssNewClassLabel.setText("Error JDBC: "+ es.getSQLState());
					}
					catch(Exception es2) {
						JssNewClassLabel.setText("Error JDBC: "+ es2.getMessage());
					}
					finally {
						try {
							if(stmt2 != null ) {
								stmt2.close();
							}
						}
						catch(SQLException ces) {
							JssNewClassLabel.setText("Error JDBC: "+ ces.getSQLState());
						}
						try {
							if(conn2 != null ) {
								conn2.close();
							}
						}
						catch(Exception ces2) {
							JssNewClassLabel.setText("JDBC: "+ces2.getMessage());
						}
					}
					
					int sNo = 1;
					for(String sid : SID) {
						EntityManagerFactory emfactory2 = Persistence.createEntityManagerFactory
								("SchoolMgtSystem");
						EntityManager entitymanager2 = emfactory2.createEntityManager();
						entitymanager2.getTransaction().begin();
						
						JssScoreSheetsNew score = entitymanager2.find(JssScoreSheetsNew.class, sid);
						
						data.add(new JSSScoreSheetNewEntryDataTable(
								String.valueOf(sNo),
								score.getStdId(),
								score.getName(),
								String.valueOf(score.getTest1()),
								String.valueOf(score.getASS1()),
								String.valueOf(score.getClassWork1()),
								String.valueOf(score.getProject()),
								String.valueOf(score.getTest2()),
								String.valueOf(score.getASS2()),
								String.valueOf(score.getClassWork2()),
								String.valueOf(score.getASS3()),
								String.valueOf(score.getClassWork3()),
								String.valueOf(
										score.getTest1() + score.getASS1() + score.getClassWork1()
										+ score.getProject() + score.getTest2() + score.getASS2() 
										+ score.getClassWork2() + score.getASS3() + score.getClassWork3()
										),
								String.valueOf(score.getExamScore()),
								String.valueOf(score.getTotal()),
								score.getGrade()
								));
						
						entitymanager2.getTransaction().commit();
						entitymanager2.close();
						emfactory2.close();
						
						sNo = sNo + 1;
					}
					
					for(String stdNo2 : STDID_ClassList) {
						if(!STDID_JssScoreSheet.contains(stdNo2)) {
							
							EntityManagerFactory emfactory2 = Persistence.createEntityManagerFactory
									("SchoolMgtSystem");
							EntityManager entitymanager2 = emfactory2.createEntityManager();
							entitymanager2.getTransaction().begin();
							
							Students std2 = entitymanager2.find(Students.class, stdNo2);
							
							data.add(new JSSScoreSheetNewEntryDataTable(
									String.valueOf(sNo),
									std2.getId(),
									std2.getOtherNames() + " " + std2.getSurName(),
									String.valueOf(0),
									String.valueOf(0),
									String.valueOf(0),
									String.valueOf(0),
									String.valueOf(0),
									String.valueOf(0),
									String.valueOf(0),
									String.valueOf(0),
									String.valueOf(0),
									String.valueOf(0),
									String.valueOf(0),
									String.valueOf(0),
									"E"
									));
							
							entitymanager2.getTransaction().commit();
							entitymanager2.close();
							emfactory2.close();
							
							sNo = sNo + 1;
							
						}
					}
					
					jssNewSNoCol.setCellValueFactory(new PropertyValueFactory("sNo_Data"));
					jssNewStdNoCol.setCellValueFactory(new PropertyValueFactory("stdNo_Data"));
					jssNewStdNameCol.setCellValueFactory(new PropertyValueFactory("stdName_Data"));					
					jssNewTest1Col.setCellValueFactory(new PropertyValueFactory("test1_Data"));					
					jssNewAss1Col.setCellValueFactory(new PropertyValueFactory("ASS1_Data"));
					jssNewCWK1Col.setCellValueFactory(new PropertyValueFactory("CWK1_Data"));
					jssNewProjCol.setCellValueFactory(new PropertyValueFactory("proj_Data"));
					jssNewAss2Col.setCellValueFactory(new PropertyValueFactory("ASS2_Data"));
					jssNewCWK2Col.setCellValueFactory(new PropertyValueFactory("CWK2_Data"));
					jssNewTest2Col.setCellValueFactory(new PropertyValueFactory("test2_Data"));
					jssNewAss3Col.setCellValueFactory(new PropertyValueFactory("ASS3_Data"));
					jssNewCWK3Col.setCellValueFactory(new PropertyValueFactory("CWK3_Data"));
					jssNewTotalCAsCol.setCellValueFactory(new PropertyValueFactory("totalCAs_Data"));
					jssNewExamCol.setCellValueFactory(new PropertyValueFactory("exam_Data"));
					jssNewTotalCol.setCellValueFactory(new PropertyValueFactory("total_Data"));
					jssNewGradeCol.setCellValueFactory(new PropertyValueFactory("grade_Data"));
					
					jssScoreSheetNewEntryDataTable.setItems(data);
					
				}
				catch(Exception e2) {
					e2.printStackTrace();
				}
			}
			else {
				Alert alert = new Alert(Alert.AlertType.ERROR);
				alert.setContentText("Invalid Selections or entries... Select the right class category");
				Optional<ButtonType> result = alert.showAndWait();
				if(result.get() == ButtonType.OK) {
					alert.close();
				}
				else {
					alert.close();
				}
			}
		}
		catch(Exception e) {
			JssNewClassLabel.setText("Error: "+ e.getMessage());
			jssScoreSheetNewEntryDataTable.setItems(null);
		}
		
		//set table uneditable
		jssScoreSheetNewEntryDataTable.setEditable(false);
		jssScoreSheetNewEntryDataTable.getSelectionModel().cellSelectionEnabledProperty().set(false);
	}
	
	//JSS_New Scoresheets Manager - TableView
	@FXML private Label JssNewClassLabel;
	@FXML private ComboBox<String> JSSNewClassCombo, jssNewSubjectCombo, jssNewSubjCodeCombo;
	@FXML private TableView <JSSScoreSheetNewEntryDataTable> jssScoreSheetNewEntryDataTable;
	@FXML private TableColumn<JSSScoreSheetNewEntryDataTable,String> jssNewSNoCol, jssNewStdNoCol, 
		jssNewStdNameCol, jssNewTest1Col, jssNewAss1Col, jssNewCWK1Col, jssNewProjCol, jssNewAss2Col, 
		jssNewCWK2Col, jssNewTest2Col, jssNewAss3Col, jssNewCWK3Col, jssNewTotalCAsCol,
		jssNewExamCol, jssNewTotalCol, jssNewGradeCol;
	ObservableList<String> jssNewClass = FXCollections.observableArrayList();
	ObservableList<String> jssNewSubject = FXCollections.observableArrayList();
	
	@FXML public void jssNewInit(MouseEvent event) {
		populateStdClassesCombo3(jssNewClass, JSSNewClassCombo);
	}
	
	@FXML public void jssNewInit2(MouseEvent event) {
		//search by subject name
		Vector<SubjectNames> userData3 = new Vector<>();
		if(dispUserClass.equals("Teacher")) {
			String user = dispUserName;
			String staffId = "";
			
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			Query query2 =
					entitymanager.createQuery("select e from SubjectNames e ");
			userData3 = (Vector<SubjectNames>) query2.getResultList();
			
			Users usr = entitymanager.find(Users.class, user);
			
			staffId = usr.getUserStaffID();
			
			entitymanager.getTransaction().commit();
			entitymanager.close();
			emfactory.close();
			
			//assigned subjects
			LinkedHashSet<String> subCodeList = new LinkedHashSet<>();
			LinkedHashSet<String> subList = new LinkedHashSet<>();
			
			EntityManagerFactory emfactorys = Persistence.createEntityManagerFactory("SchoolMgtSystem");
			EntityManager entitymanagers = emfactorys.createEntityManager();
			entitymanagers.getTransaction().begin();
			
			AssignedSubjects sub = entitymanagers.find(AssignedSubjects.class, staffId);
			
			subCodeList = sub.getSubjectCodeList();
			subList = sub.getSubjectList();
			
			entitymanagers.getTransaction().commit();
			entitymanagers.close();
			emfactorys.close();
			
			for(String code : subCodeList) {
				EntityManagerFactory emfactoryy = Persistence.createEntityManagerFactory("SchoolMgtSystem");
				EntityManager entitymanagery = emfactoryy.createEntityManager();
				entitymanagery.getTransaction().begin();
				
				SubjectNames subName = entitymanagery.find(SubjectNames.class, Integer.parseInt(code));
				
				if(!(jssNewSubject.contains(subName.getSubjectName()))) {
					jssNewSubject.add(subName.getSubjectName());
				}
				
				entitymanagery.getTransaction().commit();
				entitymanagery.close();
				emfactoryy.close();
			}
			
			jssNewSubjectCombo.setItems(jssNewSubject);
			new AutoCompleteComboBoxListener<>(jssNewSubjectCombo);
			
			if(!(jssNewSubjectCombo.getValue().isEmpty())) {
				String name = jssNewSubjectCombo.getValue();
				for(SubjectNames std : userData3) {
					if((std.getSubjectName().equals(name))) {
						jssNewSubjCodeCombo.setValue(String.valueOf(std.getSubjectCode()));
					}
				}
			}
			
		}
		else {
			
			//subjectCode_TF.setItems(subjectCodeN);
			
			try {
				EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
				EntityManager entitymanager = emfactory.createEntityManager();
				entitymanager.getTransaction().begin();
				
				Query query2 =
						entitymanager.createQuery("select e from SubjectNames e ");
				userData3 = (Vector<SubjectNames>) query2.getResultList();
				
				for(SubjectNames x : userData3) {
					if(!(jssNewSubject.contains(x.getSubjectName()))) {
						jssNewSubject.add(x.getSubjectName());
					}
				}
				
				jssNewSubjectCombo.setItems(jssNewSubject);
				
				entitymanager.getTransaction().commit();
				entitymanager.close();
				emfactory.close();
				
				new AutoCompleteComboBoxListener<>(jssNewSubjectCombo);
			}
			catch(Exception e) {
				e.printStackTrace();
			}
			
			if(!(jssNewSubjectCombo.getValue().isEmpty())) {
				String name = jssNewSubjectCombo.getValue();
				for(SubjectNames std : userData3) {
					if((std.getSubjectName().equals(name))) {
						jssNewSubjCodeCombo.setValue(String.valueOf(std.getSubjectCode()));
					}
				}
			}
		}
	}
	
	//new scoresheet ends**********
	
	//compare subject and code
	public boolean compareSubjectNameCode(String subjectName, int subjectCode) {
		
		boolean bool = false;
		
		EntityManagerFactory emfactory = Persistence.createEntityManagerFactory
				("SchoolMgtSystem");
		EntityManager entitymanager = emfactory.createEntityManager();
		entitymanager.getTransaction().begin();
		
		SubjectNames subj = entitymanager.find(SubjectNames.class, subjectCode);
		
		if(subjectName.equalsIgnoreCase(subj.getSubjectName())) {
			bool = true;
		}
		
		entitymanager.getTransaction().commit();
		entitymanager.close();
		emfactory.close();
		
		return bool;
	}
	
	@FXML public void editJssScoresheetsButton(ActionEvent e) {
		try {
			String stdClassId = JSSClassCombo.getValue();
			String stdSubject = jssSubjectCombo.getValue();
			String stdSubjCode2 = jssSubjCodeCombo.getValue();
			int stdSubjCode = Integer.parseInt(stdSubjCode2);
			
			if(compareSubjectNameCode(stdSubject, stdSubjCode) == true) {
			
				String stdClass, term, year, numTail;
				
				EntityManagerFactory emfactory = Persistence.createEntityManagerFactory
						("SchoolMgtSystem");
				EntityManager entitymanager = emfactory.createEntityManager();
				entitymanager.getTransaction().begin();
				
				StudentClasses stdC = entitymanager.find(StudentClasses.class, stdClassId);
				
				stdClass = stdC.getClassNo()+stdC.getClassLetter();
				year = stdC.getYear();
				term = stdC.getTerm();
				
				entitymanager.getTransaction().commit();
				entitymanager.close();
				emfactory.close();
				
				if(stdClass.contains("JSS")) {
					numTail = "1";
				}
				else if(stdClass.contains("SSS")) {
					numTail = "2";
				}
				else {
					numTail = "0";
				}
				
				jssScoreSheetEntryDataTable.setEditable(true);
				jssScoreSheetEntryDataTable.getSelectionModel().cellSelectionEnabledProperty().set(true);
				
				//get the real class
	//			String stdClass2 = getPrimeClassOnly(stdClassId, year, term, stdClass);
				String stdClass2 = getPrimeClass(stdClass);
				
				//CA1
				jssEntryCA1Col.setEditable(true);
				jssEntryCA1Col.setCellFactory(TextFieldTableCell.<JSSScoreSheetEntryDataTable>forTableColumn());
				jssEntryCA1Col.setOnEditCommit(event -> {
					JSSScoreSheetEntryDataTable CA = event.getRowValue();
					String sid = CA.getStdNo_Data()+stdClass2+term+stdSubjCode2+year+numTail;
					String CA1_old = event.getOldValue();
					String stdId = CA.getStdNo_Data();
					String stdName = CA.getStdName_Data();
					String CA1_new = event.getNewValue();
					
					try {
						double CA1 = Double.parseDouble(CA1_new);
						if(CA1 >= 0 && CA1 <= 5) {
							double CA2 = Double.parseDouble(CA.getCA2_Data());
							double CA3 = Double.parseDouble(CA.getCA3_Data());
							double CA4 = Double.parseDouble(CA.getCA4_Data());
							double CA5 = Double.parseDouble(CA.getCA5_Data());
							double CA6 = Double.parseDouble(CA.getCA6_Data());
							double exam = Double.parseDouble(CA.getExam_Data());
							double total = CA1 + CA2 + CA3 + CA4 + CA5 + CA6 + exam;
	
							String grade = gradeSum(total);
							
							CA.setCA1_Data(CA1_new);
							
							updateScoresDatabaseJSS(stdId, stdClass2, term, stdSubjCode, CA1, CA2, CA3, CA4, CA5, CA6, 
									exam, total, grade, stdName, stdSubject, sid, year, dispName);
						}
						else {
							Alert alert = new Alert(Alert.AlertType.ERROR);
							alert.setContentText("Invalid entries... (entry must be within 0 - 5 range)");
							Optional<ButtonType> result = alert.showAndWait();
							if(result.get() == ButtonType.OK) {
								alert.close();
							}
							else {
								alert.close();
							}
						}
					}
					catch(Exception ex2) {
						Alert alert = new Alert(Alert.AlertType.ERROR);
						alert.setContentText("Invalid entries... (entry must be a number within 0 - 5 range) " +
								ex2.getMessage());
						Optional<ButtonType> result = alert.showAndWait();
						if(result.get() == ButtonType.OK) {
							alert.close();
						}
						else {
							alert.close();
						}
					}
					
				});
				
				//CA2
				jssEntryCA2Col.setEditable(true);
				jssEntryCA2Col.setCellFactory(TextFieldTableCell.<JSSScoreSheetEntryDataTable>forTableColumn());
				jssEntryCA2Col.setOnEditCommit(event -> {
					JSSScoreSheetEntryDataTable CA = event.getRowValue();
					String sid = CA.getStdNo_Data()+stdClass2+term+stdSubjCode2+year+numTail;
					String CA1_old = event.getOldValue();
					String stdId = CA.getStdNo_Data();
					String stdName = CA.getStdName_Data();
					String CA2_new = event.getNewValue();
					
					try {
						double CA2 = Double.parseDouble(CA2_new);
						if(CA2 >= 0 && CA2 <= 5) {
							double CA1 = Double.parseDouble(CA.getCA1_Data());
							double CA3 = Double.parseDouble(CA.getCA3_Data());
							double CA4 = Double.parseDouble(CA.getCA4_Data());
							double CA5 = Double.parseDouble(CA.getCA5_Data());
							double CA6 = Double.parseDouble(CA.getCA6_Data());
							double exam = Double.parseDouble(CA.getExam_Data());
							double total = CA1 + CA2 + CA3 + CA4 + CA5 + CA6 + exam;
	
							String grade = gradeSum(total);
							
							CA.setCA2_Data(CA2_new);
							
							updateScoresDatabaseJSS(stdId, stdClass2, term, stdSubjCode, CA1, CA2, CA3, CA4, CA5, CA6, 
									exam, total, grade, stdName, stdSubject, sid, year, dispName);
						}
						else {
							Alert alert = new Alert(Alert.AlertType.ERROR);
							alert.setContentText("Invalid entries... (entry must be within 0 - 5 range)");
							Optional<ButtonType> result = alert.showAndWait();
							if(result.get() == ButtonType.OK) {
								alert.close();
							}
							else {
								alert.close();
							}
						}
					}
					catch(Exception ex2) {
						Alert alert = new Alert(Alert.AlertType.ERROR);
						alert.setContentText("Invalid entries... (entry must be a number within 0 - 5 range) " +
								ex2.getMessage());
						Optional<ButtonType> result = alert.showAndWait();
						if(result.get() == ButtonType.OK) {
							alert.close();
						}
						else {
							alert.close();
						}
					}
					
				});
				
				//CA3
				jssEntryCA3Col.setEditable(true);
				jssEntryCA3Col.setCellFactory(TextFieldTableCell.<JSSScoreSheetEntryDataTable>forTableColumn());
				jssEntryCA3Col.setOnEditCommit(event -> {
					JSSScoreSheetEntryDataTable CA = event.getRowValue();
					String sid = CA.getStdNo_Data()+stdClass2+term+stdSubjCode2+year+numTail;
					//String CA1_old = event.getOldValue();
					String stdId = CA.getStdNo_Data();
					String stdName = CA.getStdName_Data();
					String CA3_new = event.getNewValue();
					
					try {
						double CA3 = Double.parseDouble(CA3_new);
						if(CA3 >= 0 && CA3 <= 5) {
							double CA1 = Double.parseDouble(CA.getCA1_Data());
							double CA2 = Double.parseDouble(CA.getCA2_Data());
							double CA4 = Double.parseDouble(CA.getCA4_Data());
							double CA5 = Double.parseDouble(CA.getCA5_Data());
							double CA6 = Double.parseDouble(CA.getCA6_Data());
							double exam = Double.parseDouble(CA.getExam_Data());
							double total = CA1 + CA2 + CA3 + CA4 + CA5 + CA6 + exam;
	
							String grade = gradeSum(total);
							
							CA.setCA3_Data(CA3_new);
							
							updateScoresDatabaseJSS(stdId, stdClass2, term, stdSubjCode, CA1, CA2, CA3, CA4, CA5, CA6, 
									exam, total, grade, stdName, stdSubject, sid, year, dispName);
						}
						else {
							Alert alert = new Alert(Alert.AlertType.ERROR);
							alert.setContentText("Invalid entries... (entry must be within 0 - 5 range)");
							Optional<ButtonType> result = alert.showAndWait();
							if(result.get() == ButtonType.OK) {
								alert.close();
							}
							else {
								alert.close();
							}
						}
					}
					catch(Exception ex2) {
						Alert alert = new Alert(Alert.AlertType.ERROR);
						alert.setContentText("Invalid entries... (entry must be a number within 0 - 5 range) " +
								ex2.getMessage());
						Optional<ButtonType> result = alert.showAndWait();
						if(result.get() == ButtonType.OK) {
							alert.close();
						}
						else {
							alert.close();
						}
					}
					
				});
				
				//CA4
				jssEntryCA4Col.setEditable(true);
				jssEntryCA4Col.setCellFactory(TextFieldTableCell.<JSSScoreSheetEntryDataTable>forTableColumn());
				jssEntryCA4Col.setOnEditCommit(event -> {
					JSSScoreSheetEntryDataTable CA = event.getRowValue();
					String sid = CA.getStdNo_Data()+stdClass2+term+stdSubjCode2+year+numTail;
					//String CA1_old = event.getOldValue();
					String stdId = CA.getStdNo_Data();
					String stdName = CA.getStdName_Data();
					String CA4_new = event.getNewValue();
					
					try {
						double CA4 = Double.parseDouble(CA4_new);
						if(CA4 >= 0 && CA4 <= 5) {
							double CA1 = Double.parseDouble(CA.getCA1_Data());
							double CA2 = Double.parseDouble(CA.getCA2_Data());
							double CA3 = Double.parseDouble(CA.getCA3_Data());
							double CA5 = Double.parseDouble(CA.getCA5_Data());
							double CA6 = Double.parseDouble(CA.getCA6_Data());
							double exam = Double.parseDouble(CA.getExam_Data());
							double total = CA1 + CA2 + CA3 + CA4 + CA5 + CA6 + exam;
	
							String grade = gradeSum(total);
							
							CA.setCA4_Data(CA4_new);
							
							updateScoresDatabaseJSS(stdId, stdClass2, term, stdSubjCode, CA1, CA2, CA3, CA4, CA5, CA6, 
									exam, total, grade, stdName, stdSubject, sid, year, dispName);
						}
						else {
							Alert alert = new Alert(Alert.AlertType.ERROR);
							alert.setContentText("Invalid entries... (entry must be within 0 - 5 range)");
							Optional<ButtonType> result = alert.showAndWait();
							if(result.get() == ButtonType.OK) {
								alert.close();
							}
							else {
								alert.close();
							}
						}
					}
					catch(Exception ex2) {
						Alert alert = new Alert(Alert.AlertType.ERROR);
						alert.setContentText("Invalid entries... (entry must be a number within 0 - 5 range) " +
								ex2.getMessage());
						Optional<ButtonType> result = alert.showAndWait();
						if(result.get() == ButtonType.OK) {
							alert.close();
						}
						else {
							alert.close();
						}
					}
					
				});
				
				//CA5
				jssEntryCA5Col.setEditable(true);
				jssEntryCA5Col.setCellFactory(TextFieldTableCell.<JSSScoreSheetEntryDataTable>forTableColumn());
				jssEntryCA5Col.setOnEditCommit(event -> {
					JSSScoreSheetEntryDataTable CA = event.getRowValue();
					String sid = CA.getStdNo_Data()+stdClass2+term+stdSubjCode2+year+numTail;
					//String CA1_old = event.getOldValue();
					String stdId = CA.getStdNo_Data();
					String stdName = CA.getStdName_Data();
					String CA5_new = event.getNewValue();
					
					try {
						double CA5 = Double.parseDouble(CA5_new);
						if(CA5 >= 0 && CA5 <= 5) {
							double CA1 = Double.parseDouble(CA.getCA1_Data());
							double CA2 = Double.parseDouble(CA.getCA2_Data());
							double CA3 = Double.parseDouble(CA.getCA3_Data());
							double CA4 = Double.parseDouble(CA.getCA4_Data());
							double CA6 = Double.parseDouble(CA.getCA6_Data());
							double exam = Double.parseDouble(CA.getExam_Data());
							double total = CA1 + CA2 + CA3 + CA4 + CA5 + CA6 + exam;
	
							String grade = gradeSum(total);
							
							CA.setCA5_Data(CA5_new);
							
							updateScoresDatabaseJSS(stdId, stdClass2, term, stdSubjCode, CA1, CA2, CA3, CA4, CA5, CA6, 
									exam, total, grade, stdName, stdSubject, sid, year, dispName);
						}
						else {
							Alert alert = new Alert(Alert.AlertType.ERROR);
							alert.setContentText("Invalid entries... (entry must be within 0 - 5 range)");
							Optional<ButtonType> result = alert.showAndWait();
							if(result.get() == ButtonType.OK) {
								alert.close();
							}
							else {
								alert.close();
							}
						}
					}
					catch(Exception ex2) {
						Alert alert = new Alert(Alert.AlertType.ERROR);
						alert.setContentText("Invalid entries... (entry must be a number within 0 - 5 range) " +
								ex2.getMessage());
						Optional<ButtonType> result = alert.showAndWait();
						if(result.get() == ButtonType.OK) {
							alert.close();
						}
						else {
							alert.close();
						}
					}
					
				});
				
				//C6
				jssEntryCA6Col.setEditable(true);
				jssEntryCA6Col.setCellFactory(TextFieldTableCell.<JSSScoreSheetEntryDataTable>forTableColumn());
				jssEntryCA6Col.setOnEditCommit(event -> {
					JSSScoreSheetEntryDataTable CA = event.getRowValue();
					String sid = CA.getStdNo_Data()+stdClass2+term+stdSubjCode2+year+numTail;
					//String CA1_old = event.getOldValue();
					String stdId = CA.getStdNo_Data();
					String stdName = CA.getStdName_Data();
					String CA6_new = event.getNewValue();
					
					try {
						double CA6 = Double.parseDouble(CA6_new);
						if(CA6 >= 0 && CA6 <= 5) {
							double CA1 = Double.parseDouble(CA.getCA1_Data());
							double CA2 = Double.parseDouble(CA.getCA2_Data());
							double CA3 = Double.parseDouble(CA.getCA3_Data());
							double CA4 = Double.parseDouble(CA.getCA4_Data());
							double CA5 = Double.parseDouble(CA.getCA5_Data());
							double exam = Double.parseDouble(CA.getExam_Data());
							double total = CA1 + CA2 + CA3 + CA4 + CA5 + CA6 + exam;
	
							String grade = gradeSum(total);
							
							CA.setCA6_Data(CA6_new);
							
							updateScoresDatabaseJSS(stdId, stdClass2, term, stdSubjCode, CA1, CA2, CA3, CA4, CA5, CA6, 
									exam, total, grade, stdName, stdSubject, sid, year, dispName);
						}
						else {
							Alert alert = new Alert(Alert.AlertType.ERROR);
							alert.setContentText("Invalid entries... (entry must be within 0 - 5 range)");
							Optional<ButtonType> result = alert.showAndWait();
							if(result.get() == ButtonType.OK) {
								alert.close();
							}
							else {
								alert.close();
							}
						}
					}
					catch(Exception ex2) {
						Alert alert = new Alert(Alert.AlertType.ERROR);
						alert.setContentText("Invalid entries... (entry must be a number within 0 - 5 range) " +
								ex2.getMessage());
						Optional<ButtonType> result = alert.showAndWait();
						if(result.get() == ButtonType.OK) {
							alert.close();
						}
						else {
							alert.close();
						}
					}
					
				});
				
				//exam - JSS
				jssEntryExamCol.setEditable(true);
				jssEntryExamCol.setCellFactory(TextFieldTableCell.<JSSScoreSheetEntryDataTable>forTableColumn());
				jssEntryExamCol.setOnEditCommit(event -> {
					JSSScoreSheetEntryDataTable CA = event.getRowValue();
					String sid = CA.getStdNo_Data()+stdClass2+term+stdSubjCode2+year+numTail;
					//String CA1_old = event.getOldValue();
					String stdId = CA.getStdNo_Data();
					String stdName = CA.getStdName_Data();
					String exam_new = event.getNewValue();
					
					try {
						double exam = Double.parseDouble(exam_new);
						if(exam >= 0 && exam <= 70) {
							double CA1 = Double.parseDouble(CA.getCA1_Data());
							double CA2 = Double.parseDouble(CA.getCA2_Data());
							double CA3 = Double.parseDouble(CA.getCA3_Data());
							double CA4 = Double.parseDouble(CA.getCA4_Data());
							double CA5 = Double.parseDouble(CA.getCA5_Data());
							double CA6 = Double.parseDouble(CA.getCA6_Data());
							double total = CA1 + CA2 + CA3 + CA4 + CA5 + CA6 + exam;
	
							String grade = gradeSum(total);
							
							CA.setExam_Data(exam_new);
							
							updateScoresDatabaseJSS(stdId, stdClass2, term, stdSubjCode, CA1, CA2, CA3, CA4, CA5, CA6, 
									exam, total, grade, stdName, stdSubject, sid, year, dispName);
						}
						else {
							Alert alert = new Alert(Alert.AlertType.ERROR);
							alert.setContentText("Invalid entries... (entry must be within 0 - 70 range)");
							Optional<ButtonType> result = alert.showAndWait();
							if(result.get() == ButtonType.OK) {
								alert.close();
							}
							else {
								alert.close();
							}
						}
					}
					catch(Exception ex2) {
						Alert alert = new Alert(Alert.AlertType.ERROR);
						alert.setContentText("Invalid entries... (entry must be a number within 0 - 70 range) " +
								ex2.getMessage());
						Optional<ButtonType> result = alert.showAndWait();
						if(result.get() == ButtonType.OK) {
							alert.close();
						}
						else {
							alert.close();
						}
					}
					
				});
			
			}
			else {
				Alert alert = new Alert(Alert.AlertType.ERROR);
				alert.setContentText("Invalid Subject Name Entry... Please select a subject and let its "
						+ "code be initialized before proceeding.");
				Optional<ButtonType> result = alert.showAndWait();
				if(result.get() == ButtonType.OK) {
					alert.close();
				}
				else {
					alert.close();
				}
			}
			
		}
		catch(Exception except) {
			Alert alert = new Alert(Alert.AlertType.ERROR);
			alert.setContentText("Invalid entries... (entry must be a number within the proper range): "
					+except.getMessage());
			Optional<ButtonType> result = alert.showAndWait();
			if(result.get() == ButtonType.OK) {
				alert.close();
			}
			else {
				alert.close();
			}
		}
	}
	
	//JSS_NEW Edit
	@FXML public void editJssScoresheetsNewButton(ActionEvent e) {
		try {
			String stdClassId = JSSNewClassCombo.getValue();
			String stdSubject = jssNewSubjectCombo.getValue();
			String stdSubjCode2 = jssNewSubjCodeCombo.getValue();
			int stdSubjCode = Integer.parseInt(stdSubjCode2);
			
			if(compareSubjectNameCode(stdSubject, stdSubjCode) == true) {
			
				String stdClass, term, year, numTail;
				
				EntityManagerFactory emfactory = Persistence.createEntityManagerFactory
						("SchoolMgtSystem");
				EntityManager entitymanager = emfactory.createEntityManager();
				entitymanager.getTransaction().begin();
				
				StudentClasses stdC = entitymanager.find(StudentClasses.class, stdClassId);
				
				stdClass = stdC.getClassNo()+stdC.getClassLetter();
				year = stdC.getYear();
				term = stdC.getTerm();
				
				entitymanager.getTransaction().commit();
				entitymanager.close();
				emfactory.close();
				
				if(stdClass.contains("JSS")) {
					numTail = "1";
				}
				else if(stdClass.contains("SSS")) {
					numTail = "2";
				}
				else {
					numTail = "0";
				}
				
				jssScoreSheetNewEntryDataTable.setEditable(true);
				jssScoreSheetNewEntryDataTable.getSelectionModel().cellSelectionEnabledProperty().set(true);
				
				//get the real class
	//			String stdClass2 = getPrimeClassOnly(stdClassId, year, term, stdClass);
				String stdClass2 = getPrimeClass(stdClass);
				
				//Test1
				jssNewTest1Col.setEditable(true);
				jssNewTest1Col.setCellFactory(TextFieldTableCell.<JSSScoreSheetNewEntryDataTable>forTableColumn());
				jssNewTest1Col.setOnEditCommit(event -> {
					JSSScoreSheetNewEntryDataTable CA = event.getRowValue();
					String sid = CA.getStdNo_Data()+stdClass2+term+stdSubjCode2+year+numTail;
					String test1_old = event.getOldValue();
					String stdId = CA.getStdNo_Data();
					String stdName = CA.getStdName_Data();
					String test1_new = event.getNewValue();
					
					try {
						double test1 = Double.parseDouble(test1_new);
						if(test1 >= 0 && test1 <= 10) {
							double ASS1 = Double.parseDouble(CA.getASS1_Data());
							double CWK1 = Double.parseDouble(CA.getCWK1_Data());
							double proj = Double.parseDouble(CA.getProj_Data());
							double ASS2 = Double.parseDouble(CA.getASS2_Data());
							double CWK2 = Double.parseDouble(CA.getCWK2_Data());
							double test2 = Double.parseDouble(CA.getTest2_Data());
							double ASS3 = Double.parseDouble(CA.getASS3_Data());
							double CWK3 = Double.parseDouble(CA.getCWK3_Data());
							double totalCAs = test1 + ASS1 + CWK1 + proj + ASS2 + CWK2 + test2 + ASS3 + CWK3;
							double exam = Double.parseDouble(CA.getExam_Data());
							double total = totalCAs + exam;
	
							String grade = gradeSum(total);
							
							CA.setTest1_Data(test1_new);
							
							updateScoresDatabaseJSSNew(stdId, stdClass2, term, stdSubjCode, test1, ASS1, CWK1, proj, ASS2, CWK2, 
									test2, ASS3, CWK3, exam, total, grade, stdName, stdSubject, sid, year, dispName);
						}
						else {
							Alert alert = new Alert(Alert.AlertType.ERROR);
							alert.setContentText("Invalid entries... (entry must be within 0 - 10 range)");
							Optional<ButtonType> result = alert.showAndWait();
							if(result.get() == ButtonType.OK) {
								alert.close();
							}
							else {
								alert.close();
							}
						}
					}
					catch(Exception ex2) {
						Alert alert = new Alert(Alert.AlertType.ERROR);
						alert.setContentText("Invalid entries... (entry must be a number within 0 - 10 range) " +
								ex2.getMessage());
						Optional<ButtonType> result = alert.showAndWait();
						if(result.get() == ButtonType.OK) {
							alert.close();
						}
						else {
							alert.close();
						}
					}
					
				});
				
				//ASS1
				jssNewAss1Col.setEditable(true);
				jssNewAss1Col.setCellFactory(TextFieldTableCell.<JSSScoreSheetNewEntryDataTable>forTableColumn());
				jssNewAss1Col.setOnEditCommit(event -> {
					JSSScoreSheetNewEntryDataTable CA = event.getRowValue();
					String sid = CA.getStdNo_Data()+stdClass2+term+stdSubjCode2+year+numTail;
					String ASS1_old = event.getOldValue();
					String stdId = CA.getStdNo_Data();
					String stdName = CA.getStdName_Data();
					String ASS1_new = event.getNewValue();
					
					try {
						double ASS1 = Double.parseDouble(ASS1_new);
						if(ASS1 >= 0 && ASS1 <= 5) {
							double test1 = Double.parseDouble(CA.getTest1_Data());
							double CWK1 = Double.parseDouble(CA.getCWK1_Data());
							double proj = Double.parseDouble(CA.getProj_Data());
							double ASS2 = Double.parseDouble(CA.getASS2_Data());
							double CWK2 = Double.parseDouble(CA.getCWK2_Data());
							double test2 = Double.parseDouble(CA.getTest2_Data());
							double ASS3 = Double.parseDouble(CA.getASS3_Data());
							double CWK3 = Double.parseDouble(CA.getCWK3_Data());
							double totalCAs = test1 + ASS1 + CWK1 + proj + ASS2 + CWK2 + test2 + ASS3 + CWK3;
							double exam = Double.parseDouble(CA.getExam_Data());
							double total = totalCAs + exam;
	
							String grade = gradeSum(total);
							
							CA.setASS1_Data(ASS1_new);
							
							updateScoresDatabaseJSSNew(stdId, stdClass2, term, stdSubjCode, test1, ASS1, CWK1, proj, ASS2, CWK2, 
									test2, ASS3, CWK3, exam, total, grade, stdName, stdSubject, sid, year, dispName);
						}
						else {
							Alert alert = new Alert(Alert.AlertType.ERROR);
							alert.setContentText("Invalid entries... (entry must be within 0 - 5 range)");
							Optional<ButtonType> result = alert.showAndWait();
							if(result.get() == ButtonType.OK) {
								alert.close();
							}
							else {
								alert.close();
							}
						}
					}
					catch(Exception ex2) {
						Alert alert = new Alert(Alert.AlertType.ERROR);
						alert.setContentText("Invalid entries... (entry must be a number within 0 - 5 range) " +
								ex2.getMessage());
						Optional<ButtonType> result = alert.showAndWait();
						if(result.get() == ButtonType.OK) {
							alert.close();
						}
						else {
							alert.close();
						}
					}
					
				});
				
				//CWK1
				jssNewCWK1Col.setEditable(true);
				jssNewCWK1Col.setCellFactory(TextFieldTableCell.<JSSScoreSheetNewEntryDataTable>forTableColumn());
				jssNewCWK1Col.setOnEditCommit(event -> {
					JSSScoreSheetNewEntryDataTable CA = event.getRowValue();
					String sid = CA.getStdNo_Data()+stdClass2+term+stdSubjCode2+year+numTail;
					String CWK1_old = event.getOldValue();
					String stdId = CA.getStdNo_Data();
					String stdName = CA.getStdName_Data();
					String CWK1_new = event.getNewValue();
					
					try {
						double CWK1 = Double.parseDouble(CWK1_new);
						if(CWK1 >= 0 && CWK1 <= 5) {
							double test1 = Double.parseDouble(CA.getTest1_Data());
							double ASS1 = Double.parseDouble(CA.getASS1_Data());
							double proj = Double.parseDouble(CA.getProj_Data());
							double ASS2 = Double.parseDouble(CA.getASS2_Data());
							double CWK2 = Double.parseDouble(CA.getCWK2_Data());
							double test2 = Double.parseDouble(CA.getTest2_Data());
							double ASS3 = Double.parseDouble(CA.getASS3_Data());
							double CWK3 = Double.parseDouble(CA.getCWK3_Data());
							double totalCAs = test1 + ASS1 + CWK1 + proj + ASS2 + CWK2 + test2 + ASS3 + CWK3;
							double exam = Double.parseDouble(CA.getExam_Data());
							double total = totalCAs + exam;
	
							String grade = gradeSum(total);
							
							CA.setCWK1_Data(CWK1_new);
							
							updateScoresDatabaseJSSNew(stdId, stdClass2, term, stdSubjCode, test1, ASS1, CWK1, proj, ASS2, CWK2, 
									test2, ASS3, CWK3, exam, total, grade, stdName, stdSubject, sid, year, dispName);
						}
						else {
							Alert alert = new Alert(Alert.AlertType.ERROR);
							alert.setContentText("Invalid entries... (entry must be within 0 - 5 range)");
							Optional<ButtonType> result = alert.showAndWait();
							if(result.get() == ButtonType.OK) {
								alert.close();
							}
							else {
								alert.close();
							}
						}
					}
					catch(Exception ex2) {
						Alert alert = new Alert(Alert.AlertType.ERROR);
						alert.setContentText("Invalid entries... (entry must be a number within 0 - 5 range) " +
								ex2.getMessage());
						Optional<ButtonType> result = alert.showAndWait();
						if(result.get() == ButtonType.OK) {
							alert.close();
						}
						else {
							alert.close();
						}
					}
					
				});
				
				//proj
				jssNewProjCol.setEditable(true);
				jssNewProjCol.setCellFactory(TextFieldTableCell.<JSSScoreSheetNewEntryDataTable>forTableColumn());
				jssNewProjCol.setOnEditCommit(event -> {
					JSSScoreSheetNewEntryDataTable CA = event.getRowValue();
					String sid = CA.getStdNo_Data()+stdClass2+term+stdSubjCode2+year+numTail;
					String proj_old = event.getOldValue();
					String stdId = CA.getStdNo_Data();
					String stdName = CA.getStdName_Data();
					String proj_new = event.getNewValue();
					
					try {
						double proj = Double.parseDouble(proj_new);
						if(proj >= 0 && proj <= 10) {
							double test1 = Double.parseDouble(CA.getTest1_Data());
							double ASS1 = Double.parseDouble(CA.getASS1_Data());
							double CWK1 = Double.parseDouble(CA.getCWK1_Data());
							double ASS2 = Double.parseDouble(CA.getASS2_Data());
							double CWK2 = Double.parseDouble(CA.getCWK2_Data());
							double test2 = Double.parseDouble(CA.getTest2_Data());
							double ASS3 = Double.parseDouble(CA.getASS3_Data());
							double CWK3 = Double.parseDouble(CA.getCWK3_Data());
							double totalCAs = test1 + ASS1 + CWK1 + proj + ASS2 + CWK2 + test2 + ASS3 + CWK3;
							double exam = Double.parseDouble(CA.getExam_Data());
							double total = totalCAs + exam;
	
							String grade = gradeSum(total);
							
							CA.setProj_Data(proj_new);
							
							updateScoresDatabaseJSSNew(stdId, stdClass2, term, stdSubjCode, test1, ASS1, CWK1, proj, ASS2, CWK2, 
									test2, ASS3, CWK3, exam, total, grade, stdName, stdSubject, sid, year, dispName);
						}
						else {
							Alert alert = new Alert(Alert.AlertType.ERROR);
							alert.setContentText("Invalid entries... (entry must be within 0 - 10 range)");
							Optional<ButtonType> result = alert.showAndWait();
							if(result.get() == ButtonType.OK) {
								alert.close();
							}
							else {
								alert.close();
							}
						}
					}
					catch(Exception ex2) {
						Alert alert = new Alert(Alert.AlertType.ERROR);
						alert.setContentText("Invalid entries... (entry must be a number within 0 - 10 range) " +
								ex2.getMessage());
						Optional<ButtonType> result = alert.showAndWait();
						if(result.get() == ButtonType.OK) {
							alert.close();
						}
						else {
							alert.close();
						}
					}
					
				});
				
				//ASS2
				jssNewAss2Col.setEditable(true);
				jssNewAss2Col.setCellFactory(TextFieldTableCell.<JSSScoreSheetNewEntryDataTable>forTableColumn());
				jssNewAss2Col.setOnEditCommit(event -> {
					JSSScoreSheetNewEntryDataTable CA = event.getRowValue();
					String sid = CA.getStdNo_Data()+stdClass2+term+stdSubjCode2+year+numTail;
					String ASS2_old = event.getOldValue();
					String stdId = CA.getStdNo_Data();
					String stdName = CA.getStdName_Data();
					String ASS2_new = event.getNewValue();
					
					try {
						double ASS2 = Double.parseDouble(ASS2_new);
						if(ASS2 >= 0 && ASS2 <= 5) {
							double test1 = Double.parseDouble(CA.getTest1_Data());
							double ASS1 = Double.parseDouble(CA.getASS1_Data());
							double CWK1 = Double.parseDouble(CA.getCWK1_Data());
							double proj = Double.parseDouble(CA.getProj_Data());
							double CWK2 = Double.parseDouble(CA.getCWK2_Data());
							double test2 = Double.parseDouble(CA.getTest2_Data());
							double ASS3 = Double.parseDouble(CA.getASS3_Data());
							double CWK3 = Double.parseDouble(CA.getCWK3_Data());
							double totalCAs = test1 + ASS1 + CWK1 + proj + ASS2 + CWK2 + test2 + ASS3 + CWK3;
							double exam = Double.parseDouble(CA.getExam_Data());
							double total = totalCAs + exam;
	
							String grade = gradeSum(total);
							
							CA.setASS2_Data(ASS2_new);
							
							updateScoresDatabaseJSSNew(stdId, stdClass2, term, stdSubjCode, test1, ASS1, CWK1, proj, ASS2, CWK2, 
									test2, ASS3, CWK3, exam, total, grade, stdName, stdSubject, sid, year, dispName);
						}
						else {
							Alert alert = new Alert(Alert.AlertType.ERROR);
							alert.setContentText("Invalid entries... (entry must be within 0 - 5 range)");
							Optional<ButtonType> result = alert.showAndWait();
							if(result.get() == ButtonType.OK) {
								alert.close();
							}
							else {
								alert.close();
							}
						}
					}
					catch(Exception ex2) {
						Alert alert = new Alert(Alert.AlertType.ERROR);
						alert.setContentText("Invalid entries... (entry must be a number within 0 - 5 range) " +
								ex2.getMessage());
						Optional<ButtonType> result = alert.showAndWait();
						if(result.get() == ButtonType.OK) {
							alert.close();
						}
						else {
							alert.close();
						}
					}
					
				});
				
				//CWK2
				jssNewCWK2Col.setEditable(true);
				jssNewCWK2Col.setCellFactory(TextFieldTableCell.<JSSScoreSheetNewEntryDataTable>forTableColumn());
				jssNewCWK2Col.setOnEditCommit(event -> {
					JSSScoreSheetNewEntryDataTable CA = event.getRowValue();
					String sid = CA.getStdNo_Data()+stdClass2+term+stdSubjCode2+year+numTail;
					String CWK2_old = event.getOldValue();
					String stdId = CA.getStdNo_Data();
					String stdName = CA.getStdName_Data();
					String CWK2_new = event.getNewValue();
					
					try {
						double CWK2 = Double.parseDouble(CWK2_new);
						if(CWK2 >= 0 && CWK2 <= 5) {
							double test1 = Double.parseDouble(CA.getTest1_Data());
							double ASS1 = Double.parseDouble(CA.getASS1_Data());
							double CWK1 = Double.parseDouble(CA.getCWK1_Data());
							double proj = Double.parseDouble(CA.getProj_Data());
							double ASS2 = Double.parseDouble(CA.getASS2_Data());
							double test2 = Double.parseDouble(CA.getTest2_Data());
							double ASS3 = Double.parseDouble(CA.getASS3_Data());
							double CWK3 = Double.parseDouble(CA.getCWK3_Data());
							double totalCAs = test1 + ASS1 + CWK1 + proj + ASS2 + CWK2 + test2 + ASS3 + CWK3;
							double exam = Double.parseDouble(CA.getExam_Data());
							double total = totalCAs + exam;
	
							String grade = gradeSum(total);
							
							CA.setCWK2_Data(CWK2_new);
							
							updateScoresDatabaseJSSNew(stdId, stdClass2, term, stdSubjCode, test1, ASS1, CWK1, proj, ASS2, CWK2, 
									test2, ASS3, CWK3, exam, total, grade, stdName, stdSubject, sid, year, dispName);
						}
						else {
							Alert alert = new Alert(Alert.AlertType.ERROR);
							alert.setContentText("Invalid entries... (entry must be within 0 - 5 range)");
							Optional<ButtonType> result = alert.showAndWait();
							if(result.get() == ButtonType.OK) {
								alert.close();
							}
							else {
								alert.close();
							}
						}
					}
					catch(Exception ex2) {
						Alert alert = new Alert(Alert.AlertType.ERROR);
						alert.setContentText("Invalid entries... (entry must be a number within 0 - 5 range) " +
								ex2.getMessage());
						Optional<ButtonType> result = alert.showAndWait();
						if(result.get() == ButtonType.OK) {
							alert.close();
						}
						else {
							alert.close();
						}
					}
					
				});
				
				//test2
				jssNewTest2Col.setEditable(true);
				jssNewTest2Col.setCellFactory(TextFieldTableCell.<JSSScoreSheetNewEntryDataTable>forTableColumn());
				jssNewTest2Col.setOnEditCommit(event -> {
					JSSScoreSheetNewEntryDataTable CA = event.getRowValue();
					String sid = CA.getStdNo_Data()+stdClass2+term+stdSubjCode2+year+numTail;
					String test2_old = event.getOldValue();
					String stdId = CA.getStdNo_Data();
					String stdName = CA.getStdName_Data();
					String test2_new = event.getNewValue();
					
					try {
						double test2 = Double.parseDouble(test2_new);
						if(test2 >= 0 && test2 <= 10) {
							double test1 = Double.parseDouble(CA.getTest1_Data());
							double ASS1 = Double.parseDouble(CA.getASS1_Data());
							double CWK1 = Double.parseDouble(CA.getCWK1_Data());
							double proj = Double.parseDouble(CA.getProj_Data());
							double ASS2 = Double.parseDouble(CA.getASS2_Data());
							double CWK2 = Double.parseDouble(CA.getCWK2_Data());
							double ASS3 = Double.parseDouble(CA.getASS3_Data());
							double CWK3 = Double.parseDouble(CA.getCWK3_Data());
							double totalCAs = test1 + ASS1 + CWK1 + proj + ASS2 + CWK2 + test2 + ASS3 + CWK3;
							double exam = Double.parseDouble(CA.getExam_Data());
							double total = totalCAs + exam;
	
							String grade = gradeSum(total);
							
							CA.setTest2_Data(test2_new);
							
							updateScoresDatabaseJSSNew(stdId, stdClass2, term, stdSubjCode, test1, ASS1, CWK1, proj, ASS2, CWK2, 
									test2, ASS3, CWK3, exam, total, grade, stdName, stdSubject, sid, year, dispName);
						}
						else {
							Alert alert = new Alert(Alert.AlertType.ERROR);
							alert.setContentText("Invalid entries... (entry must be within 0 - 10 range)");
							Optional<ButtonType> result = alert.showAndWait();
							if(result.get() == ButtonType.OK) {
								alert.close();
							}
							else {
								alert.close();
							}
						}
					}
					catch(Exception ex2) {
						Alert alert = new Alert(Alert.AlertType.ERROR);
						alert.setContentText("Invalid entries... (entry must be a number within 0 - 10 range) " +
								ex2.getMessage());
						Optional<ButtonType> result = alert.showAndWait();
						if(result.get() == ButtonType.OK) {
							alert.close();
						}
						else {
							alert.close();
						}
					}
					
				});
				
				//ASS3
				jssNewAss3Col.setEditable(true);
				jssNewAss3Col.setCellFactory(TextFieldTableCell.<JSSScoreSheetNewEntryDataTable>forTableColumn());
				jssNewAss3Col.setOnEditCommit(event -> {
					JSSScoreSheetNewEntryDataTable CA = event.getRowValue();
					String sid = CA.getStdNo_Data()+stdClass2+term+stdSubjCode2+year+numTail;
					String ASS3_old = event.getOldValue();
					String stdId = CA.getStdNo_Data();
					String stdName = CA.getStdName_Data();
					String ASS3_new = event.getNewValue();
					
					try {
						double ASS3 = Double.parseDouble(ASS3_new);
						if(ASS3 >= 0 && ASS3 <= 5) {
							double test1 = Double.parseDouble(CA.getTest1_Data());
							double ASS1 = Double.parseDouble(CA.getASS1_Data());
							double CWK1 = Double.parseDouble(CA.getCWK1_Data());
							double proj = Double.parseDouble(CA.getProj_Data());
							double ASS2 = Double.parseDouble(CA.getASS2_Data());
							double CWK2 = Double.parseDouble(CA.getCWK2_Data());
							double test2 = Double.parseDouble(CA.getTest2_Data());
							double CWK3 = Double.parseDouble(CA.getCWK3_Data());
							double totalCAs = test1 + ASS1 + CWK1 + proj + ASS2 + CWK2 + test2 + ASS3 + CWK3;
							double exam = Double.parseDouble(CA.getExam_Data());
							double total = totalCAs + exam;
	
							String grade = gradeSum(total);
							
							CA.setASS3_Data(ASS3_new);
							
							updateScoresDatabaseJSSNew(stdId, stdClass2, term, stdSubjCode, test1, ASS1, CWK1, proj, ASS2, CWK2, 
									test2, ASS3, CWK3, exam, total, grade, stdName, stdSubject, sid, year, dispName);
						}
						else {
							Alert alert = new Alert(Alert.AlertType.ERROR);
							alert.setContentText("Invalid entries... (entry must be within 0 - 5 range)");
							Optional<ButtonType> result = alert.showAndWait();
							if(result.get() == ButtonType.OK) {
								alert.close();
							}
							else {
								alert.close();
							}
						}
					}
					catch(Exception ex2) {
						Alert alert = new Alert(Alert.AlertType.ERROR);
						alert.setContentText("Invalid entries... (entry must be a number within 0 - 5 range) " +
								ex2.getMessage());
						Optional<ButtonType> result = alert.showAndWait();
						if(result.get() == ButtonType.OK) {
							alert.close();
						}
						else {
							alert.close();
						}
					}
					
				});
				
				//CWK3
				jssNewCWK3Col.setEditable(true);
				jssNewCWK3Col.setCellFactory(TextFieldTableCell.<JSSScoreSheetNewEntryDataTable>forTableColumn());
				jssNewCWK3Col.setOnEditCommit(event -> {
					JSSScoreSheetNewEntryDataTable CA = event.getRowValue();
					String sid = CA.getStdNo_Data()+stdClass2+term+stdSubjCode2+year+numTail;
					String CWK3_old = event.getOldValue();
					String stdId = CA.getStdNo_Data();
					String stdName = CA.getStdName_Data();
					String CWK3_new = event.getNewValue();
					
					try {
						double CWK3 = Double.parseDouble(CWK3_new);
						if(CWK3 >= 0 && CWK3 <= 5) {
							double test1 = Double.parseDouble(CA.getTest1_Data());
							double ASS1 = Double.parseDouble(CA.getASS1_Data());
							double CWK1 = Double.parseDouble(CA.getCWK1_Data());
							double proj = Double.parseDouble(CA.getProj_Data());
							double ASS2 = Double.parseDouble(CA.getASS2_Data());
							double CWK2 = Double.parseDouble(CA.getCWK2_Data());
							double test2 = Double.parseDouble(CA.getTest2_Data());
							double ASS3 = Double.parseDouble(CA.getASS3_Data());
							double totalCAs = test1 + ASS1 + CWK1 + proj + ASS2 + CWK2 + test2 + ASS3 + CWK3;
							double exam = Double.parseDouble(CA.getExam_Data());
							double total = totalCAs + exam;
	
							String grade = gradeSum(total);
							
							CA.setCWK3_Data(CWK3_new);
							
							updateScoresDatabaseJSSNew(stdId, stdClass2, term, stdSubjCode, test1, ASS1, CWK1, proj, ASS2, CWK2, 
									test2, ASS3, CWK3, exam, total, grade, stdName, stdSubject, sid, year, dispName);
						}
						else {
							Alert alert = new Alert(Alert.AlertType.ERROR);
							alert.setContentText("Invalid entries... (entry must be within 0 - 5 range)");
							Optional<ButtonType> result = alert.showAndWait();
							if(result.get() == ButtonType.OK) {
								alert.close();
							}
							else {
								alert.close();
							}
						}
					}
					catch(Exception ex2) {
						Alert alert = new Alert(Alert.AlertType.ERROR);
						alert.setContentText("Invalid entries... (entry must be a number within 0 - 5 range) " +
								ex2.getMessage());
						Optional<ButtonType> result = alert.showAndWait();
						if(result.get() == ButtonType.OK) {
							alert.close();
						}
						else {
							alert.close();
						}
					}
					
				});
				
				//exam - JSS
				jssNewExamCol.setEditable(true);
				jssNewExamCol.setCellFactory(TextFieldTableCell.<JSSScoreSheetNewEntryDataTable>forTableColumn());
				jssNewExamCol.setOnEditCommit(event -> {
					JSSScoreSheetNewEntryDataTable CA = event.getRowValue();
					String sid = CA.getStdNo_Data()+stdClass2+term+stdSubjCode2+year+numTail;
					String exam_old = event.getOldValue();
					String stdId = CA.getStdNo_Data();
					String stdName = CA.getStdName_Data();
					String exam_new = event.getNewValue();
					
					try {
						double exam = Double.parseDouble(exam_new);
						if(exam >= 0 && exam <= 40) {
							double test1 = Double.parseDouble(CA.getTest1_Data());
							double ASS1 = Double.parseDouble(CA.getASS1_Data());
							double CWK1 = Double.parseDouble(CA.getCWK1_Data());
							double proj = Double.parseDouble(CA.getProj_Data());
							double ASS2 = Double.parseDouble(CA.getASS2_Data());
							double CWK2 = Double.parseDouble(CA.getCWK2_Data());
							double test2 = Double.parseDouble(CA.getTest2_Data());
							double ASS3 = Double.parseDouble(CA.getASS3_Data());
							double CWK3 = Double.parseDouble(CA.getCWK3_Data());
							double totalCAs = test1 + ASS1 + CWK1 + proj + ASS2 + CWK2 + test2 + ASS3 + CWK3;
							double total = totalCAs + exam;
	
							String grade = gradeSum(total);
							
							CA.setExam_Data(exam_new);
							
							updateScoresDatabaseJSSNew(stdId, stdClass2, term, stdSubjCode, test1, ASS1, CWK1, proj, ASS2, CWK2, 
									test2, ASS3, CWK3, exam, total, grade, stdName, stdSubject, sid, year, dispName);
						}
						else {
							Alert alert = new Alert(Alert.AlertType.ERROR);
							alert.setContentText("Invalid entries... (entry must be within 0 - 40 range)");
							Optional<ButtonType> result = alert.showAndWait();
							if(result.get() == ButtonType.OK) {
								alert.close();
							}
							else {
								alert.close();
							}
						}
					}
					catch(Exception ex2) {
						Alert alert = new Alert(Alert.AlertType.ERROR);
						alert.setContentText("Invalid entries... (entry must be a number within 0 - 40 range) " +
								ex2.getMessage());
						Optional<ButtonType> result = alert.showAndWait();
						if(result.get() == ButtonType.OK) {
							alert.close();
						}
						else {
							alert.close();
						}
					}
					
				});
			
			}
			else {
				Alert alert = new Alert(Alert.AlertType.ERROR);
				alert.setContentText("Invalid Subject Name Entry... Please select a subject and let its "
						+ "code be initialized before proceeding.");
				Optional<ButtonType> result = alert.showAndWait();
				if(result.get() == ButtonType.OK) {
					alert.close();
				}
				else {
					alert.close();
				}
			}
			
		}
		catch(Exception except) {
			Alert alert = new Alert(Alert.AlertType.ERROR);
			alert.setContentText("Invalid entries... (entry must be a number within the proper range): "
					+except.getMessage());
			Optional<ButtonType> result = alert.showAndWait();
			if(result.get() == ButtonType.OK) {
				alert.close();
			}
			else {
				alert.close();
			}
		}
	}
	
	//SSS edit
	@FXML public void editSssScoresheetsButton(ActionEvent e) {
		try {
			String stdClassId = SSSClassCombo.getValue();
			String stdSubject = sssSubjectCombo.getValue();
			String stdSubjCode2 = sssSubjCodeCombo.getValue();
			int stdSubjCode = Integer.parseInt(stdSubjCode2);
			
			if(compareSubjectNameCode(stdSubject, stdSubjCode) == true) {
			
				String stdClass, term, year, numTail;
				
				EntityManagerFactory emfactory = Persistence.createEntityManagerFactory
						("SchoolMgtSystem");
				EntityManager entitymanager = emfactory.createEntityManager();
				entitymanager.getTransaction().begin();
				
				StudentClasses stdC = entitymanager.find(StudentClasses.class, stdClassId);
				
				stdClass = stdC.getClassNo()+stdC.getClassLetter();
				year = stdC.getYear();
				term = stdC.getTerm();
				
				entitymanager.getTransaction().commit();
				entitymanager.close();
				emfactory.close();
				
				if(stdClass.contains("JSS")) {
					numTail = "1";
				}
				else if(stdClass.contains("SSS")) {
					numTail = "2";
				}
				else {
					numTail = "0";
				}
				
				sssScoreSheetEntryDataTable.setEditable(true);
				sssScoreSheetEntryDataTable.getSelectionModel().cellSelectionEnabledProperty().set(true);
				
				//get the real class
	//			String stdClass2 = getPrimeClassOnly(stdClassId, year, term, stdClass);
				String stdClass2 = getPrimeClass(stdClass);
				
				//CA1
				sssEntryCA1Col.setEditable(true);
				sssEntryCA1Col.setCellFactory(TextFieldTableCell.<SSSScoreSheetEntryDataTable>forTableColumn());
				sssEntryCA1Col.setOnEditCommit(event -> {
					
					SSSScoreSheetEntryDataTable CA = event.getRowValue();
					String sid = CA.getStdNo_Data()+stdClass2+term+stdSubjCode2+year+numTail;
					String CA1_old = event.getOldValue();
					String stdId = CA.getStdNo_Data();
					String stdName = CA.getStdName_Data();
					String CA1_new = event.getNewValue();
					
					try {
						double CA1 = Double.parseDouble(CA1_new);
						if(CA1 >= 0 && CA1 <= 10) {
							double CA2 = Double.parseDouble(CA.getCA2_Data());
							double CA3 = Double.parseDouble(CA.getCA3_Data());
							double exam = Double.parseDouble(CA.getExam_Data());
							double total = CA1 + CA2 + CA3 + exam;
	
							String grade = gradeSum(total);
							
							CA.setCA1_Data(CA1_new);
							
							updateScoresDatabaseSSS(stdId, stdClass2, term, stdSubjCode, 
									CA1, CA2, CA3, exam, total, grade,
									stdName, stdSubject, sid, year, dispName);
						}
						else {
							Alert alert = new Alert(Alert.AlertType.ERROR);
							alert.setContentText("Invalid entries... (entry must be within 0 - 5 range)");
							Optional<ButtonType> result = alert.showAndWait();
							if(result.get() == ButtonType.OK) {
								alert.close();
							}
							else {
								alert.close();
							}
						}
					}
					catch(Exception ex2) {
						Alert alert = new Alert(Alert.AlertType.ERROR);
						alert.setContentText("Invalid entries... (entry must be a number within 0 - 5 range) " +
								ex2.getMessage());
						Optional<ButtonType> result = alert.showAndWait();
						if(result.get() == ButtonType.OK) {
							alert.close();
						}
						else {
							alert.close();
						}
					}
					
				});
				
				//CA2
				sssEntryCA2Col.setEditable(true);
				sssEntryCA2Col.setCellFactory(TextFieldTableCell.<SSSScoreSheetEntryDataTable>forTableColumn());
				sssEntryCA2Col.setOnEditCommit(event -> {
					SSSScoreSheetEntryDataTable CA = event.getRowValue();
					String sid = CA.getStdNo_Data()+stdClass2+term+stdSubjCode2+year+numTail;
					//String CA1_old = event.getOldValue();
					String stdId = CA.getStdNo_Data();
					String stdName = CA.getStdName_Data();
					String CA2_new = event.getNewValue();
					
					try {
						double CA2 = Double.parseDouble(CA2_new);
						if(CA2 >= 0 && CA2 <= 10) {
							double CA1 = Double.parseDouble(CA.getCA1_Data());
							double CA3 = Double.parseDouble(CA.getCA3_Data());
							double exam = Double.parseDouble(CA.getExam_Data());
							double total = CA1 + CA2 + CA3 + exam;
	
							String grade = gradeSum(total);
							
							CA.setCA2_Data(CA2_new);
							
							updateScoresDatabaseSSS(stdId, stdClass2, term, stdSubjCode, 
									CA1, CA2, CA3, exam, total, grade,
									stdName, stdSubject, sid, year, dispName);
						}
						else {
							Alert alert = new Alert(Alert.AlertType.ERROR);
							alert.setContentText("Invalid entries... (entry must be within 0 - 5 range)");
							Optional<ButtonType> result = alert.showAndWait();
							if(result.get() == ButtonType.OK) {
								alert.close();
							}
							else {
								alert.close();
							}
						}
					}
					catch(Exception ex2) {
						Alert alert = new Alert(Alert.AlertType.ERROR);
						alert.setContentText("Invalid entries... (entry must be a number within 0 - 5 range) " +
								ex2.getMessage());
						Optional<ButtonType> result = alert.showAndWait();
						if(result.get() == ButtonType.OK) {
							alert.close();
						}
						else {
							alert.close();
						}
					}
					
				});
				
				//CA3
				sssEntryCA3Col.setEditable(true);
				sssEntryCA3Col.setCellFactory(TextFieldTableCell.<SSSScoreSheetEntryDataTable>forTableColumn());
				sssEntryCA3Col.setOnEditCommit(event -> {
					SSSScoreSheetEntryDataTable CA = event.getRowValue();
					String sid = CA.getStdNo_Data()+stdClass2+term+stdSubjCode2+year+numTail;
					//String CA1_old = event.getOldValue();
					String stdId = CA.getStdNo_Data();
					String stdName = CA.getStdName_Data();
					String CA3_new = event.getNewValue();
					
					try {
						double CA3 = Double.parseDouble(CA3_new);
						if(CA3 >= 0 && CA3 <= 10) {
							double CA1 = Double.parseDouble(CA.getCA1_Data());
							double CA2 = Double.parseDouble(CA.getCA2_Data());
							double exam = Double.parseDouble(CA.getExam_Data());
							double total = CA1 + CA2 + CA3 + exam;
	
							String grade = gradeSum(total);
							
							CA.setCA3_Data(CA3_new);
							
							updateScoresDatabaseSSS(stdId, stdClass2, term, stdSubjCode, 
									CA1, CA2, CA3, exam, total, grade,
									stdName, stdSubject, sid, year, dispName);
						}
						else {
							Alert alert = new Alert(Alert.AlertType.ERROR);
							alert.setContentText("Invalid entries... (entry must be within 0 - 5 range)");
							Optional<ButtonType> result = alert.showAndWait();
							if(result.get() == ButtonType.OK) {
								alert.close();
							}
							else {
								alert.close();
							}
						}
					}
					catch(Exception ex2) {
						Alert alert = new Alert(Alert.AlertType.ERROR);
						alert.setContentText("Invalid entries... (entry must be a number within 0 - 5 range) " +
								ex2.getMessage());
						Optional<ButtonType> result = alert.showAndWait();
						if(result.get() == ButtonType.OK) {
							alert.close();
						}
						else {
							alert.close();
						}
					}
					
				});
				
				//exam - SSS
				sssEntryExamCol.setEditable(true);
				sssEntryExamCol.setCellFactory(TextFieldTableCell.<SSSScoreSheetEntryDataTable>forTableColumn());
				sssEntryExamCol.setOnEditCommit(event -> {
					SSSScoreSheetEntryDataTable CA = event.getRowValue();
					String sid = CA.getStdNo_Data()+stdClass2+term+stdSubjCode2+year+numTail;
					//String CA1_old = event.getOldValue();
					String stdId = CA.getStdNo_Data();
					String stdName = CA.getStdName_Data();
					String exam_new = event.getNewValue();
					
					try {
						double exam = Double.parseDouble(exam_new);
						if(exam >= 0 && exam <= 70) {
							double CA1 = Double.parseDouble(CA.getCA1_Data());
							double CA2 = Double.parseDouble(CA.getCA2_Data());
							double CA3 = Double.parseDouble(CA.getCA3_Data());
							double total = CA1 + CA2 + CA3 + exam;
	
							String grade = gradeSum(total);
							
							CA.setExam_Data(exam_new);
							
							updateScoresDatabaseSSS(stdId, stdClass2, term, stdSubjCode, 
									CA1, CA2, CA3, exam, total, grade,
									stdName, stdSubject, sid, year, dispName);
						}
						else {
							Alert alert = new Alert(Alert.AlertType.ERROR);
							alert.setContentText("Invalid entries... (entry must be within 0 - 70 range)");
							Optional<ButtonType> result = alert.showAndWait();
							if(result.get() == ButtonType.OK) {
								alert.close();
							}
							else {
								alert.close();
							}
						}
					}
					catch(Exception ex2) {
						Alert alert = new Alert(Alert.AlertType.ERROR);
						alert.setContentText("Invalid entries... (entry must be a number within 0 - 5 range) " +
								ex2.getMessage());
						Optional<ButtonType> result = alert.showAndWait();
						if(result.get() == ButtonType.OK) {
							alert.close();
						}
						else {
							alert.close();
						}
					}
					
				});
			
			}
			else {
				Alert alert = new Alert(Alert.AlertType.ERROR);
				alert.setContentText("Invalid Subject Name Entry... Please select a subject and let its "
						+ "code be initialized before proceeding.");
				Optional<ButtonType> result = alert.showAndWait();
				if(result.get() == ButtonType.OK) {
					alert.close();
				}
				else {
					alert.close();
				}
			}
			
		}
		catch(Exception except) {
			Alert alert = new Alert(Alert.AlertType.ERROR);
			alert.setContentText("Invalid entries... (entry must be a number within 0 - 5 range): "
					+except.getMessage());
			Optional<ButtonType> result = alert.showAndWait();
			if(result.get() == ButtonType.OK) {
				alert.close();
			}
			else {
				alert.close();
			}
		}
	}
	
	private String gradeSum(double sum) {
		String grade;
		if(sum >= 70.0) {
			grade = "A";
			return grade;
		}
		else if(sum >= 60 && sum < 70) {
			grade = "B";
			return grade;
		}
		else if (sum >= 50 && sum < 60) {
			grade = "C";
			return grade;
		}
		else if (sum >= 40 && sum < 50) {
			grade = "D";
			return grade;
		}
		else {
			grade = "E";
			return grade;
		}
	}
	
	private void updateScoresDatabaseJSS(String stdNo, String stdClass, String stdTerm, int subjectCode, 
			double ASS1, double ASS2, double ASS3, double PRJ1, double PRJ2, double PRJ3, double exam, 
			double total, String grade, String name, String subjectName, String sid, String year, 
			String user) {
		
		String innerStdClass, innerStdTerm, innerStdYear;
		
		EntityManagerFactory emfactory = Persistence.createEntityManagerFactory
				("SchoolMgtSystem");
		EntityManager entitymanager = emfactory.createEntityManager();
		entitymanager.getTransaction().begin();
		
		Students std = entitymanager.find(Students.class, stdNo);
		
		String innerStdClassId = std.getEntryClassAssigned();
		
		StudentClasses stdCX = entitymanager.find(StudentClasses.class, innerStdClassId);
		
		innerStdClass = getPrimeClass(stdCX.getClassNo()+stdCX.getClassLetter());
		innerStdTerm = stdCX.getTerm();
		innerStdYear = stdCX.getYear();
		
		entitymanager.getTransaction().commit();
		entitymanager.close();
		emfactory.close();
		
		if(stdClass.equals(innerStdClass) && 
				stdTerm.equals(innerStdTerm) && 
				year.equals(innerStdYear)) {
			CreateScores scores = new CreateScores();
			UpdateScores update = new UpdateScores();
			
			//creates scores
			try {
				scores.createJssScores(stdNo, stdClass, stdTerm, subjectCode, ASS1, ASS2, ASS3,
						PRJ1, PRJ2, PRJ3, exam, total, grade, name, subjectName, sid, year, user);
				scores.createJssScoreSheetsSummary(stdNo, name, stdClass, stdTerm, total, year, user);
				scores.createJssAnnualScoreSheetsSummary(stdNo, name, stdClass, subjectCode, subjectName, total, year, 
						stdTerm, user, stdTerm);
				scores.createJssAnnualScoresTotal(stdNo, name, stdClass, total, year, user, stdTerm);
				
				//CreateScores std = new CreateScores();
				//std.createScoresSID(stdNo, sid);
			}
			catch(Exception e) {
				e.printStackTrace();
			}
			
			//update scores
			try {
				update.updateJssScoreSheetsSummary(sid, 0, 0, 0, ASS1, ASS2, ASS3, PRJ1, PRJ2, PRJ3, exam, total);
				update.updateJssAnnualScoreSheetsSummary(sid, 0, 0, 0, ASS1, ASS2, ASS3, PRJ1, PRJ2, PRJ3, exam, stdTerm, total);
				update.updateJssScoreSheets(sid, stdClass, stdTerm, ASS1, ASS2, ASS3, PRJ1, PRJ2, PRJ3,
						exam, total, grade, year);
				update.updateJssAnnualScoresTotal(sid, 0, 0, 0, ASS1, ASS2, ASS3, PRJ1, PRJ2, PRJ3,
						exam, total);
				
			}
			catch(Exception e) {
				e.printStackTrace();
			}
		}
		else {
			Alert alert = new Alert(Alert.AlertType.ERROR);
			alert.setContentText("Illegal Action!: You can only enter scores for "
					+ "current class, term and year..!");
			alert.setHeaderText("Illegal Action!");
			Optional<ButtonType> result = alert.showAndWait();
			if(result.get() == ButtonType.OK) {
				alert.close();
			}
			else {
				alert.close();
			}
		}
	
	}
	
	//JSS_New Update
	private void updateScoresDatabaseJSSNew(String stdNo, String stdClass, String stdTerm, int subjectCode, 
			double test1, double ASS1, double CWK1, double proj, double ASS2, double CWK2, double test2,
			double ASS3, double CWK3, double exam, 
			double total, String grade, String name, String subjectName, String sid, String year, 
			String user) {
		
		String innerStdClass, innerStdTerm, innerStdYear;
		
		EntityManagerFactory emfactory = Persistence.createEntityManagerFactory
				("SchoolMgtSystem");
		EntityManager entitymanager = emfactory.createEntityManager();
		entitymanager.getTransaction().begin();
		
		Students std = entitymanager.find(Students.class, stdNo);
		
		String innerStdClassId = std.getEntryClassAssigned();
		
		StudentClasses stdCX = entitymanager.find(StudentClasses.class, innerStdClassId);
		
		innerStdClass = getPrimeClass(stdCX.getClassNo()+stdCX.getClassLetter());
		innerStdTerm = stdCX.getTerm();
		innerStdYear = stdCX.getYear();
		
		entitymanager.getTransaction().commit();
		entitymanager.close();
		emfactory.close();
		
		if(stdClass.equals(innerStdClass) && 
				stdTerm.equals(innerStdTerm) && 
				year.equals(innerStdYear)) {
			CreateScores scores = new CreateScores();
			UpdateScores update = new UpdateScores();
			
			//creates scores
			try {
				scores.createJssScores(stdNo, stdClass, stdTerm, subjectCode, ASS1, CWK1, ASS2,
						CWK2, ASS3, CWK3, test1+proj+test2+exam, total, grade, name, 
						subjectName, sid, year, user);
				scores.createJssScoresNew(sid, stdClass, stdNo, stdTerm, subjectCode, ASS1, 
						ASS2, ASS3, CWK1, CWK2, CWK3, test1, test2, proj, exam, total, name, 
						subjectName, grade, year, user);
				scores.createJssScoreSheetsSummary(stdNo, name, stdClass, stdTerm, total, year, user);
				scores.createJssAnnualScoreSheetsSummary(stdNo, name, stdClass, subjectCode, subjectName, total, year, 
						stdTerm, user, stdTerm);
				scores.createJssAnnualScoresTotal(stdNo, name, stdClass, total, year, user, stdTerm);
				
				//CreateScores std = new CreateScores();
				//std.createScoresSID(stdNo, sid);
			}
			catch(Exception e) {
				e.printStackTrace();
			}
			
			//update scores
			try {
				update.updateJssScoreSheetsSummary(sid, 0, 0, 0, ASS1, ASS2, ASS3, 
						CWK1, CWK2, CWK3, test1+proj+test2+exam, total);
				update.updateJssScoresNew(sid, stdClass, stdNo, stdTerm, ASS1, ASS2, ASS3, CWK1, CWK2, CWK3, 
						test1, test2, proj, exam, total, grade, year, user);
				update.updateJssAnnualScoreSheetsSummary(sid, 0, 0, 0, ASS1, ASS2, ASS3, CWK1, CWK2, CWK3, 
						test1+proj+test2+exam, stdTerm, total);
				update.updateJssScoreSheets(sid, stdClass, stdTerm, ASS1, ASS2, ASS3, CWK1, CWK2, CWK3,
						test1+proj+test2+exam, total, grade, year);
				update.updateJssAnnualScoresTotal(sid, 0, 0, 0, ASS1, ASS2, ASS3, CWK1, CWK2, CWK3,
						test1+proj+test2+exam, total);
				
			}
			catch(Exception e) {
				e.printStackTrace();
			}
		}
		else {
			Alert alert = new Alert(Alert.AlertType.ERROR);
			alert.setContentText("Illegal Action!: You can only enter scores for "
					+ "current class, term and year..!");
			alert.setHeaderText("Illegal Action!");
			Optional<ButtonType> result = alert.showAndWait();
			if(result.get() == ButtonType.OK) {
				alert.close();
			}
			else {
				alert.close();
			}
		}
	
	}
	
	private void updateScoresDatabaseSSS(String stdNo, String stdClass, String stdTerm, int subjectCode, 
			double CA1, double CA2, double CA3, double exam, double total, String grade,
			String name, String subjectName, String sid, String year, 
			String user) {
		
		String innerStdClass, innerStdTerm, innerStdYear;
		
		EntityManagerFactory emfactory = Persistence.createEntityManagerFactory
				("SchoolMgtSystem");
		EntityManager entitymanager = emfactory.createEntityManager();
		entitymanager.getTransaction().begin();
		
		Students std = entitymanager.find(Students.class, stdNo);
		
		String innerStdClassId = std.getEntryClassAssigned();
		
		StudentClasses stdCX = entitymanager.find(StudentClasses.class, innerStdClassId);
		
		innerStdClass = getPrimeClass(stdCX.getClassNo()+stdCX.getClassLetter());
		innerStdTerm = stdCX.getTerm();
		innerStdYear = stdCX.getYear();
		
		entitymanager.getTransaction().commit();
		entitymanager.close();
		emfactory.close();
		
		if(stdClass.equals(innerStdClass) && 
				stdTerm.equals(innerStdTerm) && 
				year.equals(innerStdYear)) {
			
			CreateScores scores = new CreateScores();
			UpdateScores update = new UpdateScores();
			
			//creates scores
			try {
				
				scores.createScores(stdNo, stdClass, stdTerm, subjectCode, CA1, CA2, CA3, 
						exam, total, grade, name, subjectName, sid, year, user);
				scores.createScoreSheetsSummary(stdNo, name, stdClass, stdTerm, total, year, user);
				scores.createAnnualScoreSheetsSummary(stdNo, name, stdClass, subjectCode,
						subjectName, total, year, stdTerm, user, stdTerm);
				scores.createAnnualScoresTotal(stdNo, name, stdClass, total, year, user, stdTerm);
				
				//CreateScores std = new CreateScores();
				//std.createScoresSID(stdNo, sid);
			}
			catch(Exception e) {
				e.printStackTrace();
			}
			
			//update scores
			try {
				update.updateScoreSheetsSummary(sid, CA1, CA2, CA3, 0, 0, 0, 0, 0, 0, exam, total);
				update.updateAnnualScoreSheetsSummary(sid, CA1, CA2, CA3, 0, 0, 0, 0, 0, 0, exam,
						stdTerm, total);
				update.updateScoreSheets(sid, stdClass, stdTerm, CA1, CA2, CA3, exam, total,
						grade, year);
				update.updateAnnualScoresTotal(sid, CA1, CA2, CA3, 0, 0, 0, 0, 0,
						0, exam, total);
				
			}
			catch(Exception e) {
				e.printStackTrace();
			}
		}
		else {
			Alert alert = new Alert(Alert.AlertType.ERROR);
			alert.setContentText("Illegal Action: You can only enter scores for "
					+ "current class, term and year..!");
			alert.setHeaderText("Illegal Action!");
			Optional<ButtonType> result = alert.showAndWait();
			if(result.get() == ButtonType.OK) {
				alert.close();
			}
			else {
				alert.close();
			}
		}
		
	}
	
	//excel JSSTableScoreSheets
	@FXML public void xcelJssTableScoreSheetsEntries(ActionEvent event) {
		Workbook workbook = new HSSFWorkbook();
		Sheet spreadSheet = workbook.createSheet("sample");
		Row row = spreadSheet.createRow(0);
		
		for(int j = 0; j < jssScoreSheetEntryDataTable.getColumns().size(); j++) {
			row.createCell(j).setCellValue(jssScoreSheetEntryDataTable.getColumns().get(j).getText());
		}
		
		for(int i = 0; i < jssScoreSheetEntryDataTable.getItems().size(); i++) {
			row = spreadSheet.createRow(i + 1);
			for(int j = 0; j < jssScoreSheetEntryDataTable.getColumns().size(); j++) {
				if(jssScoreSheetEntryDataTable.getColumns().get(j).getCellData(i) != null) {
					row.createCell(j).setCellValue(jssScoreSheetEntryDataTable.getColumns().get(j).getCellData(i).toString());
				}
				else {
					row.createCell(j).setCellValue("");
				}
			}
		}
		
		String txt = JSSClassCombo.getValue()+jssSubjectCombo.getValue()+".xls";
		String filePath = "C:\\workbook\\"+txt;
		
		try {
			FileOutputStream fileOut = new FileOutputStream(filePath);
			try {
				workbook.write(fileOut);
				fileOut.close();
				JSSClassLabel.setText(filePath);
			} catch (IOException e2) {
				JSSClassLabel.setText("Write Error: "+ e2.getMessage());
			}
		} catch (FileNotFoundException e) {
			JSSClassLabel.setText("File Error: "+ e.getMessage());
		}
	}
	
	//Excel JSS New
	@FXML public void xcelJssNewTableScoreSheetsEntries(ActionEvent event) {
		Workbook workbook = new HSSFWorkbook();
		Sheet spreadSheet = workbook.createSheet("sample");
		Row row = spreadSheet.createRow(0);
		
		for(int j = 0; j < jssScoreSheetNewEntryDataTable.getColumns().size(); j++) {
			row.createCell(j).setCellValue(jssScoreSheetNewEntryDataTable.getColumns().get(j).getText());
		}
		
		for(int i = 0; i < jssScoreSheetNewEntryDataTable.getItems().size(); i++) {
			row = spreadSheet.createRow(i + 1);
			for(int j = 0; j < jssScoreSheetNewEntryDataTable.getColumns().size(); j++) {
				if(jssScoreSheetNewEntryDataTable.getColumns().get(j).getCellData(i) != null) {
					row.createCell(j).setCellValue(jssScoreSheetNewEntryDataTable.getColumns().get(j).getCellData(i).toString());
				}
				else {
					row.createCell(j).setCellValue("");
				}
			}
		}
		
		String txt = JSSNewClassCombo.getValue()+jssNewSubjectCombo.getValue()+".xls";
		String filePath = "C:\\workbook\\"+txt;
		
		try {
			FileOutputStream fileOut = new FileOutputStream(filePath);
			try {
				workbook.write(fileOut);
				fileOut.close();
				JssNewClassLabel.setText(filePath);
			} catch (IOException e2) {
				JssNewClassLabel.setText("Write Error: "+ e2.getMessage());
			}
		} catch (FileNotFoundException e) {
			JssNewClassLabel.setText("File Error: "+ e.getMessage());
		}
	}
	
	//Refresh Table
	@FXML public void refreshJssTableScoresEntry(ActionEvent event) {
		try {
			String stdClassId = JSSClassCombo.getValue();
			
			if(stdClassId.contains("JSS")) {
				String stdSubject = jssSubjectCombo.getValue();
				String stdSubjCode2 = jssSubjCodeCombo.getValue();
				int stdSubjCode = Integer.parseInt(stdSubjCode2);
				
				try {
					String studentClass, year, term;
					
					ObservableList<JSSScoreSheetEntryDataTable> data = FXCollections.observableArrayList();
					LinkedHashSet<String> SID = new LinkedHashSet<>();
					LinkedHashSet<String> STDID_JssScoreSheet = new LinkedHashSet<>();
					LinkedHashSet<String> STDID_ClassList = new LinkedHashSet<>();
					
					EntityManagerFactory emfactory = Persistence.createEntityManagerFactory
							("SchoolMgtSystem");
					EntityManager entitymanager = emfactory.createEntityManager();
					entitymanager.getTransaction().begin();
					
					StudentClasses std = entitymanager.find(StudentClasses.class, stdClassId);
					
					STDID_ClassList = std.getStdList();
					studentClass = std.getClassNo()+std.getClassLetter();
					year = std.getYear();
					term = std.getTerm();
					
					entitymanager.getTransaction().commit();
					entitymanager.close();
					emfactory.close();
					
//					String stdClass2 = getPrimeClassOnly(stdClassId, year, term, studentClass);
					String stdClass2 = getPrimeClass(studentClass);
					
					//get jss scoresheet list
					final String JDBC_Driver2 = "com.mysql.jdbc.Driver";
					final String DB_URL2 = dbURL;
					final String DB_User2 = dbUSR;
					final String DB_PWD2 = dbPWD;
					
					
					Connection conn2 = null;
					PreparedStatement stmt2 = null;
					
					try {
						Class.forName(JDBC_Driver2);
						conn2 = DriverManager.getConnection(DB_URL2, DB_User2, DB_PWD2);
						
						String sql;
						
						sql = "SELECT * FROM jssscoresheets where "
								+ "STDCLASS = ? "
								+ "and SCORESYEAR = ? "
								+ "and TERM = ? "
								+ "and SUBJECTNAME = ? "
								+ "and SUBJECTCODE = ?";
						
						stmt2 = conn2.prepareStatement(sql);
						
						stmt2.setString(1, stdClass2);
						stmt2.setString(2, year);
						stmt2.setString(3, term);
						stmt2.setString(4, stdSubject);
						stmt2.setInt(5, stdSubjCode);
						
						ResultSet rs = stmt2.executeQuery();
						
						while(rs.next()) {
							SID.add(rs.getString("SID"));
							STDID_JssScoreSheet.add(rs.getString("STDID"));
						}
						rs.close();
						stmt2.close();
						conn2.close();
					}
					catch(SQLException es) {
						JSSClassLabel.setText("Error JDBC: "+ es.getSQLState());
					}
					catch(Exception es2) {
						JSSClassLabel.setText("Error JDBC: "+ es2.getMessage());
					}
					finally {
						try {
							if(stmt2 != null ) {
								stmt2.close();
							}
						}
						catch(SQLException ces) {
							JSSClassLabel.setText("Error JDBC: "+ ces.getSQLState());
						}
						try {
							if(conn2 != null ) {
								conn2.close();
							}
						}
						catch(Exception ces2) {
							JSSClassLabel.setText("JDBC: "+ces2.getMessage());
						}
					}
					
					int sNo = 1;
					for(String sid : SID) {
						EntityManagerFactory emfactory2 = Persistence.createEntityManagerFactory
								("SchoolMgtSystem");
						EntityManager entitymanager2 = emfactory2.createEntityManager();
						entitymanager2.getTransaction().begin();
						
						JssScoreSheets score = entitymanager2.find(JssScoreSheets.class, sid);
						
						data.add(new JSSScoreSheetEntryDataTable(
								String.valueOf(sNo),
								score.getStdId(),
								score.getName(),
								String.valueOf(score.getCA1()),
								String.valueOf(score.getCA2()),
								String.valueOf(score.getCA3()),
								String.valueOf(score.getCA4()),
								String.valueOf(score.getCA5()),
								String.valueOf(score.getCA6()),
								String.valueOf(score.getExamScore()),
								String.valueOf(score.getTotal()),
								score.getGrade()
								));
						
						entitymanager2.getTransaction().commit();
						entitymanager2.close();
						emfactory2.close();
						
						sNo = sNo + 1;
					}
					
					for(String stdNo2 : STDID_ClassList) {
						if(!STDID_JssScoreSheet.contains(stdNo2)) {
							
							EntityManagerFactory emfactory2 = Persistence.createEntityManagerFactory
									("SchoolMgtSystem");
							EntityManager entitymanager2 = emfactory2.createEntityManager();
							entitymanager2.getTransaction().begin();
							
							Students std2 = entitymanager2.find(Students.class, stdNo2);
							
							data.add(new JSSScoreSheetEntryDataTable(
									String.valueOf(sNo),
									std2.getId(),
									std2.getOtherNames() + " " + std2.getSurName(),
									String.valueOf(0),
									String.valueOf(0),
									String.valueOf(0),
									String.valueOf(0),
									String.valueOf(0),
									String.valueOf(0),
									String.valueOf(0),
									String.valueOf(0),
									"E"
									));
							
							entitymanager2.getTransaction().commit();
							entitymanager2.close();
							emfactory2.close();
							
							sNo = sNo + 1;
							
						}
					}
					
					jssEntrySNoCol.setCellValueFactory(new PropertyValueFactory("sNo_Data"));
					jssEntryStdNoCol.setCellValueFactory(new PropertyValueFactory("stdNo_Data"));
					jssEntryStdNameCol.setCellValueFactory(new PropertyValueFactory("stdName_Data"));
					jssEntryCA1Col.setCellValueFactory(new PropertyValueFactory("CA1_Data"));
					jssEntryCA2Col.setCellValueFactory(new PropertyValueFactory("CA2_Data"));
					jssEntryCA3Col.setCellValueFactory(new PropertyValueFactory("CA3_Data"));
					jssEntryCA4Col.setCellValueFactory(new PropertyValueFactory("CA4_Data"));
					jssEntryCA5Col.setCellValueFactory(new PropertyValueFactory("CA5_Data"));
					jssEntryCA6Col.setCellValueFactory(new PropertyValueFactory("CA6_Data"));
					jssEntryExamCol.setCellValueFactory(new PropertyValueFactory("exam_Data"));
					jssEntryTotalCol.setCellValueFactory(new PropertyValueFactory("total_Data"));
					jssEntryGradeCol.setCellValueFactory(new PropertyValueFactory("grade_Data"));
					
					jssScoreSheetEntryDataTable.setItems(data);
					
				}
				catch(Exception e2) {
					e2.printStackTrace();
				}
			}
			else {
				Alert alert = new Alert(Alert.AlertType.ERROR);
				alert.setContentText("Invalid Selections or entries... Select the right class category");
				Optional<ButtonType> result = alert.showAndWait();
				if(result.get() == ButtonType.OK) {
					alert.close();
				}
				else {
					alert.close();
				}
			}
		}
		catch(Exception e22) {
			JSSClassLabel.setText("Error: "+ e22.getMessage());
			jssScoreSheetEntryDataTable.setItems(null);
		}
		
		//set table uneditable
		jssScoreSheetEntryDataTable.setEditable(false);
		jssScoreSheetEntryDataTable.getSelectionModel().cellSelectionEnabledProperty().set(false);
	}
	
	//excel SSS scoresheets table entry
	@FXML public void xcelSSSTableScoreSheetsEntries(ActionEvent event) {
		Workbook workbook = new HSSFWorkbook();
		Sheet spreadSheet = workbook.createSheet("sample");
		Row row = spreadSheet.createRow(0);
		
		for(int j = 0; j < sssScoreSheetEntryDataTable.getColumns().size(); j++) {
			row.createCell(j).setCellValue(sssScoreSheetEntryDataTable.getColumns().get(j).getText());
		}
		
		for(int i = 0; i < sssScoreSheetEntryDataTable.getItems().size(); i++) {
			row = spreadSheet.createRow(i + 1);
			for(int j = 0; j < sssScoreSheetEntryDataTable.getColumns().size(); j++) {
				if(sssScoreSheetEntryDataTable.getColumns().get(j).getCellData(i) != null) {
					row.createCell(j).setCellValue(sssScoreSheetEntryDataTable.getColumns().get(j).getCellData(i).toString());
				}
				else {
					row.createCell(j).setCellValue("");
				}
			}
		}
		
		String txt = SSSClassCombo.getValue()+sssSubjectCombo.getValue()+".xls";
		String filePath = "C:\\workbook\\"+txt;
		
		try {
			FileOutputStream fileOut = new FileOutputStream(filePath);
			try {
				workbook.write(fileOut);
				fileOut.close();
				SSSClassLabel.setText(filePath);
			} catch (IOException e2) {
				SSSClassLabel.setText("Write Error: "+ e2.getMessage());
			}
		} catch (FileNotFoundException e) {
			SSSClassLabel.setText("File Error: "+ e.getMessage());
		}
	}
	
	//refresh SSS scores table
	@FXML public void refreshSssTableScoresEntry(ActionEvent e) {
		try {
			String stdClassId = SSSClassCombo.getValue();
			
			if(stdClassId.contains("SSS")) {
				String stdSubject = sssSubjectCombo.getValue();
				String stdSubjCode2 = sssSubjCodeCombo.getValue();
				int stdSubjCode = Integer.parseInt(stdSubjCode2);
				
				try {
					String studentClass, year, term;
					
					ObservableList<SSSScoreSheetEntryDataTable> data = FXCollections.observableArrayList();
					LinkedHashSet<String> SID = new LinkedHashSet<>();
					LinkedHashSet<String> STDID_SssScoreSheet = new LinkedHashSet<>();
					LinkedHashSet<String> STDID_ClassList = new LinkedHashSet<>();
					
					EntityManagerFactory emfactory = Persistence.createEntityManagerFactory
							("SchoolMgtSystem");
					EntityManager entitymanager = emfactory.createEntityManager();
					entitymanager.getTransaction().begin();
					
					StudentClasses std = entitymanager.find(StudentClasses.class, stdClassId);
					
					STDID_ClassList = std.getStdList();
					studentClass = std.getClassNo()+std.getClassLetter();
					year = std.getYear();
					term = std.getTerm();
					
					entitymanager.getTransaction().commit();
					entitymanager.close();
					emfactory.close();
					
					// return database class
//					String stdClass2 = getPrimeClassOnly(stdClassId, year, term, studentClass);
					String stdClass2 = getPrimeClass(studentClass);
					
					//get jss scoresheet list
					final String JDBC_Driver2 = "com.mysql.jdbc.Driver";
					final String DB_URL2 = dbURL;
					final String DB_User2 = dbUSR;
					final String DB_PWD2 = dbPWD;
					
					
					Connection conn2 = null;
					PreparedStatement stmt2 = null;
					
					try {
						Class.forName(JDBC_Driver2);
						conn2 = DriverManager.getConnection(DB_URL2, DB_User2, DB_PWD2);
						
						String sql;
						
						sql = "SELECT * FROM scoresheets where "
								+ "STDCLASS = ? "
								+ "and SCORESYEAR = ? "
								+ "and TERM = ? "
								+ "and SUBJECTNAME = ? "
								+ "and SUBJECTCODE = ?";
						
						stmt2 = conn2.prepareStatement(sql);
						
						stmt2.setString(1, stdClass2);
						stmt2.setString(2, year);
						stmt2.setString(3, term);
						stmt2.setString(4, stdSubject);
						stmt2.setInt(5, stdSubjCode);
						
						ResultSet rs = stmt2.executeQuery();
						
						while(rs.next()) {
							SID.add(rs.getString("SID"));
							STDID_SssScoreSheet.add(rs.getString("STDID"));
						}
						rs.close();
						stmt2.close();
						conn2.close();
					}
					catch(SQLException es) {
						SSSClassLabel.setText("Error JDBC: "+ es.getSQLState());
					}
					catch(Exception es2) {
						SSSClassLabel.setText("Error JDBC: "+ es2.getMessage());
					}
					finally {
						try {
							if(stmt2 != null ) {
								stmt2.close();
							}
						}
						catch(SQLException ces) {
							SSSClassLabel.setText("Error JDBC: "+ ces.getSQLState());
						}
						try {
							if(conn2 != null ) {
								conn2.close();
							}
						}
						catch(Exception ces2) {
							SSSClassLabel.setText("JDBC: "+ces2.getMessage());
						}
					}
					
					int sNo = 1;
					for(String sid : SID) {
						EntityManagerFactory emfactory2 = Persistence.createEntityManagerFactory
								("SchoolMgtSystem");
						EntityManager entitymanager2 = emfactory2.createEntityManager();
						entitymanager2.getTransaction().begin();
						
						ScoreSheets score = entitymanager2.find(ScoreSheets.class, sid);
						
						data.add(new SSSScoreSheetEntryDataTable(
								String.valueOf(sNo),
								score.getStdId(),
								score.getName(),
								String.valueOf(score.getCA1()),
								String.valueOf(score.getCA2()),
								String.valueOf(score.getCA3()),
								String.valueOf(score.getExamScore()),
								String.valueOf(score.getTotal()),
								score.getGrade()
								));
						
						entitymanager2.getTransaction().commit();
						entitymanager2.close();
						emfactory2.close();
						
						sNo = sNo + 1;
					}
					
					for(String stdNo2 : STDID_ClassList) {
						if(!STDID_SssScoreSheet.contains(stdNo2)) {
							
							EntityManagerFactory emfactory2 = Persistence.createEntityManagerFactory
									("SchoolMgtSystem");
							EntityManager entitymanager2 = emfactory2.createEntityManager();
							entitymanager2.getTransaction().begin();
							
							Students std2 = entitymanager2.find(Students.class, stdNo2);
							
							data.add(new SSSScoreSheetEntryDataTable(
									String.valueOf(sNo),
									std2.getId(),
									std2.getOtherNames() + " " + std2.getSurName(),
									String.valueOf(0),
									String.valueOf(0),
									String.valueOf(0),
									String.valueOf(0),
									String.valueOf(0),
									"E"
									));
							
							entitymanager2.getTransaction().commit();
							entitymanager2.close();
							emfactory2.close();
							
							sNo = sNo + 1;
							
						}
					}
					
					sssEntrySNoCol.setCellValueFactory(new PropertyValueFactory("sNo_Data"));
					sssEntryStdNoCol.setCellValueFactory(new PropertyValueFactory("stdNo_Data"));
					sssEntryStdNameCol.setCellValueFactory(new PropertyValueFactory("stdName_Data"));
					sssEntryCA1Col.setCellValueFactory(new PropertyValueFactory("CA1_Data"));
					sssEntryCA2Col.setCellValueFactory(new PropertyValueFactory("CA2_Data"));
					sssEntryCA3Col.setCellValueFactory(new PropertyValueFactory("CA3_Data"));
					sssEntryExamCol.setCellValueFactory(new PropertyValueFactory("exam_Data"));
					sssEntryTotalCol.setCellValueFactory(new PropertyValueFactory("total_Data"));
					sssEntryGradeCol.setCellValueFactory(new PropertyValueFactory("grade_Data"));
					
					sssScoreSheetEntryDataTable.setItems(data);
					
				}
				catch(Exception e2) {
					e2.printStackTrace();
				}
			}
			else {
				Alert alert = new Alert(Alert.AlertType.ERROR);
				alert.setContentText("Invalid Selections or entries... Select the right class category");
				Optional<ButtonType> result = alert.showAndWait();
				if(result.get() == ButtonType.OK) {
					alert.close();
				}
				else {
					alert.close();
				}
			}	
			
		}
		catch(Exception e22) {
			SSSClassLabel.setText("Error: "+ e22.getMessage());
			sssScoreSheetEntryDataTable.setItems(null);
		}
		
		//set table uneditable
		sssScoreSheetEntryDataTable.setEditable(false);
		sssScoreSheetEntryDataTable.getSelectionModel().cellSelectionEnabledProperty().set(false);
	}
	
	//SSS TableView ******************************
	//SSS Scoresheets Manager - TableView
	@FXML private Label SSSClassLabel;
	@FXML private ComboBox<String> SSSClassCombo, sssSubjectCombo, sssSubjCodeCombo;
	@FXML private TableView <SSSScoreSheetEntryDataTable> sssScoreSheetEntryDataTable;
	@FXML private TableColumn<SSSScoreSheetEntryDataTable,String> sssEntrySNoCol, sssEntryStdNoCol, 
		sssEntryStdNameCol, sssEntryCA1Col, sssEntryCA2Col, sssEntryCA3Col, sssEntryExamCol, 
		sssEntryTotalCol, sssEntryGradeCol;
	ObservableList<String> sssClass = FXCollections.observableArrayList();
	ObservableList<String> sssSubject = FXCollections.observableArrayList();
	
	@FXML public void sssEntryInit(MouseEvent event) {
		populateStdClassesCombo3(sssClass, SSSClassCombo);
	}
	
	@FXML public void sssEntryInit2(MouseEvent event) {
		//search by subject name
		Vector<SubjectNames> userData3 = new Vector<>();
		if(dispUserClass.equals("Teacher")) {
			String user = dispUserName;
			String staffId = "";
			
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			Query query2 =
					entitymanager.createQuery("select e from SubjectNames e ");
			userData3 = (Vector<SubjectNames>) query2.getResultList();
			
			Users usr = entitymanager.find(Users.class, user);
			
			staffId = usr.getUserStaffID();
			
			entitymanager.getTransaction().commit();
			entitymanager.close();
			emfactory.close();
			
			//assigned subjects
			LinkedHashSet<String> subCodeList = new LinkedHashSet<>();
			LinkedHashSet<String> subList = new LinkedHashSet<>();
			
			EntityManagerFactory emfactorys = Persistence.createEntityManagerFactory("SchoolMgtSystem");
			EntityManager entitymanagers = emfactorys.createEntityManager();
			entitymanagers.getTransaction().begin();
			
			AssignedSubjects sub = entitymanagers.find(AssignedSubjects.class, staffId);
			
			subCodeList = sub.getSubjectCodeList();
			subList = sub.getSubjectList();
			
			entitymanagers.getTransaction().commit();
			entitymanagers.close();
			emfactorys.close();
			
			for(String code : subCodeList) {
				EntityManagerFactory emfactoryy = Persistence.createEntityManagerFactory("SchoolMgtSystem");
				EntityManager entitymanagery = emfactoryy.createEntityManager();
				entitymanagery.getTransaction().begin();
				
				SubjectNames subName = entitymanagery.find(SubjectNames.class, Integer.parseInt(code));
				
				if(!(sssSubject.contains(subName.getSubjectName()))) {
					sssSubject.add(subName.getSubjectName());
				}
				
				entitymanagery.getTransaction().commit();
				entitymanagery.close();
				emfactoryy.close();
			}
			
			sssSubjectCombo.setItems(sssSubject);
			new AutoCompleteComboBoxListener<>(sssSubjectCombo);
			
			if(!(sssSubjectCombo.getValue().isEmpty())) {
				String name = sssSubjectCombo.getValue();
				for(SubjectNames std : userData3) {
					if((std.getSubjectName().equals(name))) {
						sssSubjCodeCombo.setValue(String.valueOf(std.getSubjectCode()));
					}
				}
			}
			
		}
		else {
			
			//subjectCode_TF.setItems(subjectCodeN);
			
			try {
				EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
				EntityManager entitymanager = emfactory.createEntityManager();
				entitymanager.getTransaction().begin();
				
				Query query2 =
						entitymanager.createQuery("select e from SubjectNames e ");
				userData3 = (Vector<SubjectNames>) query2.getResultList();
				
				for(SubjectNames x : userData3) {
					if(!(sssSubject.contains(x.getSubjectName()))) {
						sssSubject.add(x.getSubjectName());
					}
				}
				
				sssSubjectCombo.setItems(sssSubject);
				
				entitymanager.getTransaction().commit();
				entitymanager.close();
				emfactory.close();
				
				new AutoCompleteComboBoxListener<>(sssSubjectCombo);
			}
			catch(Exception e) {
				e.printStackTrace();
			}
			
			if(!(sssSubjectCombo.getValue().isEmpty())) {
				String name = sssSubjectCombo.getValue();
				for(SubjectNames std : userData3) {
					if((std.getSubjectName().equals(name))) {
						sssSubjCodeCombo.setValue(String.valueOf(std.getSubjectCode()));
					}
				}
			}
		}
	}
	
	//populate tableview
	@SuppressWarnings({ "rawtypes", "unchecked" })
	@FXML public void spoolSssScoresheetsButton(ActionEvent event) {
		try {
			String stdClassId = SSSClassCombo.getValue();
			
			if(stdClassId.contains("SSS")) {
				String stdSubject = sssSubjectCombo.getValue();
				String stdSubjCode2 = sssSubjCodeCombo.getValue();
				int stdSubjCode = Integer.parseInt(stdSubjCode2);
				
				try {
					String studentClass, year, term;
					
					ObservableList<SSSScoreSheetEntryDataTable> data = FXCollections.observableArrayList();
					LinkedHashSet<String> SID = new LinkedHashSet<>();
					LinkedHashSet<String> STDID_SssScoreSheet = new LinkedHashSet<>();
					LinkedHashSet<String> STDID_ClassList = new LinkedHashSet<>();
					
					EntityManagerFactory emfactory = Persistence.createEntityManagerFactory
							("SchoolMgtSystem");
					EntityManager entitymanager = emfactory.createEntityManager();
					entitymanager.getTransaction().begin();
					
					StudentClasses std = entitymanager.find(StudentClasses.class, stdClassId);
					
					STDID_ClassList = std.getStdList();
					studentClass = std.getClassNo()+std.getClassLetter();
					year = std.getYear();
					term = std.getTerm();
					
					entitymanager.getTransaction().commit();
					entitymanager.close();
					emfactory.close();
					
					// return database class
//					String stdClass2 = getPrimeClassOnly(stdClassId, year, term, studentClass);
					String stdClass2 = getPrimeClass(studentClass);
					
					//get jss scoresheet list
					final String JDBC_Driver2 = "com.mysql.jdbc.Driver";
					final String DB_URL2 = dbURL;
					final String DB_User2 = dbUSR;
					final String DB_PWD2 = dbPWD;
					
					
					Connection conn2 = null;
					PreparedStatement stmt2 = null;
					
					try {
						Class.forName(JDBC_Driver2);
						conn2 = DriverManager.getConnection(DB_URL2, DB_User2, DB_PWD2);
						
						String sql;
						
						sql = "SELECT * FROM scoresheets where "
								+ "STDCLASS = ? "
								+ "and SCORESYEAR = ? "
								+ "and TERM = ? "
								+ "and SUBJECTNAME = ? "
								+ "and SUBJECTCODE = ?";
						
						stmt2 = conn2.prepareStatement(sql);
						
						stmt2.setString(1, stdClass2);
						stmt2.setString(2, year);
						stmt2.setString(3, term);
						stmt2.setString(4, stdSubject);
						stmt2.setInt(5, stdSubjCode);
						
						ResultSet rs = stmt2.executeQuery();
						
						while(rs.next()) {
							SID.add(rs.getString("SID"));
							STDID_SssScoreSheet.add(rs.getString("STDID"));
						}
						rs.close();
						stmt2.close();
						conn2.close();
					}
					catch(SQLException es) {
						SSSClassLabel.setText("Error JDBC: "+ es.getSQLState());
					}
					catch(Exception es2) {
						SSSClassLabel.setText("Error JDBC: "+ es2.getMessage());
					}
					finally {
						try {
							if(stmt2 != null ) {
								stmt2.close();
							}
						}
						catch(SQLException ces) {
							SSSClassLabel.setText("Error JDBC: "+ ces.getSQLState());
						}
						try {
							if(conn2 != null ) {
								conn2.close();
							}
						}
						catch(Exception ces2) {
							SSSClassLabel.setText("JDBC: "+ces2.getMessage());
						}
					}
					
					int sNo = 1;
					for(String sid : SID) {
						EntityManagerFactory emfactory2 = Persistence.createEntityManagerFactory
								("SchoolMgtSystem");
						EntityManager entitymanager2 = emfactory2.createEntityManager();
						entitymanager2.getTransaction().begin();
						
						ScoreSheets score = entitymanager2.find(ScoreSheets.class, sid);
						
						data.add(new SSSScoreSheetEntryDataTable(
								String.valueOf(sNo),
								score.getStdId(),
								score.getName(),
								String.valueOf(score.getCA1()),
								String.valueOf(score.getCA2()),
								String.valueOf(score.getCA3()),
								String.valueOf(score.getExamScore()),
								String.valueOf(score.getTotal()),
								score.getGrade()
								));
						
						entitymanager2.getTransaction().commit();
						entitymanager2.close();
						emfactory2.close();
						
						sNo = sNo + 1;
					}
					
					for(String stdNo2 : STDID_ClassList) {
						if(!STDID_SssScoreSheet.contains(stdNo2)) {
							
							EntityManagerFactory emfactory2 = Persistence.createEntityManagerFactory
									("SchoolMgtSystem");
							EntityManager entitymanager2 = emfactory2.createEntityManager();
							entitymanager2.getTransaction().begin();
							
							Students std2 = entitymanager2.find(Students.class, stdNo2);
							
							data.add(new SSSScoreSheetEntryDataTable(
									String.valueOf(sNo),
									std2.getId(),
									std2.getOtherNames() + " " + std2.getSurName(),
									String.valueOf(0),
									String.valueOf(0),
									String.valueOf(0),
									String.valueOf(0),
									String.valueOf(0),
									"E"
									));
							
							entitymanager2.getTransaction().commit();
							entitymanager2.close();
							emfactory2.close();
							
							sNo = sNo + 1;
							
						}
					}
					
					sssEntrySNoCol.setCellValueFactory(new PropertyValueFactory("sNo_Data"));
					sssEntryStdNoCol.setCellValueFactory(new PropertyValueFactory("stdNo_Data"));
					sssEntryStdNameCol.setCellValueFactory(new PropertyValueFactory("stdName_Data"));
					sssEntryCA1Col.setCellValueFactory(new PropertyValueFactory("CA1_Data"));
					sssEntryCA2Col.setCellValueFactory(new PropertyValueFactory("CA2_Data"));
					sssEntryCA3Col.setCellValueFactory(new PropertyValueFactory("CA3_Data"));
					sssEntryExamCol.setCellValueFactory(new PropertyValueFactory("exam_Data"));
					sssEntryTotalCol.setCellValueFactory(new PropertyValueFactory("total_Data"));
					sssEntryGradeCol.setCellValueFactory(new PropertyValueFactory("grade_Data"));
					
					sssScoreSheetEntryDataTable.setItems(data);
					
				}
				catch(Exception e2) {
					e2.printStackTrace();
				}
			}
			else {
				Alert alert = new Alert(Alert.AlertType.ERROR);
				alert.setContentText("Invalid Selections or entries... Select the right class category");
				Optional<ButtonType> result = alert.showAndWait();
				if(result.get() == ButtonType.OK) {
					alert.close();
				}
				else {
					alert.close();
				}
			}	
			
		}
		catch(Exception e) {
			SSSClassLabel.setText("Error: "+ e.getMessage());
			sssScoreSheetEntryDataTable.setItems(null);
		}
		
		//set table uneditable
		sssScoreSheetEntryDataTable.setEditable(false);
		sssScoreSheetEntryDataTable.getSelectionModel().cellSelectionEnabledProperty().set(false);
	}
	
	//EOT - Result Processing
	@FXML private Button eotClassListBtn;
	@FXML private ComboBox<String> eotClassId, eotYear, eotTerm, eotClass;
	@FXML private DatePicker eotDate;
	@FXML private TextField eotNoStds, eotDisplay;
	@FXML private TableView <EOTResultsProcessingDataTable> eotResultsProcessingDataTable;
	@FXML private TableColumn<EOTResultsProcessingDataTable,String> eotSNoCol, eotStdClassCol, eotSessionCol, 
		eotTermCol, eotStatusCol;
	
	ObservableList<String> eotIdList = FXCollections.observableArrayList();
	
	@FXML public void eotComboInit(MouseEvent event) {
		
		populateStdClassesCombo(eotIdList, eotClassId);

	}
	
	@FXML public void eotMove(MouseEvent event) {
		eotDate.setValue(LocalDate.now());
		String cid = eotClassId.getValue();
		try {
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			StudentClasses item = entitymanager.find(StudentClasses.class, cid);
			
			eotYear.setValue(item.getYear());
			eotTerm.setValue(item.getTerm());
			eotClass.setValue(item.getClassNo()+item.getClassLetter());
			
			entitymanager.getTransaction().commit();
			entitymanager.close();
			emfactory.close();
			
			//access levels
			if(dispUserClass.equals("Vice-Principal") || dispUserClass.equals("Principal")){
				eotClassListBtn.setDisable(true);
			}
			else if(dispUserClass.equals("Computer-Operator")) {
				eotClassListBtn.setDisable(true);
			}
			
		}
		catch(Exception e) {
			e.printStackTrace();
		}
	}
	
	@FXML private Button eotSingleClassBtn, eotAddClassBtn;
	@FXML public void eotEvent(MouseEvent event) {
		
		eotSingleClassBtn.setOnMouseEntered(e-> {
			eotSingleClassBtn.setTextFill(Color.GREEN);
		});
		eotSingleClassBtn.setOnMouseExited(e-> {
			eotSingleClassBtn.setTextFill(Color.DARKBLUE);
		});
		
		eotClassListBtn.setOnMouseEntered(e-> {
			eotClassListBtn.setTextFill(Color.GREEN);
		});
		eotClassListBtn.setOnMouseExited(e-> {
			eotClassListBtn.setTextFill(Color.DARKBLUE);
		});
		
		eotAddClassBtn.setOnMouseEntered(e-> {
			eotAddClassBtn.setTextFill(Color.GREEN);
		});
		eotAddClassBtn.setOnMouseExited(e-> {
			eotAddClassBtn.setTextFill(Color.DARKBLUE);
		});
		
		//access levels
		if(dispUserClass.equals("Vice-Principal") || dispUserClass.equals("Principal")){
			eotClassListBtn.setDisable(true);
		}
		else if(dispUserClass.equals("Computer-Operator")) {
			eotClassListBtn.setDisable(true);
		}
	}
	
	//single class result processing
	@FXML public void eotSingleClassResultProcessing(ActionEvent event) {
		String stdClassId = eotClassId.getValue();
		try {
			if(stdClassId.trim().length() != 0) {
				String yearEOT, termEOT, stdClassEOT;
				int studentCount = 0;
				LinkedHashSet<String> stdListEOT = new LinkedHashSet<>();
				
				EntityManagerFactory emfactoryq = Persistence.createEntityManagerFactory("SchoolMgtSystem");
				EntityManager entitymanagerq = emfactoryq.createEntityManager();
				entitymanagerq.getTransaction().begin();
				
				StudentClasses item = entitymanagerq.find(StudentClasses.class, stdClassId);
				
				yearEOT = item.getYear();
				termEOT = item.getTerm();
				stdClassEOT = item.getClassNo()+item.getClassLetter();
				stdListEOT = item.getStdList();
				
				entitymanagerq.getTransaction().commit();
				entitymanagerq.close();
				emfactoryq.close();
				
				//result
				int stdCount = 0;
				LinkedHashSet<String> stdCountList = new LinkedHashSet<>();
				for(String stdNoEOT : stdListEOT) {
					
					if(stdClassEOT.contains("JSS")) {
						
						String nameEOT, sexEOT, positionEOT;
						int noInClassEOT, ageEOT;
						
						//Jss Results
						String stdNo = stdNoEOT;
						String term = termEOT;
						String year = yearEOT;
						
						LinkedList<String> DataSet = new LinkedList<>();
						Vector<JssScoreSheets> SID_elements = new Vector<>();
												
						String stdClassVal = stdClassEOT;
						
						try{
							EntityManagerFactory emfactory = Persistence.createEntityManagerFactory
									("SchoolMgtSystem");
							EntityManager entitymanager = emfactory.createEntityManager();
							entitymanager.getTransaction().begin();
							
							Students std = entitymanager.find(Students.class, stdNo);
							
							nameEOT = std.getSurName()+", "+std.getOtherNames();
							sexEOT = std.getSex();
							
							int noDaysInTermEOT = getAcademicTermNoSchoolDays(entitymanager, term, year) - 
									getAcademicHolidayTotal(entitymanager, year, term);
							int noDaysPresentEOT = getSchoolAttendancePresents(entitymanager, stdNo, year, term);
							int noDaysAbsentEOT = getSchoolAttendanceAbsents(entitymanager, stdNo, year, term);
							
							LocalDate dateAgeStr2 = std.getDateOfBirth();
							LocalDate currentDateStr = LocalDate.now();
							int diffDateStr = currentDateStr.getYear() - dateAgeStr2.getYear();
							ageEOT = diffDateStr;
							
							DecimalFormat fm = new DecimalFormat("#.00");
							
							if(stdClassId.contains("JSS")) {
								
								Vector<JssScoreSheets> Data2 = new Vector<>();
								Vector<ScoreSheetsSummary> DataPosition = new Vector<>();
								Vector<ScoreSheetsSummary> myClassSize = new Vector<>();
								
								// try this for classAvg, classHighest and classLowest
								Vector<JssScoreSheets> DataX = new Vector<>();
								
								String stdClass2 = getPrimeClass(stdClassVal);
								
								try {
									DataX = (Vector<JssScoreSheets>) getJssScoreSheetsByClassYearTerm(entitymanager, stdClass2, 
											year, term);
								}
								catch(Exception jssE) {
									jssE.printStackTrace();
								}
								
								LinkedHashSet<String> elements2 = new LinkedHashSet<>();
								
								try {
									
									SID_elements = getJssScoreSheetsByStdNoClassYearTerm(entitymanager, stdNo, stdClass2, 
											year, term);
								}
								catch(Exception jssEx) {
									jssEx.printStackTrace();
								}
								
								for(JssScoreSheets sheet : SID_elements) {
									//System.out.println("SID_SID: "+ sheet.getSId());
									elements2.add(sheet.getSId());
								}
								
								//query for class position
								
								try {
									DataPosition = getScoreSheetSummaryYearTerm(entitymanager, year, term);
								}
								catch(Exception jssE2) {
									jssE2.printStackTrace();
								}
											
								for(String e : elements2) {
									if(!(String.valueOf(e).equals(null)) && 
											String.valueOf(e).charAt(String.valueOf(e).length()-1) == '1' && 
											e.contains(stdClass2+term) && 
											e.contains(year)){
												
										LinkedList<String> DataSet2 = new LinkedList<>();
										try {
											EntityManagerFactory emf = Persistence.createEntityManagerFactory
													("SchoolMgtSystem");
											EntityManager entitymgr = emf.createEntityManager();
											entitymgr.getTransaction().begin();
											
											JssScoreSheets scores = entitymgr.find(JssScoreSheets.class, e);
																	
											if(scores.getScoresYear().equals(year)) {											
												
												Vector<JssScoreSheets> testData = DataX;
												int countx = 0;
												int county = 0;
												double sumx = 0;
												double sumPlus = 0;
											
												LinkedList<Double> tempList = new LinkedList<>();
											
												for(JssScoreSheets test : testData) {
													
													if(test.getSubjectName().equals(scores.getSubjectName())&&
															test.getStdClass().equals(scores.getStdClass()) && 
															test.getTerm().equals(scores.getTerm()) &&
															test.getScoresYear().equals(scores.getScoresYear())) {
														sumx = sumx + test.getTotal();
														tempList.add(test.getTotal());
														countx = countx + 1;
													}
													
													if(test.getStdId().equals(stdNo) &&
															test.getStdClass().equals(scores.getStdClass()) && 
															test.getTerm().equals(scores.getTerm()) &&
															test.getScoresYear().equals(scores.getScoresYear())) {
														sumPlus = sumPlus + test.getTotal();
														county = county + 1;
													}
												}
												
												tempList.sort(null);
												double classHighest = (double) tempList.toArray()[tempList.size()-1];
												double classLowest = (double)tempList.toArray()[0];
												double averageX = Double.parseDouble(fm.format(sumx/countx));
												String avgX = fm.format(averageX);
												String classHighestX = fm.format(classHighest);
												String classLowestX = fm.format(classLowest);
												
												Data2 = DataX; 
												int position = 1;
												int classPos = 1;
												double myTotal = 0;
												double myTotal2 = 0;
											
												for (JssScoreSheets s : Data2) {						
													if(s.getSubjectName().equals(scores.getSubjectName())&&
															s.getStdClass().equals(scores.getStdClass()) &&
															s.getTerm().equals(scores.getTerm()) &&
															s.getScoresYear().equals(scores.getScoresYear())) {
														int subjCode = s.getSubjectCode();
														
														//Try JDBC Begings per subject
														
														String stdClassX2 = stdClass2;
														
														final String JDBC_Driver2 = "com.mysql.jdbc.Driver";
														final String DB_URL2 = dbURL;
														final String DB_User2 = dbUSR;
														final String DB_PWD2 = dbPWD;
														
														
														Connection conn2 = null;
														PreparedStatement stmt2 = null;
														
														try {
															Class.forName(JDBC_Driver2);
															conn2 = DriverManager.getConnection(DB_URL2, DB_User2, DB_PWD2);
															
															String sql;
															sql = "SELECT *, 1+(SELECT count(*) from JssScoreSheets a "
																	+ "WHERE a.STDCLASS = ? and "
																	+ "a.TERM = ? and "
																	+ "a.SCORESYEAR = ? and "
																	+ "a.SUBJECTCODE = ? and "
																	+ "a.TOTAL > b.TOTAL) as POSITION, TOTAL FROM JssScoreSheets b "
																	+ "where "
																	+ "b.STDCLASS = ? and "
																	+ "b.TERM = ? and "
																	+ "b.SCORESYEAR = ? and "
																	+ "b.SUBJECTCODE = ? "
																	+ "order by TOTAL desc";
															
															stmt2 = conn2.prepareStatement(sql);
																									
															stmt2.setString(1, stdClassX2);
															stmt2.setString(2, term);
															stmt2.setString(3, year);
															stmt2.setInt(4, subjCode);
														
															stmt2.setString(5, stdClassX2);
															stmt2.setString(6, term);
															stmt2.setString(7, year);
															stmt2.setInt(8, subjCode);
															
															ResultSet rs2 = stmt2.executeQuery();
															
															
															while(rs2.next()) {
																DataSet2.add(rs2.getString("POSITION"));
															}
															rs2.close();
															stmt2.close();
															conn2.close();
														}
														catch(SQLException es) {
															//idNoJSS_LBL.setText("Error JDBC: "+ es.getSQLState());
															es.printStackTrace();
														}
														catch(Exception es2) {
															//idNoJSS_LBL.setText("Error JDBC: "+ es2.getMessage());
															es2.printStackTrace();
														}
														finally {
															try {
																if(stmt2 != null ) {
																	stmt2.close();
																}
															}
															catch(SQLException ces) {
																//idNoJSS_LBL.setText("Error JDBC: "+ ces.getSQLState());
																ces.printStackTrace();
															}
															try {
																if(conn2 != null ) {
																	conn2.close();
																}
															}
															catch(Exception ces2) {
																//idNoJSS_LBL.setText("JDBC: "+ces2.getMessage());
																ces2.printStackTrace();
															}
															
														}
														
														//Try JDBC Ends per subject
														
														if(s.getStdId().equals(stdNo) ) {
															
															String remarks;
															
															// Insert here
																
															if(term.equals(scores.getTerm())
																	&& year.equals(scores.getScoresYear())) {
																String subPos;
																int subPos2 = Integer.parseInt(DataSet2.get(position-1));
																if(subPos2 == 1 || subPos2 == 21 || subPos2 == 31 || subPos2 == 41 || subPos2 == 51 
																		|| subPos2 == 61 || subPos2 == 71 || subPos2 == 81 || subPos2 == 91 
																		|| subPos2 == 101 || subPos2 == 121 || subPos2 == 131 || subPos2 == 141 
																		|| subPos2 == 151 || subPos2 == 161 || subPos2 == 171 || subPos2 == 181) {
																	subPos = String.valueOf(subPos2)+"st";
																}
																else if(subPos2 == 2|| subPos2 == 22 || subPos2 == 32 || subPos2 == 42 || subPos2 == 52 
																		|| subPos2 == 62 || subPos2 == 72 || subPos2 == 82 || subPos2 == 92 
																		|| subPos2 == 102 || subPos2 == 122 || subPos2 == 132 || subPos2 == 142 
																		|| subPos2 == 152 || subPos2 == 162 || subPos2 == 172 || subPos2 == 182) {
																	subPos = String.valueOf(subPos2)+"nd";
																}
																else if(subPos2 == 3|| subPos2 == 23 || subPos2 == 33 || subPos2 == 43 || subPos2 == 53 
																		|| subPos2 == 63 || subPos2 == 73 || subPos2 == 83 || subPos2 == 93 
																		|| subPos2 == 103 || subPos2 == 123 || subPos2 == 133 || subPos2 == 143 
																		|| subPos2 == 153 || subPos2 == 163 || subPos2 == 173 || subPos2 == 183) {
																	subPos = String.valueOf(subPos2)+"rd";
																}
																else {
																	subPos = String.valueOf(subPos2)+"th";
																}
																try {
																	
																	CreateJSSSubjectsResults result = new CreateJSSSubjectsResults();
																	String rId = stdNo + year + term + scores.getSubjectCode();
																	
																	if(scores.getGrade().equals("A")) {
																		remarks = "Excellent";
																		if(s.getTotal() == myTotal) {
																			
																			try {
																				result.createJSSSubjectsResults(rId, stdNo, nameEOT, 
																						scores.getSubjectName(), scores.getStdClass(), 
																						scores.getTerm(), scores.getScoresYear(), 
																						subPos, scores.getGrade(), 
																						remarks, scores.getSubjectCode(), 
																						scores.getCA1(), scores.getCA2(), 
																						scores.getCA3(), scores.getCA4(), 
																						scores.getCA5(), scores.getCA6(), 
																						scores.getExamScore(), scores.getTotal(), 
																						averageX, 
																						classHighest, classLowest, 
																						LocalDate.now(), dispName);
																			}
																			catch(Exception eot) {
																				eot.printStackTrace();
																			}
																			
																			try {
																				result.updateJSSSubjectsResults(rId, stdNo, nameEOT, 
																						scores.getSubjectName(), scores.getStdClass(), 
																						scores.getTerm(), scores.getScoresYear(), 
																						subPos, scores.getGrade(), 
																						remarks, scores.getSubjectCode(), 
																						scores.getCA1(), scores.getCA2(), 
																						scores.getCA3(), scores.getCA4(), 
																						scores.getCA5(), scores.getCA6(), 
																						scores.getExamScore(), scores.getTotal(), 
																						averageX, 
																						classHighest, classLowest, 
																						LocalDate.now(), dispName);
																			}
																			catch(Exception eot) {
																				eot.printStackTrace();
																			}
																			
																		}
																		else {
							
																			try {
																				result.createJSSSubjectsResults(rId, stdNo, nameEOT, 
																						scores.getSubjectName(), scores.getStdClass(), 
																						scores.getTerm(), scores.getScoresYear(), 
																						subPos, scores.getGrade(), 
																						remarks, scores.getSubjectCode(), 
																						scores.getCA1(), scores.getCA2(), 
																						scores.getCA3(), scores.getCA4(), 
																						scores.getCA5(), scores.getCA6(), 
																						scores.getExamScore(), scores.getTotal(), 
																						averageX, 
																						classHighest, classLowest, 
																						LocalDate.now(), dispName);
																			}
																			catch(Exception eot) {
																				eot.printStackTrace();
																			}
																			
																			try {
																				result.updateJSSSubjectsResults(rId, stdNo, nameEOT, 
																						scores.getSubjectName(), scores.getStdClass(), 
																						scores.getTerm(), scores.getScoresYear(), 
																						subPos, scores.getGrade(), 
																						remarks, scores.getSubjectCode(), 
																						scores.getCA1(), scores.getCA2(), 
																						scores.getCA3(), scores.getCA4(), 
																						scores.getCA5(), scores.getCA6(), 
																						scores.getExamScore(), scores.getTotal(), 
																						averageX, 
																						classHighest, classLowest, 
																						LocalDate.now(), dispName);
																			}
																			catch(Exception eot) {
																				eot.printStackTrace();
																			}
																		}
																	}
																	else if(scores.getGrade().equals("B")) {
																		remarks = "Very Good";
																		if(s.getTotal() == myTotal) {
																	
																			try {
																				result.createJSSSubjectsResults(rId, stdNo, nameEOT, 
																						scores.getSubjectName(), scores.getStdClass(), 
																						scores.getTerm(), scores.getScoresYear(), 
																						subPos, scores.getGrade(), 
																						remarks, scores.getSubjectCode(), 
																						scores.getCA1(), scores.getCA2(), 
																						scores.getCA3(), scores.getCA4(), 
																						scores.getCA5(), scores.getCA6(), 
																						scores.getExamScore(), scores.getTotal(), 
																						averageX, 
																						classHighest, classLowest, 
																						LocalDate.now(), dispName);
																			}
																			catch(Exception eot) {
																				eot.printStackTrace();
																			}
																			
																			try {
																				result.updateJSSSubjectsResults(rId, stdNo, nameEOT, 
																						scores.getSubjectName(), scores.getStdClass(), 
																						scores.getTerm(), scores.getScoresYear(), 
																						subPos, scores.getGrade(), 
																						remarks, scores.getSubjectCode(), 
																						scores.getCA1(), scores.getCA2(), 
																						scores.getCA3(), scores.getCA4(), 
																						scores.getCA5(), scores.getCA6(), 
																						scores.getExamScore(), scores.getTotal(), 
																						averageX, 
																						classHighest, classLowest, 
																						LocalDate.now(), dispName);
																			}
																			catch(Exception eot) {
																				eot.printStackTrace();
																			}
																		}
																		else {
							
																			try {
																				result.createJSSSubjectsResults(rId, stdNo, nameEOT, 
																						scores.getSubjectName(), scores.getStdClass(), 
																						scores.getTerm(), scores.getScoresYear(), 
																						subPos, scores.getGrade(), 
																						remarks, scores.getSubjectCode(), 
																						scores.getCA1(), scores.getCA2(), 
																						scores.getCA3(), scores.getCA4(), 
																						scores.getCA5(), scores.getCA6(), 
																						scores.getExamScore(), scores.getTotal(), 
																						averageX, 
																						classHighest, classLowest, 
																						LocalDate.now(), dispName);
																			}
																			catch(Exception eot) {
																				eot.printStackTrace();
																			}
																			
																			try {
																				result.updateJSSSubjectsResults(rId, stdNo, nameEOT, 
																						scores.getSubjectName(), scores.getStdClass(), 
																						scores.getTerm(), scores.getScoresYear(), 
																						subPos, scores.getGrade(), 
																						remarks, scores.getSubjectCode(), 
																						scores.getCA1(), scores.getCA2(), 
																						scores.getCA3(), scores.getCA4(), 
																						scores.getCA5(), scores.getCA6(), 
																						scores.getExamScore(), scores.getTotal(), 
																						averageX, 
																						classHighest, classLowest, 
																						LocalDate.now(), dispName);
																			}
																			catch(Exception eot) {
																				eot.printStackTrace();
																			}
																		}
																	}
																	else if(scores.getGrade().equals("C")) {
																		remarks = "Good";
																		
																		if(s.getTotal() == myTotal) {
																		
																			try {
																				result.createJSSSubjectsResults(rId, stdNo, nameEOT, 
																						scores.getSubjectName(), scores.getStdClass(), 
																						scores.getTerm(), scores.getScoresYear(), 
																						subPos, scores.getGrade(), 
																						remarks, scores.getSubjectCode(), 
																						scores.getCA1(), scores.getCA2(), 
																						scores.getCA3(), scores.getCA4(), 
																						scores.getCA5(), scores.getCA6(), 
																						scores.getExamScore(), scores.getTotal(), 
																						averageX, 
																						classHighest, classLowest, 
																						LocalDate.now(), dispName);
																			}
																			catch(Exception eot) {
																				eot.printStackTrace();
																			}
																			
																			try {
																				result.updateJSSSubjectsResults(rId, stdNo, nameEOT, 
																						scores.getSubjectName(), scores.getStdClass(), 
																						scores.getTerm(), scores.getScoresYear(), 
																						subPos, scores.getGrade(), 
																						remarks, scores.getSubjectCode(), 
																						scores.getCA1(), scores.getCA2(), 
																						scores.getCA3(), scores.getCA4(), 
																						scores.getCA5(), scores.getCA6(), 
																						scores.getExamScore(), scores.getTotal(), 
																						averageX, 
																						classHighest, classLowest, 
																						LocalDate.now(), dispName);
																			}
																			catch(Exception eot) {
																				eot.printStackTrace();
																			}
																		}
																		else {
							
																			try {
																				result.createJSSSubjectsResults(rId, stdNo, nameEOT, 
																						scores.getSubjectName(), scores.getStdClass(), 
																						scores.getTerm(), scores.getScoresYear(), 
																						subPos, scores.getGrade(), 
																						remarks, scores.getSubjectCode(), 
																						scores.getCA1(), scores.getCA2(), 
																						scores.getCA3(), scores.getCA4(), 
																						scores.getCA5(), scores.getCA6(), 
																						scores.getExamScore(), scores.getTotal(), 
																						averageX, 
																						classHighest, classLowest, 
																						LocalDate.now(), dispName);
																			}
																			catch(Exception eot) {
																				eot.printStackTrace();
																			}
																			
																			try {
																				result.updateJSSSubjectsResults(rId, stdNo, nameEOT, 
																						scores.getSubjectName(), scores.getStdClass(), 
																						scores.getTerm(), scores.getScoresYear(), 
																						subPos, scores.getGrade(), 
																						remarks, scores.getSubjectCode(), 
																						scores.getCA1(), scores.getCA2(), 
																						scores.getCA3(), scores.getCA4(), 
																						scores.getCA5(), scores.getCA6(), 
																						scores.getExamScore(), scores.getTotal(), 
																						averageX, 
																						classHighest, classLowest, 
																						LocalDate.now(), dispName);
																			}
																			catch(Exception eot) {
																				eot.printStackTrace();
																			}
																		}
																	}
																else if(scores.getGrade().equals("D")) {
																	remarks = "Fair";
																	if(s.getTotal() == myTotal) {
																	
																		try {
																			result.createJSSSubjectsResults(rId, stdNo, nameEOT, 
																					scores.getSubjectName(), scores.getStdClass(), 
																					scores.getTerm(), scores.getScoresYear(), 
																					subPos, scores.getGrade(), 
																					remarks, scores.getSubjectCode(), 
																					scores.getCA1(), scores.getCA2(), 
																					scores.getCA3(), scores.getCA4(), 
																					scores.getCA5(), scores.getCA6(), 
																					scores.getExamScore(), scores.getTotal(), 
																					averageX, 
																					classHighest, classLowest, 
																					LocalDate.now(), dispName);
																		}
																		catch(Exception eot) {
																			eot.printStackTrace();
																		}
																		
																		try {
																			result.updateJSSSubjectsResults(rId, stdNo, nameEOT, 
																					scores.getSubjectName(), scores.getStdClass(), 
																					scores.getTerm(), scores.getScoresYear(), 
																					subPos, scores.getGrade(), 
																					remarks, scores.getSubjectCode(), 
																					scores.getCA1(), scores.getCA2(), 
																					scores.getCA3(), scores.getCA4(), 
																					scores.getCA5(), scores.getCA6(), 
																					scores.getExamScore(), scores.getTotal(), 
																					averageX, 
																					classHighest, classLowest, 
																					LocalDate.now(), dispName);
																		}
																		catch(Exception eot) {
																			eot.printStackTrace();
																		}
																	}
																	else {
						
																		try {
																			result.createJSSSubjectsResults(rId, stdNo, nameEOT, 
																					scores.getSubjectName(), scores.getStdClass(), 
																					scores.getTerm(), scores.getScoresYear(), 
																					subPos, scores.getGrade(), 
																					remarks, scores.getSubjectCode(), 
																					scores.getCA1(), scores.getCA2(), 
																					scores.getCA3(), scores.getCA4(), 
																					scores.getCA5(), scores.getCA6(), 
																					scores.getExamScore(), scores.getTotal(), 
																					averageX, 
																					classHighest, classLowest, 
																					LocalDate.now(), dispName);
																		}
																		catch(Exception eot) {
																			eot.printStackTrace();
																		}
																		
																		try {
																			result.updateJSSSubjectsResults(rId, stdNo, nameEOT, 
																					scores.getSubjectName(), scores.getStdClass(), 
																					scores.getTerm(), scores.getScoresYear(), 
																					subPos, scores.getGrade(), 
																					remarks, scores.getSubjectCode(), 
																					scores.getCA1(), scores.getCA2(), 
																					scores.getCA3(), scores.getCA4(), 
																					scores.getCA5(), scores.getCA6(), 
																					scores.getExamScore(), scores.getTotal(), 
																					averageX, 
																					classHighest, classLowest, 
																					LocalDate.now(), dispName);
																		}
																		catch(Exception eot) {
																			eot.printStackTrace();
																		}
																	}
																}
																
																else {
																	remarks = "Fail";
																	if(s.getTotal() == myTotal) {
											
																		try {
																			result.createJSSSubjectsResults(rId, stdNo, nameEOT, 
																					scores.getSubjectName(), scores.getStdClass(), 
																					scores.getTerm(), scores.getScoresYear(), 
																					subPos, scores.getGrade(), 
																					remarks, scores.getSubjectCode(), 
																					scores.getCA1(), scores.getCA2(), 
																					scores.getCA3(), scores.getCA4(), 
																					scores.getCA5(), scores.getCA6(), 
																					scores.getExamScore(), scores.getTotal(), 
																					averageX, 
																					classHighest, classLowest, 
																					LocalDate.now(), dispName);
																		}
																		catch(Exception eot) {
																			eot.printStackTrace();
																		}
																		
																		try {
																			result.updateJSSSubjectsResults(rId, stdNo, nameEOT, 
																					scores.getSubjectName(), scores.getStdClass(), 
																					scores.getTerm(), scores.getScoresYear(), 
																					subPos, scores.getGrade(), 
																					remarks, scores.getSubjectCode(), 
																					scores.getCA1(), scores.getCA2(), 
																					scores.getCA3(), scores.getCA4(), 
																					scores.getCA5(), scores.getCA6(), 
																					scores.getExamScore(), scores.getTotal(), 
																					averageX, 
																					classHighest, classLowest, 
																					LocalDate.now(), dispName);
																		}
																		catch(Exception eot) {
																			eot.printStackTrace();
																		}
																	}
																	else {
						
																		try {
																			result.createJSSSubjectsResults(rId, stdNo, nameEOT, 
																					scores.getSubjectName(), scores.getStdClass(), 
																					scores.getTerm(), scores.getScoresYear(), 
																					subPos, scores.getGrade(), 
																					remarks, scores.getSubjectCode(), 
																					scores.getCA1(), scores.getCA2(), 
																					scores.getCA3(), scores.getCA4(), 
																					scores.getCA5(), scores.getCA6(), 
																					scores.getExamScore(), scores.getTotal(), 
																					averageX, 
																					classHighest, classLowest, 
																					LocalDate.now(), dispName);
																		}
																		catch(Exception eot) {
																			eot.printStackTrace();
																		}
																		
																		try {
																			result.updateJSSSubjectsResults(rId, stdNo, nameEOT, 
																					scores.getSubjectName(), scores.getStdClass(), 
																					scores.getTerm(), scores.getScoresYear(), 
																					subPos, scores.getGrade(), 
																					remarks, scores.getSubjectCode(), 
																					scores.getCA1(), scores.getCA2(), 
																					scores.getCA3(), scores.getCA4(), 
																					scores.getCA5(), scores.getCA6(), 
																					scores.getExamScore(), scores.getTotal(), 
																					averageX, 
																					classHighest, classLowest, 
																					LocalDate.now(), dispName);
																		}
																		catch(Exception eot) {
																			eot.printStackTrace();
																		}
																	}
																}
															}
														catch(Exception except) {
															except.printStackTrace();
														}
													}
												}
													
													//End insert here
													
												else {
													// do nothing STDID
												}

												position++;
												myTotal = s.getTotal();
												
											}
											else {
												// do nothing
											}
										}
										
										//Try JDBC Begings for class position 
										
										String stdClassX = stdClass2;
										
										final String JDBC_Driver = "com.mysql.jdbc.Driver";
										final String DB_URL = dbURL;
										final String DB_User = dbUSR;
										final String DB_PWD = dbPWD;
										
										
										Connection conn = null;
										//Statement stmt = null;
										PreparedStatement stmt = null;
										
										try {
											Class.forName(JDBC_Driver);
											conn = DriverManager.getConnection(DB_URL, DB_User, DB_PWD);
											//stmt = conn.createStatement();
											
											String sql;
											sql = "SELECT *, 1+(SELECT count(*) from scoresheetssummary a "
													+ "WHERE a.STUDENTCLASS = ? and "
													+ "a.STUDENTTERM = ? and "
													+ "a.ACADEMICYEAR = ? and "
													+ "a.TOTALSCORES > b.totalscores) as POSITION, "
													+ "TOTALSCORES "
													+ "FROM scoresheetssummary b "
													+ "where b.STUDENTCLASS = ? and "
													+ "b.STUDENTTERM = ? and "
													+ "b.ACADEMICYEAR = ? "
													+ "order by TOTALSCORES desc";
											
											stmt = conn.prepareStatement(sql);
											
											int term2 = Integer.parseInt(term);
											int year2 = Integer.parseInt(year);
											stmt = conn.prepareStatement(sql);
											stmt.setString(1, stdClassX);
											stmt.setInt(2, term2);
											stmt.setInt(3, year2);
											stmt.setString(4, stdClassX);
											stmt.setInt(5, term2);
											stmt.setInt(6, year2);
											
											ResultSet rs = stmt.executeQuery();
											
											while(rs.next()) {
												DataSet.add(rs.getString("POSITION"));
											}
											rs.close();
											stmt.close();
											conn.close();
										}
										catch(SQLException es) {
											//idNoJSS_LBL.setText("Error JDBC: "+ es.getSQLState());
											es.printStackTrace();
										}
										catch(Exception es2) {
											//idNoJSS_LBL.setText("Error JDBC: "+ es2.getMessage());
											es2.printStackTrace();
										}
										finally {
											try {
												if(stmt != null ) {
													stmt.close();
												}
											}
											catch(SQLException ces) {
												//idNoJSS_LBL.setText("Error JDBC: "+ ces.getSQLState());
												ces.printStackTrace();
											}
											try {
												if(conn != null ) {
													conn.close();
												}
											}
											catch(Exception ces2) {
												//idNoJSS_LBL.setText("JDBC: "+ces2.getMessage());
												ces2.printStackTrace();
											}
											
										}
										
										//Try JDBC Ends for class position
										
										int count = 0;
										int count2 = 0;
										int termCount = 0;
										int termNo = 0;
										LinkedHashSet<String> setTermUnique = new LinkedHashSet<>();
										
										for(ScoreSheetsSummary ex : DataPosition) {
											if(ex.getStudentTerm().equals(term) &&
													ex.getAcademicYear().equals(year) &&
													ex.getStudentClass().equals(scores.getStdClass())) {
												myClassSize.add(ex);
												count2 = count2 + 1;
											}
											setTermUnique.add(ex.getAcademicYear()+ex.getStudentTerm());
											count = count + 1;
										}
										
										for(String ter : setTermUnique) {
											if(!(Integer.parseInt(ter) == termNo)) {
												termCount = termCount + 1;
											}
											else {
												termCount = termCount + 0;
											}
											termNo = Integer.parseInt(ter);
										}
										
										int countxx = 0;
										
										for(ScoreSheetsSummary elem : DataPosition) {
											if(elem.getStudentClass().equals(scores.getStdClass()) &&
													elem.getStudentTerm().equals(scores.getTerm()) &&
													elem.getAcademicYear().equals(scores.getScoresYear())) {
												
												if(elem.getStudentName().equals(scores.getName())&&
												elem.getStudentId().equals(stdNo) &&
												elem.getStudentTerm().equals(term) &&
												elem.getAcademicYear().equals(year)){
													
													//try using jdbc begins
												
													String classPosz;
													int classPosz2 = Integer.parseInt(DataSet.get(classPos-1));
													if(classPosz2 == 1 || classPosz2 == 21 || classPosz2 == 31 || classPosz2 == 41 
															|| classPosz2 == 51 || classPosz2 == 61 || classPosz2 == 71 || classPosz2 == 81 
															|| classPosz2 == 91 || classPosz2 == 101 || classPosz2 == 121 
															|| classPosz2 == 131 || classPosz2 == 141 || classPosz2 == 151 
															|| classPosz2 == 161 || classPosz2 == 171 || classPosz2 == 181) {
														classPosz = String.valueOf(classPosz2)+"st";
													}
													else if(classPosz2 == 2|| classPosz2 == 22 || classPosz2 == 32 || classPosz2 == 42 
															|| classPosz2 == 52 || classPosz2 == 62 || classPosz2 == 72 || classPosz2 == 82 
															|| classPosz2 == 92 || classPosz2 == 102 || classPosz2 == 122 || classPosz2 == 132 
															|| classPosz2 == 142 || classPosz2 == 152 || classPosz2 == 162 || classPosz2 == 172 
															|| classPosz2 == 182) {
														classPosz = String.valueOf(classPosz2)+"nd";
													}
													else if(classPosz2 == 3|| classPosz2 == 23 || classPosz2 == 33 || classPosz2 == 43 
															|| classPosz2 == 53 || classPosz2 == 63 || classPosz2 == 73 || classPosz2 == 83 
															|| classPosz2 == 93 || classPosz2 == 103 || classPosz2 == 123 || classPosz2 == 133 
															|| classPosz2 == 143 || classPosz2 == 153 || classPosz2 == 163 || classPosz2 == 173 
															|| classPosz2 == 183) {
														classPosz = String.valueOf(classPosz2)+"rd";
													}
													else {
														classPosz = String.valueOf(classPosz2)+"th";
													}
													
													//overAllPositionJSS_LBL.setText(classPosz);
													
														//Create JSS Class Results
														String classRID = stdNo + year + term;
														CreateJSSClassResults claz = new CreateJSSClassResults();
														
														try {
															claz.createJSSClassResults(classRID, stdNo, nameEOT, sexEOT,
																	scores.getStdClass(), term, year, classPosz, count2, 
																	noDaysInTermEOT, noDaysPresentEOT, noDaysAbsentEOT, 
																	ageEOT, LocalDate.now(), dispName);
														}
														catch(Exception eot) {
															eot.printStackTrace();
														}
														
														try {
															claz.updateJSSClassResults(classRID, stdNo, nameEOT, sexEOT,
																	scores.getStdClass(), term, year, classPosz, count2, 
																	noDaysInTermEOT, noDaysPresentEOT, noDaysAbsentEOT, 
																	ageEOT, LocalDate.now(), dispName);
															
															stdCount = stdCount + 1;
															stdCountList.add(stdNo);
														}
														catch(Exception eot) {
															eot.printStackTrace();
														}
													
													}
													else {
														if(elem.getTotalScores() ==  myTotal2) {
															countxx = countxx + 1;
														}
														classPos = classPos + 1;
														myTotal2 = elem.getTotalScores();
													}
												}
												else {
													//
												}
											}
											
											double myClassAvg = 0;
											for(ScoreSheetsSummary avg : myClassSize) {
												if(avg.getAcademicYear().equals(year) &&
														avg.getStudentTerm().equals(term)&&
														avg.getStudentClass().equals(scores.getStdClass())) {
													myClassAvg = myClassAvg + avg.getTotalScores();
												}
												
											}
										
										}
									
										entitymgr.getTransaction().commit();
										entitymgr.close();
										emf.close();
										}
									
										catch(Exception er) {
											er.printStackTrace();
										}
									}
								}
									
							}
							else {
								Alert alert = new Alert(Alert.AlertType.ERROR);
								alert.setContentText("Please use the SSS Result template for Senior Students...");
								Optional<ButtonType> result = alert.showAndWait();
								if(result.get() == ButtonType.OK) {
									alert.close();
								}
								else {
									alert.close();
								}
							}
						
						}
						catch(Exception e77) {
							e77.printStackTrace();

						}
						
					}
					else if(stdClassEOT.contains("SSS")) {
						
						//SSS Results
						String nameEOT, sexEOT, positionEOT;
						int noInClassEOT, ageEOT;
						
						String stdNo = stdNoEOT;
						String term = termEOT;
						String year = yearEOT;
						
						LinkedList<String> DataSet = new LinkedList<>();
						Vector<ScoreSheets> SID_elements = new Vector<>();
						
						String stdClassVal = stdClassEOT;
						String yearXX, termXX;
						
						try{
							EntityManagerFactory emfactory = Persistence.createEntityManagerFactory
									("SchoolMgtSystem");
							EntityManager entitymanager = emfactory.createEntityManager();
							entitymanager.getTransaction().begin();
							
							Students std = entitymanager.find(Students.class, stdNo);
							
							int noDaysInTermEOT = getAcademicTermNoSchoolDays(entitymanager, term, year) - 
									getAcademicHolidayTotal(entitymanager, year, term);
							int noDaysPresentEOT = getSchoolAttendancePresents(entitymanager, stdNo, year, term);
							int noDaysAbsentEOT = getSchoolAttendanceAbsents(entitymanager, stdNo, year, term);
							
							nameEOT = std.getSurName()+", "+std.getOtherNames();
							sexEOT = std.getSex();
							
							LocalDate dateAgeStr2 = std.getDateOfBirth();
							LocalDate currentDateStr = LocalDate.now();
							int diffDateStr = currentDateStr.getYear() - dateAgeStr2.getYear();
							ageEOT = diffDateStr;
							
							if(stdClassId.contains("SSS")) {
								
								DecimalFormat fm = new DecimalFormat("#.00");
								
								LinkedHashSet<String> elements2 = new LinkedHashSet<>();
								
								Vector<ScoreSheets> Data2 = new Vector<>();
								Vector<ScoreSheetsSummary> DataPosition = new Vector<>();
								Vector<ScoreSheetsSummary> myClassSize = new Vector<>();
								
								// try this for classAvg, classHighest and classLowest
								Vector<ScoreSheets> DataX = new Vector<>();
								
								//query for class position
								DataPosition = getScoreSheetSummaryYearTerm(entitymanager, year, term);
								
								String stdClassValQ = getPrimeClass(stdClassVal);
								
								DataX = getScoreSheetsByClassYearTerm(entitymanager, stdClassValQ, year, term);
								
								try {
									
									SID_elements = getScoreSheetsByStdNoClassYearTerm(entitymanager, stdNo, stdClassValQ, 
											year, term);
								}
								catch(Exception sssEx) {
									sssEx.printStackTrace();
								}
								
								for(ScoreSheets sheet : SID_elements) {
									elements2.add(sheet.getSId());
								}
								
								for(String e : elements2) {
									if(!(e.equals(null)) && 
											e.charAt(String.valueOf(e).length()-1) == '2' &&
											e.contains(stdClassValQ+term) &&
											e.contains(year)) {
										LinkedList<String> DataSet2 = new LinkedList<>();
										try {
											EntityManagerFactory emf = Persistence.createEntityManagerFactory
													("SchoolMgtSystem");
											EntityManager entitymgr = emf.createEntityManager();
											entitymgr.getTransaction().begin();
											
											ScoreSheets scores = entitymgr.find(ScoreSheets.class, e);
											
											if(scores.getScoresYear().equals(year)) {
												
//												// try this for classAvg, classHighest and classLowest
												
												Vector<ScoreSheets> testData = DataX;
												int countx = 0;
												int county = 0;
												double sumx = 0;
												double sumPlus = 0;
												
												LinkedList<Double> tempList = new LinkedList<>();
												for(ScoreSheets test : testData) {
													if(test.getSubjectName().equals(scores.getSubjectName()) &&
															test.getStdClass().equals(scores.getStdClass()) && 
															test.getTerm().equals(scores.getTerm()) &&
															test.getScoresYear().equals(scores.getScoresYear())) {
														sumx = sumx + test.getTotal();
														tempList.add(test.getTotal());
														countx = countx + 1;
													}
													
													if(test.getStdId().equals(stdNo) &&
															test.getStdClass().equals(scores.getStdClass()) && 
															test.getTerm().equals(scores.getTerm()) &&
															test.getScoresYear().equals(scores.getScoresYear())) {
														sumPlus = sumPlus + test.getTotal();
														county = county + 1;
													}
												}
											
												tempList.sort(null);
												double classHighest = (double) tempList.toArray()[tempList.size()-1];
												double classLowest = (double)tempList.toArray()[0];
												double averageX = Double.parseDouble(fm.format(sumx/countx));
												String avgX = fm.format(averageX);
												String classHighestX = fm.format(classHighest);
												String classLowestX = fm.format(classLowest);
												
												Data2 = DataX; 
												int position = 0;
												int classPos = 1;
												double myTotal = 0;
												double myTotal2 = 0;
											
												for (ScoreSheets s : Data2) {						
													if(s.getSubjectName().equals(scores.getSubjectName())&&
															s.getStdClass().equals(scores.getStdClass()) &&
															s.getTerm().equals(scores.getTerm()) &&
															s.getScoresYear().equals(scores.getScoresYear())) {
														int subjCode = s.getSubjectCode();
														
														/*Try JDBC Begings per subject*/
														
														String stdClassX2 = stdClassValQ;
														
														final String JDBC_Driver2 = "com.mysql.jdbc.Driver";
														final String DB_URL2 = dbURL;
														final String DB_User2 = dbUSR;
														final String DB_PWD2 = dbPWD;
														
														
														Connection conn2 = null;
														PreparedStatement stmt2 = null;
														
														try {
															Class.forName(JDBC_Driver2);
															conn2 = DriverManager.getConnection(DB_URL2, DB_User2, DB_PWD2);
															
															String sql;
															sql = "SELECT *, 1+(SELECT count(*) from scoresheets a "
																	+ "WHERE a.STDCLASS = ? and "
																	+ "a.TERM = ? and "
																	+ "a.SCORESYEAR = ? and "
																	+ "a.SUBJECTCODE = ? and "
																	+ "a.TOTAL > b.TOTAL) as POSITION, TOTAL FROM scoresheets b "
																	+ "where "
																	+ "b.STDCLASS = ? and "
																	+ "b.TERM = ? and "
																	+ "b.SCORESYEAR = ? and "
																	+ "b.SUBJECTCODE = ? "
																	+ "order by TOTAL desc";
															
															stmt2 = conn2.prepareStatement(sql);
																													
															stmt2.setString(1, stdClassX2);
															stmt2.setString(2, term);
															stmt2.setString(3, year);
															stmt2.setInt(4, subjCode);
														
															stmt2.setString(5, stdClassX2);
															stmt2.setString(6, term);
															stmt2.setString(7, year);
															stmt2.setInt(8, subjCode);
															
															ResultSet rs2 = stmt2.executeQuery();
															
															
															while(rs2.next()) {
																DataSet2.add(rs2.getString("POSITION"));
															}
															rs2.close();
															stmt2.close();
															conn2.close();
														}
														catch(SQLException es) {
															es.printStackTrace();
														}
														catch(Exception es2) {
															es2.printStackTrace();
														}
														finally {
															try {
																if(stmt2 != null ) {
																	stmt2.close();
																}
															}
															catch(SQLException ces) {
																ces.printStackTrace();
															}
															try {
																if(conn2 != null ) {
																	conn2.close();
																}
															}
															catch(Exception ces2) {
																ces2.printStackTrace();
															}
															
														}
														
														/*Try JDBC Ends per subject*/
														
														if(s.getStdId().equals(stdNo) ) {
															
															String remarks;
															
															// Insert here
																
															if(term.equals(scores.getTerm())
																	&& year.equals(scores.getScoresYear())) {
																String subPos;
																int subPos2 = Integer.parseInt(DataSet2.get(position));
																if(subPos2 == 1 || subPos2 == 21 || subPos2 == 31 || subPos2 == 41 || subPos2 == 51 || subPos2 == 61) {
																	subPos = String.valueOf(subPos2)+"st";
																}
																else if(subPos2 == 2|| subPos2 == 22 || subPos2 == 32 || subPos2 == 42 || subPos2 == 52 || subPos2 == 62) {
																	subPos = String.valueOf(subPos2)+"nd";
																}
																else if(subPos2 == 3|| subPos2 == 23 || subPos2 == 33 || subPos2 == 43 || subPos2 == 53 || subPos2 == 63) {
																	subPos = String.valueOf(subPos2)+"rd";
																}
																else {
																	subPos = String.valueOf(subPos2)+"th";
																}
																try {
																	
																	CreateSSSSubjectsResults result = new CreateSSSSubjectsResults();
																	String rId = stdNo + year + term + scores.getSubjectCode();
																	
																	if(scores.getGrade().equals("A")) {
																		remarks = "Excellent";
																		if(s.getTotal() == myTotal) {
																			
																			try {
																				result.createSSSSubjectsResults(rId, stdNo, nameEOT, 
																						scores.getSubjectName(), scores.getStdClass(), 
																						scores.getTerm(), scores.getScoresYear(), 
																						subPos, scores.getGrade(), 
																						remarks, scores.getSubjectCode(), 
																						scores.getCA1(), scores.getCA2(), 
																						scores.getCA3(), 
																						scores.getExamScore(), scores.getTotal(), 
																						averageX, 
																						classHighest, classLowest, 
																						LocalDate.now(), dispName);
																			}
																			catch(Exception eot) {
																				eot.printStackTrace();
																			}
																			
																			try {
																				result.updateSSSSubjectsResults(rId, stdNo, nameEOT, 
																						scores.getSubjectName(), scores.getStdClass(), 
																						scores.getTerm(), scores.getScoresYear(), 
																						subPos, scores.getGrade(), 
																						remarks, scores.getSubjectCode(), 
																						scores.getCA1(), scores.getCA2(), 
																						scores.getCA3(), 
																						scores.getExamScore(), scores.getTotal(), 
																						averageX, 
																						classHighest, classLowest, 
																						LocalDate.now(), dispName);
																			}
																			catch(Exception eot) {
																				eot.printStackTrace();
																			}
																		}
																		else {
							
																			try {
																				result.createSSSSubjectsResults(rId, stdNo, nameEOT, 
																						scores.getSubjectName(), scores.getStdClass(), 
																						scores.getTerm(), scores.getScoresYear(), 
																						subPos, scores.getGrade(), 
																						remarks, scores.getSubjectCode(), 
																						scores.getCA1(), scores.getCA2(), 
																						scores.getCA3(), 
																						scores.getExamScore(), scores.getTotal(), 
																						averageX, 
																						classHighest, classLowest, 
																						LocalDate.now(), dispName);
																			}
																			catch(Exception eot) {
																				eot.printStackTrace();
																			}
																			
																			try {
																				result.updateSSSSubjectsResults(rId, stdNo, nameEOT, 
																						scores.getSubjectName(), scores.getStdClass(), 
																						scores.getTerm(), scores.getScoresYear(), 
																						subPos, scores.getGrade(), 
																						remarks, scores.getSubjectCode(), 
																						scores.getCA1(), scores.getCA2(), 
																						scores.getCA3(), 
																						scores.getExamScore(), scores.getTotal(), 
																						averageX, 
																						classHighest, classLowest, 
																						LocalDate.now(), dispName);
																			}
																			catch(Exception eot) {
																				eot.printStackTrace();
																			}
																		}
																	}
																	else if(scores.getGrade().equals("B")) {
																		remarks = "Very Good";
																		if(s.getTotal() == myTotal) {
																			try {
																				result.createSSSSubjectsResults(rId, stdNo, nameEOT, 
																						scores.getSubjectName(), scores.getStdClass(), 
																						scores.getTerm(), scores.getScoresYear(), 
																						subPos, scores.getGrade(), 
																						remarks, scores.getSubjectCode(), 
																						scores.getCA1(), scores.getCA2(), 
																						scores.getCA3(), 
																						scores.getExamScore(), scores.getTotal(), 
																						averageX, 
																						classHighest, classLowest, 
																						LocalDate.now(), dispName);
																			}
																			catch(Exception eot) {
																				eot.printStackTrace();
																			}
																			
																			try {
																				result.updateSSSSubjectsResults(rId, stdNo, nameEOT, 
																						scores.getSubjectName(), scores.getStdClass(), 
																						scores.getTerm(), scores.getScoresYear(), 
																						subPos, scores.getGrade(), 
																						remarks, scores.getSubjectCode(), 
																						scores.getCA1(), scores.getCA2(), 
																						scores.getCA3(), 
																						scores.getExamScore(), scores.getTotal(), 
																						averageX, 
																						classHighest, classLowest, 
																						LocalDate.now(), dispName);
																			}
																			catch(Exception eot) {
																				eot.printStackTrace();
																			}
																		}
																		else {
							
																			try {
																				result.createSSSSubjectsResults(rId, stdNo, nameEOT, 
																						scores.getSubjectName(), scores.getStdClass(), 
																						scores.getTerm(), scores.getScoresYear(), 
																						subPos, scores.getGrade(), 
																						remarks, scores.getSubjectCode(), 
																						scores.getCA1(), scores.getCA2(), 
																						scores.getCA3(), 
																						scores.getExamScore(), scores.getTotal(), 
																						averageX, 
																						classHighest, classLowest, 
																						LocalDate.now(), dispName);
																			}
																			catch(Exception eot) {
																				eot.printStackTrace();
																			}
																			
																			try {
																				result.updateSSSSubjectsResults(rId, stdNo, nameEOT, 
																						scores.getSubjectName(), scores.getStdClass(), 
																						scores.getTerm(), scores.getScoresYear(), 
																						subPos, scores.getGrade(), 
																						remarks, scores.getSubjectCode(), 
																						scores.getCA1(), scores.getCA2(), 
																						scores.getCA3(), 
																						scores.getExamScore(), scores.getTotal(), 
																						averageX, 
																						classHighest, classLowest, 
																						LocalDate.now(), dispName);
																			}
																			catch(Exception eot) {
																				eot.printStackTrace();
																			}
																		}
																	}
																	else if(scores.getGrade().equals("C")) {
																		remarks = "Good";
																		
																		if(s.getTotal() == myTotal) {
																		
																			try {
																				result.createSSSSubjectsResults(rId, stdNo, nameEOT, 
																						scores.getSubjectName(), scores.getStdClass(), 
																						scores.getTerm(), scores.getScoresYear(), 
																						subPos, scores.getGrade(), 
																						remarks, scores.getSubjectCode(), 
																						scores.getCA1(), scores.getCA2(), 
																						scores.getCA3(), 
																						scores.getExamScore(), scores.getTotal(), 
																						averageX, 
																						classHighest, classLowest, 
																						LocalDate.now(), dispName);
																			}
																			catch(Exception eot) {
																				eot.printStackTrace();
																			}
																			
																			try {
																				result.updateSSSSubjectsResults(rId, stdNo, nameEOT, 
																						scores.getSubjectName(), scores.getStdClass(), 
																						scores.getTerm(), scores.getScoresYear(), 
																						subPos, scores.getGrade(), 
																						remarks, scores.getSubjectCode(), 
																						scores.getCA1(), scores.getCA2(), 
																						scores.getCA3(), 
																						scores.getExamScore(), scores.getTotal(), 
																						averageX, 
																						classHighest, classLowest, 
																						LocalDate.now(), dispName);
																			}
																			catch(Exception eot) {
																				eot.printStackTrace();
																			}
																		}
																		else {
							
																			try {
																				result.createSSSSubjectsResults(rId, stdNo, nameEOT, 
																						scores.getSubjectName(), scores.getStdClass(), 
																						scores.getTerm(), scores.getScoresYear(), 
																						subPos, scores.getGrade(), 
																						remarks, scores.getSubjectCode(), 
																						scores.getCA1(), scores.getCA2(), 
																						scores.getCA3(), 
																						scores.getExamScore(), scores.getTotal(), 
																						averageX, 
																						classHighest, classLowest, 
																						LocalDate.now(), dispName);
																			}
																			catch(Exception eot) {
																				eot.printStackTrace();
																			}
																			
																			try {
																				result.updateSSSSubjectsResults(rId, stdNo, nameEOT, 
																						scores.getSubjectName(), scores.getStdClass(), 
																						scores.getTerm(), scores.getScoresYear(), 
																						subPos, scores.getGrade(), 
																						remarks, scores.getSubjectCode(), 
																						scores.getCA1(), scores.getCA2(), 
																						scores.getCA3(), 
																						scores.getExamScore(), scores.getTotal(), 
																						averageX, 
																						classHighest, classLowest, 
																						LocalDate.now(), dispName);
																			}
																			catch(Exception eot) {
																				eot.printStackTrace();
																			}
																		}
																	}
																	else if(scores.getGrade().equals("D")) {
																		remarks = "Fair";
																		if(s.getTotal() == myTotal) {
																		
																			try {
																				result.createSSSSubjectsResults(rId, stdNo, nameEOT, 
																						scores.getSubjectName(), scores.getStdClass(), 
																						scores.getTerm(), scores.getScoresYear(), 
																						subPos, scores.getGrade(), 
																						remarks, scores.getSubjectCode(), 
																						scores.getCA1(), scores.getCA2(), 
																						scores.getCA3(), 
																						scores.getExamScore(), scores.getTotal(), 
																						averageX, 
																						classHighest, classLowest, 
																						LocalDate.now(), dispName);
																			}
																			catch(Exception eot) {
																				eot.printStackTrace();
																			}
																			
																			try {
																				result.updateSSSSubjectsResults(rId, stdNo, nameEOT, 
																						scores.getSubjectName(), scores.getStdClass(), 
																						scores.getTerm(), scores.getScoresYear(), 
																						subPos, scores.getGrade(), 
																						remarks, scores.getSubjectCode(), 
																						scores.getCA1(), scores.getCA2(), 
																						scores.getCA3(), 
																						scores.getExamScore(), scores.getTotal(), 
																						averageX, 
																						classHighest, classLowest, 
																						LocalDate.now(), dispName);
																			}
																			catch(Exception eot) {
																				eot.printStackTrace();
																			}
																		}
																		else {
							
																			try {
																				result.createSSSSubjectsResults(rId, stdNo, nameEOT, 
																						scores.getSubjectName(), scores.getStdClass(), 
																						scores.getTerm(), scores.getScoresYear(), 
																						subPos, scores.getGrade(), 
																						remarks, scores.getSubjectCode(), 
																						scores.getCA1(), scores.getCA2(), 
																						scores.getCA3(), 
																						scores.getExamScore(), scores.getTotal(), 
																						averageX, 
																						classHighest, classLowest, 
																						LocalDate.now(), dispName);
																			}
																			catch(Exception eot) {
																				eot.printStackTrace();
																			}
																			
																			try {
																				result.updateSSSSubjectsResults(rId, stdNo, nameEOT, 
																						scores.getSubjectName(), scores.getStdClass(), 
																						scores.getTerm(), scores.getScoresYear(), 
																						subPos, scores.getGrade(), 
																						remarks, scores.getSubjectCode(), 
																						scores.getCA1(), scores.getCA2(), 
																						scores.getCA3(), 
																						scores.getExamScore(), scores.getTotal(), 
																						averageX, 
																						classHighest, classLowest, 
																						LocalDate.now(), dispName);
																			}
																			catch(Exception eot) {
																				eot.printStackTrace();
																			}
																		}
																	}
																	
																	else {
																		remarks = "Fail";
																		if(s.getTotal() == myTotal) {
												
																			try {
																				result.createSSSSubjectsResults(rId, stdNo, nameEOT, 
																						scores.getSubjectName(), scores.getStdClass(), 
																						scores.getTerm(), scores.getScoresYear(), 
																						subPos, scores.getGrade(), 
																						remarks, scores.getSubjectCode(), 
																						scores.getCA1(), scores.getCA2(), 
																						scores.getCA3(), 
																						scores.getExamScore(), scores.getTotal(), 
																						averageX, 
																						classHighest, classLowest, 
																						LocalDate.now(), dispName);
																			}
																			catch(Exception eot) {
																				eot.printStackTrace();
																			}
																			
																			try {
																				result.updateSSSSubjectsResults(rId, stdNo, nameEOT, 
																						scores.getSubjectName(), scores.getStdClass(), 
																						scores.getTerm(), scores.getScoresYear(), 
																						subPos, scores.getGrade(), 
																						remarks, scores.getSubjectCode(), 
																						scores.getCA1(), scores.getCA2(), 
																						scores.getCA3(), 
																						scores.getExamScore(), scores.getTotal(), 
																						averageX, 
																						classHighest, classLowest, 
																						LocalDate.now(), dispName);
																			}
																			catch(Exception eot) {
																				eot.printStackTrace();
																			}
																		}
																		else {
							
																			try {
																				result.createSSSSubjectsResults(rId, stdNo, nameEOT, 
																						scores.getSubjectName(), scores.getStdClass(), 
																						scores.getTerm(), scores.getScoresYear(), 
																						subPos, scores.getGrade(), 
																						remarks, scores.getSubjectCode(), 
																						scores.getCA1(), scores.getCA2(), 
																						scores.getCA3(), 
																						scores.getExamScore(), scores.getTotal(), 
																						averageX, 
																						classHighest, classLowest, 
																						LocalDate.now(), dispName);
																			}
																			catch(Exception eot) {
																				eot.printStackTrace();
																			}
																			
																			try {
																				result.updateSSSSubjectsResults(rId, stdNo, nameEOT, 
																						scores.getSubjectName(), scores.getStdClass(), 
																						scores.getTerm(), scores.getScoresYear(), 
																						subPos, scores.getGrade(), 
																						remarks, scores.getSubjectCode(), 
																						scores.getCA1(), scores.getCA2(), 
																						scores.getCA3(), 
																						scores.getExamScore(), scores.getTotal(), 
																						averageX, 
																						classHighest, classLowest, 
																						LocalDate.now(), dispName);
																			}
																			catch(Exception eot) {
																				eot.printStackTrace();
																			}
																		}
																	}
																}
															catch(Exception except) {
																except.printStackTrace();
															}
														}
													}
														
														//End insert here
														
													else {
														// do nothing STDID
													}

													position++;
													myTotal = s.getTotal();
													
												}
												else {
													// do nothing
												}
											}
											
											/*Try JDBC Begings for class position */
											
											String stdClassX = stdClassValQ;											
											
											final String JDBC_Driver = "com.mysql.jdbc.Driver";
											final String DB_URL = dbURL;
											final String DB_User = dbUSR;
											final String DB_PWD = dbPWD;
											
											
											Connection conn = null;
											PreparedStatement stmt = null;
											
											try {
												Class.forName(JDBC_Driver);
												conn = DriverManager.getConnection(DB_URL, DB_User, DB_PWD);
												
												String sql;
												sql = "SELECT *, 1+(SELECT count(*) from scoresheetssummary a "
														+ "WHERE a.STUDENTCLASS = ? and "
														+ "a.STUDENTTERM = ? and "
														+ "a.ACADEMICYEAR = ? and "
														+ "a.TOTALSCORES > b.totalscores) as POSITION, "
														+ "TOTALSCORES "
														+ "FROM scoresheetssummary b "
														+ "where b.STUDENTCLASS = ? and "
														+ "b.STUDENTTERM = ? and "
														+ "b.ACADEMICYEAR = ? "
														+ "order by TOTALSCORES desc";
												
												stmt = conn.prepareStatement(sql);
												
												stmt = conn.prepareStatement(sql);
												stmt.setString(1, stdClassX);
												stmt.setString(2, term);
												stmt.setString(3, year);
												stmt.setString(4, stdClassX);
												stmt.setString(5, term);
												stmt.setString(6, year);
												
												
												
												ResultSet rs = stmt.executeQuery();
												
												
												while(rs.next()) {
													DataSet.add(rs.getString("POSITION"));
												}
												rs.close();
												stmt.close();
												conn.close();
											}
											catch(SQLException es) {
												es.printStackTrace();
											}
											catch(Exception es2) {
												es2.printStackTrace();
											}
											finally {
												try {
													if(stmt != null ) {
														stmt.close();
													}
												}
												catch(SQLException ces) {
													ces.printStackTrace();
												}
												try {
													if(conn != null ) {
														conn.close();
													}
												}
												catch(Exception ces2) {
													ces2.printStackTrace();
												}
												
											}
											
											/*Try JDBC Ends for class position*/
																						
											int count = 0;
											int count2 = 0;
											int termCount = 0;
											String termNo = "0";
											LinkedHashSet<String> setTermUnique = new LinkedHashSet<>();
											
											for(ScoreSheetsSummary ex : DataPosition) {
												if(ex.getStudentTerm().equals(term) &&
														ex.getAcademicYear().equals(year) &&
														ex.getStudentClass().equals(scores.getStdClass())) {
													myClassSize.add(ex);
													count2 = count2 + 1;
												}
												setTermUnique.add(ex.getAcademicYear()+ex.getStudentTerm());
												count = count + 1;
											}
											
											for(String ter : setTermUnique) {
												if(!(ter.equals(termNo))) {
													termCount = termCount + 1;
												}
												else {
													termCount = termCount + 0;
												}
												termNo = ter;
											}
											
											int countxx = 0;
											
											for(ScoreSheetsSummary elem : DataPosition) {
												if(elem.getStudentClass().equals(scores.getStdClass()) &&
														elem.getStudentTerm().equals(scores.getTerm()) &&
														elem.getAcademicYear().equals(scores.getScoresYear())) {
													
													if(elem.getStudentName().equals(scores.getName())&&
													elem.getStudentId().equals(stdNo) &&
													elem.getStudentTerm().equals(term) &&
													elem.getAcademicYear().equals(year)){
														
														//try using jdbc begins
													
														String classPosz;
														int classPosz2 = Integer.parseInt(DataSet.get(classPos-1));
														if(classPosz2 == 1 || classPosz2 == 21 || classPosz2 == 31 || classPosz2 == 41 || classPosz2 == 51 || classPosz2 == 61) {
															classPosz = String.valueOf(classPosz2)+"st";
														}
														else if(classPosz2 == 2|| classPosz2 == 22 || classPosz2 == 32 || classPosz2 == 42 || classPosz2 == 52 || classPosz2 == 62) {
															classPosz = String.valueOf(classPosz2)+"nd";
														}
														else if(classPosz2 == 3|| classPosz2 == 23 || classPosz2 == 33 || classPosz2 == 43 || classPosz2 == 53 || classPosz2 == 63) {
															classPosz = String.valueOf(classPosz2)+"rd";
														}
														else {
															classPosz = String.valueOf(classPosz2)+"th";
														}
														
														//positionInClassTF.setText(classPosz);
														
														//try using jdbc ends
														
														//Create SSS Class Results
														String classRID = stdNo + year + term;
														CreateSSSClassResults claz = new CreateSSSClassResults();
														
														try {
															claz.createSSSClassResults(classRID, stdNo, nameEOT, sexEOT,
																	scores.getStdClass(), term, year, classPosz, count2, 
																	noDaysInTermEOT, noDaysPresentEOT, noDaysAbsentEOT, 
																	ageEOT, LocalDate.now(), dispName);
														}
														catch(Exception eot) {
															eot.printStackTrace();
														}
														
														try {
															claz.updateSSSClassResults(classRID, stdNo, nameEOT, sexEOT,
																	scores.getStdClass(), term, year, classPosz, count2, 
																	noDaysInTermEOT, noDaysPresentEOT, noDaysAbsentEOT, 
																	ageEOT, LocalDate.now(), dispName);
															
															stdCount = stdCount + 1;
															stdCountList.add(stdNo);
														}
														catch(Exception eot) {
															eot.printStackTrace();
														}
														
													}
													else {
														if(elem.getTotalScores() ==  myTotal2) {
															countxx = countxx + 1;
														}
														classPos = classPos + 1;
														myTotal2 = elem.getTotalScores();
													}
												}
												else {
													//
												}
											}
											
											double myClassAvg = 0;
											for(ScoreSheetsSummary avg : myClassSize) {
												if(avg.getAcademicYear().equals(year) &&
														avg.getStudentTerm().equals(term)&&
														avg.getStudentClass().equals(scores.getStdClass())) {
													myClassAvg = myClassAvg + avg.getTotalScores();
												}
												
											}
										
										}
									
										entitymgr.getTransaction().commit();
										entitymgr.close();
										emf.close();
										}
									
										catch(Exception er) {
											er.printStackTrace();
										}
									}
								}
									
							}
							else {
								Alert alert = new Alert(Alert.AlertType.ERROR);
								alert.setContentText("Please use the JSS Result template for Senior Students...");
								Optional<ButtonType> result = alert.showAndWait();
								if(result.get() == ButtonType.OK) {
									alert.close();
								}
								else {
									alert.close();
								}
							}
						
						}
						catch(Exception e77) {
							e77.printStackTrace();

						}
							
					}
					else {
						Alert alert = new Alert(Alert.AlertType.ERROR);
						alert.setContentText("Invalid Class Selection, kindly select the right class");
						alert.setHeaderText("Invalid Class");
						Optional<ButtonType> result = alert.showAndWait();
						if(result.get() == ButtonType.OK) {
							alert.close();
						}
						else {
							alert.close();
						}
					}
				}
				
				//output stdcount
				eotNoStds.setText(String.valueOf(stdCountList.size()));
				//eotNoStds.setFont(Color.WHITE);
				eotDisplay.setText(stdCount +" item(s) sucessfully processed");
				
				studentCount = stdCountList.size();
				
				//populate table here
				ObservableList<EOTResultsProcessingDataTable> data = FXCollections.observableArrayList();
				
				data.add(new EOTResultsProcessingDataTable(
						String.valueOf(1),
						stdClassEOT,
						yearEOT,
						termEOT,
						String.valueOf(studentCount)+ " students processed"
						));
				
				eotSNoCol.setCellValueFactory(new PropertyValueFactory("sNo_Data"));
				eotStdClassCol.setCellValueFactory(new PropertyValueFactory("stdClass_Data"));
				eotSessionCol.setCellValueFactory(new PropertyValueFactory("session_Data"));
				eotTermCol.setCellValueFactory(new PropertyValueFactory("term_Data"));
				eotStatusCol.setCellValueFactory(new PropertyValueFactory("status_Data"));
				
				eotResultsProcessingDataTable.setItems(data);
				
			}
		}
		catch(Exception e) {
			e.printStackTrace();
			Alert alert = new Alert(Alert.AlertType.ERROR);
			alert.setContentText("Error: "+ e.getLocalizedMessage());
			alert.setHeaderText("ERROR");
			Optional<ButtonType> result = alert.showAndWait();
			if(result.get() == ButtonType.OK) {
				alert.close();
			}
			else {
				alert.close();
			}
		}
	}
	
	//Add class to list
	@FXML public void eotAddClassButton(ActionEvent event) {
		
	}
	
	//class list result processing
	@FXML public void eotResultProcessingEOY(ActionEvent event) {
		
		String stdClassId = eotClassId.getValue();
		try {
			if(stdClassId.trim().length() != 0) {
				String yearEOT, termEOT, stdClassEOT;
				int studentCount = 0;
				LinkedHashSet<String> stdListEOT = new LinkedHashSet<>();
				
				EntityManagerFactory emfactoryq = Persistence.createEntityManagerFactory("SchoolMgtSystem");
				EntityManager entitymanagerq = emfactoryq.createEntityManager();
				entitymanagerq.getTransaction().begin();
				
				StudentClasses item = entitymanagerq.find(StudentClasses.class, stdClassId);
				
				yearEOT = item.getYear();
				termEOT = item.getTerm();
				stdClassEOT = item.getClassNo()+item.getClassLetter();
				stdListEOT = item.getStdList();
				
				entitymanagerq.getTransaction().commit();
				entitymanagerq.close();
				emfactoryq.close();
				
				//result
				int stdCount = 0;
				LinkedHashSet<String> stdCountList = new LinkedHashSet<>();
				
				for(String stdNoEOT : stdListEOT) {
					if(stdClassEOT.contains("JSS") || stdClassEOT.contains("SSS")) {
						String nameEOT, sexEOT, positionEOT;
						int noInClassEOT, ageEOT;
						
						//***********************************+_)(*&:"||":L<>?
						
						String stdNo = stdNoEOT;
						String year = yearEOT;
						
						LinkedList<String> DataSet = new LinkedList<>();
						
						DecimalFormat fm = new DecimalFormat("#.00");
						
						ObservableList<AnnualScoresDataTable> data = FXCollections.observableArrayList();
						
						Vector<AnnualScoresTotal> DataPosition = new Vector<>();
						
						String stdClassVal = stdClassEOT;
						
						try{
							EntityManagerFactory emfactory = Persistence.createEntityManagerFactory
									("SchoolMgtSystem");
							EntityManager entitymanager = emfactory.createEntityManager();
							entitymanager.getTransaction().begin();
							
							Students std = entitymanager.find(Students.class, stdNo);
							
							int noDaysInYearEOT =  getAcademicSessionSchoolDays(entitymanager, year);
							int noDaysPresentEOT = getSchoolAttendancePresentsYear(entitymanager, stdNo, year);
							int noDaysAbsentEOT = getSchoolAttendanceAbsentsYear(entitymanager, stdNo, year);
														
							nameEOT = std.getOtherNames()+" "+std.getSurName();
							sexEOT = std.getSex();
							
							LocalDate dateAgeStr2 = std.getDateOfBirth();
							LocalDate currentDateStr = LocalDate.now();
							int diffDateStr = currentDateStr.getYear() - dateAgeStr2.getYear();
							ageEOT = diffDateStr;
														
							LinkedHashSet<String> annualScoreSummary2 = new LinkedHashSet<>();
							LinkedHashSet<String> annualScoresSet2 = new LinkedHashSet<>();
							
							Vector<AnnualScoreSheetsSummary> AnnualScoreSheetsData = new Vector<>();
							Vector<AnnualScoresTotal> AnnualScoresTotalData = new Vector<>();
							
							//Annual
							Vector<AnnualScoreSheetsSummary> AnnualData = new Vector<>();
							
							String stdClass2 = getPrimeClass(stdClassVal);
							
							try {
								AnnualScoreSheetsData = getAnnualScoreSheetSummaryByStdClassYear(entitymanager, stdNo, 
										stdClass2, year);
										
								AnnualScoresTotalData = getAnnualScoresTotalByStdClassYear(entitymanager, stdNo, 
										stdClass2, year);
							}
							catch(Exception anualee) {
								anualee.printStackTrace();
							}
							
							for(AnnualScoreSheetsSummary sheet : AnnualScoreSheetsData) {
								annualScoreSummary2.add(sheet.getSumId());
							}
							
							for(AnnualScoresTotal sheet : AnnualScoresTotalData) {
								annualScoresSet2.add(sheet.getSumId());
							}
							
							AnnualData = getAnnualScoresSheetsSumByClassYear(entitymanager, stdClass2, year);
							
							for (String ass : annualScoreSummary2) {
								
								double firstTermScore = 0, secondTermScore = 0, thirdTermScore = 0, annualTotalScore = 0,
										annualClassAvgScore = 0, annualClassHighestScore = 0, annualClassLowestScore = 0;
								String annualGradeStr, annualRemarkStr, subjectStr = "";
									
								if(ass.contains(stdNo+year)) {
									
									try {
										EntityManagerFactory emfactory1 = Persistence.createEntityManagerFactory
												("SchoolMgtSystem");
										EntityManager entitymanager1 = emfactory1.createEntityManager();
										entitymanager1.getTransaction().begin();
										
										AnnualScoreSheetsSummary summary = entitymanager1.find(AnnualScoreSheetsSummary.class, ass);
										
										if(summary.getAcademicYear().equals(year) && 
												summary.getStudentId().equals(stdNo)) {
											
											subjectStr = summary.getSubjectName();
											firstTermScore = summary.getFirstTermTotal();
											secondTermScore = summary.getSecondTermTotal();
											thirdTermScore = summary.getThirdTermTotal();
											annualTotalScore = summary.getTotalScores();
										}
										
										entitymanager1.getTransaction().commit();
										entitymanager1.close();
										emfactory1.close();
									}
									catch(Exception ex) {
//										idNoAnnual_LBL.setText("Set Scores Error: "+ ex.getMessage());
										ex.printStackTrace();
									}
									
									annualClassAvgScore = Double.parseDouble(fm.format(annualTotalScore/3.0));
									String annualAvgStr = fm.format(annualClassAvgScore);
									String firstTerm = fm.format(firstTermScore);
									String secondTerm = fm.format(secondTermScore);
									String thirdTerm = fm.format(thirdTermScore);
									String annualTotalStr = fm.format(annualTotalScore);
									
									String stdClass = stdClass2;
									int subjCode = 0;
									
									//Let's get highest and lowest scores
									LinkedList<Double> tempList = new LinkedList<>();
									LinkedList<Double> tempList2 = new LinkedList<>();
									try {
										EntityManagerFactory emfactory2 = Persistence.createEntityManagerFactory
												("SchoolMgtSystem");
										EntityManager entitymanager2 = emfactory2.createEntityManager();
										entitymanager2.getTransaction().begin();
										
										AnnualScoreSheetsSummary scores = entitymanager2.find(AnnualScoreSheetsSummary.class, ass);
										
										if(scores.getAcademicYear().equals(year) &&
												scores.getStudentId().equalsIgnoreCase(stdNo) && 
												scores.getStudentClass().equals(stdClass2)) {
											
											
											String myClass = scores.getStudentClass();
											String myClassStr = "";
											myClassStr = myClass;
											
											subjCode = scores.getSubjectCode();
											
											
											for(AnnualScoreSheetsSummary annual : AnnualData) {
												
												if(annual.getAcademicYear().equals(scores.getAcademicYear()) && 
														scores.getAcademicYear().equals(year) &&
														annual.getAcademicYear().equals(year) &&
														annual.getStudentClass().equals(scores.getStudentClass()) && 
														annual.getSubjectCode() == scores.getSubjectCode() ) {
													if(scores.getAcademicYear().equals(year)) {
														tempList.add(annual.getTotalScores());
														tempList2.add(annual.getTotalScores());
													}
												}
												
											}
																						
											tempList.sort(null);
											annualClassHighestScore = tempList.getLast();
											annualClassLowestScore = tempList.getFirst();
										}
										
										entitymanager2.getTransaction().commit();
										entitymanager2.close();
										emfactory2.close();
									}
									catch(Exception ex) {
										ex.printStackTrace();
									}
									
									String annualHighest = fm.format(annualClassHighestScore/3.0);
									String annualLowest = fm.format(annualClassLowestScore/3.0);
									
//									if(Double.parseDouble(annualAvgStr) >= 70) {
//										annualGradeStr = "A";
//										annualRemarkStr = "Excellent";
//									}
//									else if(Double.parseDouble(annualAvgStr) >= 60 && Double.parseDouble(annualAvgStr) < 70) {
//										annualGradeStr = "B";
//										annualRemarkStr = "Very Good";
//									}
//									else if(Double.parseDouble(annualAvgStr) >= 50 && Double.parseDouble(annualAvgStr) < 60) {
//										annualGradeStr = "C";
//										annualRemarkStr = "Good";
//									}
//									else if(Double.parseDouble(annualAvgStr) >= 40 && Double.parseDouble(annualAvgStr) < 50) {
//										annualGradeStr = "D";
//										annualRemarkStr = "Fair";
//									}
//									else {
//										annualGradeStr = "E";
//										annualRemarkStr = "Fail";
//									}
									
									annualGradeStr = gradeSum(Double.parseDouble(annualAvgStr));
									if(annualGradeStr.equals("A")) {
										annualRemarkStr = "Excellent";
									}
									else if(annualGradeStr.equals("B")) {
										annualRemarkStr = "Very Good";
									}
									else if(annualGradeStr.equals("C")) {
										annualRemarkStr = "Good";
									}
									else if(annualGradeStr.equals("D")) {
										annualRemarkStr = "Fair";
									}
									else {
										annualRemarkStr = "Fail";
									}
									
									LinkedList<String> DataSet2 = new LinkedList<>();
									//query for subject position
									
									final String JDBC_Driver2 = "com.mysql.jdbc.Driver";
									final String DB_URL2 = dbURL;
									final String DB_User2 = dbUSR;
									final String DB_PWD2 = dbPWD;
									
									
									Connection conn2 = null;
									PreparedStatement stmt2 = null;
									
									try {
										Class.forName(JDBC_Driver2);
										conn2 = DriverManager.getConnection(DB_URL2, DB_User2, DB_PWD2);
										
										String sql;
										sql = "SELECT *, 1+(SELECT count(*) from annualscoresheetssummary a "
												+ "WHERE "
												+ "a.studentclass = ? and "
												+ "a.academicyear = ? and "
												+ "a.SUBJECTCODE = ? and "
												+ "a.TOTALSCORES > b.TOTALSCORES) as POSITION, TOTALSCORES "
												+ "FROM annualscoresheetssummary b "
												+ "where "
												+ "b.studentclass = ? and "
												+ "b.academicyear = ? and "
												+ "b.SUBJECTCODE = ? "
												+ "order by TOTALSCORES desc;";
										
										stmt2 = conn2.prepareStatement(sql);
										
										//int year22 = Integer.parseInt(year);
									
										stmt2.setString(1, stdClass);
										stmt2.setString(2, year);
										stmt2.setInt(3, subjCode);
									
										stmt2.setString(4, stdClass);
										stmt2.setString(5, year);
										stmt2.setInt(6, subjCode);
										
										ResultSet rs2 = stmt2.executeQuery();
										
										
										while(rs2.next()) {
											DataSet2.add(rs2.getString("POSITION"));
										}
										rs2.close();
										stmt2.close();
										conn2.close();
									}
									catch(SQLException es) {
										//idNoAnnual_LBL.setText("Error JDBC: "+ es.getSQLState());
										es.printStackTrace();
									}
									catch(Exception es2) {
										//idNoAnnual_LBL.setText("Error JDBC: "+ es2.getMessage());
										es2.printStackTrace();
									}
									finally {
										try {
											if(stmt2 != null ) {
												stmt2.close();
											}
										}
										catch(SQLException ces) {
											//idNoAnnual_LBL.setText("Error JDBC: "+ ces.getSQLState());
											ces.printStackTrace();
										}
										try {
											if(conn2 != null ) {
												conn2.close();
											}
										}
										catch(Exception ces2) {
											//idNoAnnual_LBL.setText("JDBC: "+ces2.getMessage());
											ces2.printStackTrace();
										}
										
									}
									

									//subject position
									int position = 0;
									try {
										EntityManagerFactory emfactory3 = Persistence.createEntityManagerFactory
												("SchoolMgtSystem");
										EntityManager entitymanager3 = emfactory3.createEntityManager();
										entitymanager3.getTransaction().begin();
										
										AnnualScoreSheetsSummary scores = entitymanager3.find(AnnualScoreSheetsSummary.class, ass);
										
										
										for(AnnualScoreSheetsSummary annual : AnnualData) {
											if(annual.getSubjectCode() == scores.getSubjectCode() && 
													annual.getStudentClass().equals(scores.getStudentClass()) && 
													annual.getAcademicYear().equals(scores.getAcademicYear())) {
												if(annual.getStudentId().equals(stdNo)) {
													if(year.equals(scores.getAcademicYear()) ) {
														String subPos;
														int subPos2 = Integer.parseInt(DataSet2.get(position));
														if(subPos2 == 1 || subPos2 == 21 || subPos2 == 31 || subPos2 == 41 || subPos2 == 51 || subPos2 == 61) {
															subPos = String.valueOf(subPos2)+"st";
														}
														else if(subPos2 == 2|| subPos2 == 22 || subPos2 == 32 || subPos2 == 42 || subPos2 == 52 || subPos2 == 62) {
															subPos = String.valueOf(subPos2)+"nd";
														}
														else if(subPos2 == 3|| subPos2 == 23 || subPos2 == 33 || subPos2 == 43 || subPos2 == 53 || subPos2 == 63) {
															subPos = String.valueOf(subPos2)+"rd";
														}
														else {
															subPos = String.valueOf(subPos2)+"th";
														}
														
														String aRId = stdNoEOT + year + subjCode;
														CreateAnnualSubjectsResults result = new CreateAnnualSubjectsResults();
														
														try {
															
															result.createAnnualSubjectsResults(aRId, stdNo, nameEOT, subjectStr, 
																	stdClass2, year, subPos, annualGradeStr, annualRemarkStr, subjCode, 
																	firstTermScore, secondTermScore, thirdTermScore, annualTotalScore, 
																	annualClassAvgScore, annualClassHighestScore, annualClassLowestScore,
																	currentDateStr, dispName);														
													
														}
														catch(Exception except) {
															except.printStackTrace();
														}
														try {
															
															result.updateAnnualSubjectsResults(aRId, stdNo, nameEOT, subjectStr, 
																	stdClass2, year, subPos, annualGradeStr, annualRemarkStr, subjCode, 
																	firstTermScore, secondTermScore, thirdTermScore, annualTotalScore, 
																	annualClassAvgScore, annualClassHighestScore, annualClassLowestScore,
																	currentDateStr, dispName);
															
															stdCount = stdCount + 1;
													
														}
														catch(Exception except) {
															except.printStackTrace();
														}
													}
													else {
														//
													}
												}
												else {
													//
												}
												position++;
											}
										}
										
										
										entitymanager3.getTransaction().commit();
										entitymanager3.close();
										emfactory3.close();
									}
									catch(Exception exc) {
										//idNoAnnual_LBL.setText("Subject Position and Data set Error: "+ exc.getMessage());
										exc.printStackTrace();
									}
								}
								
							} // ass ends
							
							//overall class position
							int classPos = 1;
							int year2 = Integer.parseInt(year);
							String stdClassXXX = stdClass2;
							String ass2 = stdNo+year;
							
							final String JDBC_Driver = "com.mysql.jdbc.Driver";
							final String DB_URL = dbURL;
							final String DB_User = dbUSR;
							final String DB_PWD = dbPWD;
							
							
							Connection conn = null;
							//Statement stmt = null;
							PreparedStatement stmt = null;
							
							try {
								Class.forName(JDBC_Driver);
								conn = DriverManager.getConnection(DB_URL, DB_User, DB_PWD);
								//stmt = conn.createStatement();
								
								String sql;
								sql = "SELECT *, 1+(SELECT count(*) from annualscorestotal a "
										+ "WHERE "
										+ "a.studentclass = ? and "
										+ "a.academicyear = ? and "
										+ "a.TOTALSCORES > b.TOTALSCORES) as POSITION, TOTALSCORES "
										+ "FROM annualScoresTotal b "
										+ "where "
										+ "b.studentclass = ? and "
										+ "b.academicyear = ? "
										+ "order by TOTALSCORES desc;";
								
								stmt = conn.prepareStatement(sql);
								
								stmt = conn.prepareStatement(sql);
								
								stmt.setString(1, stdClassXXX);
								stmt.setInt(2, year2);
								stmt.setString(3, stdClassXXX);
								stmt.setInt(4, year2);
								
								ResultSet rs = stmt.executeQuery();
								
								while(rs.next()) {
									DataSet.add(rs.getString("POSITION"));
								}
								rs.close();
								stmt.close();
								conn.close();
							}
							catch(SQLException es) {
								//idNoAnnual_LBL.setText("Error JDBC: "+ es.getSQLState());
								es.printStackTrace();
							}
							catch(Exception es2) {
								//idNoAnnual_LBL.setText("Error JDBC: "+ es2.getMessage());
								es2.printStackTrace();
							}
							finally {
								try {
									if(stmt != null ) {
										stmt.close();
									}
								}
								catch(SQLException ces) {
									//idNoAnnual_LBL.setText("Error JDBC: "+ ces.getSQLState());
									ces.printStackTrace();
								}
								try {
									if(conn != null ) {
										conn.close();
									}
								}
								catch(Exception ces2) {
									//idNoAnnual_LBL.setText("JDBC: "+ces2.getMessage());
									ces2.printStackTrace();
								}
							}
							
							DataPosition = getAnnualScoresTotalByClassYear(entitymanager, stdClass2, year);
							
							int classSize = DataPosition.size(); //DataSet2.size();
							int noStdInClass = classSize;
							//noInClassAnnual_LBL.setText(String.valueOf(classSize));
							
							for(String annualSet : annualScoresSet2) {
								EntityManagerFactory emfactoryx = Persistence.createEntityManagerFactory
										("SchoolMgtSystem");
								EntityManager entitymanagerx = emfactoryx.createEntityManager();
								entitymanagerx.getTransaction().begin();
								
								AnnualScoresTotal annualST = entitymanagerx.find(AnnualScoresTotal.class, annualSet);
								
								
								for(AnnualScoresTotal annual : DataPosition) {
									if(annual.getStudentClass().equals(annualST.getStudentClass()) &&
											annual.getAcademicYear().equals(annualST.getAcademicYear()) && 
											annual.getAcademicYear().equals(year)) {
										
										if(annual.getStudentName().equals(annualST.getStudentName()) &&
												annual.getStudentId().equals(stdNo) &&
												annual.getAcademicYear().equals(annualST.getAcademicYear()) && 
												annual.getAcademicYear().equals(year)){
											
											CreateAnnualClassResults res = new CreateAnnualClassResults();
											
											String aRId = stdNo + year;
										
											String classPosz;
											int classPosz2 = Integer.parseInt(DataSet.get(classPos-1));
											if(classPosz2 == 1 || classPosz2 == 21 || classPosz2 == 31 || classPosz2 == 41 || classPosz2 == 51 || classPosz2 == 61) {
												classPosz = String.valueOf(classPosz2)+"st";
											}
											else if(classPosz2 == 2|| classPosz2 == 22 || classPosz2 == 32 || classPosz2 == 42 || classPosz2 == 52 || classPosz2 == 62) {
												classPosz = String.valueOf(classPosz2)+"nd";
											}
											else if(classPosz2 == 3|| classPosz2 == 23 || classPosz2 == 33 || classPosz2 == 43 || classPosz2 == 53 || classPosz2 == 63) {
												classPosz = String.valueOf(classPosz2)+"rd";
											}
											else {
												classPosz = String.valueOf(classPosz2)+"th";
											}
											
											//overAllPositionAnnual_LBL.setText(classPosz);
											
											try {
												res.createAnnualClassResults(aRId, stdNo, nameEOT, sexEOT, stdClass2,
														year, classPosz, noStdInClass, noDaysInYearEOT, noDaysPresentEOT, 
														noDaysAbsentEOT, ageEOT, currentDateStr, dispName);
																								
											}
											catch(Exception classRes) {
												classRes.printStackTrace();
											}
											
											try {
												res.updateAnnualClassResults(aRId, stdNo, nameEOT, sexEOT, stdClass2,
														year, classPosz, noStdInClass, noDaysInYearEOT, noDaysPresentEOT, 
														noDaysAbsentEOT, ageEOT, currentDateStr, dispName);
												
												stdCountList.add(stdNo);
											}
											catch(Exception classRes) {
												classRes.printStackTrace();
											}
											
										}
										else {
												//
											}
											classPos = classPos + 1;
										}
									//}

									else {
										//
									}
									
								}
								
								entitymanagerx.getTransaction().commit();
								entitymanagerx.close();
								emfactoryx.close();
							}
							
							entitymanager.getTransaction().commit();
							entitymanager.close();
							emfactory.close();
						}		
								
						catch(Exception e) {
							e.printStackTrace();
							Alert alert = new Alert(Alert.AlertType.ERROR);
							alert.setContentText("Error: "+ e.getLocalizedMessage());
							alert.setHeaderText("ERROR");
							Optional<ButtonType> result = alert.showAndWait();
							if(result.get() == ButtonType.OK) {
								alert.close();
							}
							else {
								alert.close();
							}
						}
						
						//output stdcount
						eotNoStds.setText(String.valueOf(stdCountList.size()));
						//eotNoStds.setFont(Color.WHITE);
						eotDisplay.setText(stdCount +" item(s) sucessfully processed");
						
						studentCount = stdCountList.size();
						
						//populate table here
						ObservableList<EOTResultsProcessingDataTable> data2 = FXCollections.observableArrayList();
						
						data2.add(new EOTResultsProcessingDataTable(
								String.valueOf(1),
								stdClassEOT,
								yearEOT,
								termEOT,
								String.valueOf(studentCount)+ " students processed"
								));
						
						eotSNoCol.setCellValueFactory(new PropertyValueFactory("sNo_Data"));
						eotStdClassCol.setCellValueFactory(new PropertyValueFactory("stdClass_Data"));
						eotSessionCol.setCellValueFactory(new PropertyValueFactory("session_Data"));
						eotTermCol.setCellValueFactory(new PropertyValueFactory("term_Data"));
						eotStatusCol.setCellValueFactory(new PropertyValueFactory("status_Data"));
						
						eotResultsProcessingDataTable.setItems(data2);
						
						//******************************************
					}
					else {
						Alert alert = new Alert(Alert.AlertType.INFORMATION);
						alert.setContentText("You have selected an invalid class. Please retry another selection...");
						alert.setHeaderText("Invalid Class Selection");
						Optional<ButtonType> result = alert.showAndWait();
						if(result.get() == ButtonType.OK) {
							alert.close();
						}
						else {
							alert.close();
						}
					}
				}
			}
		}
		catch(Exception eotExcept) {
			eotExcept.printStackTrace();
			Alert alert = new Alert(Alert.AlertType.ERROR);
			alert.setContentText("Error: "+ eotExcept.getLocalizedMessage());
			alert.setHeaderText("ERROR");
			Optional<ButtonType> result = alert.showAndWait();
			if(result.get() == ButtonType.OK) {
				alert.close();
			}
			else {
				alert.close();
			}
		}			
	}
	
	
	//Get JssScoresheets by stdClass, year and term
	public Vector<JssScoreSheets> getJssScoreSheetsByClassYearTerm(EntityManager em, String stdClass, String scoresYear, 
			String term) {
		TypedQuery<JssScoreSheets> query = em.createQuery(
				"select e from JssScoreSheets e where "
				+ "e.stdClass = ?1 and "
				+ "e.scoresYear = ?2 and "
				+ "e.term = ?3 "
				+ "order by e.total desc", JssScoreSheets.class);
		query.setParameter(1, stdClass);
		query.setParameter(2, scoresYear);
		query.setParameter(3, term);
		
		return (Vector<JssScoreSheets>) query.getResultList();
	}
	
	//Get JssScoresheetsNew by stdClass, year and term
	public Vector<JssScoreSheetsNew> getJssScoreSheetsNewByClassYearTerm(EntityManager em, String stdClass, String scoresYear, 
			String term) {
		TypedQuery<JssScoreSheetsNew> query = em.createQuery(
				"select e from JssScoreSheetsNew e where "
				+ "e.stdClass = ?1 and "
				+ "e.scoresYear = ?2 and "
				+ "e.term = ?3 "
				+ "order by e.total desc", JssScoreSheetsNew.class);
		query.setParameter(1, stdClass);
		query.setParameter(2, scoresYear);
		query.setParameter(3, term);
		
		return (Vector<JssScoreSheetsNew>) query.getResultList();
	}
	
	public Vector<JssScoreSheets> getJssScoreSheetsByClassYearTerm(EntityManager em, String scoresYear, 
			String term) {
		TypedQuery<JssScoreSheets> query = em.createQuery(
				"select e from JssScoreSheets e where "
				+ "e.scoresYear = ?1 and "
				+ "e.term = ?2", JssScoreSheets.class);
		query.setParameter(1, scoresYear);
		query.setParameter(2, term);
		
		return (Vector<JssScoreSheets>) query.getResultList();
	}
	
	public Vector<JssScoreSheets> getJssScoreSheetsByClassYearTerm(EntityManager em) {
		TypedQuery<JssScoreSheets> query = em.createQuery(
				"select e from JssScoreSheets e", JssScoreSheets.class);
		
		return (Vector<JssScoreSheets>) query.getResultList();
	}
	
	//Get ScoreSheetsSummary by year and term
	public Vector<ScoreSheetsSummary> getScoreSheetSummaryYearTerm(EntityManager em, String academicYear, 
			String studentTerm) {
		TypedQuery<ScoreSheetsSummary> query = em.createQuery(
				"select e from ScoreSheetsSummary e where "
				+ "e.academicYear = ?1 and "
				+ "e.studentTerm = ?2 "
				+ "order by e.totalScores  DESC", ScoreSheetsSummary.class);
		query.setParameter(1, academicYear);
		query.setParameter(2, studentTerm);
		
		return (Vector<ScoreSheetsSummary>) query.getResultList();
	}
	
	//Get ScoreSheetsSummary by year and term and class
	public Vector<ScoreSheetsSummary> getScoreSheetSummaryYearTermClass(EntityManager em, String academicYear, 
			String studentTerm, String stdClass) {
		TypedQuery<ScoreSheetsSummary> query = em.createQuery(
				"select e from ScoreSheetsSummary e where "
				+ "e.academicYear = ?1 and "
				+ "e.studentTerm = ?2  and "
				+ "e.studentClass = ?3 "
				+ "order by e.totalScores  DESC", ScoreSheetsSummary.class);
		query.setParameter(1, academicYear);
		query.setParameter(2, studentTerm);
		query.setParameter(3, stdClass);
		
		return (Vector<ScoreSheetsSummary>) query.getResultList();
	}
		
	//Get Scoresheets by stdClass, year and term
	public Vector<ScoreSheets> getScoreSheetsByClassYearTerm(EntityManager em, String stdClass, String scoresYear, 
			String term) {
		TypedQuery<ScoreSheets> query = em.createQuery(
				"select e from ScoreSheets e where "
				+ "e.stdClass = ?1 and "
				+ "e.scoresYear = ?2 and "
				+ "e.term = ?3 "
				+ "order by e.total desc", ScoreSheets.class);
		query.setParameter(1, stdClass);
		query.setParameter(2, scoresYear);
		query.setParameter(3, term);
		
		return (Vector<ScoreSheets>) query.getResultList();
	}
	
	//Get Scoresheets by stdid, stdClass, year and term
	public Vector<JssScoreSheets> getJssScoreSheetsByStdNoClassYearTerm(EntityManager em, String stdId, String stdClass, 
			String scoresYear, String term) {
		TypedQuery<JssScoreSheets> query = em.createQuery(
				"select e from JssScoreSheets e where "
				+ "e.stdId = ?1 and "
				+ "e.stdClass = ?2 and "
				+ "e.scoresYear = ?3 and "
				+ "e.term = ?4 "
				+ "order by e.total desc", JssScoreSheets.class);
		query.setParameter(1, stdId);
		query.setParameter(2, stdClass);
		query.setParameter(3, scoresYear);
		query.setParameter(4, term);
		
		return (Vector<JssScoreSheets>) query.getResultList();
	}
	
	//Get JssScoresheetsNew by stdid, stdClass, year and term
	public Vector<JssScoreSheetsNew> getJssScoreSheetsNewByStdNoClassYearTerm(EntityManager em, String stdId, String stdClass, 
			String scoresYear, String term) {
		TypedQuery<JssScoreSheetsNew> query = em.createQuery(
				"select e from JssScoreSheetsNew e where "
				+ "e.stdId = ?1 and "
				+ "e.stdClass = ?2 and "
				+ "e.scoresYear = ?3 and "
				+ "e.term = ?4 "
				+ "order by e.total desc", JssScoreSheetsNew.class);
		query.setParameter(1, stdId);
		query.setParameter(2, stdClass);
		query.setParameter(3, scoresYear);
		query.setParameter(4, term);
		
		return (Vector<JssScoreSheetsNew>) query.getResultList();
	}
	
	public Vector<ScoreSheets> getScoreSheetsByStdNoClassYearTerm(EntityManager em, String stdId, String stdClass, 
			String scoresYear, String term) {
		TypedQuery<ScoreSheets> query = em.createQuery(
				"select e from ScoreSheets e where "
				+ "e.stdId = ?1 and "
				+ "e.stdClass = ?2 and "
				+ "e.scoresYear = ?3 and "
				+ "e.term = ?4 "
				+ "order by e.total desc", ScoreSheets.class);
		query.setParameter(1, stdId);
		query.setParameter(2, stdClass);
		query.setParameter(3, scoresYear);
		query.setParameter(4, term);
		
		return (Vector<ScoreSheets>) query.getResultList();
	}
	
	//Get Scoresheets by stdid, stdClass, year
	public Vector<JssScoreSheets> getJssScoreSheetsByStdNoClassYear(EntityManager em, String stdId, String stdClass, 
			String scoresYear) {
		TypedQuery<JssScoreSheets> query = em.createQuery(
				"select e from JssScoreSheets e where "
				+ "e.stdId = ?1 and "
				+ "e.stdClass = ?2 and "
				+ "e.scoresYear = ?3  "
				+ "order by e.total desc", JssScoreSheets.class);
		query.setParameter(1, stdId);
		query.setParameter(2, stdClass);
		query.setParameter(3, scoresYear);
		
		return (Vector<JssScoreSheets>) query.getResultList();
	}
	
	//Get JssScoresheetsNew by stdid, stdClass, year
	public Vector<JssScoreSheetsNew> getJssScoreSheetsNewByStdNoClassYear(EntityManager em, String stdId, String stdClass, 
			String scoresYear) {
		TypedQuery<JssScoreSheetsNew> query = em.createQuery(
				"select e from JssScoreSheetsNew e where "
				+ "e.stdId = ?1 and "
				+ "e.stdClass = ?2 and "
				+ "e.scoresYear = ?3  "
				+ "order by e.total desc", JssScoreSheetsNew.class);
		query.setParameter(1, stdId);
		query.setParameter(2, stdClass);
		query.setParameter(3, scoresYear);
		
		return (Vector<JssScoreSheetsNew>) query.getResultList();
	}
	
	public Vector<ScoreSheets> getScoreSheetsByStdNoClassYear(EntityManager em, String stdId, String stdClass, 
			String scoresYear) {
		TypedQuery<ScoreSheets> query = em.createQuery(
				"select e from ScoreSheets e where "
				+ "e.stdId = ?1 and "
				+ "e.stdClass = ?2 and "
				+ "e.scoresYear = ?3 "
				+ "order by e.total desc", ScoreSheets.class);
		query.setParameter(1, stdId);
		query.setParameter(2, stdClass);
		query.setParameter(3, scoresYear);
		
		return (Vector<ScoreSheets>) query.getResultList();
	}
	
	//getscore by sid
	public String getScoreSheetsBySID(EntityManager em, String sId) {
		TypedQuery<ScoreSheets> query = em.createQuery(
				"select e from ScoreSheets e where "
				+ "e.sId = ?1 ", ScoreSheets.class);
		query.setParameter(1, sId);
		
		return query.getSingleResult().getSId();
	}
	
	//get jssScore by sid
	public String getJssScoreSheetsBySID(EntityManager em, String sId) {
		TypedQuery<JssScoreSheets> query = em.createQuery(
				"select e from JssScoreSheets e where "
				+ "e.sId = ?1 ", JssScoreSheets.class);
		query.setParameter(1, sId);
		
		return query.getSingleResult().getSId();
	}
	
	//get scoresheets summary
	public Vector<ScoreSheetsSummary> getScoreSheetSummaryByStdNoClassYearTerm(EntityManager em, String studentId, 
			String studentClass, String academicYear, String studentTerm) {
		TypedQuery<ScoreSheetsSummary> query = em.createQuery(
				"select e from ScoreSheetsSummary e where "
				+ "e.studentId = ?1 and "
				+ "e.studentClass = ?2 and "
				+ "e.academicYear = ?3 and "
				+ "e.studentTerm = ?4 ", ScoreSheetsSummary.class);
		query.setParameter(1, studentId);
		query.setParameter(2, studentClass);
		query.setParameter(3, academicYear);
		query.setParameter(4, studentTerm);
		
		return (Vector<ScoreSheetsSummary>) query.getResultList();
	}
	
	//get annualscores total by std
	public Vector<AnnualScoresTotal> getAnnualScoresTotalByStdClassYear(EntityManager em, String studentId, String studentClass, 
			String academicYear) {
		TypedQuery<AnnualScoresTotal> query = em.createQuery(
				"select e from AnnualScoresTotal e where "
				+ "e.studentId = ?1 and "
				+ "e.studentClass = ?2 and "
				+ "e.academicYear = ?3 ", AnnualScoresTotal.class);
		query.setParameter(1, studentId);
		query.setParameter(2, studentClass);
		query.setParameter(3, academicYear);
		
		return (Vector<AnnualScoresTotal>) query.getResultList();
	}
	
	//get annualscoresheetsummary by std
	public Vector<AnnualScoreSheetsSummary> getAnnualScoreSheetSummaryByStdClassYear(EntityManager em, String studentId, 
			String studentClass, String academicYear) {
		TypedQuery<AnnualScoreSheetsSummary> query = em.createQuery(
				"select e from AnnualScoreSheetsSummary e where "
				+ "e.studentId = ?1 and "
				+ "e.studentClass = ?2 and "
				+ "e.academicYear = ?3 ", AnnualScoreSheetsSummary.class);
		query.setParameter(1, studentId);
		query.setParameter(2, studentClass);
		query.setParameter(3, academicYear);
		
		return (Vector<AnnualScoreSheetsSummary>) query.getResultList();
	}
	
	//Get Annual scores total by class and year
	public Vector<AnnualScoresTotal> getAnnualScoresTotalByClassYear(EntityManager em, String studentClass, String academicYear) {
		TypedQuery<AnnualScoresTotal> query = em.createQuery(
				"select e from AnnualScoresTotal e where "
				+ "e.studentClass = ?1 and "
				+ "e.academicYear = ?2 "
				+ "order by e.totalScores desc", AnnualScoresTotal.class);
		query.setParameter(1, studentClass);
		query.setParameter(2, academicYear);
		
		return (Vector<AnnualScoresTotal>) query.getResultList();
	}
	
	public Vector<AnnualScoreSheetsSummary> getAnnualScoresSheetsSumByClassYear(EntityManager em, String studentClass, String academicYear) {
		TypedQuery<AnnualScoreSheetsSummary> query = em.createQuery(
				"select e from AnnualScoreSheetsSummary e where "
				+ "e.studentClass = ?1 and "
				+ "e.academicYear = ?2 "
				+ "order by e.totalScores desc", AnnualScoreSheetsSummary.class);
		query.setParameter(1, studentClass);
		query.setParameter(2, academicYear);
		
		return (Vector<AnnualScoreSheetsSummary>) query.getResultList();
	}
	
	//Fetch All AnnualScoresTotal 
	public Vector<AnnualScoresTotal> getAnnualScoresTotalData(EntityManager em) {
		TypedQuery<AnnualScoresTotal> query = em.createQuery(
				"select e from AnnualScoresTotal e", AnnualScoresTotal.class);
		
		return (Vector<AnnualScoresTotal>) query.getResultList();
	}
	
	//Get StdClass for results processing
//	public Vector<ScoreSheetsSummary> getStudentClassByStdNoYearTerm(EntityManager em, String studentId, 
//			String academicYear, String studentTerm) {
//		TypedQuery<ScoreSheetsSummary> query = em.createQuery(
//				"select e from ScoreSheetsSummary e where "
//				+ "e.studentId = ?1 and "
//				+ "e.academicYear = ?2 and "
//				+ "e.studentTerm = ?3 ", ScoreSheetsSummary.class);
//		query.setParameter(1, studentId);
//		query.setParameter(2, academicYear);
//		query.setParameter(3, studentTerm);
//		
//		return (Vector<ScoreSheetsSummary>) query.getResultList();
//	}
	
	
	public String getStudentClassByStdNoYearTerm(EntityManager em, String studentId, 
			String academicYear, String studentTerm) {
		TypedQuery<ScoreSheetsSummary> query = em.createQuery(
				"select e from ScoreSheetsSummary e where "
				+ "e.studentId = ?1 and "
				+ "e.academicYear = ?2 and "
				+ "e.studentTerm = ?3 ", ScoreSheetsSummary.class);
		query.setParameter(1, studentId);
		query.setParameter(2, academicYear);
		query.setParameter(3, studentTerm);
		
		return query.getSingleResult().getStudentClass();
	}
	
	
	//Get class for annual result processing
	public String getStudentClassByStdNoYear(EntityManager em, String studentId, String academicYear) {
		TypedQuery<AnnualScoresTotal> query = em.createQuery(
				"select e from AnnualScoresTotal e where "
				+ "e.studentId = ?1 and "
				+ "e.academicYear = ?2 "
				+ "order by e.totalScores desc", AnnualScoresTotal.class);
		query.setParameter(1, studentId);
		query.setParameter(2, academicYear);
		
		return query.getSingleResult().getStudentClass();
	}
	
	//Get students
	public Vector<Students> getStudentsAll(EntityManager em) {
		TypedQuery<Students> query = em.createQuery(
				"select e from Students e where "
				+ "e.entryClassAssigned is not null ", Students.class);
		
		return (Vector<Students>) query.getResultList();
	}
	
	
	public String getPrimeClass(String cid, String year, String term) {
		
		//JSS1
		if(cid.equals("JSS1A'"+year+term)) {
			return "JSS1X"+year+term;
		}
		else if(cid.equals("JSS1B'"+year+term)) {
			return "JSS1Y"+year+term;
		}
		else if(cid.equals("JSS1C'"+year+term)) {
			return "JSS1Z"+year+term;
		}
		
		//JSS2
		if(cid.equals("JSS2A'"+year+term)) {
			return "JSS2X"+year+term;
		}
		else if(cid.equals("JSS2B'"+year+term)) {
			return "JSS2Y"+year+term;
		}
		else if(cid.equals("JSS2C'"+year+term)) {
			return "JSS2Z"+year+term;
		}
		
		//JSS3
		if(cid.equals("JSS3A'"+year+term)) {
			return "JSS3X"+year+term;
		}
		else if(cid.equals("JSS3B'"+year+term)) {
			return "JSS3Y"+year+term;
		}
		else if(cid.equals("JSS3C'"+year+term)) {
			return "JSS3Z"+year+term;
		}
		
		//SS1
		if(cid.equals("SSS1A'"+year+term)) {
			return "SSS1X"+year+term;
		}
		else if(cid.equals("SSS1B'"+year+term)) {
			return "SSS1Y"+year+term;
		}
		else if(cid.equals("SSS1C'"+year+term)) {
			return "SSS1Z"+year+term;
		}
		
		//SS2
		if(cid.equals("SSS2A'"+year+term)) {
			return "SSS2X"+year+term;
		}
		else if(cid.equals("SSS2B'"+year+term)) {
			return "SSS2Y"+year+term;
		}
		else if(cid.equals("SSS2C'"+year+term)) {
			return "SSS2Z"+year+term;
		}
		
		//SS3
		if(cid.equals("SSS3A'"+year+term)) {
			return "SSS3X"+year+term;
		}
		else if(cid.equals("SSS3B'"+year+term)) {
			return "SSS3Y"+year+term;
		}
		else if(cid.equals("SSS3C'"+year+term)) {
			return "SSS3Z"+year+term;
		}
		
		else {
			return cid;
		}
	}
	
	//return class only - annual
	public String getPrimeClassOnly(String cid, String year, String stdClass) {
		
		//JSS1
		if(cid.contains("JSS1A'"+year)) {
			return "JSS1X";
		}
		else if(cid.contains("JSS1B'"+year)) {
			return "JSS1Y";
		}
		else if(cid.contains("JSS1C'"+year)) {
			return "JSS1Z";
		}
		
		//JSS2
		if(cid.contains("JSS2A'"+year)) {
			return "JSS2X";
		}
		else if(cid.contains("JSS2B'"+year)) {
			return "JSS2Y";
		}
		else if(cid.contains("JSS2C'"+year)) {
			return "JSS2Z";
		}
		
		//JSS3
		if(cid.contains("JSS3A'"+year)) {
			return "JSS3X";
		}
		else if(cid.contains("JSS3B'"+year)) {
			return "JSS3Y";
		}
		else if(cid.contains("JSS3C'"+year)) {
			return "JSS3Z";
		}
		
		//SS1
		if(cid.contains("SSS1A'"+year)) {
			return "SSS1X";
		}
		else if(cid.contains("SSS1B'"+year)) {
			return "SSS1Y";
		}
		else if(cid.contains("SSS1C'"+year)) {
			return "SSS1Z";
		}
		
		//SS2
		if(cid.contains("SSS2A'"+year)) {
			return "SSS2X";
		}
		else if(cid.contains("SSS2B'"+year)) {
			return "SSS2Y";
		}
		else if(cid.contains("SSS2C'"+year)) {
			return "SSS2Z";
		}
		
		//SS3
		if(cid.contains("SSS3A'"+year)) {
			return "SSS3X";
		}
		else if(cid.contains("SSS3B'"+year)) {
			return "SSS3Y";
		}
		else if(cid.contains("SSS3C'"+year)) {
			return "SSS3Z";
		}
		
		else {
			return stdClass;
		}
	}
	
	//Prime class reverse action
	public String getPrimeClassReverse(String stdClass, String year, String term) {
		
		//JSS1
		if(stdClass.equals("JSS1X")) {
			return "JSS1A'"+year+term;
		}
		if(stdClass.equals("JSS1Y")) {
			return "JSS1B'"+year+term;
		}
		if(stdClass.equals("JSS1Z")) {
			return "JSS1C'"+year+term;
		}
		
		//JSS2
		if(stdClass.equals("JSS2X")) {
			return "JSS2A'"+year+term;
		}
		if(stdClass.equals("JSS2Y")) {
			return "JSS2B'"+year+term;
		}
		if(stdClass.equals("JSS2Z")) {
			return "JSS2C'"+year+term;
		}
		
		//JSS3
		if(stdClass.equals("JSS3X")) {
			return "JSS3A'"+year+term;
		}
		if(stdClass.equals("JSS3Y")) {
			return "JSS3B'"+year+term;
		}
		if(stdClass.equals("JSS3Z")) {
			return "JSS3C'"+year+term;
		}
		
		//SS1
		if(stdClass.equals("SSS1X")) {
			return "SSS1A'"+year+term;
		}
		if(stdClass.equals("SSS1Y")) {
			return "SSS1B'"+year+term;
		}
		if(stdClass.equals("SSS1Z")) {
			return "SSS1C'"+year+term;
		}
		
		//SS2
		if(stdClass.equals("SSS2X")) {
			return "SSS2A'"+year+term;
		}
		if(stdClass.equals("SSS2Y")) {
			return "SSS2B'"+year+term;
		}
		if(stdClass.equals("SSS2Z")) {
			return "SSS2C'"+year+term;
		}
		
		//SS3
		if(stdClass.equals("SSS3X")) {
			return "SSS3A'"+year+term;
		}
		if(stdClass.equals("SSS3Y")) {
			return "SSS3B'"+year+term;
		}
		if(stdClass.equals("SSS3Z")) {
			return "SSS3C'"+year+term;
		}
		
		else {
			return stdClass+year+term;
		}
	}
	
	
	//Prime class reverse action
	public String getPrimeClassReverse(String stdClass) {
		
		//JSS1
		if(stdClass.equals("JSS1X")) {
			return "JSS1A'";
		}
		if(stdClass.equals("JSS1Y")) {
			return "JSS1B'";
		}
		if(stdClass.equals("JSS1Z")) {
			return "JSS1C'";
		}
		
		//JSS2
		if(stdClass.equals("JSS2X")) {
			return "JSS2A'";
		}
		if(stdClass.equals("JSS2Y")) {
			return "JSS2B'";
		}
		if(stdClass.equals("JSS2Z")) {
			return "JSS2C'";
		}
		
		//JSS3
		if(stdClass.equals("JSS3X")) {
			return "JSS3A'";
		}
		if(stdClass.equals("JSS3Y")) {
			return "JSS3B'";
		}
		if(stdClass.equals("JSS3Z")) {
			return "JSS3C'";
		}
		
		//SS1
		if(stdClass.equals("SSS1X")) {
			return "SSS1A'";
		}
		if(stdClass.equals("SSS1Y")) {
			return "SSS1B'";
		}
		if(stdClass.equals("SSS1Z")) {
			return "SSS1C'";
		}
		
		//SS2
		if(stdClass.equals("SSS2X")) {
			return "SSS2A'";
		}
		if(stdClass.equals("SSS2Y")) {
			return "SSS2B'";
		}
		if(stdClass.equals("SSS2Z")) {
			return "SSS2C'";
		}
		
		//SS3
		if(stdClass.equals("SSS3X")) {
			return "SSS3A'";
		}
		if(stdClass.equals("SSS3Y")) {
			return "SSS3B'";
		}
		if(stdClass.equals("SSS3Z")) {
			return "SSS3C'";
		}
		
		else {
			return stdClass;
		}
	}
	
	//Get Prime class
	public String getPrimeClass(String stdClass) {
		
		//JSS1
		if(stdClass.equals("JSS1A'")) {
			return "JSS1X";
		}
		if(stdClass.equals("JSS1B'")) {
			return "JSS1Y";
		}
		if(stdClass.equals("JSS1C'")) {
			return "JSS1Z";
		}
		
		//JSS2
		if(stdClass.equals("JSS2A'")) {
			return "JSS2X";
		}
		if(stdClass.equals("JSS2B'")) {
			return "JSS2Y";
		}
		if(stdClass.equals("JSS2C'")) {
			return "JSS2Z";
		}
		
		//JSS3
		if(stdClass.equals("JSS3A'")) {
			return "JSS3X";
		}
		if(stdClass.equals("JSS3B'")) {
			return "JSS3Y";
		}
		if(stdClass.equals("JSS3C'")) {
			return "JSS3Z";
		}
		
		//SS1
		if(stdClass.equals("SSS1A'")) {
			return "SSS1X";
		}
		if(stdClass.equals("SSS1B'")) {
			return "SSS1Y";
		}
		if(stdClass.equals("SSS1C'")) {
			return "SSS1Z";
		}
		
		//SS2
		if(stdClass.equals("SSS2A'")) {
			return "SSS2X";
		}
		if(stdClass.equals("SSS2B'")) {
			return "SSS2Y";
		}
		if(stdClass.equals("SSS2C'")) {
			return "SSS2Z";
		}
		
		//SS3
		if(stdClass.equals("SSS3A'")) {
			return "SSS3X";
		}
		if(stdClass.equals("SSS3B'")) {
			return "SSS3Y";
		}
		if(stdClass.equals("SSS3C'")) {
			return "SSS3Z";
		}
		
		else {
			return stdClass;
		}
	}
	
	public boolean validateStdNo(String stdNo) {
		if((stdNo.contains("K18/") && stdNo.trim().length() == 8 || 
				stdNo.contains("K19/") && stdNo.trim().length() == 7 ||
				stdNo.contains("K20/") && stdNo.trim().length() == 7 || 
				stdNo.contains("K21/") && stdNo.trim().length() == 7 ||
				stdNo.contains("K22/") && stdNo.trim().length() == 7 ||
				stdNo.contains("K23/") && stdNo.trim().length() == 7 ||
				stdNo.contains("K24/") && stdNo.trim().length() == 7 ||
				stdNo.contains("K25/") && stdNo.trim().length() == 7 ||
				stdNo.contains("K26/") && stdNo.trim().length() == 7 ||
				stdNo.contains("K27/") && stdNo.trim().length() == 7 ||
				stdNo.contains("K28/") && stdNo.trim().length() == 7 ||
				stdNo.contains("K29/") && stdNo.trim().length() == 7 || 
				stdNo.contains("K30/") && stdNo.trim().length() == 7) &&
				(!(stdNo.trim().length() < 7) || !(stdNo.trim().length() > 8))) {
			return true;
		}
		else {
			return false;
		}
	}
	
	//Get Scoresheets by stdid
	public Vector<JssScoreSheets> getJssScoreSheetsByStdNo(EntityManager em, String stdId) {
		TypedQuery<JssScoreSheets> query = em.createQuery(
				"select e from JssScoreSheets e where "
				+ "e.stdId = ?1 ", JssScoreSheets.class);
		query.setParameter(1, stdId);
		
		return (Vector<JssScoreSheets>) query.getResultList();
	}
	
	public Vector<ScoreSheets> getScoreSheetsByStdNo(EntityManager em, String stdId) {
		TypedQuery<ScoreSheets> query = em.createQuery(
				"select e from ScoreSheets e where "
				+ "e.stdId = ?1 ", ScoreSheets.class);
		query.setParameter(1, stdId);
		
		return (Vector<ScoreSheets>) query.getResultList();
	}
	
	public Vector<ScoreSheetsSummary> getScoreSheetsSummaryByStdNo(EntityManager em, String studentId) {
		TypedQuery<ScoreSheetsSummary> query = em.createQuery(
				"select e from ScoreSheetsSummary e where "
				+ "e.studentId = ?1 ", ScoreSheetsSummary.class);
		query.setParameter(1, studentId);
		
		return (Vector<ScoreSheetsSummary>) query.getResultList();
	}
	
	public Vector<AnnualScoreSheetsSummary> getAnnualScoreSheetsSummaryByStdNo(EntityManager em, String studentId) {
		TypedQuery<AnnualScoreSheetsSummary> query = em.createQuery(
				"select e from AnnualScoreSheetsSummary e where "
				+ "e.studentId = ?1 ", AnnualScoreSheetsSummary.class);
		query.setParameter(1, studentId);
		
		return (Vector<AnnualScoreSheetsSummary>) query.getResultList();
	}
	
	public Vector<AnnualScoresTotal> getAnnualScoresTotalByStdNo(EntityManager em, String studentId) {
		TypedQuery<AnnualScoresTotal> query = em.createQuery(
				"select e from AnnualScoresTotal e where "
				+ "e.studentId = ?1 ", AnnualScoresTotal.class);
		query.setParameter(1, studentId);
		
		return (Vector<AnnualScoresTotal>) query.getResultList();
	}
	
	//Financial Records
	public Vector<Transactions> getTransactionsByStdNo(EntityManager em, String stdNo) {
		TypedQuery<Transactions> query = em.createQuery(
				"select e from Transactions e where "
				+ "e.stdNo = ?1 ", Transactions.class);
		query.setParameter(1, stdNo);
		
		return (Vector<Transactions>) query.getResultList();
	}
	
	public Vector<TillTransactions> getTillTransactionsByStdNo(EntityManager em, String customerAcctNo) {
		TypedQuery<TillTransactions> query = em.createQuery(
				"select e from TillTransactions e where "
				+ "e.customerAcctNo = ?1 ", TillTransactions.class);
		query.setParameter(1, customerAcctNo);
		
		return (Vector<TillTransactions>) query.getResultList();
	}
	
	public Vector<Invoicing> getInvoicingByStdNo(EntityManager em, String stdNo) {
		TypedQuery<Invoicing> query = em.createQuery(
				"select e from Invoicing e where "
				+ "e.stdNo = ?1 ", Invoicing.class);
		query.setParameter(1, stdNo);
		
		return (Vector<Invoicing>) query.getResultList();
	}
	
	public Vector<BillingsInformation> getBillingsInformationByStdNo(EntityManager em, String stdNo) {
		TypedQuery<BillingsInformation> query = em.createQuery(
				"select e from BillingsInformation e where "
				+ "e.stdNo = ?1 ", BillingsInformation.class);
		query.setParameter(1, stdNo);
		
		return (Vector<BillingsInformation>) query.getResultList();
	}
	
	public Vector<CashTransactions> getCashTransactionsByStdNo(EntityManager em, String stdNo) {
		TypedQuery<CashTransactions> query = em.createQuery(
				"select e from CashTransactions e where "
				+ "e.stdNo = ?1 ", CashTransactions.class);
		query.setParameter(1, stdNo);
		
		return (Vector<CashTransactions>) query.getResultList();
	}
	
	public Vector<TellerTransactions> getTellerTransactionsByStdNo(EntityManager em, String stdNo) {
		TypedQuery<TellerTransactions> query = em.createQuery(
				"select e from TellerTransactions e where "
				+ "e.stdNo = ?1 ", TellerTransactions.class);
		query.setParameter(1, stdNo);
		
		return (Vector<TellerTransactions>) query.getResultList();
	}
	
	public Vector<POSTransactions> getPOSTransactionsByStdNo(EntityManager em, String stdNo) {
		TypedQuery<POSTransactions> query = em.createQuery(
				"select e from POSTransactions e where "
				+ "e.stdNo = ?1 ", POSTransactions.class);
		query.setParameter(1, stdNo);
		
		return (Vector<POSTransactions>) query.getResultList();
	}
	
	//Tills
	public Vector<Tills> getTills(EntityManager em) {
		TypedQuery<Tills> query = em.createQuery(
				"select e from Tills e ", Tills.class);
		
		return (Vector<Tills>) query.getResultList();
	}
	
	//Receipt Re-Print
	public Vector<Transactions> getTIDByStdNo(EntityManager em, String stdNo) {
		TypedQuery<Transactions> query = em.createQuery(
				"select e from Transactions e where "
				+ "e.stdNo = ?1 ", Transactions.class);
		query.setParameter(1, stdNo);
		
		return (Vector<Transactions>) query.getResultList();
	}
	
	
	//SSSSubjectsResults Query by StdNo, StdClass, Year and Term
	public Vector<SSSSubjectsResults> getSSSSubjectsResultsByIdClassYearTerm(EntityManager em, String stdNo, 
			String stdClass, String session, String term) {
		TypedQuery<SSSSubjectsResults> query = em.createQuery(
				"select e from SSSSubjectsResults e where "
				+ "e.stdNo = ?1 and "
				+ "e.stdClass = ?2 and "
				+ "e.session = ?3 and "
				+ "e.term = ?4 ", SSSSubjectsResults.class);
		query.setParameter(1, stdNo);
		query.setParameter(2, stdClass);
		query.setParameter(3, session);
		query.setParameter(4, term);
		
		return (Vector<SSSSubjectsResults>) query.getResultList();
	}
	
	//JSSSubjectsResults Query by StdNo, StdClass, Year and Term
	public Vector<JSSSubjectsResults> getJSSSubjectsResultsByIdClassYearTerm(EntityManager em, String stdNo, 
			String stdClass, String session, String term) {
		TypedQuery<JSSSubjectsResults> query = em.createQuery(
				"select e from JSSSubjectsResults e where "
				+ "e.stdNo = ?1 and "
				+ "e.stdClass = ?2 and "
				+ "e.session = ?3 and "
				+ "e.term = ?4 ", JSSSubjectsResults.class);
		query.setParameter(1, stdNo);
		query.setParameter(2, stdClass);
		query.setParameter(3, session);
		query.setParameter(4, term);
		
		return (Vector<JSSSubjectsResults>) query.getResultList();
	}
	
	//***********************
	//SSSClassResults Query by StdNo, StdClass, Year and Term
	public Vector<SSSClassResults> getSSSClassResultsByIdClassYearTerm(EntityManager em, String stdNo, 
			String stdClass, String session, String term) {
		TypedQuery<SSSClassResults> query = em.createQuery(
				"select e from SSSClassResults e where "
				+ "e.stdNo = ?1 and "
				+ "e.stdClass = ?2 and "
				+ "e.session = ?3 and "
				+ "e.term = ?4 ", SSSClassResults.class);
		query.setParameter(1, stdNo);
		query.setParameter(2, stdClass);
		query.setParameter(3, session);
		query.setParameter(4, term);
		
		return (Vector<SSSClassResults>) query.getResultList();
	}
	
	//JSSClassResults Query by StdNo, StdClass, Year and Term
	public Vector<JSSClassResults> getJSSClassResultsByIdClassYearTerm(EntityManager em, String stdNo, 
			String stdClass, String session, String term) {
		TypedQuery<JSSClassResults> query = em.createQuery(
				"select e from JSSClassResults e where "
				+ "e.stdNo = ?1 and "
				+ "e.stdClass = ?2 and "
				+ "e.session = ?3 and "
				+ "e.term = ?4 ", JSSClassResults.class);
		query.setParameter(1, stdNo);
		query.setParameter(2, stdClass);
		query.setParameter(3, session);
		query.setParameter(4, term);
		
		return (Vector<JSSClassResults>) query.getResultList();
	}
	
	
	//AnnualSubjectsResults Query by StdNo, StdClass, and Session
	public Vector<AnnualSubjectsResults> getAnnualSubjectsResultsByIdClassSession(EntityManager em, String stdNo, 
			String stdClass, String session) {
		TypedQuery<AnnualSubjectsResults> query = em.createQuery(
				"select e from AnnualSubjectsResults e where "
				+ "e.stdNo = ?1 and "
				+ "e.stdClass = ?2 and "
				+ "e.session = ?3 ", AnnualSubjectsResults.class);
		query.setParameter(1, stdNo);
		query.setParameter(2, stdClass);
		query.setParameter(3, session);
		
		return (Vector<AnnualSubjectsResults>) query.getResultList();
	}
	
	
	//AnnualClassResults Query by StdNo, StdClass, Session
	public Vector<AnnualClassResults> getAnnualClassResultsByIdClassSession(EntityManager em, String stdNo, 
			String stdClass, String session) {
		TypedQuery<AnnualClassResults> query = em.createQuery(
				"select e from AnnualClassResults e where "
				+ "e.stdNo = ?1 and "
				+ "e.stdClass = ?2 and "
				+ "e.session = ?3  ", AnnualClassResults.class);
		query.setParameter(1, stdNo);
		query.setParameter(2, stdClass);
		query.setParameter(3, session);
		
		return (Vector<AnnualClassResults>) query.getResultList();
	}
	
	
	//Offline result processing
	//Kusaki SSS Result
	//Generate Results Controller
	@FXML private TableView<ScoresDataTable> scoresDataTable2;	
	@FXML private Label studentName_txtTF2, classOfStudentTF2, classEnrolSizeTF2, age_LBL2, term_LBL2, session_LBL2;
	@FXML private Label attendanceTF2, totalPossibleAttendanceTF2, totalScore_txtTF2, classSizeTF2;
	@FXML private Label maximumScoreTF2, avgScoreTF2, positionInClassTF2, sexOfStudentTF2, stdResultClassAvgTF2,
		numberOfDaysInTermTF2, noDaysTermSSS2, noPresentsSSS2, noAbsentsSSS2;
	@FXML private ImageView imageViewSSSResult2;
	@FXML private ComboBox<String> resultTermTF2, yearOfResultTF2;
	@FXML private TableColumn<ScoresDataTable,String> subjectsCol2, CA1Col2, CA2Col2, CA3Col2, examCol2, totalCol2, gradeCol2;
	@FXML private TableColumn<ScoresDataTable,String> positionCol2, classAvgCol2, classHighestCol2, classLowestCol2, remarksCol2;
	
	@FXML private TextField studentNumberTF2; 
	@FXML private Button generateStdResultsButton2;
	
	@FXML public void SSSinitialize6_2(MouseEvent event) {
		resultTermTF2.setItems(termN);
		//yearOfResultTF2.setItems(years);
		populateYear(yearOfResultTF2);
	}
	
	@SuppressWarnings({ "rawtypes", "unchecked" })
	@FXML
	public void generateResultsActionButton2(ActionEvent event) {
		String stdNo = studentNumberTF2.getText().trim().toUpperCase();
		String term = resultTermTF2.getValue();
		String year = yearOfResultTF2.getValue();
		LinkedList<String> DataSet = new LinkedList<>();
		LinkedList<String> Behaviour = new LinkedList<>();
		LinkedList<String> Skills = new LinkedList<>();
		
		Behaviour.add("Punctuality");
		Behaviour.add("Attendance at class");
		Behaviour.add("Attentiveness at class");
		Behaviour.add("Carrying out Assignment");
		Behaviour.add("Participation in sch activities");
		Behaviour.add("Neatness");
		Behaviour.add("Honesty");
		Behaviour.add("Self control");
		Behaviour.add("Relationship with others");
		Behaviour.add("Helping others");
		Behaviour.add("Games sports");
		Behaviour.add("Handling of Tools Lab Workshop");
		
		Skills.add("Handwriting");
		Skills.add("Verbal Fluency");
		Skills.add("Games");
		Skills.add("Sports");
		Skills.add("Handling Tools");
		Skills.add("Drawing and Painting");
		Skills.add("Musical Skills");
		
		String stdClassVal;
		
		try{
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory
					("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			Students std = entitymanager.find(Students.class, stdNo);
			
			SSSClassResults rez = entitymanager.find(SSSClassResults.class, stdNo+year+term);
			
			//String stdClassId = std.getEntryClassAssigned();
			noDaysTermSSS2.setText(String.valueOf(rez.getNoDaysInTerm())); 
			noPresentsSSS2.setText(String.valueOf(rez.getNoDaysPresent())); 
			noAbsentsSSS2.setText(String.valueOf(rez.getNoDaysAbsent()));
			
			studentName_txtTF2.setText(std.getSurName()+", "+std.getOtherNames());
			sexOfStudentTF2.setText(std.getSex());
			
			LocalDate dateAgeStr2 = std.getDateOfBirth();
			LocalDate currentDateStr = LocalDate.now();
			int diffDateStr = currentDateStr.getYear() - dateAgeStr2.getYear();
			age_LBL2.setText(String.valueOf(diffDateStr));
			
			EntityManagerFactory emfactory33 = Persistence.createEntityManagerFactory
					("SchoolMgtSystem");
			EntityManager entitymanager33 = emfactory33.createEntityManager();
			entitymanager33.getTransaction().begin();
							
			stdClassVal = getStudentClassByStdNoYearTerm(entitymanager33, stdNo, year, term);
			
			entitymanager33.getTransaction().commit();
			entitymanager33.close();
			emfactory33.close();
			
			if(stdClassVal.contains("SSS")) {
				
				DecimalFormat fm = new DecimalFormat("#.00");
				
				classOfStudentTF2.setText(getPrimeClassReverse(stdClassVal));
				term_LBL2.setText(term);
				session_LBL2.setText(year);
				
				ObservableList<ScoresDataTable> data = FXCollections.observableArrayList();
				ObservableList<BehaviourDataTable> dataBehaviour = FXCollections.observableArrayList();
				ObservableList<SkillsDataTable> dataSkills = FXCollections.observableArrayList();
				
				String stdClassValQ = getPrimeClass(stdClassVal);
			
				Vector<SSSSubjectsResults> SSSubjResults = new Vector<>();
				Vector<SSSClassResults> SSSClassRes = new Vector<>();
					
				EntityManagerFactory emfactory333 = Persistence.createEntityManagerFactory
						("SchoolMgtSystem");
				EntityManager entitymanager333 = emfactory333.createEntityManager();
				entitymanager333.getTransaction().begin();
								
				SSSubjResults = getSSSSubjectsResultsByIdClassYearTerm(entitymanager333, stdNo, stdClassValQ, year, term);
				SSSClassRes = getSSSClassResultsByIdClassYearTerm(entitymanager333, stdNo, stdClassValQ, year, term);
				
				entitymanager333.getTransaction().commit();
				entitymanager333.close();
				emfactory333.close();
				
				for(SSSSubjectsResults result : SSSubjResults) {
					data.add(
							new ScoresDataTable(result.getSubjectName(),
							String.valueOf(result.getCA1()),
							String.valueOf(result.getCA2()),
							String.valueOf(result.getCA3()),
							String.valueOf(result.getExam()),
							String.valueOf(result.getTotal()),
							result.getGrade(),
							result.getPosition(), 
							fm.format(result.getClassAvg()),
							String.valueOf(result.getClassHighest()),
							String.valueOf(result.getClassLowest()),
							result.getRemark()
							));
				}
				
				for(SSSClassResults result : SSSClassRes) {
					classEnrolSizeTF2.setText(String.valueOf(result.getNoInClass()));
					positionInClassTF2.setText(result.getPosition());
					classSizeTF2.setText(String.valueOf(result.getNoInClass()));
				}
				
				double totalScoresResult = 0;
				double avgScoresResult = 0;
				int dataSize = data.size();
				
				for(ScoresDataTable datum : data) {
					totalScoresResult += Double.parseDouble(datum.getTotal_Data());
				}
				
				avgScoresResult = totalScoresResult/dataSize;
				String averageScoreResult = fm.format(avgScoresResult);
				totalScore_txtTF2.setText(String.valueOf(fm.format(totalScoresResult)));
				avgScoreTF2.setText(averageScoreResult);
						
				subjectsCol2.setCellValueFactory(new PropertyValueFactory("subjectName_Data"));
				CA1Col2.setCellValueFactory(new PropertyValueFactory("CA1_Data"));
				CA2Col2.setCellValueFactory(new PropertyValueFactory("CA2_Data"));
				CA3Col2.setCellValueFactory(new PropertyValueFactory("CA3_Data"));
				examCol2.setCellValueFactory(new PropertyValueFactory("exam_Data"));
				totalCol2.setCellValueFactory(new PropertyValueFactory("total_Data"));
				gradeCol2.setCellValueFactory(new PropertyValueFactory("grade_Data"));
				positionCol2.setCellValueFactory(new PropertyValueFactory("position_Data"));
				classAvgCol2.setCellValueFactory(new PropertyValueFactory("classAvg_Data"));
				classHighestCol2.setCellValueFactory(new PropertyValueFactory("classHighest_Data"));
				classLowestCol2.setCellValueFactory(new PropertyValueFactory("classLowest_Data"));
				remarksCol2.setCellValueFactory(new PropertyValueFactory("remark_Data"));
				
				//colouring grade base on scores
				gradeCol2.setCellFactory(new Callback<TableColumn<ScoresDataTable,String>,TableCell<ScoresDataTable,String>>(){
					public TableCell call(TableColumn param) {
						return new TableCell<ScoresDataTable,String>(){
							@Override
							public void updateItem(String item, boolean empty) {
								super.updateItem(item,empty);
								if(!(isEmpty())) {
									if(item.equals("E")) {
										this.setTextFill(Color.RED);
									}
									setText(item);
								}
							}
						};
					}
				});
				
				totalCol2.setCellFactory(new Callback<TableColumn<ScoresDataTable,String>,TableCell<ScoresDataTable,String>>(){
					public TableCell call(TableColumn param) {
						return new TableCell<ScoresDataTable,String>(){
							@Override
							public void updateItem(String item, boolean empty) {
								super.updateItem(item,empty);
								if(!(isEmpty())) {
									if(Double.parseDouble(item) < 40) {
										this.setTextFill(Color.RED);
									}
									setText(item);
								}
							}
						};
					}
				});
				
				scoresDataTable2.setItems(data);
						
				entitymanager.getTransaction().commit();
				entitymanager.close();
				emfactory.close();
				
				for(String str : Behaviour) {
					dataBehaviour.add(new BehaviourDataTable(str));
				}
				
				behaviourCol.setCellValueFactory(new PropertyValueFactory("behaviour_Data"));
				
				behaviourDataTable.setItems(dataBehaviour);
				
				for(String str : Skills) {
					dataSkills.add(new SkillsDataTable(str));
				}
				
				skillsCol.setCellValueFactory(new PropertyValueFactory("skills_Data"));
				
				skillsDataTable.setItems(dataSkills);
				}
				else {
					Alert alert = new Alert(Alert.AlertType.ERROR);
					alert.setContentText("Please use the JSS Result template for Junior Students...");
					Optional<ButtonType> result = alert.showAndWait();
					if(result.get() == ButtonType.OK) {
						alert.close();
					}
					else {
						alert.close();
					}
				}
			}
			catch(Exception e) {
				studentNumberTF2.setText("Error: " + e.getLocalizedMessage());
				scoresDataTable2.setItems(null);
				studentName_txtTF2.setText(null);
				sexOfStudentTF2.setText(null);
				age_LBL2.setText(null);
				classOfStudentTF2.setText(null);
				term_LBL2.setText(null);
				session_LBL2.setText(null);
				classEnrolSizeTF2.setText(null);
				totalScore_txtTF2.setText(null);
				avgScoreTF2.setText(null);
				positionInClassTF2.setText(null);
				classSizeTF2.setText(null);
			}
				
			//view image
			try {
				String stdId = stdNo;
				
				String jdbcUrl = dbURL;
				String username = dbUSR;
				String password = dbPWD;
				
				String sql = "SELECT * FROM stdImages WHERE stdid = ?";
				
				try(Connection conn = DriverManager.getConnection(jdbcUrl, username, password);
						){
					
					try(PreparedStatement stmt = conn.prepareStatement(sql);
							){
						stmt.setString(1, stdId);		
						
						ResultSet result = stmt.executeQuery();
						
						
						if(result.next()) {
							InputStream imageStream = result.getBinaryStream("image");
							Image img = new Image(imageStream);
							imageViewSSSResult2.setImage(img);
						}
						else {
							imageViewSSSResult2.setImage(null);
						}
					
						result.close();
						stmt.close();
						conn.close();
					}
					catch(SQLException io) {
						studentNumberTF2.setText(io.getMessage());
						imageViewSSSResult2.setImage(null);
					}
				}
				catch(SQLException eq) {
					studentNumberTF2.setText(eq.getMessage());
					imageViewSSSResult2.setImage(null);
				}
			}
		catch(Exception e) {
			studentNumberTF2.setText(e.getMessage());
			imageViewSSSResult2.setImage(null);
		}	
				
	}
		
	//print SSS student results
	@FXML private Button printJobResultButton2;
	@FXML private SplitPane printPane2_2;
	@FXML public void printStdResultButton2(ActionEvent even) {
		generateStdResultsButton2.setVisible(false);
		returnResultSSSBtn2.setVisible(false);
		printJobResultButton2.setVisible(false);
		yearOfResultTF2.setVisible(false);
		resultTermTF2.setVisible(false);
		try {
			printNode(printPane2_2);
		}
		catch(Exception exception) {
			studentNumberTF2.setText("Print Error: "+ exception.getLocalizedMessage());
		}
		finally {
			generateStdResultsButton2.setVisible(true);
			returnResultSSSBtn2.setVisible(true);
			printJobResultButton2.setVisible(true);
			yearOfResultTF2.setVisible(true);
			resultTermTF2.setVisible(true);
		}
	}
	
	//Offline JSS Result Processing
	@FXML private TableView<JssScoresDataTable> jssScoresDataTable2;	
	@FXML private TableView<BehaviourDataTable> behaviourDataTable2;	
	@FXML private TableColumn<BehaviourDataTable,String> behaviourCol2;
	@FXML private TableView<SkillsDataTable> skillsDataTable2;	
	@FXML private TableColumn<SkillsDataTable,String> skillsCol2;
	@FXML private Label nameJSS_LBL2, classJSS_LBL2, noInClassJSS_LBL2, ageJSS_LBL2, stdTermJSS_LBL2, sessionJSS_LBL2;
	@FXML private Label sexJSS_LBL2, totalScoreJSS_LBL2, avgJSS_LBL2, overAllPositionJSS_LBL2, outOfJSS_LBL2, 
		daysInTermJss2, presentsInTermJss2, absentsInTermJss2;
	@FXML private ImageView imageViewJSSResult2;
	
	@FXML private ComboBox<String> termJSS_LBL2, yearJSS_LBL2;
	
	@FXML
	TableColumn<JssScoresDataTable,String> JSSsubjectCol2, JSSCA1Col2, JSSCA2Col2, JSSCA3Col2, 
		JSSCA4Col2, JSSCA5Col2, JSSCA6Col2, JSSexamCol2, 
		JSStotalCol2, JSSgradeCol2, JSSpositionCol2, JSSclassAvgCol2, JSSclassHighestCol2, JSSclassLowestCol2, 
		JSSremarksCol2;
	
	@FXML private TextField idNoJSS_LBL2; 
	//@FXML private Button JSS_SpoolResultButton;
	
	@FXML public void JSS_initialize_2(MouseEvent event) {
		termJSS_LBL2.setItems(termN);
		//yearJSS_LBL2.setItems(years);
		populateYear(yearJSS_LBL2);
	}
	
	@SuppressWarnings({ "rawtypes", "unchecked" })
	@FXML
	public void JSS_SpoolResultActionButton2(ActionEvent event) {
		String stdNo = idNoJSS_LBL2.getText().trim().toUpperCase();
		String term = termJSS_LBL2.getValue();
		String year = yearJSS_LBL2.getValue();
		LinkedList<String> DataSet = new LinkedList<>();
		Vector<JssScoreSheets> SID_elements = new Vector<>();
		
		LinkedList<String> Behaviour = new LinkedList<>();
		LinkedList<String> Skills = new LinkedList<>();
		Behaviour.add("Punctuality");
		Behaviour.add("Attendance at class");
		Behaviour.add("Attentiveness at class");
		Behaviour.add("Carrying out Assignment");
		Behaviour.add("Participation in sch activities");
		Behaviour.add("Neatness");
		Behaviour.add("Honesty");
		Behaviour.add("Self control");
		Behaviour.add("Relationship with others");
		Behaviour.add("Helping others");
		Behaviour.add("Games sports");
		Behaviour.add("Handling of Tools Lab Workshop");
		
		Skills.add("Handwriting");
		Skills.add("Verbal Fluency");
		Skills.add("Games");
		Skills.add("Sports");
		Skills.add("Handling Tools");
		Skills.add("Drawing and Painting");
		Skills.add("Musical Skills");
		
		String stdClassVal;
		
		try{
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory
					("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			Students std = entitymanager.find(Students.class, stdNo);
			
			JSSClassResults rez = entitymanager.find(JSSClassResults.class, stdNo+year+term);
			
			//days in term, presents and absents
			daysInTermJss2.setText(String.valueOf(rez.getNoDaysInTerm()));
			presentsInTermJss2.setText(String.valueOf(rez.getNoDaysPresent()));
			absentsInTermJss2.setText(String.valueOf(rez.getNoDaysAbsent()));
			
			nameJSS_LBL2.setText(std.getSurName()+", "+std.getOtherNames());
			sexJSS_LBL2.setText(std.getSex());
			
			LocalDate dateAgeStr2 = std.getDateOfBirth();
			LocalDate currentDateStr = LocalDate.now();
			int diffDateStr = currentDateStr.getYear() - dateAgeStr2.getYear();
			ageJSS_LBL2.setText(String.valueOf(diffDateStr));
			
			DecimalFormat fm = new DecimalFormat("#.00");
			
			EntityManagerFactory emfactory33 = Persistence.createEntityManagerFactory
					("SchoolMgtSystem");
			EntityManager entitymanager33 = emfactory33.createEntityManager();
			entitymanager33.getTransaction().begin();
			
			//StudentClasses stdC = entitymanager.find(StudentClasses.class, stdClassId);
			
			stdClassVal = getStudentClassByStdNoYearTerm(entitymanager33, stdNo, year, term);
			
			entitymanager33.getTransaction().commit();
			entitymanager33.close();
			emfactory33.close();
			
			if(stdClassVal.contains("JSS")) {
				
				ObservableList<JssScoresDataTable> data = FXCollections.observableArrayList();
				ObservableList<BehaviourDataTable> dataBehaviour = FXCollections.observableArrayList();
				ObservableList<SkillsDataTable> dataSkills = FXCollections.observableArrayList();
				
				String stdClass2 = getPrimeClass(getPrimeClassReverse(stdClassVal));
				String stdClass3 = getPrimeClassReverse(stdClassVal);
				
				classJSS_LBL2.setText(stdClass3);
				stdTermJSS_LBL2.setText(term);
				sessionJSS_LBL2.setText(year);
				
				Vector<JSSSubjectsResults> JSSubjResults = new Vector<>();
				Vector<JSSClassResults> JSSClassRes = new Vector<>();
					
				EntityManagerFactory emfactory333 = Persistence.createEntityManagerFactory
						("SchoolMgtSystem");
				EntityManager entitymanager333 = emfactory333.createEntityManager();
				entitymanager333.getTransaction().begin();
								
				JSSubjResults = getJSSSubjectsResultsByIdClassYearTerm(entitymanager333, stdNo, stdClass2, year, term);
				JSSClassRes = getJSSClassResultsByIdClassYearTerm(entitymanager333, stdNo, stdClass2, year, term);
				
				entitymanager333.getTransaction().commit();
				entitymanager333.close();
				emfactory333.close();
				
				for(JSSSubjectsResults result : JSSubjResults) {
					data.add(
							new JssScoresDataTable(result.getSubjectName(),
							String.valueOf(result.getCA1()),
							String.valueOf(result.getCA2()),
							String.valueOf(result.getCA3()),
							String.valueOf(result.getCA4()),
							String.valueOf(result.getCA5()),
							String.valueOf(result.getCA6()),
							String.valueOf(result.getExam()),
							String.valueOf(result.getTotal()),
							result.getGrade(),
							result.getPosition(), 
							fm.format(result.getClassAvg()),
							String.valueOf(result.getClassHighest()),
							String.valueOf(result.getClassLowest()),
							result.getRemark()
							));
				}
				
				for(JSSClassResults result : JSSClassRes) {
					noInClassJSS_LBL2.setText(String.valueOf(result.getNoInClass()));
					overAllPositionJSS_LBL2.setText(result.getPosition());
					outOfJSS_LBL2.setText(String.valueOf(result.getNoInClass()));
				}
				
				
				//query for class position
				
				
					
				double totalScoresResult = 0;
				double avgScoresResult = 0;
				int dataSize = data.size();
				
				for(JssScoresDataTable datum : data) {
					totalScoresResult += Double.parseDouble(datum.getTotal_Data());
				}
				
				avgScoresResult = totalScoresResult/dataSize;
				String averageScoreResult = fm.format(avgScoresResult);
				totalScoreJSS_LBL2.setText(String.valueOf(fm.format(totalScoresResult)));
				avgJSS_LBL2.setText(averageScoreResult);
						
				JSSsubjectCol2.setCellValueFactory(new PropertyValueFactory("subjectName_Data"));
				JSSCA1Col2.setCellValueFactory(new PropertyValueFactory("CA1_Data"));
				JSSCA2Col2.setCellValueFactory(new PropertyValueFactory("CA2_Data"));
				JSSCA3Col2.setCellValueFactory(new PropertyValueFactory("CA3_Data"));
				JSSCA4Col2.setCellValueFactory(new PropertyValueFactory("CA4_Data"));
				JSSCA5Col2.setCellValueFactory(new PropertyValueFactory("CA5_Data"));
				JSSCA6Col2.setCellValueFactory(new PropertyValueFactory("CA6_Data"));
				JSSexamCol2.setCellValueFactory(new PropertyValueFactory("exam_Data"));
				JSStotalCol2.setCellValueFactory(new PropertyValueFactory("total_Data"));
				JSSgradeCol2.setCellValueFactory(new PropertyValueFactory("grade_Data"));
				JSSpositionCol2.setCellValueFactory(new PropertyValueFactory("position_Data"));
				JSSclassAvgCol2.setCellValueFactory(new PropertyValueFactory("classAvg_Data"));
				JSSclassHighestCol2.setCellValueFactory(new PropertyValueFactory("classHighest_Data"));
				JSSclassLowestCol2.setCellValueFactory(new PropertyValueFactory("classLowest_Data"));
				JSSremarksCol2.setCellValueFactory(new PropertyValueFactory("remark_Data"));
				
				//colouring grade
				JSSgradeCol2.setCellFactory(new Callback<TableColumn<JssScoresDataTable,String>,TableCell<JssScoresDataTable,String>>(){
					public TableCell call(TableColumn param) {
						return new TableCell<JssScoresDataTable,String>(){
							@Override
							public void updateItem(String item, boolean empty) {
								super.updateItem(item,empty);
								if(!(isEmpty())) {
									if(item.equals("E")) {
										this.setTextFill(Color.RED);
									}
									setText(item);
								}
							}
						};
					}
				});
				
				JSStotalCol2.setCellFactory(new Callback<TableColumn<JssScoresDataTable,String>,TableCell<JssScoresDataTable,String>>(){
					public TableCell call(TableColumn param) {
						return new TableCell<JssScoresDataTable,String>(){
							@Override
							public void updateItem(String item, boolean empty) {
								super.updateItem(item,empty);
								if(!(isEmpty())) {
									if(Double.parseDouble(item) < 40) {
										this.setTextFill(Color.RED);
									}
									setText(item);
								}
							}
						};
					}
				});
				
				jssScoresDataTable2.setItems(data);
						
				entitymanager.getTransaction().commit();
				entitymanager.close();
				emfactory.close();
				
				for(String str : Behaviour) {
					dataBehaviour.add(new BehaviourDataTable(str));
				}
				
				behaviourCol2.setCellValueFactory(new PropertyValueFactory("behaviour_Data"));
				
				behaviourDataTable2.setItems(dataBehaviour);
				
				for(String str : Skills) {
					dataSkills.add(new SkillsDataTable(str));
				}
				
				skillsCol2.setCellValueFactory(new PropertyValueFactory("skills_Data"));
				
				skillsDataTable2.setItems(dataSkills);
				}
				else {
					Alert alert = new Alert(Alert.AlertType.ERROR);
					alert.setContentText("Please use the SSS Result template for Senior Students...");
					Optional<ButtonType> result = alert.showAndWait();
					if(result.get() == ButtonType.OK) {
						alert.close();
					}
					else {
						alert.close();
					}
				}
			
			}
			catch(Exception e) {
				idNoJSS_LBL2.setText("Error: " + e.getLocalizedMessage());
				jssScoresDataTable2.setItems(null);
				nameJSS_LBL2.setText(null);
				sexJSS_LBL2.setText(null);
				ageJSS_LBL2.setText(null);
				classJSS_LBL2.setText(null);
				stdTermJSS_LBL2.setText(null);
				sessionJSS_LBL2.setText(null);
				noInClassJSS_LBL2.setText(null);
				totalScoreJSS_LBL2.setText(null);
				avgJSS_LBL2.setText(null);
				overAllPositionJSS_LBL2.setText(null);
				outOfJSS_LBL2.setText(null);
			}
			
			//view image
			try {
				String stdId = stdNo;
				
				String jdbcUrl = dbURL;
				String username = dbUSR;
				String password = dbPWD;
				
				String sql = "SELECT * FROM stdImages WHERE stdid = ?";
				
				try(Connection conn = DriverManager.getConnection(jdbcUrl, username, password);
						){
					
					try(PreparedStatement stmt = conn.prepareStatement(sql);
							){
						stmt.setString(1, stdId);		
						
						ResultSet result = stmt.executeQuery();
						
						
						if(result.next()) {
							InputStream imageStream = result.getBinaryStream("image");
							Image img = new Image(imageStream);
							imageViewJSSResult2.setImage(img);
						}
						else {
							imageViewJSSResult2.setImage(null);
						}
					
						result.close();
						stmt.close();
						conn.close();
					}
					catch(SQLException io) {
						idNoJSS_LBL2.setText(io.getMessage());
						imageViewJSSResult2.setImage(null);
					}
				}
				catch(SQLException eq) {
					idNoJSS_LBL2.setText(eq.getMessage());
					imageViewJSSResult2.setImage(null);
				}
			}
		catch(Exception e) {
			idNoJSS_LBL2.setText(e.getMessage());
			imageViewJSSResult2.setImage(null);
		}
				
	}
	
	//Offline JSS result printing
	@FXML private Button JSS_PrintResultBtn2, JSS_SpoolResultButton2;
	@FXML private SplitPane printPane4_2;
	@FXML public void JSS_PrintResultButton2(ActionEvent even) {
		returntoKusakiGrtHomeJSS2.setVisible(false);
		JSS_PrintResultBtn2.setVisible(false);
		JSS_SpoolResultButton2.setVisible(false);
		yearJSS_LBL2.setVisible(false);
		termJSS_LBL2.setVisible(false);
		try {
			printNode(printPane4_2);
		}
		catch(Exception exception) {
			studentNumberTF2.setText("Print Error: "+ exception.getLocalizedMessage());
		}
		finally {
			returntoKusakiGrtHomeJSS2.setVisible(true);
			JSS_PrintResultBtn2.setVisible(true);
			JSS_SpoolResultButton2.setVisible(true);
			yearJSS_LBL2.setVisible(true);
			termJSS_LBL2.setVisible(true);
		}
	}
	
	//Annual offline result processing
	//Annual Result
	@FXML public void annual_initialize_offline(MouseEvent event) {
		//yearAnnual_LBL2.setItems(years);
		populateYear(yearAnnual_LBL2);
	}
	
	//Generate Annual Results Controller
	@FXML private TableView<AnnualScoresDataTable> annualScoresDataTable2;	
	@FXML private Label nameAnnual_LBL2, classAnnual_LBL2, noInClassAnnual_LBL2, ageAnnual_LBL2, 
		stdTermAnnual_LBL2, sessionAnnual_LBL2, noSchoolDaysYear, noPresentsYear, noAbsentsYear;
	@FXML private Label sexAnnual_LBL2, totalScoreAnnual_LBL2, avgAnnual_LBL2, overAllPositionAnnual_LBL2, 
		outOfAnnual_LBL2, annualCadre_LBL2;
	
	@FXML private ComboBox<String> yearAnnual_LBL2;
	
	@FXML
	TableColumn<AnnualScoresDataTable,String> annualSubjectCol2, annualFirstTermCol2, annualSecondTermCol2, 
		annualThirdTermCol2, annualTotalCol2, annualClassAvgCol2, annualClassHighestCol2,  
		annualClassLowestCol2, annualGradeCol2, annualPositionCol2, annualRemarksCol2; 
	
	@FXML private TextField idNoAnnual_LBL2; 
	
	@SuppressWarnings({ "rawtypes", "unchecked" })
	@FXML
	public void annual_SpoolResultActionButton2(ActionEvent event) {
		
		String stdNo = idNoAnnual_LBL2.getText().trim().toUpperCase();
		String year = yearAnnual_LBL2.getValue();
		LinkedList<String> DataSet = new LinkedList<>();
		DecimalFormat fm = new DecimalFormat("#.00");
		
		ObservableList<AnnualScoresDataTable> data = FXCollections.observableArrayList();
		
		Vector<AnnualScoresTotal> DataPosition = new Vector<>();
		
		String stdClassVal;
		
		try{
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory
					("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			Students std = entitymanager.find(Students.class, stdNo);
			
			AnnualClassResults rez = entitymanager.find(AnnualClassResults.class, stdNo+year);
			
			//String stdClassId = std.getEntryClassAssigned();
			noSchoolDaysYear.setText(String.valueOf(rez.getNoDaysInTerm())); 
			noPresentsYear.setText(String.valueOf(rez.getNoDaysPresent()));
			noAbsentsYear.setText(String.valueOf(rez.getNoDaysAbsent()));
			
			nameAnnual_LBL2.setText(std.getOtherNames()+" "+std.getSurName());
			sexAnnual_LBL2.setText(std.getSex());
			
			LocalDate dateAgeStr2 = std.getDateOfBirth();
			LocalDate currentDateStr = LocalDate.now();
			int diffDateStr = currentDateStr.getYear() - dateAgeStr2.getYear();
			ageAnnual_LBL2.setText(String.valueOf(diffDateStr));
			
			EntityManagerFactory emfactory33 = Persistence.createEntityManagerFactory
					("SchoolMgtSystem");
			EntityManager entitymanager33 = emfactory33.createEntityManager();
			entitymanager33.getTransaction().begin();
						
			stdClassVal = getStudentClassByStdNoYear(entitymanager33, stdNo, year);
			
			classAnnual_LBL2.setText(getPrimeClassReverse(stdClassVal));
			sessionAnnual_LBL2.setText(year);
			
			entitymanager33.getTransaction().commit();
			entitymanager33.close();
			emfactory33.close();
			
			if(stdClassVal.contains("JSS")) {
				annualCadre_LBL2.setText("ANNUAL ASSESSMENT SUMMARY (JSS)");
			}
			else {
				annualCadre_LBL2.setText("ANNUAL ASSESSMENT SUMMARY (SSS)");
			}
			
			LinkedHashSet<String> annualScoreSummary2 = new LinkedHashSet<>();
			LinkedHashSet<String> annualScoresSet2 = new LinkedHashSet<>();
			
			Vector<AnnualScoreSheetsSummary> AnnualScoreSheetsData = new Vector<>();
			Vector<AnnualScoresTotal> AnnualScoresTotalData = new Vector<>();
			
			//Annual
			Vector<AnnualScoreSheetsSummary> AnnualData = new Vector<>();
			
			String stdClass2 = getPrimeClass(stdClassVal);
			
			Vector<AnnualSubjectsResults> AnnualSubjResults = new Vector<>();
			Vector<AnnualClassResults> AnnualClassRes = new Vector<>();
			
			EntityManagerFactory emfactory333 = Persistence.createEntityManagerFactory
					("SchoolMgtSystem");
			EntityManager entitymanager333 = emfactory333.createEntityManager();
			entitymanager333.getTransaction().begin();
							
			AnnualSubjResults = getAnnualSubjectsResultsByIdClassSession(entitymanager333, stdNo, stdClass2, year);
			AnnualClassRes = getAnnualClassResultsByIdClassSession(entitymanager333, stdNo, stdClass2, year);
			
			entitymanager333.getTransaction().commit();
			entitymanager333.close();
			emfactory333.close();
			
			for(AnnualSubjectsResults result : AnnualSubjResults) {
				data.add(
					new AnnualScoresDataTable(
						result.getSubjectName(),
						fm.format(result.getFirstTerm()),
						fm.format(result.getSecondTerm()),
						fm.format(result.getThirdTerm()),
						fm.format(result.getTotal()),
						fm.format(result.getAnnualAvg()),
						fm.format(result.getClassHighest()),
						fm.format(result.getClassLowest()),
						result.getGrade(),
						result.getPosition(), 
						result.getRemark()
						));
			}
			
			for(AnnualClassResults result : AnnualClassRes) {
				
				outOfAnnual_LBL2.setText(String.valueOf(result.getNoInClass()));
				noInClassAnnual_LBL2.setText(String.valueOf(result.getNoInClass()));
				overAllPositionAnnual_LBL2.setText(result.getPosition());
			}
			
			double totalScoresResult = 0;
			int dataSize = data.size();
			
			for(AnnualScoresDataTable datum : data) {
				totalScoresResult += Double.parseDouble(datum.getAnnualTotal_Data());
			}
			String annualTotals = fm.format(totalScoresResult);
			String avgTotals = fm.format(totalScoresResult/(dataSize*3));
			
			totalScoreAnnual_LBL2.setText(annualTotals);
			avgAnnual_LBL2.setText(avgTotals);
			
			
			annualSubjectCol2.setCellValueFactory(new PropertyValueFactory("subjectName_Data"));
			annualFirstTermCol2.setCellValueFactory(new PropertyValueFactory("firstTerm_Data"));
			annualSecondTermCol2.setCellValueFactory(new PropertyValueFactory("secondTerm_Data"));
			annualThirdTermCol2.setCellValueFactory(new PropertyValueFactory("thirdTerm_Data"));
			annualTotalCol2.setCellValueFactory(new PropertyValueFactory("annualTotal_Data"));
			annualClassAvgCol2.setCellValueFactory(new PropertyValueFactory("annualClassAvg_Data"));
			annualClassHighestCol2.setCellValueFactory(new PropertyValueFactory("annualClassHighest_Data"));
			annualClassLowestCol2.setCellValueFactory(new PropertyValueFactory("annualClassLowest_Data"));
			annualGradeCol2.setCellValueFactory(new PropertyValueFactory("annualGrade_Data"));
			annualPositionCol2.setCellValueFactory(new PropertyValueFactory("annualPosition_Data"));
			annualRemarksCol2.setCellValueFactory(new PropertyValueFactory("annualRemark_Data"));
			
			annualScoresDataTable2.setItems(data);
			
			entitymanager.getTransaction().commit();
			entitymanager.close();
			emfactory.close();
			
		}	
		catch(Exception e) {
			idNoAnnual_LBL2.setText("Error: " + e.getLocalizedMessage());
			annualScoresDataTable2.setItems(null);
			nameAnnual_LBL2.setText(null);
			sexAnnual_LBL2.setText(null);
			ageAnnual_LBL2.setText(null);
			classAnnual_LBL2.setText(null);
			sessionAnnual_LBL2.setText(null);
			noInClassAnnual_LBL2.setText(null);
			totalScoreAnnual_LBL2.setText(null);
			avgAnnual_LBL2.setText(null);
			overAllPositionAnnual_LBL2.setText(null);
			outOfAnnual_LBL2.setText(null);
		}		
	}
	
	
	//print Annual student results
	@FXML private Button annual_PrintResultBtn2, annual_SpoolResultButton2;
	@FXML private SplitPane printPane5_2;
	@FXML public void annual_PrintResultButton2(ActionEvent even) {
		returntoKusakiGrtHomeAnnual2.setVisible(false);
		annual_PrintResultBtn2.setVisible(false);
		annual_SpoolResultButton2.setVisible(false);
		yearAnnual_LBL2.setVisible(false);
		try {
			printNode(printPane5_2);
		}
		catch(Exception exception) {
			idNoAnnual_LBL2.setText("Print Error: "+ exception.getLocalizedMessage());
		}
		finally {
			returntoKusakiGrtHomeAnnual2.setVisible(true);
			annual_PrintResultBtn2.setVisible(true);
			annual_SpoolResultButton2.setVisible(true);
			yearAnnual_LBL2.setVisible(true);
		}
	}
	
	//Calendar Management and Attendance System
	@FXML private ComboBox<String> calendarYear;
	@FXML private TextField calendarName, calendarDisp;
	@FXML private TextArea calendarDescription;
	@FXML private DatePicker calendarYearBegins, calendarYearEnds;
	@FXML private TableView<AcademicSessionDataTable> academicSessionDataTable;
	@FXML private TableColumn<AcademicSessionDataTable,String> eventCol, timeCol;
	
	@FXML public void calendarInit(MouseEvent event) {
		calendarYear.setItems(years);
	}
	
	@FXML public void createCalendarYearButton(ActionEvent event) {
		try {
			String year = calendarYear.getValue();
			String cName = calendarName.getText().trim().toUpperCase();
			String cDesc = calendarDescription.getText();
			LocalDate yBegins = calendarYearBegins.getValue();
			LocalDate yEnds = calendarYearEnds.getValue();
			LocalDate date = LocalDate.now();
			String user = dispName;
			int noDaysYr = (int)(yEnds.toEpochDay() - yBegins.toEpochDay());
			
			if(year.trim().length() == 4 && cName.trim().length() != 0) {
				CreateAcademicSession session = new CreateAcademicSession();
				try {
					
					session.createAcademicSession(year, cName, cDesc, yBegins,
							yEnds, date, date, user, user, noDaysYr, 0);
					
					calendarDisp.setText("SUCCESS - Transaction Completed!");
				}
				catch(Exception e2) {
					Alert alert = new Alert(Alert.AlertType.INFORMATION);
					alert.setContentText("Entity Error: "+ e2.getMessage());
					Optional<ButtonType> result = alert.showAndWait();
					if(result.get() == ButtonType.OK) {
						alert.close();
					}
					else {
						alert.close();
					}
					calendarDisp.setText("FAILURE - Transaction Fail!");
				}
				finally {
					calendarName.clear();
					calendarDescription.clear();
					calendarYearBegins.setValue(LocalDate.now());
					calendarYearEnds.setValue(LocalDate.now());
				}
			}
			else {
				Alert alert = new Alert(Alert.AlertType.INFORMATION);
				alert.setContentText("Calendar Year and Name cannot be empty...");
				Optional<ButtonType> result = alert.showAndWait();
				if(result.get() == ButtonType.OK) {
					alert.close();
				}
				else {
					alert.close();
				}
			}
		}
		catch(Exception e) {
			Alert alert = new Alert(Alert.AlertType.ERROR);
			alert.setContentText("Error: "+ e.getMessage());
			Optional<ButtonType> result = alert.showAndWait();
			if(result.get() == ButtonType.OK) {
				alert.close();
			}
			else {
				alert.close();
			}
		}
	}
	
	@FXML public void updateCalendarYearButton(ActionEvent event) {
		try {
			String year = calendarYear.getValue();
			String cName = calendarName.getText().trim().toUpperCase();
			String cDesc = calendarDescription.getText();
			LocalDate yBegins = calendarYearBegins.getValue();
			LocalDate yEnds = calendarYearEnds.getValue();
			LocalDate date = LocalDate.now();
			String user = dispName;
			int noDaysYr = (int)(yEnds.toEpochDay() - yBegins.toEpochDay());
			
			if(year.trim().length() == 4 && cName.trim().length() != 0) {
				UpdateAcademicSession session = new UpdateAcademicSession();
				try {
					
					session.updateAcademicSession(year, cName, cDesc, yBegins,
							yEnds, date, date, user, user, noDaysYr, 0);
					
					calendarDisp.setText("SUCCESS - Transaction Completed!");
				}
				catch(Exception e2) {
					Alert alert = new Alert(Alert.AlertType.INFORMATION);
					alert.setContentText("Entity Error: "+ e2.getMessage());
					Optional<ButtonType> result = alert.showAndWait();
					if(result.get() == ButtonType.OK) {
						alert.close();
					}
					else {
						alert.close();
					}
					calendarDisp.setText("FAILURE - Transaction Fail!");
				}
				finally {
					calendarName.clear();
					calendarDescription.clear();
					calendarYearBegins.setValue(LocalDate.now());
					calendarYearEnds.setValue(LocalDate.now());
				}
			}
			else {
				Alert alert = new Alert(Alert.AlertType.INFORMATION);
				alert.setContentText("Calendar Year and Name cannot be empty...");
				Optional<ButtonType> result = alert.showAndWait();
				if(result.get() == ButtonType.OK) {
					alert.close();
				}
				else {
					alert.close();
				}
			}
		}
		catch(Exception e) {
			Alert alert = new Alert(Alert.AlertType.ERROR);
			alert.setContentText("Error: "+ e.getMessage());
			Optional<ButtonType> result = alert.showAndWait();
			if(result.get() == ButtonType.OK) {
				alert.close();
			}
			else {
				alert.close();
			}
		}
	}
	
	@FXML public void deleteCalendarYearButton(ActionEvent event) {
		
		String year = calendarYear.getValue();
		
		if(true) {
			Alert alertT = new Alert(Alert.AlertType.CONFIRMATION);
			alertT.setContentText("You are about to delete "+year+ " academic session! "
					+ "Note that this action is irreversible!");
			Optional<ButtonType> resultT = alertT.showAndWait();
			if(resultT.get() == ButtonType.OK) {
				try {
					
					if(year.trim().length() == 4) {
						
						Vector<AcademicTerm> termVals = new Vector<>();
						Vector<AcademicHoliday> holVals = new Vector<>();
						Vector<AcademicAssessment> acadAssess = new Vector<>();
						Vector<SchoolAttendance> skulAttendx = new Vector<>();
								
						EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
						EntityManager entitymanager = emfactory.createEntityManager();
						entitymanager.getTransaction().begin();
						
						termVals = getAcademicTermByYear(entitymanager, year);
						holVals = getAcademicHolsByYear(entitymanager, year);
						acadAssess = getAcademicAssessmentByYear(entitymanager, year);
						skulAttendx = getAcademicSchoolAttendanceByYear(entitymanager, year);
							
						entitymanager.getTransaction().commit();
						
						entitymanager.close();
						emfactory.close();
						
						LinkedHashSet<String> set = new LinkedHashSet<>();
						LinkedHashSet<String> set2 = new LinkedHashSet<>();
						LinkedHashSet<String> set3 = new LinkedHashSet<>();
						LinkedHashSet<String> set4 = new LinkedHashSet<>();
						
						for(AcademicTerm act : termVals) {
							set.add(act.getATID());
						}
						
						for(AcademicHoliday ach : holVals) {
							set2.add(ach.getAhid());
						}
						
						for(AcademicAssessment ass : acadAssess) {
							set3.add(ass.getAid());
						}
						
						for(SchoolAttendance attx : skulAttendx) {
							set4.add(attx.getSaId());
						}
						

						Alert alertHol = new Alert(Alert.AlertType.CONFIRMATION);
						alertHol.setContentText("You about to delete the holidays for the "+ year+ " session..."
								+ " Click OK to continue and Cancel to skip this step");
						Optional<ButtonType> resultHol = alertHol.showAndWait();
						if(resultHol.get() == ButtonType.OK) {
							//code here
							DeleteAcademicHoliday delHol = new DeleteAcademicHoliday();
							for(String x : set2) {
								try {
									delHol.deleteAcademicHoliday(x);
								}
								catch(Exception exc) {
									exc.printStackTrace();
								}
							}
						}
						else {
							alertHol.close();
						}
						
						Alert alertAss = new Alert(Alert.AlertType.CONFIRMATION);
						alertAss.setContentText("You about to delete the assessments for the "+ year+ " session..."
								+ " Click OK to continue and Cancel to skip this step");
						Optional<ButtonType> resultAss = alertAss.showAndWait();
						if(resultAss.get() == ButtonType.OK) {
							//code here
							DeleteAcademicAssessment delAss = new DeleteAcademicAssessment();
							for(String x : set3) {
								try {
									delAss.deleteAcademicAssessment(x);
								}
								catch(Exception exc) {
									exc.printStackTrace();
								}
							}
							
						}
						else {
							alertAss.close();
						}
						
						Alert alertAttx = new Alert(Alert.AlertType.CONFIRMATION);
						alertAttx.setContentText("You about to delete school attendance records for the "+year+" session..."
								+ " Click OK to continue and Cancel to skip this step");
						Optional<ButtonType> resultAttx = alertAttx.showAndWait();
						if(resultAttx.get() == ButtonType.OK) {
							//code here
							DeleteSchoolAttendance delAttx = new DeleteSchoolAttendance();
							for(String x : set4) {
								try {
									delAttx.deleteSchoolAttendance(x);
								}
								catch(Exception exc) {
									exc.printStackTrace();
								}
							}
						}
						else {
							alertAttx.close();
						}
						
						Alert alertTerm = new Alert(Alert.AlertType.CONFIRMATION);
						alertTerm.setContentText("You about to delete the terms for the "+year+" session..."
								+ " Click OK to continue and Cancel to skip this step");
						Optional<ButtonType> resultTerm = alertTerm.showAndWait();
						if(resultTerm.get() == ButtonType.OK) {
							//code here
							DeleteAcademicTerm delTerm = new DeleteAcademicTerm();
							for(String x : set) {
								try {
									delTerm.deleteAcademicTerm(x);
								}
								catch(Exception exc) {
									exc.printStackTrace();
								}
							}
						}
						else {
							alertTerm.close();
						}
						
						
						DeleteAcademicSession session = new DeleteAcademicSession();
						try {
							
							session.deleteAcademicSession(year);
							
							calendarDisp.setText("SUCCESS - Transaction Completed!");
						}
						catch(Exception e2) {
							Alert alert = new Alert(Alert.AlertType.INFORMATION);
							alert.setContentText("Entity Error: "+ e2.getMessage());
							Optional<ButtonType> result = alert.showAndWait();
							if(result.get() == ButtonType.OK) {
								alert.close();
							}
							else {
								alert.close();
							}
							calendarDisp.setText("FAILURE - Transaction Fail!");
						}
						finally {
							calendarName.clear();
							calendarDescription.clear();
							calendarYearBegins.setValue(LocalDate.now());
							calendarYearEnds.setValue(LocalDate.now());
						}
					}
					else {
						Alert alert2 = new Alert(Alert.AlertType.INFORMATION);
						alert2.setContentText("Calendar Year cannot be empty...");
						Optional<ButtonType> result2 = alert2.showAndWait();
						if(result2.get() == ButtonType.OK) {
							alert2.close();
						}
						else {
							alert2.close();
						}
					}
				}
				catch(Exception e) {
					Alert alert = new Alert(Alert.AlertType.ERROR);
					alert.setContentText("Error: "+ e.getMessage());
					Optional<ButtonType> result = alert.showAndWait();
					if(result.get() == ButtonType.OK) {
						alert.close();
					}
					else {
						alert.close();
					}
				}
			}
			else {
				alertT.close();
			}
		}
	}
	
	@FXML public void findCalendarYearButton(ActionEvent event) {
		try {
			String year = calendarYear.getValue();
			
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			AcademicSession session = entitymanager.find(AcademicSession.class, year);
			
			calendarName.setText(session.getYearName());
			calendarDescription.setText(session.getDescription());
			calendarYearBegins.setValue(session.getYearBegins());
			calendarYearEnds.setValue(session.getYearEnds());
				
			entitymanager.getTransaction().commit();
			
			entitymanager.close();
			emfactory.close();
			
			populateEventTimeTable(year, academicSessionDataTable, eventCol, timeCol);
		}
		catch(Exception e) {
			Alert alert = new Alert(Alert.AlertType.ERROR);
			alert.setContentText("Find Error: "+ e.getMessage());
			Optional<ButtonType> result = alert.showAndWait();
			if(result.get() == ButtonType.OK) {
				alert.close();
			}
			else {
				alert.close();
			}
			calendarDisp.setText("FAILURE - Transaction Fail!");
			calendarName.clear();
			calendarDescription.clear();
			calendarYearBegins.setValue(LocalDate.now());
			calendarYearEnds.setValue(LocalDate.now());
		}
	}
	
	public void populateEventTimeTable(String year, TableView<AcademicSessionDataTable> tableView, 
			TableColumn<AcademicSessionDataTable,String> event, TableColumn<AcademicSessionDataTable,String> time) {
		ObservableList<AcademicSessionDataTable> data = FXCollections.observableArrayList();
		Vector<AcademicSession> sessionVal = new Vector<>();
		
		try {
			EntityManagerFactory emfactory33 = Persistence.createEntityManagerFactory
					("SchoolMgtSystem");
			EntityManager entitymanager33 = emfactory33.createEntityManager();
			entitymanager33.getTransaction().begin();
						
			sessionVal = getAcademicSession(entitymanager33);
						
			entitymanager33.getTransaction().commit();
			entitymanager33.close();
			emfactory33.close();
			
			for(AcademicSession yr : sessionVal) {
				if(yr.getYearId().equals(year)) {
					for(AcademicSession yr2 : sessionVal) {
						
						if(yr.getYearId().equals(yr2.getYearId())) {
							data.add(new AcademicSessionDataTable("Academic Session", yr2.getYearId()));
							data.add(new AcademicSessionDataTable("Session", yr2.getYearName()));
							data.add(new AcademicSessionDataTable("Description", yr2.getDescription()));
							data.add(new AcademicSessionDataTable("Session Begins", yr2.getYearBegins().toString()));
							data.add(new AcademicSessionDataTable("Session Ends", yr2.getYearEnds().toString()));
							data.add(new AcademicSessionDataTable("No of Days in the Session", String.valueOf(yr2.getNoOfDaysInYr())));
							data.add(new AcademicSessionDataTable("No of Academic Days", String.valueOf(yr2.getNoOfPossibleAttendanceYr())));
						}
					}
				}
			}
			
			event.setCellValueFactory(new PropertyValueFactory("event_Data"));
			time.setCellValueFactory(new PropertyValueFactory("time_Data"));
			
			tableView.setItems(data);
		}
		catch(Exception e) {
			e.printStackTrace();
		}
		
	}
	
	//getAcademicSession
	public Vector<AcademicSession> getAcademicSession(EntityManager em) {
		TypedQuery<AcademicSession> query = em.createQuery(
				"select e from AcademicSession e ", AcademicSession.class);
		
		return (Vector<AcademicSession>) query.getResultList();
	}
	
	//getAcademic term
	public Vector<AcademicTerm> getAcademicTerm(EntityManager em) {
		TypedQuery<AcademicTerm> query = em.createQuery(
				"select e from AcademicTerm e ", AcademicTerm.class);
		
		return (Vector<AcademicTerm>) query.getResultList();
	}
	
	public Vector<AcademicTerm> getAcademicTermByTerm(EntityManager em, String term, String session) {
		TypedQuery<AcademicTerm> query = em.createQuery(
				"select e from AcademicTerm e "
				+ "where e.term = ?1 and "
				+ "e.session = ?2 ", AcademicTerm.class);
		
		query.setParameter(1, term);
		query.setParameter(2, session);
		
		return (Vector<AcademicTerm>) query.getResultList();
	}
	
	//get academic term by year
	public Vector<AcademicTerm> getAcademicTermByYear(EntityManager em, String session) {
		TypedQuery<AcademicTerm> query = em.createQuery(
				"select e from AcademicTerm e where "
				+ "e.session = ?1 ", AcademicTerm.class);
		
		query.setParameter(1, session);
		
		return (Vector<AcademicTerm>) query.getResultList();
	}
	
	//Academic Assessment by year
	public Vector<AcademicAssessment> getAcademicAssessmentByYear(EntityManager em, String year) {
		TypedQuery<AcademicAssessment> query = em.createQuery(
				"select e from AcademicAssessment e where "
				+ "e.year = ?1 ", AcademicAssessment.class);
		
		query.setParameter(1, year);
		
		return (Vector<AcademicAssessment>) query.getResultList();
	}
	
	//SchoolAttendance by year
	public Vector<SchoolAttendance> getAcademicSchoolAttendanceByYear(EntityManager em, String year) {
		TypedQuery<SchoolAttendance> query = em.createQuery(
				"select e from SchoolAttendance e where "
				+ "e.year = ?1 ", SchoolAttendance.class);
		
		query.setParameter(1, year);
		
		return (Vector<SchoolAttendance>) query.getResultList();
	}
	
	//get academic hols by year
	public Vector<AcademicHoliday> getAcademicHolsByYear(EntityManager em, String year) {
		TypedQuery<AcademicHoliday> query = em.createQuery(
				"select e from AcademicHoliday e where "
				+ "e.year = ?1 ", AcademicHoliday.class);
		
		query.setParameter(1, year);
		
		return (Vector<AcademicHoliday>) query.getResultList();
	}
	
	//Academic Term
	@FXML private ComboBox<String> cTerm_year, cTerm_term, cTerm_ATID;
	@FXML private DatePicker cTermBegins, cTermEnds;
	@FXML private TextArea cTermDisplay;
	
	//ObservableList<String> yearList = FXCollections.observableArrayList();
	ObservableList<String> atidList = FXCollections.observableArrayList();
	
	@FXML public void cTermInit(MouseEvent event) {
		populateYear(cTerm_year);
		
		cTerm_term.setItems(termN);
	}
	
	@FXML public void cTermInit2(MouseEvent event) {
		populateTerm(atidList, cTerm_ATID);
	}
	
	@FXML public void createCalendarTermButton(ActionEvent event) {
		try {
			String session = cTerm_year.getValue();
			String term = cTerm_term.getValue();
			String atid = session + term;
			LocalDate termBeginsDate = cTermBegins.getValue();
			LocalDate termEndsDate = cTermEnds.getValue();
			LocalDate date = LocalDate.now();
			LocalDate lastUpdateDate = LocalDate.now();
			String user = dispName;
			String lastUpdateUser = dispName;
			int noWeeks = (int)((termEndsDate.toEpochDay() - termBeginsDate.toEpochDay())/7);
			int noDays = (int)(termEndsDate.toEpochDay() - termBeginsDate.toEpochDay());
			int noSchoolDays = noDays - (noWeeks * 2);
			int noHoDays = 0;
			int noDaysToDate = (int)(date.toEpochDay() - termBeginsDate.toEpochDay());
			
			int oldNoSchoolDaysTerm = 0;
			int oldNoSchoolDaysYear = 0;
			
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			try {
				oldNoSchoolDaysTerm = getAcademicTermSchoolDays(entitymanager, atid);
			}
			catch(Exception ex) {
				ex.printStackTrace();
			}
			try {
				oldNoSchoolDaysYear = getAcademicTermSchoolDays_sumSession(entitymanager, session);
			}
			catch(Exception ex2) {
				ex2.printStackTrace();
			}
				
			entitymanager.getTransaction().commit();
			
			entitymanager.close();
			emfactory.close();
			
			if(session.trim().length() == 4 && term.trim().length() == 1 && 
					termEndsDate.isAfter(termBeginsDate)) {
				//remember to update academicsession with noDays
				CreateAcademicTerm acTerm = new CreateAcademicTerm();
				try {
					acTerm.createAcademicTerm(atid, session, term, user, lastUpdateUser, 
							termBeginsDate, termEndsDate, date, lastUpdateDate, noWeeks, 
							noDays, noSchoolDays, noHoDays, noDaysToDate);
					
					//Update Academic Session
					UpdateAcademicSession acSession = new UpdateAcademicSession();
					try {
						acSession.updateAcadSession(session, lastUpdateUser, lastUpdateDate, 
								((oldNoSchoolDaysYear - oldNoSchoolDaysTerm) + noSchoolDays));
					}
					catch(Exception e3) {
						e3.printStackTrace();
						Alert alert = new Alert(Alert.AlertType.ERROR);
						alert.setContentText("Update Session Error: "+ e3.getMessage());
						Optional<ButtonType> result = alert.showAndWait();
						if(result.get() == ButtonType.OK) {
							alert.close();
						}
						else {
							alert.close();
						}
					}
					
					cTermDisplay.setText("SUCCESS - Transaction Completed!");
				}
				catch(Exception e2) {
					e2.printStackTrace();
					Alert alert = new Alert(Alert.AlertType.ERROR);
					alert.setContentText("Create Term Error: "+ e2.getMessage());
					Optional<ButtonType> result = alert.showAndWait();
					if(result.get() == ButtonType.OK) {
						alert.close();
					}
					else {
						alert.close();
					}
				}
				finally {
					
				}
			}
			else {
				Alert alert = new Alert(Alert.AlertType.INFORMATION);
				alert.setContentText("Calendar Session and Term cannot be empty...");
				Optional<ButtonType> result = alert.showAndWait();
				if(result.get() == ButtonType.OK) {
					alert.close();
				}
				else {
					alert.close();
				}
			}
		}
		catch(Exception e) {
			e.printStackTrace();
			Alert alert = new Alert(Alert.AlertType.ERROR);
			alert.setContentText("Error: "+ e.getMessage());
			Optional<ButtonType> result = alert.showAndWait();
			if(result.get() == ButtonType.OK) {
				alert.close();
			}
			else {
				alert.close();
			}
		}
	}
	
	@FXML public void updateCalendarTermButton(ActionEvent event) {
		try {
			String session = cTerm_year.getValue();
			String term = cTerm_term.getValue();
			String atid = session + term;
			LocalDate termBeginsDate = cTermBegins.getValue();
			LocalDate termEndsDate = cTermEnds.getValue();
			LocalDate date = LocalDate.now();
			LocalDate lastUpdateDate = LocalDate.now();
			String user = dispName;
			String lastUpdateUser = dispName;
			int noWeeks = (int)((termEndsDate.toEpochDay() - termBeginsDate.toEpochDay())/7);
			int noDays = (int)(termEndsDate.toEpochDay() - termBeginsDate.toEpochDay());
			int noSchoolDays = noDays - (noWeeks * 2);
			int noHoDays = 0;
			int noDaysToDate = (int)(date.toEpochDay() - termBeginsDate.toEpochDay());
			int oldNoSchoolDaysTerm;
			int oldNoSchoolDaysYear;
			
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			oldNoSchoolDaysTerm = getAcademicTermSchoolDays(entitymanager, atid);
			oldNoSchoolDaysYear = getAcademicTermSchoolDays_sumSession(entitymanager, session);
				
			entitymanager.getTransaction().commit();
			
			entitymanager.close();
			emfactory.close();
			
			if(session.trim().length() == 4 && term.trim().length() == 1 && 
					termEndsDate.isAfter(termBeginsDate)) {
				
				UpdateAcademicTerm acTerm = new UpdateAcademicTerm();
				
				try {
					acTerm.updateAcademicTerm(atid, session, term, user, lastUpdateUser, 
							termBeginsDate, termEndsDate, date, lastUpdateDate, noWeeks, 
							noDays, noSchoolDays, noHoDays, noDaysToDate);
					
					//Update Academic Session
					UpdateAcademicSession acSession = new UpdateAcademicSession();
					try {
						acSession.updateAcadSession(session, lastUpdateUser, lastUpdateDate, 
								((oldNoSchoolDaysYear - oldNoSchoolDaysTerm) + noSchoolDays));
					}
					catch(Exception e3) {
						e3.printStackTrace();
						Alert alert = new Alert(Alert.AlertType.ERROR);
						alert.setContentText("Update Session Error: "+ e3.getMessage());
						Optional<ButtonType> result = alert.showAndWait();
						if(result.get() == ButtonType.OK) {
							alert.close();
						}
						else {
							alert.close();
						}
					}
					
					cTermDisplay.setText("SUCCESS - Transaction Completed!");
				}
				catch(Exception e2) {
					e2.printStackTrace();
					Alert alert = new Alert(Alert.AlertType.ERROR);
					alert.setContentText("Create Term Error: "+ e2.getMessage());
					Optional<ButtonType> result = alert.showAndWait();
					if(result.get() == ButtonType.OK) {
						alert.close();
					}
					else {
						alert.close();
					}
				}
				finally {
					
				}
			}
			else {
				Alert alert = new Alert(Alert.AlertType.INFORMATION);
				alert.setContentText("Calendar Session and Term cannot be empty...");
				Optional<ButtonType> result = alert.showAndWait();
				if(result.get() == ButtonType.OK) {
					alert.close();
				}
				else {
					alert.close();
				}
			}
		}
		catch(Exception e) {
			e.printStackTrace();
			Alert alert = new Alert(Alert.AlertType.ERROR);
			alert.setContentText("Error: "+ e.getMessage());
			Optional<ButtonType> result = alert.showAndWait();
			if(result.get() == ButtonType.OK) {
				alert.close();
			}
			else {
				alert.close();
			}
		}
	}
	
	@FXML public void findCalendarTermButton(ActionEvent event) {
		try {
			String atid = cTerm_ATID.getValue();
			String term;
			String session;
			
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			AcademicTerm acTerm = entitymanager.find(AcademicTerm.class, atid);
			term = acTerm.getTerm();
			session = acTerm.getSession();
			
			cTerm_year.setValue(acTerm.getSession());
			cTerm_term.setValue(acTerm.getTerm());
			cTermBegins.setValue(acTerm.getTermBegins());
			cTermEnds.setValue(acTerm.getTermEnds());
							
			entitymanager.getTransaction().commit();
			
			entitymanager.close();
			emfactory.close();
			
			populateEventTimeTableTerm(atid, term, session, academicSessionDataTable, eventCol, timeCol);
		}
		catch(Exception e) {
			Alert alert = new Alert(Alert.AlertType.ERROR);
			alert.setContentText("Find Error: "+ e.getMessage());
			Optional<ButtonType> result = alert.showAndWait();
			if(result.get() == ButtonType.OK) {
				alert.close();
			}
			else {
				alert.close();
			}
			cTermDisplay.setText("FAILURE - Transaction Fail!");
			//cTerm_year.setValue("");
			//cTerm_term.setValue("");
			cTermBegins.setValue(LocalDate.now());
			cTermEnds.setValue(LocalDate.now());
		}
	}
	
	@FXML public void deleteCalendarTermButton(ActionEvent event) {
		String atid = cTerm_ATID.getValue();
		String session = "";
		
		if(true) {
			Alert alertT = new Alert(Alert.AlertType.CONFIRMATION);
			alertT.setContentText("You are about to delete "+atid+ " academic term! "
					+ "Note that this action is irreversible!");
			Optional<ButtonType> resultT = alertT.showAndWait();
			if(resultT.get() == ButtonType.OK) {
				
				int oldNoSchoolDaysTerm = 0;
				int oldNoSchoolDaysYear = 0;
				
				EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
				EntityManager entitymanager = emfactory.createEntityManager();
				entitymanager.getTransaction().begin();
				
				AcademicTerm acTerm2 = entitymanager.find(AcademicTerm.class, atid);
				
				session = acTerm2.getSession();
				
				try {
					oldNoSchoolDaysTerm = getAcademicTermSchoolDays(entitymanager, atid);
				}
				catch(Exception ex) {
					ex.printStackTrace();
				}
				try {
					oldNoSchoolDaysYear = getAcademicTermSchoolDays_sumSession(entitymanager, session);
				}
				catch(Exception ex2) {
					ex2.printStackTrace();
				}
					
				entitymanager.getTransaction().commit();
				
				entitymanager.close();
				emfactory.close();
				
				try {
					
					if(atid.trim().length() == 5) {
						
						//Update Academic Session
						UpdateAcademicSession acSession = new UpdateAcademicSession();
						try {
							acSession.updateAcadSession(session, dispName, LocalDate.now(), 
									(oldNoSchoolDaysYear - oldNoSchoolDaysTerm));
						}
						catch(Exception e3) {
							e3.printStackTrace();
						}
						
						DeleteAcademicTerm del = new DeleteAcademicTerm();
						try {
							
							del.deleteAcademicTerm(atid);
							
							cTermDisplay.setText("SUCCESS - Transaction Completed!");
						}
						catch(Exception e2) {
							Alert alert = new Alert(Alert.AlertType.INFORMATION);
							alert.setContentText("Entity Error: "+ e2.getMessage());
							Optional<ButtonType> result = alert.showAndWait();
							if(result.get() == ButtonType.OK) {
								alert.close();
							}
							else {
								alert.close();
							}
							cTermDisplay.setText("FAILURE - Transaction Fail!");
						}
						finally {
							cTerm_year.setValue("");
							cTerm_term.setValue("");
							cTermBegins.setValue(LocalDate.now());
							cTermEnds.setValue(LocalDate.now());
						}
					}
					else {
						Alert alert2 = new Alert(Alert.AlertType.INFORMATION);
						alert2.setContentText("Calendar ATID/Find cannot be empty...");
						Optional<ButtonType> result2 = alert2.showAndWait();
						if(result2.get() == ButtonType.OK) {
							alert2.close();
						}
						else {
							alert2.close();
						}
					}
				}
				catch(Exception e) {
					Alert alert = new Alert(Alert.AlertType.ERROR);
					alert.setContentText("Error: "+ e.getMessage());
					Optional<ButtonType> result = alert.showAndWait();
					if(result.get() == ButtonType.OK) {
						alert.close();
					}
					else {
						alert.close();
					}
				}
			}
			else {
				alertT.close();
			}
		}
	}
	
	//populate term timetable
	public void populateEventTimeTableTerm(String atid, String term, String session, TableView<AcademicSessionDataTable> tableView, 
			TableColumn<AcademicSessionDataTable,String> event, TableColumn<AcademicSessionDataTable,String> time) {
		ObservableList<AcademicSessionDataTable> data = FXCollections.observableArrayList();
		Vector<AcademicTerm> termVal = new Vector<>();
		
		try {			
			EntityManagerFactory emfactory33 = Persistence.createEntityManagerFactory
					("SchoolMgtSystem");
			EntityManager entitymanager33 = emfactory33.createEntityManager();
			entitymanager33.getTransaction().begin();
									
			termVal = getAcademicTermByTerm(entitymanager33, term, session);
						
			entitymanager33.getTransaction().commit();
			entitymanager33.close();
			emfactory33.close();
			
			for(AcademicTerm yr : termVal) {
				if(yr.getATID().equals(atid)) {
					for(AcademicTerm yr2 : termVal) {
						
						if(yr.getATID().equals(atid)) {
							data.add(new AcademicSessionDataTable("Academic Session", yr2.getSession()));
							data.add(new AcademicSessionDataTable("Term", yr2.getTerm()));
							data.add(new AcademicSessionDataTable("Term Begins", yr2.getTermBegins().toString()));
							data.add(new AcademicSessionDataTable("Term Ends", yr2.getTermEnds().toString()));
							data.add(new AcademicSessionDataTable("No of Days in the Term", String.valueOf(yr2.getNoDaysInTerm())));
							data.add(new AcademicSessionDataTable("No of Academic Days", String.valueOf(yr2.getNoSchoolDays())));
							data.add(new AcademicSessionDataTable("No of Weeks", String.valueOf(yr2.getNoWeeksInTerm())));
							data.add(new AcademicSessionDataTable("No of Days at Today", String.valueOf(yr2.getNoDaysToday())));
						}
					}
				}
			}
			
			event.setCellValueFactory(new PropertyValueFactory("event_Data"));
			time.setCellValueFactory(new PropertyValueFactory("time_Data"));
			
			tableView.setItems(data);
		}
		catch(Exception e) {
			e.printStackTrace();
		}
		
	}
	
	//get no school days in the year
	public int getAcademicSessionSchoolDays(EntityManager em, String yearId) {
		TypedQuery<AcademicSession> query = em.createQuery(
				"select e from AcademicSession e where "
				+ "e.yearId = ?1  ", AcademicSession.class);
		query.setParameter(1, yearId);
		
		return query.getSingleResult().getNoOfPossibleAttendanceYr();
	}
	
	//get the no of school days
	public int getAcademicTermSchoolDays(EntityManager em, String ATID) {
		TypedQuery<AcademicTerm> query = em.createQuery(
				"select e from AcademicTerm e where "
				+ "e.ATID = ?1 ", AcademicTerm.class);
		query.setParameter(1, ATID);
		
		return query.getSingleResult().getNoSchoolDays();
	}
	
	//get no of holidays in a term
	public int getAcademicTermHoliDays(EntityManager em, String ATID) {
		TypedQuery<AcademicTerm> query = em.createQuery(
				"select e from AcademicTerm e where "
				+ "e.ATID = ?1 ", AcademicTerm.class);
		query.setParameter(1, ATID);
		
		return query.getSingleResult().getNoHolyDays();
	}
	
	//get summation of years
	public int getAcademicTermSchoolDays_sumSession(EntityManager em, String session) {
		TypedQuery<AcademicTerm> query = em.createQuery(
				"select e from AcademicTerm e where "
				+ "e.session = ?1 ", AcademicTerm.class);
		query.setParameter(1, session);
		
		Vector<AcademicTerm> sessionVal = (Vector<AcademicTerm>)query.getResultList();
		
		int sum = 0;
		for (AcademicTerm acTerm : sessionVal) {
			if(acTerm.getSession().equals(session)) {
				sum = sum + acTerm.getNoSchoolDays();
			}
		}
		
		return sum;
	}
	
	public int getAcademicTermHoliDays_sumSession(EntityManager em, String session) {
		TypedQuery<AcademicTerm> query = em.createQuery(
				"select e from AcademicTerm e where "
				+ "e.session = ?1 ", AcademicTerm.class);
		query.setParameter(1, session);
		
		Vector<AcademicTerm> sessionVal = (Vector<AcademicTerm>)query.getResultList();
		
		int sum = 0;
		for (AcademicTerm acTerm : sessionVal) {
			if(acTerm.getSession().equals(session)) {
				sum = sum + acTerm.getNoHolyDays();
			}
		}
		
		return sum;
	}
	
	public void populateYear(ComboBox<String> combo) {
		ObservableList<String> list = FXCollections.observableArrayList();
		try {
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			Vector<AcademicSession> userData = new Vector<>();
			Query queryX =
					entitymanager.createQuery("select e from AcademicSession e ");
			userData = (Vector<AcademicSession>) queryX.getResultList();
			
			for(AcademicSession x : userData) {
				if(!(list.contains(x.getYearId()))) {
					list.add(x.getYearId());
				}
			}
			
			combo.setItems(list);
			
			entitymanager.getTransaction().commit();
			entitymanager.close();
			emfactory.close();
			
			new AutoCompleteComboBoxListener<>(combo);
		}
		catch(Exception e) {
			e.printStackTrace();
		}
	}
	
	
	public void populateTerm(ObservableList<String> list, ComboBox<String> combo) {
		try {
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			Vector<AcademicTerm> userData = new Vector<>();
			Query queryX =
					entitymanager.createQuery("select e from AcademicTerm e ");
			userData = (Vector<AcademicTerm>) queryX.getResultList();
			
			for(AcademicTerm x : userData) {
				if(!(list.contains(x.getATID()))) {
					list.add(x.getATID());
				}
			}
			
			combo.setItems(list);
			
			entitymanager.getTransaction().commit();
			entitymanager.close();
			emfactory.close();
			
			new AutoCompleteComboBoxListener<>(combo);
		}
		catch(Exception e) {
			e.printStackTrace();
		}
	}
	
	public void populateHols(ObservableList<String> list, ComboBox<String> combo) {
		try {
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			Vector<AcademicHoliday> userData = new Vector<>();
			Query queryX =
					entitymanager.createQuery("select e from AcademicHoliday e ");
			userData = (Vector<AcademicHoliday>) queryX.getResultList();
			
			for(AcademicHoliday x : userData) {
				if(!(list.contains(x.getAhid()))) {
					list.add(x.getAhid());
				}
			}
			
			combo.setItems(list);
			
			entitymanager.getTransaction().commit();
			entitymanager.close();
			emfactory.close();
			
			new AutoCompleteComboBoxListener<>(combo);
		}
		catch(Exception e) {
			e.printStackTrace();
		}
	}
	
	public void populateAssessment(ObservableList<String> list, ComboBox<String> combo) {
		try {
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			Vector<AcademicAssessment> userData = new Vector<>();
			Query queryX =
					entitymanager.createQuery("select e from AcademicAssessment e ");
			userData = (Vector<AcademicAssessment>) queryX.getResultList();
			
			for(AcademicAssessment x : userData) {
				if(!(list.contains(x.getAid()))) {
					list.add(x.getAid());
				}
			}
			
			combo.setItems(list);
			
			entitymanager.getTransaction().commit();
			entitymanager.close();
			emfactory.close();
			
			new AutoCompleteComboBoxListener<>(combo);
		}
		catch(Exception e) {
			e.printStackTrace();
		}
	}
	
	//Create and manage Holidays
	@FXML private ComboBox<String> acadHolYear, acadHolTerm, acadHolName, acadHolType, acadHolHID;
	@FXML private DatePicker acadHolBegins, acadHolEnds;
	@FXML private TextArea acadHolDesc;
	@FXML private TextField acadHolDisp;
	
	ObservableList<String> holsName = FXCollections.observableArrayList("Worker's Day","Eid al-Fitr",
			"Democracy Day","Eid el Kabir","Independence Day","Id el Maulud","Christmas Day","Boxing Day",
			"Good Friday","Easter Monday","Industrial Action","Authorized Holiday","End of Term","Children's Day");
	ObservableList<String> holsType = FXCollections.observableArrayList("Public","Federal","State",
			"Local","Special","Terminal","Religious","Civil","Honourary");
	ObservableList<String> acadHols = FXCollections.observableArrayList();
	
	@FXML public void acadHolInit(MouseEvent event) {
		acadHolTerm.setItems(termN);
		acadHolName.setItems(holsName);
		acadHolType.setItems(holsType);
	}
	
	@FXML public void acadHolInit2(MouseEvent event) {
		populateYear(acadHolYear);
	}
	
	@FXML public void acadHolInit3(MouseEvent event) {
		populateHols(acadHols, acadHolHID);
	}
	
	@FXML public void calendarAcadHolsButton(ActionEvent event) {
		try {
			String year = acadHolYear.getValue();
			String term = acadHolTerm.getValue();
			String holName = acadHolName.getValue();
			String holType = acadHolType.getValue();
			String desc = acadHolDesc.getText();
			LocalDate holBegins = acadHolBegins.getValue();
			LocalDate holEnds = acadHolEnds.getValue();
			LocalDate date = LocalDate.now();
			LocalDate lastUpdDate = LocalDate.now();
			String user = dispName;
			String lastUpdUser = dispName;
			int noHoliDays = (int)(holEnds.toEpochDay() - holBegins.toEpochDay());
			String ahid = year + term + String.valueOf(date.toEpochDay()) + holName;
			
			LocalDate termBegins;
			LocalDate termEnds;
			
			EntityManagerFactory emf = Persistence.createEntityManagerFactory("SchoolMgtSystem");
			EntityManager entitymgr = emf.createEntityManager();
			entitymgr.getTransaction().begin();
			
			AcademicTerm at = entitymgr.find(AcademicTerm.class, year+term);
			
			termBegins = at.getTermBegins();
			termEnds = at.getTermEnds();
				
			entitymgr.getTransaction().commit();
			
			entitymgr.close();
			emf.close();
			
			
			if(year.trim().length() == 4 && term.trim().length() == 1 && 
					holName.trim().length() != 0 && holEnds.isAfter(holBegins) && 
					holBegins.isAfter(termBegins) && holBegins.isBefore(termEnds) && 
					holEnds.isAfter(termBegins) && holEnds.isBefore(termEnds)) {
				if(!(holType.equals("Terminal"))) {
					
					try {
						CreateAcademicHoliday hols = new CreateAcademicHoliday();
						
						hols.createAcademicHoliday(ahid, holName, desc, holType, year, 
								term, user, lastUpdUser, holBegins, holEnds, date, 
								lastUpdDate, noHoliDays);
						
						//update academicterm with no of hlidays --- year+term
						int oldNoSchoolDaysTerm = 0;
						int oldNoSchoolDaysYear = 0;
						int oldNoHoliDaysYear = 0;
						int oldNoHoliDaysTerm = 0;
						String session;
						String atid = year + term;
						
						EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
						EntityManager entitymanager = emfactory.createEntityManager();
						entitymanager.getTransaction().begin();
						
						AcademicTerm acTerm2 = entitymanager.find(AcademicTerm.class, atid);
						
						session = acTerm2.getSession();
						
						try {
							oldNoSchoolDaysTerm = getAcademicTermSchoolDays(entitymanager, atid);
						}
						catch(Exception ex) {
							ex.printStackTrace();
						}
						try {
							oldNoSchoolDaysYear = getAcademicTermSchoolDays_sumSession(entitymanager, session);
						}
						catch(Exception ex2) {
							ex2.printStackTrace();
						}
						
						try {
							oldNoHoliDaysYear = getAcademicTermHoliDays_sumSession(entitymanager, session);
						}
						catch(Exception ex3) {
							ex3.printStackTrace();
						}
						
						try {
							oldNoHoliDaysTerm = getAcademicTermHoliDays(entitymanager, atid);
						}
						catch(Exception ex4) {
							ex4.printStackTrace();
						}
							
						entitymanager.getTransaction().commit();
						
						entitymanager.close();
						emfactory.close();
						
						UpdateAcademicTerm acterm = new UpdateAcademicTerm();
						acterm.updateAcademicTermHols(atid, lastUpdUser, lastUpdDate, oldNoSchoolDaysTerm - noHoliDays, 
								noHoliDays);
						
						//update academicsession with no of holidays--- year
						UpdateAcademicSession acsession = new UpdateAcademicSession();
						acsession.updateAcadSession(year, lastUpdUser, lastUpdDate, oldNoSchoolDaysYear - noHoliDays);
						
						
						acadHolDisp.setText("SUCCESS - Transaction execute!");
					}
					catch(Exception ex) {
						ex.printStackTrace();
						acadHolDisp.setText("FAILURE - Transaction fail to execute!");
					}
					finally {
						acadHolType.setValue("");
						acadHolDesc.clear();
						acadHolBegins.setValue(LocalDate.now());
						acadHolEnds.setValue(LocalDate.now());
					}
					
				}
				else
				{
					try {
						CreateAcademicHoliday hols = new CreateAcademicHoliday();
						
						hols.createAcademicHoliday(ahid, holName, desc, holType, year, 
								term, user, lastUpdUser, holBegins, holEnds, date, 
								lastUpdDate, noHoliDays);
						
						acadHolDisp.setText("SUCCESS - Transaction execute!");
					}
					catch(Exception ex) {
						ex.printStackTrace();
						acadHolDisp.setText("FAILURE - Transaction fail to execute!");
					}
					finally {
						acadHolType.setValue("");
						acadHolDesc.clear();
						acadHolBegins.setValue(LocalDate.now());
						acadHolEnds.setValue(LocalDate.now());
					}
				}
			}
			else {
				Alert alert = new Alert(Alert.AlertType.INFORMATION);
				alert.setContentText("Year, Term, Holiday Name, Holiday begins "
						+ "and ends date cannot be empty... "
						+ "And/or holiday begins or ends date out of term range!");
				Optional<ButtonType> result = alert.showAndWait();
				if(result.get() == ButtonType.OK) {
					alert.close();
				}
				else {
					alert.close();
				}
			}
		}
		catch(Exception e) {
			e.printStackTrace();
			Alert alert = new Alert(Alert.AlertType.ERROR);
			alert.setContentText("Variables Error: "+ e.getMessage());
			Optional<ButtonType> result = alert.showAndWait();
			if(result.get() == ButtonType.OK) {
				alert.close();
			}
			else {
				alert.close();
			}
			acadHolDisp.setText("FAILURE - Transaction did not execute!");
		}
	}
	
	@FXML public void updateCalendarHolsButton(ActionEvent event) {
		try {
			String year = acadHolYear.getValue();
			String term = acadHolTerm.getValue();
			String holName = acadHolName.getValue();
			String holType = acadHolType.getValue();
			String desc = acadHolDesc.getText();
			LocalDate holBegins = acadHolBegins.getValue();
			LocalDate holEnds = acadHolEnds.getValue();
			LocalDate date = LocalDate.now();
			LocalDate lastUpdDate = LocalDate.now();
			String user = dispName;
			String lastUpdUser = dispName;
			int noHoliDays = (int)(holEnds.toEpochDay() - holBegins.toEpochDay());
			String ahid = year + term + String.valueOf(date.toEpochDay()) + holName;
			
			LocalDate termBegins;
			LocalDate termEnds;
			
			EntityManagerFactory emf = Persistence.createEntityManagerFactory("SchoolMgtSystem");
			EntityManager entitymgr = emf.createEntityManager();
			entitymgr.getTransaction().begin();
			
			AcademicTerm at = entitymgr.find(AcademicTerm.class, year+term);
			
			termBegins = at.getTermBegins();
			termEnds = at.getTermEnds();
				
			entitymgr.getTransaction().commit();
			
			entitymgr.close();
			emf.close();
			
			if(year.trim().length() == 4 && term.trim().length() == 1 && 
					holName.trim().length() != 0 && holEnds.isAfter(holBegins) && 
					holBegins.isAfter(termBegins) && holBegins.isBefore(termEnds) && 
					holEnds.isAfter(termBegins) && holEnds.isBefore(termEnds)) {
				if(!(holType.equals("Terminal"))) {
					
					try {
						UpdateAcademicHoliday hols = new UpdateAcademicHoliday();
						
						hols.updateAcademicHoliday(ahid, holName, desc, holType, year, 
								term, user, lastUpdUser, holBegins, holEnds, date, 
								lastUpdDate, noHoliDays);
						
						//update academicterm with no of hlidays --- year+term
						int oldNoSchoolDaysTerm = 0;
						int oldNoSchoolDaysYear = 0;
						int oldNoHoliDaysYear = 0;
						int oldNoHoliDaysTerm = 0;
						String session;
						String atid = year + term;
						
						EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
						EntityManager entitymanager = emfactory.createEntityManager();
						entitymanager.getTransaction().begin();
						
						AcademicTerm acTerm2 = entitymanager.find(AcademicTerm.class, atid);
						
						session = acTerm2.getSession();
						
						try {
							oldNoSchoolDaysTerm = getAcademicTermSchoolDays(entitymanager, atid);
						}
						catch(Exception ex) {
							ex.printStackTrace();
						}
						try {
							oldNoSchoolDaysYear = getAcademicTermSchoolDays_sumSession(entitymanager, session);
						}
						catch(Exception ex2) {
							ex2.printStackTrace();
						}
						
						try {
							oldNoHoliDaysYear = getAcademicTermHoliDays_sumSession(entitymanager, session);
						}
						catch(Exception ex3) {
							ex3.printStackTrace();
						}
						
						try {
							oldNoHoliDaysTerm = getAcademicTermHoliDays(entitymanager, atid);
						}
						catch(Exception ex4) {
							ex4.printStackTrace();
						}
							
						entitymanager.getTransaction().commit();
						
						entitymanager.close();
						emfactory.close();
						
						UpdateAcademicTerm acterm = new UpdateAcademicTerm();
						acterm.updateAcademicTermHols(atid, lastUpdUser, lastUpdDate, 
								(oldNoSchoolDaysTerm + oldNoHoliDaysTerm) - noHoliDays, 
								noHoliDays);
						
						//update academicsession with no of holidays--- year
						UpdateAcademicSession acsession = new UpdateAcademicSession();
						acsession.updateAcadSession(year, lastUpdUser, lastUpdDate, 
								(oldNoSchoolDaysYear + oldNoHoliDaysTerm) - noHoliDays);
						
						
						acadHolDisp.setText("SUCCESS - Transaction executed!");
					}
					catch(Exception ex) {
						ex.printStackTrace();
						acadHolDisp.setText("FAILURE - Transaction fail to execute!");
					}
					finally {
						acadHolType.setValue("");
						acadHolDesc.clear();
						acadHolBegins.setValue(LocalDate.now());
						acadHolEnds.setValue(LocalDate.now());
					}
					
				}
				else
				{
					try {
						UpdateAcademicHoliday hols = new UpdateAcademicHoliday();
						
						hols.updateAcademicHoliday(ahid, holName, desc, holType, year, 
								term, user, lastUpdUser, holBegins, holEnds, date, 
								lastUpdDate, noHoliDays);
						
						acadHolDisp.setText("SUCCESS - Transaction executed!");
					}
					catch(Exception ex) {
						ex.printStackTrace();
						acadHolDisp.setText("FAILURE - Transaction fail to execute!");
					}
					finally {
						acadHolType.setValue("");
						acadHolDesc.clear();
						acadHolBegins.setValue(LocalDate.now());
						acadHolEnds.setValue(LocalDate.now());
					}
				}
			}
			else {
				Alert alert = new Alert(Alert.AlertType.INFORMATION);
				alert.setContentText("Year, Term, Holiday Name, Holiday begins "
						+ "and ends date cannot be empty... "
						+ "And/or holiday begins or ends out of term range.");
				Optional<ButtonType> result = alert.showAndWait();
				if(result.get() == ButtonType.OK) {
					alert.close();
				}
				else {
					alert.close();
				}
			}
		}
		catch(Exception e) {
			e.printStackTrace();
			Alert alert = new Alert(Alert.AlertType.ERROR);
			alert.setContentText("Variables Error: "+ e.getMessage());
			Optional<ButtonType> result = alert.showAndWait();
			if(result.get() == ButtonType.OK) {
				alert.close();
			}
			else {
				alert.close();
			}
			acadHolDisp.setText("FAILURE - Transaction did not execute!");
		}
	}
	
	@FXML public void findCalendarHolsButton(ActionEvent event) {
		try {
			String ahid = acadHolHID.getValue();
			
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			AcademicHoliday hol = entitymanager.find(AcademicHoliday.class, ahid);
			
			acadHolYear.setValue(hol.getYear());
			acadHolTerm.setValue(hol.getTerm());
			acadHolName.setValue(hol.getHolidayName());
			acadHolType.setValue(hol.getHolidayType());
			acadHolDesc.setText(hol.getHolidayDesc());
			acadHolBegins.setValue(hol.getHolidayBegins());
			acadHolEnds.setValue(hol.getHolidayEnds());
				
			entitymanager.getTransaction().commit();
			
			entitymanager.close();
			emfactory.close();
			
		}
		catch(Exception e) {
			Alert alert = new Alert(Alert.AlertType.ERROR);
			alert.setContentText("Find Error: "+ e.getMessage());
			Optional<ButtonType> result = alert.showAndWait();
			if(result.get() == ButtonType.OK) {
				alert.close();
			}
			else {
				alert.close();
			}
			acadHolDisp.setText("FAILURE - Transaction did not execute!");
			acadHolType.setValue("");
			acadHolDesc.clear();
			acadHolBegins.setValue(LocalDate.now());
			acadHolEnds.setValue(LocalDate.now());
		}
	}
	
	@FXML public void deleteCalendarHolsButton(ActionEvent event) {
		
		String ahid = acadHolHID.getValue();
		String year = "";
		String holType = "";
		
		if(true) {
			Alert alertT = new Alert(Alert.AlertType.CONFIRMATION);
			alertT.setContentText("You are about to delete "+ahid
					+ ". Note that this action is irreversible!");
			Optional<ButtonType> resultT = alertT.showAndWait();
			if(resultT.get() == ButtonType.OK) {
				try {
					
					EntityManagerFactory emfactoryz = Persistence.createEntityManagerFactory("SchoolMgtSystem");
					EntityManager entitymanagerz = emfactoryz.createEntityManager();
					entitymanagerz.getTransaction().begin();
					
					AcademicHoliday acHolz = entitymanagerz.find(AcademicHoliday.class, ahid);
					holType = acHolz.getHolidayType();
					
					entitymanagerz.getTransaction().commit();
					
					entitymanagerz.close();
					emfactoryz.close();
					
					if(ahid.trim().length() != 0) {
						
						if(!(holType.equals("Terminal"))) {
							//update academicterm with no of hlidays --- year+term
							int oldNoSchoolDaysTerm = 0;
							int oldNoSchoolDaysYear = 0;
							int oldNoHoliDaysYear = 0;
							int oldNoHoliDaysTerm = 0;
							String session;
							String atid; // = year + term;
							
							EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
							EntityManager entitymanager = emfactory.createEntityManager();
							entitymanager.getTransaction().begin();
							
							AcademicHoliday acHoli = entitymanager.find(AcademicHoliday.class, ahid);
							
							session = acHoli.getYear();
							atid = session + acHoli.getTerm();
							year = session;
							try {
								oldNoSchoolDaysTerm = getAcademicTermSchoolDays(entitymanager, atid);
							}
							catch(Exception ex) {
								ex.printStackTrace();
							}
							try {
								oldNoSchoolDaysYear = getAcademicTermSchoolDays_sumSession(entitymanager, session);
							}
							catch(Exception ex2) {
								ex2.printStackTrace();
							}
							
							try {
								oldNoHoliDaysYear = getAcademicTermHoliDays_sumSession(entitymanager, session);
							}
							catch(Exception ex3) {
								ex3.printStackTrace();
							}
							
							try {
								oldNoHoliDaysTerm = getAcademicTermHoliDays(entitymanager, atid);
							}
							catch(Exception ex4) {
								ex4.printStackTrace();
							}
								
							entitymanager.getTransaction().commit();
							
							entitymanager.close();
							emfactory.close();
							
							UpdateAcademicTerm acterm = new UpdateAcademicTerm();
							acterm.updateAcademicTermHols(atid, dispName, LocalDate.now(), 
									(oldNoSchoolDaysTerm + oldNoHoliDaysTerm), 
									oldNoHoliDaysTerm - oldNoHoliDaysTerm);
							
							//update academicsession with no of holidays--- year
							UpdateAcademicSession acsession = new UpdateAcademicSession();
							acsession.updateAcadSession(year, dispName, LocalDate.now(), 
									(oldNoSchoolDaysYear + oldNoHoliDaysTerm));
							
							
							try {
								DeleteAcademicHoliday deleteHols = new DeleteAcademicHoliday();
								deleteHols.deleteAcademicHoliday(ahid);
							}
							catch(Exception except) {
								except.printStackTrace();
							}
							
							acadHolDisp.setText("SUCCESS - Transaction executed!");
						}
						else {
							
							try {
								DeleteAcademicHoliday deleteHols = new DeleteAcademicHoliday();
								deleteHols.deleteAcademicHoliday(ahid);
							}
							catch(Exception except) {
								except.printStackTrace();
							}
							
							acadHolDisp.setText("SUCCESS - Transaction executed!");
						}
						
					}
					else {
						Alert alert2 = new Alert(Alert.AlertType.INFORMATION);
						alert2.setContentText("Calendar Year cannot be empty...");
						Optional<ButtonType> result2 = alert2.showAndWait();
						if(result2.get() == ButtonType.OK) {
							alert2.close();
						}
						else {
							alert2.close();
						}
					}
				}
				catch(Exception e) {
					Alert alert = new Alert(Alert.AlertType.ERROR);
					alert.setContentText("Error: "+ e.getMessage());
					Optional<ButtonType> result = alert.showAndWait();
					if(result.get() == ButtonType.OK) {
						alert.close();
					}
					else {
						alert.close();
					}
				}
			}
			else {
				alertT.close();
			}
		}
	}
	
	
	//Academic Assessment
	@FXML private ComboBox<String> acadAssessYear, acadAssessTerm, acadAssessName, acadAssessType, acadAssessHID;
	@FXML private DatePicker acadAssessBegins, acadAssessEnds;
	@FXML private TextArea acadAssessDesc;
	@FXML private TextField acadAssessDisp;
	
	ObservableList<String> assessName = FXCollections.observableArrayList("CA1","CA2","CA3","Exam",
			"PRJ1","PRJ2","PRJ3");
	ObservableList<String> assessType = FXCollections.observableArrayList("CA","Exam","Project");
	ObservableList<String> acadAssess = FXCollections.observableArrayList();
	ObservableList<String> yearList2 = FXCollections.observableArrayList();
	
	@FXML public void acadAssessInit(MouseEvent event) {
		acadAssessTerm.setItems(termN);
		acadAssessName.setItems(assessName);
		acadAssessType.setItems(assessType);
	}
	
	@FXML public void acadAssessInit2(MouseEvent event) {
		populateYear(acadAssessYear);
	}
	
	@FXML public void acadAssessInit3(MouseEvent event) {
		populateAssessment(acadAssess, acadAssessHID);
	}
	
	@FXML public void calendarAcadAssessButton(ActionEvent event) {
		try {
			String year = acadAssessYear.getValue();
			String term = acadAssessTerm.getValue();
			String assessName = acadAssessName.getValue();
			String assessType = acadAssessType.getValue();
			String desc = acadAssessDesc.getText();
			LocalDate assessBegins = acadAssessBegins.getValue();
			LocalDate assessEnds = acadAssessEnds.getValue();
			LocalDate date = LocalDate.now();
			LocalDate lastUpdDate = LocalDate.now();
			String user = dispName;
			String lastUpdUser = dispName;
			int noAssessDays = (int)(assessEnds.toEpochDay() - assessBegins.toEpochDay());
			String aid = year + term + assessName;
			
			LocalDate termBegins;
			LocalDate termEnds;
			
			EntityManagerFactory emf = Persistence.createEntityManagerFactory("SchoolMgtSystem");
			EntityManager entitymgr = emf.createEntityManager();
			entitymgr.getTransaction().begin();
			
			AcademicTerm at = entitymgr.find(AcademicTerm.class, year+term);
			
			termBegins = at.getTermBegins();
			termEnds = at.getTermEnds();
				
			entitymgr.getTransaction().commit();
			
			entitymgr.close();
			emf.close();
			
			if(year.trim().length() == 4 && term.trim().length() == 1 && 
					assessName.trim().length() != 0 && assessEnds.isAfter(assessBegins) && 
					assessBegins.isAfter(termBegins) && assessBegins.isBefore(termEnds) && 
					assessEnds.isAfter(termBegins) && assessEnds.isBefore(termEnds)) {
				
				try {
					CreateAcademicAssessment assess = new CreateAcademicAssessment();
					
					assess.createAcademicAssessment(aid, assessName, desc, assessType, year, term, 
							user, lastUpdUser, assessBegins, assessEnds, date, lastUpdDate);
					
					acadAssessDisp.setText("SUCCESS - Transaction Completed!");
				}
				catch(Exception ex) {
					ex.printStackTrace();
					Alert alert = new Alert(Alert.AlertType.ERROR);
					alert.setContentText("Entity Error: "+ ex.getMessage());
					Optional<ButtonType> result = alert.showAndWait();
					if(result.get() == ButtonType.OK) {
						alert.close();
					}
					else {
						alert.close();
					}
					acadAssessDisp.setText("FAILURE - Transaction Fail!");
				}
				finally {
					acadAssessType.setValue("");
					acadAssessBegins.setValue(LocalDate.now());
					acadAssessEnds.setValue(LocalDate.now());
					acadAssessDesc.clear();
				}
			}
			else {
				Alert alert = new Alert(Alert.AlertType.INFORMATION);
				alert.setContentText("Year, Term, AssessName fields must not be empty... "
						+ "And/or Assessment begins and ends dates must be within range of term.");
				Optional<ButtonType> result = alert.showAndWait();
				if(result.get() == ButtonType.OK) {
					alert.close();
				}
				else {
					alert.close();
				}
				acadAssessDisp.setText("FAILURE - Transaction Fail!");
			}
			
		}
		catch(Exception e) {
			e.printStackTrace();
			Alert alert = new Alert(Alert.AlertType.ERROR);
			alert.setContentText("Error: "+ e.getMessage());
			Optional<ButtonType> result = alert.showAndWait();
			if(result.get() == ButtonType.OK) {
				alert.close();
			}
			else {
				alert.close();
			}
			acadAssessDisp.setText("FAILURE - Transaction Fail!");
		}
	}
	
	@FXML public void updateCalendarAssessButton(ActionEvent event) {
		try {
			String year = acadAssessYear.getValue();
			String term = acadAssessTerm.getValue();
			String assessName = acadAssessName.getValue();
			String assessType = acadAssessType.getValue();
			String desc = acadAssessDesc.getText();
			LocalDate assessBegins = acadAssessBegins.getValue();
			LocalDate assessEnds = acadAssessEnds.getValue();
			LocalDate date = LocalDate.now();
			LocalDate lastUpdDate = LocalDate.now();
			String user = dispName;
			String lastUpdUser = dispName;
			int noAssessDays = (int)(assessEnds.toEpochDay() - assessBegins.toEpochDay());
			String aid = acadAssessHID.getValue(); //year + term + assessName;
			
			LocalDate termBegins;
			LocalDate termEnds;
			
			EntityManagerFactory emf = Persistence.createEntityManagerFactory("SchoolMgtSystem");
			EntityManager entitymgr = emf.createEntityManager();
			entitymgr.getTransaction().begin();
			
			AcademicTerm at = entitymgr.find(AcademicTerm.class, year+term);
			
			termBegins = at.getTermBegins();
			termEnds = at.getTermEnds();
				
			entitymgr.getTransaction().commit();
			
			entitymgr.close();
			emf.close();
			
			if(year.trim().length() == 4 && term.trim().length() == 1 && 
					assessName.trim().length() != 0 && assessEnds.isAfter(assessBegins) && 
					assessBegins.isAfter(termBegins) && assessBegins.isBefore(termEnds) && 
					assessEnds.isAfter(termBegins) && assessEnds.isBefore(termEnds)) {
				
				try {
					UpdateAcademicAssessment assess = new UpdateAcademicAssessment();
					
					assess.updateAcademicAssessment(aid, assessName, desc, assessType, year, term, 
							user, lastUpdUser, assessBegins, assessEnds, date, lastUpdDate);
					
					acadAssessDisp.setText("SUCCESS - Transaction Completed!");
				}
				catch(Exception ex) {
					ex.printStackTrace();
					Alert alert = new Alert(Alert.AlertType.ERROR);
					alert.setContentText("Entity Error: "+ ex.getMessage());
					Optional<ButtonType> result = alert.showAndWait();
					if(result.get() == ButtonType.OK) {
						alert.close();
					}
					else {
						alert.close();
					}
					acadAssessDisp.setText("FAILURE - Transaction Fail!");
				}
				finally {
					acadAssessType.setValue("");
					acadAssessBegins.setValue(LocalDate.now());
					acadAssessEnds.setValue(LocalDate.now());
					acadAssessDesc.clear();
				}
			}
			else {
				Alert alert = new Alert(Alert.AlertType.INFORMATION);
				alert.setContentText("Year, Term, AssessName fields must not be empty... "
						+ "And/or Assessment begins and ends dates must be within range of term.");
				Optional<ButtonType> result = alert.showAndWait();
				if(result.get() == ButtonType.OK) {
					alert.close();
				}
				else {
					alert.close();
				}
				acadAssessDisp.setText("FAILURE - Transaction Fail!");
			}
			
		}
		catch(Exception e) {
			e.printStackTrace();
			Alert alert = new Alert(Alert.AlertType.ERROR);
			alert.setContentText("Error: "+ e.getMessage());
			Optional<ButtonType> result = alert.showAndWait();
			if(result.get() == ButtonType.OK) {
				alert.close();
			}
			else {
				alert.close();
			}
			acadAssessDisp.setText("FAILURE - Transaction Fail!");
		}
	}
	
	@FXML public void findCalendarAssessButton(ActionEvent event) {
		try {
			String aid = acadAssessHID.getValue();
			
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			AcademicAssessment assess = entitymanager.find(AcademicAssessment.class, aid);
			
			acadAssessYear.setValue(assess.getYear());
			acadAssessTerm.setValue(assess.getTerm());
			acadAssessName.setValue(assess.getAssessName());
			acadAssessType.setValue(assess.getAssessType());
			acadAssessDesc.setText(assess.getAssessDesc());
			acadAssessBegins.setValue(assess.getAssessBegins());
			acadAssessEnds.setValue(assess.getAssessEnds());
				
			entitymanager.getTransaction().commit();
			
			entitymanager.close();
			emfactory.close();
			
		}
		catch(Exception e) {
			Alert alert = new Alert(Alert.AlertType.ERROR);
			alert.setContentText("Find Error: "+ e.getMessage());
			Optional<ButtonType> result = alert.showAndWait();
			if(result.get() == ButtonType.OK) {
				alert.close();
			}
			else {
				alert.close();
			}
			acadAssessDisp.setText("FAILURE - Transaction did not execute!");
			acadAssessType.setValue("");
			acadAssessBegins.setValue(LocalDate.now());
			acadAssessEnds.setValue(LocalDate.now());
			acadAssessDesc.clear();
		}
	}
	
	@FXML public void deleteCalendarAssessButton(ActionEvent event) {
		String aid = acadAssessHID.getValue();
		
		if(true) {
			Alert alertT = new Alert(Alert.AlertType.CONFIRMATION);
			alertT.setContentText("You are about to delete "+aid
					+ ". Note that this action is irreversible!");
			Optional<ButtonType> resultT = alertT.showAndWait();
			if(resultT.get() == ButtonType.OK) {
				try {
					
					if(aid.trim().length() != 0) {
						
						try {
							DeleteAcademicAssessment deleteAssess = new DeleteAcademicAssessment();
							deleteAssess.deleteAcademicAssessment(aid);
							
							acadAssessDisp.setText("SUCCESS - Transaction executed!");
						}
						catch(Exception except) {
							except.printStackTrace();
							Alert alert = new Alert(Alert.AlertType.ERROR);
							alert.setContentText("Entity Error: "+ except.getMessage());
							Optional<ButtonType> result = alert.showAndWait();
							if(result.get() == ButtonType.OK) {
								alert.close();
							}
							else {
								alert.close();
							}
						}
						
						
					}
					else {
						Alert alert2 = new Alert(Alert.AlertType.INFORMATION);
						alert2.setContentText("Calendar Year cannot be empty...");
						Optional<ButtonType> result2 = alert2.showAndWait();
						if(result2.get() == ButtonType.OK) {
							alert2.close();
						}
						else {
							alert2.close();
						}
					}
				}
				catch(Exception e) {
					Alert alert = new Alert(Alert.AlertType.ERROR);
					alert.setContentText("Error: "+ e.getMessage());
					Optional<ButtonType> result = alert.showAndWait();
					if(result.get() == ButtonType.OK) {
						alert.close();
					}
					else {
						alert.close();
					}
				}
			}
			else {
				alertT.close();
			}
		}
	}
	
	
	//Daily Class Attendance - TableView
	@FXML private ComboBox<String> attendanceClass;
	@FXML private DatePicker attendanceDate;
	@FXML private Label attendanceLabel;
	@FXML private TableView<AttendanceDataTable> attendanceDataTable;
	@FXML private TableColumn<AttendanceDataTable, String> attendSNoCol, attendStdNoCol, attendStdNameCol, 
		attendIsPresentCol, attendPresentsCol, attendAbsentsCol, attendTermPossibleCol, 
		attendTermPossibleCurrentCol;
	@FXML private VBox printAttendPane;
	
	ObservableList<String> attendanceList = FXCollections.observableArrayList();
	
	@FXML public void attendanceComboInit(MouseEvent event) {
		populateStdClassesCombo3(attendanceList, attendanceClass);
	}
	
	@FXML public void spoolAttendanceButton(ActionEvent event) {
		try {
			String stdClassId = attendanceClass.getValue();
			LocalDate date = attendanceDate.getValue();
			
			try {
				String studentClass, year, term;
				
				ObservableList<AttendanceDataTable> data = FXCollections.observableArrayList();
				LinkedHashSet<String> SAID_List = new LinkedHashSet<>();
				LinkedHashSet<String> STDID_SchoolAttendance = new LinkedHashSet<>();
				LinkedHashSet<String> STDID_ClassList = new LinkedHashSet<>();
				
				EntityManagerFactory emfactory = Persistence.createEntityManagerFactory
						("SchoolMgtSystem");
				EntityManager entitymanager = emfactory.createEntityManager();
				entitymanager.getTransaction().begin();
				
				StudentClasses std = entitymanager.find(StudentClasses.class, stdClassId);
				
				STDID_ClassList = std.getStdList();
				studentClass = std.getClassNo()+std.getClassLetter();
				year = std.getYear();
				term = std.getTerm();
				
				entitymanager.getTransaction().commit();
				entitymanager.close();
				emfactory.close();
				
				// return database class
				String stdClass2 = studentClass; //getPrimeClass(studentClass);
				
				//get jss scoresheet list
				final String JDBC_Driver2 = "com.mysql.jdbc.Driver";
				final String DB_URL2 = dbURL;
				final String DB_User2 = dbUSR;
				final String DB_PWD2 = dbPWD;
				
				
				Connection conn2 = null;
				PreparedStatement stmt2 = null;
				
				try {
					Class.forName(JDBC_Driver2);
					conn2 = DriverManager.getConnection(DB_URL2, DB_User2, DB_PWD2);
					
					String sql;
					
					sql = "SELECT * FROM SchoolAttendance where "
							+ "STDCLASS = ? "
							+ "and YEAR = ? "
							+ "and TERM = ? "
							+ "and DATE = ?";
					
					stmt2 = conn2.prepareStatement(sql);
					
					stmt2.setString(1, stdClass2);
					stmt2.setString(2, year);
					stmt2.setString(3, term);
					stmt2.setDate(4, Date.valueOf(date));
					
					ResultSet rs = stmt2.executeQuery();
					
					while(rs.next()) {
						SAID_List.add(rs.getString("SAID"));
						STDID_SchoolAttendance.add(rs.getString("STDID"));
					}
					rs.close();
					stmt2.close();
					conn2.close();
				}
				catch(SQLException es) {
					attendanceLabel.setText("Error JDBC: "+ es.getSQLState());
				}
				catch(Exception es2) {
					attendanceLabel.setText("Error JDBC: "+ es2.getMessage());
				}
				finally {
					try {
						if(stmt2 != null ) {
							stmt2.close();
						}
					}
					catch(SQLException ces) {
						attendanceLabel.setText("Error JDBC: "+ ces.getSQLState());
					}
					try {
						if(conn2 != null ) {
							conn2.close();
						}
					}
					catch(Exception ces2) {
						attendanceLabel.setText("JDBC: "+ces2.getMessage());
					}
				}
				
				int sNo = 1;
				for(String saId : SAID_List) {
					EntityManagerFactory emfactory2 = Persistence.createEntityManagerFactory
							("SchoolMgtSystem");
					EntityManager entitymanager2 = emfactory2.createEntityManager();
					entitymanager2.getTransaction().begin();
					
					SchoolAttendance attend = entitymanager2.find(SchoolAttendance.class, saId);
					
					String stdAttendance;
					if(attend.getIsPresent()) {
						stdAttendance = "Yes";
					}
					else {
						stdAttendance = "No";
					}
					
					data.add(new AttendanceDataTable(
							String.valueOf(sNo),
							attend.getStdId(),
							attend.getName(),
							stdAttendance,
							String.valueOf(attend.getPresents()),
							String.valueOf(attend.getAbsents()),
							String.valueOf(attend.getTermlyPossible()),
							String.valueOf(attend.getTermlyPossibleCurrent())
							));
					
					entitymanager2.getTransaction().commit();
					entitymanager2.close();
					emfactory2.close();
				
					sNo = sNo + 1;
				}
				
				for(String stdNo2 : STDID_ClassList) {
					if(!STDID_SchoolAttendance.contains(stdNo2)) {
						
						EntityManagerFactory emfactory2 = Persistence.createEntityManagerFactory
								("SchoolMgtSystem");
						EntityManager entitymanager2 = emfactory2.createEntityManager();
						entitymanager2.getTransaction().begin();
						
						Students std2 = entitymanager2.find(Students.class, stdNo2);
						
						String schoolAttendance = "";
						boolean bool = false;
						try {
							bool = getSchoolAttendanceIsPresent(entitymanager2, stdNo2, year, term, date);
						}
						catch(Exception boolE) {
							boolE.printStackTrace();
						}
						
						if(bool) {
							schoolAttendance = "Yes";
						}
						
						else {
							if(getSchoolAttendanceAbsentsDate(entitymanager2, stdNo2, year, term, date) == 1) {
								
								schoolAttendance = "No";
							}
							else {
								schoolAttendance = "No Action";
							}
							
						}
						
						int presents = 0;
						try {
							presents = getSchoolAttendancePresents(entitymanager2, stdNo2, year, term);
						}
						catch(Exception boolE) {
							boolE.printStackTrace();
						}
						
						int absents = 0; 
						try {
							absents = getSchoolAttendanceAbsents(entitymanager2, stdNo2, year, term);
						}
						catch(Exception boolE) {
							boolE.printStackTrace();
						}
						
						int possibleTermAttendance = 0; 
						try {
							possibleTermAttendance = 
									getAcademicTermNoSchoolDays(entitymanager2, term, year) - 
									getAcademicHolidayTotal(entitymanager2, year, term);
						}
						catch(Exception boolE) {
							boolE.printStackTrace();
						}
						
						int possibleTermAttendanceCurrent = 0;
						try {
							possibleTermAttendanceCurrent = 
								getAcademicTermNoSchoolDaysCurrent(entitymanager2, term, year, date) - 
								getAcademicHolidayTotalCurrent(entitymanager2, year, term, date);
						}
						catch(Exception boolE) {
							boolE.printStackTrace();
						}
								
						
						data.add(new AttendanceDataTable(
								String.valueOf(sNo),
								stdNo2,
								std2.getOtherNames()+ " "+ std2.getSurName(),
								schoolAttendance,
								String.valueOf(presents),
								String.valueOf(absents),
								String.valueOf(possibleTermAttendance),
								String.valueOf(possibleTermAttendanceCurrent)
								));
						
						entitymanager2.getTransaction().commit();
						entitymanager2.close();
						emfactory2.close();
						
						sNo = sNo + 1;
						
					}
				}
				
				attendSNoCol.setCellValueFactory(new PropertyValueFactory("sNo_Data"));
				attendStdNoCol.setCellValueFactory(new PropertyValueFactory("stdId_Data"));
				attendStdNameCol.setCellValueFactory(new PropertyValueFactory("name_Data"));
				attendIsPresentCol.setCellValueFactory(new PropertyValueFactory("isPresent_Data"));
				attendPresentsCol.setCellValueFactory(new PropertyValueFactory("presents_Data"));
				attendAbsentsCol.setCellValueFactory(new PropertyValueFactory("absents_Data"));
				attendTermPossibleCol.setCellValueFactory(new PropertyValueFactory("possibleAttendanceTerm_Data"));
				attendTermPossibleCurrentCol.setCellValueFactory(new PropertyValueFactory("possibleAttendanceCurrent_Data"));
				
				attendanceDataTable.setItems(data);
				
			}
			catch(Exception e2) {
				e2.printStackTrace();
				Alert alert = new Alert(Alert.AlertType.ERROR);
				alert.setContentText("Error2 : "+ e2.getMessage());
				Optional<ButtonType> result = alert.showAndWait();
				if(result.get() == ButtonType.OK) {
					alert.close();
				}
				else {
					alert.close();
				}
			}
			
		}
		catch(Exception e) {
			e.printStackTrace();
			Alert alert = new Alert(Alert.AlertType.ERROR);
			alert.setContentText("Error : "+ e.getMessage());
			Optional<ButtonType> result = alert.showAndWait();
			if(result.get() == ButtonType.OK) {
				alert.close();
			}
			else {
				alert.close();
			}
		}
		
		//set table uneditable
		attendanceDataTable.setEditable(false);
		attendanceDataTable.getSelectionModel().cellSelectionEnabledProperty().set(false);
	}
	
	//SchoolAttendance Entry - EDIT
	@FXML public void editSchoolAttendanceButton(ActionEvent e) {
		try {
			String stdClassId = attendanceClass.getValue();
			LocalDate date = attendanceDate.getValue();
			
			String stdClass, term, year;
			
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory
					("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			StudentClasses stdC = entitymanager.find(StudentClasses.class, stdClassId);
			
			stdClass = stdC.getClassNo()+stdC.getClassLetter();
			year = stdC.getYear();
			term = stdC.getTerm();
			
			entitymanager.getTransaction().commit();
			entitymanager.close();
			emfactory.close();
			
			attendanceDataTable.setEditable(true);
			attendanceDataTable.getSelectionModel().cellSelectionEnabledProperty().set(true);
			
			//get the real class
//			String stdClass2 = getPrimeClassOnly(stdClassId, year, term, stdClass);
			String stdClass2 = stdClass; //getPrimeClass(stdClass);
			
			//IsPresent
			attendIsPresentCol.setEditable(true);
			attendIsPresentCol.setCellFactory(TextFieldTableCell.<AttendanceDataTable>forTableColumn());
			attendIsPresentCol.setOnEditCommit(event -> {
				
				AttendanceDataTable present = event.getRowValue();
				String said = present.getStdId_Data()+year+term+date.toString();
				String stdId = present.getStdId_Data();
				String stdName = present.getName_Data();
				
				String isPresentOld = event.getOldValue();
				String isPresentNew = event.getNewValue().trim().toUpperCase();
				
				int presents = 0;
				int absents = 0;
				int possibleTermAttendance = 0; 
				int possibleTermAttendanceCurrent = 0;
				
				boolean isPresent = false;
				if(isPresentNew.equals("Y") || isPresentNew.equals("YES") || isPresentNew.equals("YE") || 
						isPresentNew.equals("1")) {
					isPresent = true;
					presents++;
				}
				else if(isPresentNew.equals("D") || isPresentNew.equals("DEL") || isPresentNew.equals("DELETE") || 
						isPresentNew.equals("X")) {
					isPresent = false;
				}
				else {
					isPresent = false;
					absents++;
				}
				
				EntityManagerFactory emfactory2 = Persistence.createEntityManagerFactory
						("SchoolMgtSystem");
				EntityManager entitymanager2 = emfactory2.createEntityManager();
				entitymanager2.getTransaction().begin();
								
				try {
					presents = presents + getSchoolAttendancePresents(entitymanager2, stdId, year, term);
				}
				catch(Exception boolE) {
					boolE.printStackTrace();
				}
				 
				try {
					absents = absents + getSchoolAttendanceAbsents(entitymanager2, stdId, year, term);
				}
				catch(Exception boolE) {
					boolE.printStackTrace();
				}
				
				try {
					possibleTermAttendance = 
							getAcademicTermNoSchoolDays(entitymanager2, term, year) - 
							getAcademicHolidayTotal(entitymanager2, year, term);
				}
				catch(Exception boolE) {
					boolE.printStackTrace();
				}
				
				try {
					possibleTermAttendanceCurrent = 
						getAcademicTermNoSchoolDaysCurrent(entitymanager2, term, year, date) - 
						getAcademicHolidayTotalCurrent(entitymanager2, year, term, date);
				}
				catch(Exception boolE) {
					boolE.printStackTrace();
				}
				
				entitymanager2.getTransaction().commit();
				entitymanager2.close();
				emfactory2.close();
				
								
				try {
					present.setIsPresent_Data(isPresentNew);
					
					if(isPresentNew.equals("Y") || isPresentNew.equals("YES") || isPresentNew.equals("YE") || 
							isPresentNew.equals("1")) {
						
						updateSchoolAttendanceDatabase(said, stdId, stdName, stdClass2, 
								year, term, dispName, dispName, isPresent, presents, 
								absents, possibleTermAttendance, possibleTermAttendanceCurrent, 
								date, date, date);
					}
					else if(isPresentNew.equals("D") || isPresentNew.equals("DEL") || isPresentNew.equals("DELETE") || 
							isPresentNew.equals("X")) {
						
						Alert alert = new Alert(Alert.AlertType.CONFIRMATION);
						alert.setContentText("You are about to delete "+ stdId + " - "+ stdName +". "
								+ "Are you sure you want to proceed?");
						Optional<ButtonType> result = alert.showAndWait();
						if(result.get() == ButtonType.OK) {

							DeleteSchoolAttendance delAtten = new DeleteSchoolAttendance();
							delAtten.deleteSchoolAttendance(said);
							
							refreshAttendanceTableView();
						}
						else {
							alert.close();
						}
						
					}
					else {
						updateSchoolAttendanceDatabase(said, stdId, stdName, stdClass2, 
								year, term, dispName, dispName, isPresent, presents, 
								absents, possibleTermAttendance, possibleTermAttendanceCurrent, 
								date, date, date); 
					}
				}
				catch(Exception ex2) {
					Alert alert = new Alert(Alert.AlertType.ERROR);
					alert.setContentText("Invalid entries... (entry must be 'Y', 'YE', 'YES', '1' for PRESENT, "
							+ "'D', 'DEL', 'DELETE', 'X' for DELETE or any other entry for ABSENT)" +
							ex2.getMessage());
					Optional<ButtonType> result = alert.showAndWait();
					if(result.get() == ButtonType.OK) {
						alert.close();
					}
					else {
						alert.close();
					}
				}
				
			});
			
		}
		catch(Exception except) {
			Alert alert = new Alert(Alert.AlertType.ERROR);
			alert.setContentText("Invalid entries... (entry must be 'Y', 'YE', 'YES', '1' for PRESENT, "
					+ "'D', 'DEL', 'DELETE', 'X' for DELETE or any other entry for ABSENT)"
					+except.getMessage());
			Optional<ButtonType> result = alert.showAndWait();
			if(result.get() == ButtonType.OK) {
				alert.close();
			}
			else {
				alert.close();
			}
		}
	}
	
	
	//SchoolAttendance Create/Update
	private void updateSchoolAttendanceDatabase(String saId, String stdId, String name, String stdClass, 
			String year, String term, String user, String lastUpdateUser, boolean isPresent, 
			int presents, int absents, int termlyPossible, int termlyPossibleCurrent, 
			LocalDate attendanceDate, LocalDate date, LocalDate lastUpdateDate) {
		
		String innerStdClass, innerStdTerm, innerStdYear;
		
		EntityManagerFactory emfactory = Persistence.createEntityManagerFactory
				("SchoolMgtSystem");
		EntityManager entitymanager = emfactory.createEntityManager();
		entitymanager.getTransaction().begin();
		
		Students std = entitymanager.find(Students.class, stdId);
		
		String innerStdClassId = std.getEntryClassAssigned();
		
		StudentClasses stdCX = entitymanager.find(StudentClasses.class, innerStdClassId);
		
		innerStdClass = stdCX.getClassNo()+stdCX.getClassLetter();
		innerStdTerm = stdCX.getTerm();
		innerStdYear = stdCX.getYear();
		
		entitymanager.getTransaction().commit();
		entitymanager.close();
		emfactory.close();
		
		if(stdClass.equals(innerStdClass) && 
				term.equals(innerStdTerm) && 
				year.equals(innerStdYear)) {
			
			CreateSchoolAttendance attendCreate = new CreateSchoolAttendance();
			UpdateSchoolAttendance attendUpdate = new UpdateSchoolAttendance();
			
			//creates schoolattendance
			try {
				
				attendCreate.createSchoolAttendance(saId, stdId, name, stdClass, innerStdYear, 
						innerStdTerm, user, lastUpdateUser, isPresent, presents, absents, termlyPossible, 
						termlyPossibleCurrent, attendanceDate, date, lastUpdateDate);
				
				
			}
			catch(Exception e) {
				e.printStackTrace();
				Alert alert = new Alert(Alert.AlertType.ERROR);
				alert.setContentText("Error creating: "+stdId + " - "+ name + " *** "+ e.getMessage());
				Optional<ButtonType> result = alert.showAndWait();
				if(result.get() == ButtonType.OK) {
					alert.close();
				}
				else {
					alert.close();
				}
			}
			
			//update scores
//			try {
//				attendUpdate.updateSchoolAttendance(saId, stdId, name, stdClass, innerStdYear, 
//						innerStdTerm, user, lastUpdateUser, isPresent, presents, absents, termlyPossible,
//						termlyPossibleCurrent, attendanceDate, date, lastUpdateDate);
//	
//			}
//			catch(Exception e) {
//				e.printStackTrace();
//			}
		}
		else {
			Alert alert = new Alert(Alert.AlertType.ERROR);
			alert.setContentText("Illegal Action: You can only take attendance for "
					+ "current class, term and year..!");
			alert.setHeaderText("Illegal Action!");
			Optional<ButtonType> result = alert.showAndWait();
			if(result.get() == ButtonType.OK) {
				alert.close();
			}
			else {
				alert.close();
			}
		}
		
	}
	
	
	@FXML public void refreshSchoolAttendanceButton(ActionEvent event) {
		refreshAttendanceTableView();
	}
	
	public void refreshAttendanceTableView() {
		try {
			String stdClassId = attendanceClass.getValue();
			LocalDate date = attendanceDate.getValue();
			
			try {
				String studentClass, year, term;
				
				ObservableList<AttendanceDataTable> data = FXCollections.observableArrayList();
				LinkedHashSet<String> SAID_List = new LinkedHashSet<>();
				LinkedHashSet<String> STDID_SchoolAttendance = new LinkedHashSet<>();
				LinkedHashSet<String> STDID_ClassList = new LinkedHashSet<>();
				
				EntityManagerFactory emfactory = Persistence.createEntityManagerFactory
						("SchoolMgtSystem");
				EntityManager entitymanager = emfactory.createEntityManager();
				entitymanager.getTransaction().begin();
				
				StudentClasses std = entitymanager.find(StudentClasses.class, stdClassId);
				
				STDID_ClassList = std.getStdList();
				studentClass = std.getClassNo()+std.getClassLetter();
				year = std.getYear();
				term = std.getTerm();
				
				entitymanager.getTransaction().commit();
				entitymanager.close();
				emfactory.close();
				
				// return database class
				String stdClass2 = studentClass; //getPrimeClass(studentClass);
				
				//get jss scoresheet list
				final String JDBC_Driver2 = "com.mysql.jdbc.Driver";
				final String DB_URL2 = dbURL;
				final String DB_User2 = dbUSR;
				final String DB_PWD2 = dbPWD;
				
				
				Connection conn2 = null;
				PreparedStatement stmt2 = null;
				
				try {
					Class.forName(JDBC_Driver2);
					conn2 = DriverManager.getConnection(DB_URL2, DB_User2, DB_PWD2);
					
					String sql;
					
					sql = "SELECT * FROM SchoolAttendance where "
							+ "STDCLASS = ? "
							+ "and YEAR = ? "
							+ "and TERM = ? "
							+ "and DATE = ?";
					
					stmt2 = conn2.prepareStatement(sql);
					
					stmt2.setString(1, stdClass2);
					stmt2.setString(2, year);
					stmt2.setString(3, term);
					stmt2.setDate(4, Date.valueOf(date));
					
					ResultSet rs = stmt2.executeQuery();
					
					while(rs.next()) {
						SAID_List.add(rs.getString("SAID"));
						STDID_SchoolAttendance.add(rs.getString("STDID"));
					}
					rs.close();
					stmt2.close();
					conn2.close();
				}
				catch(SQLException es) {
					attendanceLabel.setText("Error JDBC: "+ es.getSQLState());
				}
				catch(Exception es2) {
					attendanceLabel.setText("Error JDBC: "+ es2.getMessage());
				}
				finally {
					try {
						if(stmt2 != null ) {
							stmt2.close();
						}
					}
					catch(SQLException ces) {
						attendanceLabel.setText("Error JDBC: "+ ces.getSQLState());
					}
					try {
						if(conn2 != null ) {
							conn2.close();
						}
					}
					catch(Exception ces2) {
						attendanceLabel.setText("JDBC: "+ces2.getMessage());
					}
				}
				
				int sNo = 1;
				for(String saId : SAID_List) {
					EntityManagerFactory emfactory2 = Persistence.createEntityManagerFactory
							("SchoolMgtSystem");
					EntityManager entitymanager2 = emfactory2.createEntityManager();
					entitymanager2.getTransaction().begin();
					
					SchoolAttendance attend = entitymanager2.find(SchoolAttendance.class, saId);
					
					String stdAttendance;
					if(attend.getIsPresent()) {
						stdAttendance = "Yes";
					}
					else {
						stdAttendance = "No";
					}
					
					data.add(new AttendanceDataTable(
							String.valueOf(sNo),
							attend.getStdId(),
							attend.getName(),
							stdAttendance,
							String.valueOf(attend.getPresents()),
							String.valueOf(attend.getAbsents()),
							String.valueOf(attend.getTermlyPossible()),
							String.valueOf(attend.getTermlyPossibleCurrent())
							));
					
					entitymanager2.getTransaction().commit();
					entitymanager2.close();
					emfactory2.close();
				
					sNo = sNo + 1;
				}
				
				for(String stdNo2 : STDID_ClassList) {
					if(!STDID_SchoolAttendance.contains(stdNo2)) {
						
						EntityManagerFactory emfactory2 = Persistence.createEntityManagerFactory
								("SchoolMgtSystem");
						EntityManager entitymanager2 = emfactory2.createEntityManager();
						entitymanager2.getTransaction().begin();
						
						Students std2 = entitymanager2.find(Students.class, stdNo2);
						
						String schoolAttendance;
						boolean bool = false;
						try {
							bool = getSchoolAttendanceIsPresent(entitymanager2, stdNo2, year, term, date);
						}
						catch(Exception boolE) {
							boolE.printStackTrace();
						}
						
						int presents = 0;
						int absents = 0;
						
						if(bool) {
							schoolAttendance = "Yes";
							presents = presents + 1;
						}
						else {
							absents = absents + 1;
							if(getSchoolAttendanceAbsentsDate(entitymanager2, stdNo2, year, term, date) == 1) {
								
								schoolAttendance = "No";
							}
							else {
								schoolAttendance = "No Action";
							}
						}
						
						try {
							presents = presents + getSchoolAttendancePresents(entitymanager2, stdNo2, year, term);
						}
						catch(Exception boolE) {
							boolE.printStackTrace();
						}
						 
						try {
							absents = absents + getSchoolAttendanceAbsents(entitymanager2, stdNo2, year, term);
						}
						catch(Exception boolE) {
							boolE.printStackTrace();
						}
						
						int possibleTermAttendance = 0; 
						try {
							possibleTermAttendance = 
									getAcademicTermNoSchoolDays(entitymanager2, term, year) - 
									getAcademicHolidayTotal(entitymanager2, year, term);
						}
						catch(Exception boolE) {
							boolE.printStackTrace();
						}
						
						int possibleTermAttendanceCurrent = 0;
						try {
							possibleTermAttendanceCurrent = 
								getAcademicTermNoSchoolDaysCurrent(entitymanager2, term, year, date) - 
								getAcademicHolidayTotalCurrent(entitymanager2, year, term, date);
						}
						catch(Exception boolE) {
							boolE.printStackTrace();
						}
								
						
						data.add(new AttendanceDataTable(
								String.valueOf(sNo),
								stdNo2,
								std2.getOtherNames()+ " "+ std2.getSurName(),
								schoolAttendance,
								String.valueOf(presents),
								String.valueOf(absents),
								String.valueOf(possibleTermAttendance),
								String.valueOf(possibleTermAttendanceCurrent)
								));
						
						entitymanager2.getTransaction().commit();
						entitymanager2.close();
						emfactory2.close();
						
						sNo = sNo + 1;
						
					}
				}
				
				attendSNoCol.setCellValueFactory(new PropertyValueFactory("sNo_Data"));
				attendStdNoCol.setCellValueFactory(new PropertyValueFactory("stdId_Data"));
				attendStdNameCol.setCellValueFactory(new PropertyValueFactory("name_Data"));
				attendIsPresentCol.setCellValueFactory(new PropertyValueFactory("isPresent_Data"));
				attendPresentsCol.setCellValueFactory(new PropertyValueFactory("presents_Data"));
				attendAbsentsCol.setCellValueFactory(new PropertyValueFactory("absents_Data"));
				attendTermPossibleCol.setCellValueFactory(new PropertyValueFactory("possibleAttendanceTerm_Data"));
				attendTermPossibleCurrentCol.setCellValueFactory(new PropertyValueFactory("possibleAttendanceCurrent_Data"));
				
				attendanceDataTable.setItems(data);
				
			}
			catch(Exception e2) {
				e2.printStackTrace();
				Alert alert = new Alert(Alert.AlertType.ERROR);
				alert.setContentText("Error2 : "+ e2.getMessage());
				Optional<ButtonType> result = alert.showAndWait();
				if(result.get() == ButtonType.OK) {
					alert.close();
				}
				else {
					alert.close();
				}
			}
			
		}
		catch(Exception e) {
			e.printStackTrace();
			Alert alert = new Alert(Alert.AlertType.ERROR);
			alert.setContentText("Error : "+ e.getMessage());
			Optional<ButtonType> result = alert.showAndWait();
			if(result.get() == ButtonType.OK) {
				alert.close();
			}
			else {
				alert.close();
			}
		}
		
		//set table uneditable
		attendanceDataTable.setEditable(false);
		attendanceDataTable.getSelectionModel().cellSelectionEnabledProperty().set(false);
	}
	
	@FXML public void attendanceAbsentAllButton(ActionEvent event) {
		try {
			String attendanceClassId = attendanceClass.getValue();
			LocalDate date = attendanceDate.getValue();
			String stdClaz, year, term;
			LinkedHashSet<String> attendStdList = new LinkedHashSet<>();
			
			EntityManagerFactory emfactory2 = Persistence.createEntityManagerFactory
					("SchoolMgtSystem");
			EntityManager entitymanager2 = emfactory2.createEntityManager();
			entitymanager2.getTransaction().begin();
			
			StudentClasses clax = entitymanager2.find(StudentClasses.class, attendanceClassId);
			
			attendStdList = clax.getStdList();
			stdClaz = clax.getClassNo()+clax.getClassLetter();
			year = clax.getYear();
			term = clax.getTerm();
			
			entitymanager2.getTransaction().commit();
			entitymanager2.close();
			emfactory2.close();
			
			int count = 0;
			for(String stdId : attendStdList) {
				
				String stdNo = stdId;
				String saId = stdNo + year + term + date;
				String name;
				String user = dispName;
				String lastUpdateUser = user;
				LocalDate attendanceDate = date;
				LocalDate lastUpdateDate = date;
				int presents = 0;
				int absents = 0; 
				int possibleTermAttendance = 0; 
				int possibleTermAttendanceCurrent = 0;
				boolean isPresent = false;
				String sex, ageStr;
				
				EntityManagerFactory emfactory = Persistence.createEntityManagerFactory
						("SchoolMgtSystem");
				EntityManager entitymanager = emfactory.createEntityManager();
				entitymanager.getTransaction().begin();
				
				Students std = entitymanager.find(Students.class, stdNo);
				
				name = std.getOtherNames() + " " + std.getSurName();
				
				try {
					presents = getSchoolAttendancePresents(entitymanager, stdNo, year, term);
				}
				catch(Exception boolE) {
					boolE.printStackTrace();
				}
				
				try {
					absents = getSchoolAttendanceAbsents(entitymanager, stdNo, year, term);
				}
				catch(Exception boolE) {
					boolE.printStackTrace();
				}
				
				try {
					possibleTermAttendance = 
							getAcademicTermNoSchoolDays(entitymanager, term, year) - 
							getAcademicHolidayTotal(entitymanager, year, term);
				}
				catch(Exception boolE) {
					boolE.printStackTrace();
				}
				
				try {
					possibleTermAttendanceCurrent = 
						getAcademicTermNoSchoolDaysCurrent(entitymanager, term, year, date) - 
						getAcademicHolidayTotalCurrent(entitymanager, year, term, date);
				}
				catch(Exception boolE) {
					boolE.printStackTrace();
				}
									
				entitymanager.getTransaction().commit();
				entitymanager.close();
				emfactory.close();
				
				CreateSchoolAttendance schoolAttend = new CreateSchoolAttendance();
				try {
					schoolAttend.createSchoolAttendance(saId, stdNo, name, stdClaz, year, term, user, 
							lastUpdateUser, isPresent, presents, absents + 1, possibleTermAttendance, 
							possibleTermAttendanceCurrent, attendanceDate, date, lastUpdateDate);
					
					count++;
				}
				catch(Exception e2) {
					e2.printStackTrace();
				}
				
			}
			
			refreshAttendanceTableView();
			
			Alert alert = new Alert(Alert.AlertType.INFORMATION);
			alert.setContentText(String.valueOf(count)+ " "+ stdClaz + "'s students successfully absented...");
			Optional<ButtonType> result = alert.showAndWait();
			if(result.get() == ButtonType.OK) {
				alert.close();
			}
			else {
				alert.close();
			}
			
		}
		catch(Exception e) {
			e.printStackTrace();
			Alert alert = new Alert(Alert.AlertType.ERROR);
			alert.setContentText("Error: "+ e.getMessage());
			Optional<ButtonType> result = alert.showAndWait();
			if(result.get() == ButtonType.OK) {
				alert.close();
			}
			else {
				alert.close();
			}
		}
		
	}
	
	@FXML public void attendancePresentAllButton(ActionEvent event) {
		try {
			String attendanceClassId = attendanceClass.getValue();
			LocalDate date = attendanceDate.getValue();
			String stdClaz, year, term;
			LinkedHashSet<String> attendStdList = new LinkedHashSet<>();
			
			EntityManagerFactory emfactory2 = Persistence.createEntityManagerFactory
					("SchoolMgtSystem");
			EntityManager entitymanager2 = emfactory2.createEntityManager();
			entitymanager2.getTransaction().begin();
			
			StudentClasses clax = entitymanager2.find(StudentClasses.class, attendanceClassId);
			
			attendStdList = clax.getStdList();
			stdClaz = clax.getClassNo()+clax.getClassLetter();
			year = clax.getYear();
			term = clax.getTerm();
			
			entitymanager2.getTransaction().commit();
			entitymanager2.close();
			emfactory2.close();
			
			int count = 0;
			for(String stdId : attendStdList) {
				
				String stdNo = stdId;
				String saId = stdNo + year + term + date;
				String name;
				String user = dispName;
				String lastUpdateUser = user;
				LocalDate attendanceDate = date;
				LocalDate lastUpdateDate = date;
				int presents = 0;
				int absents = 0; 
				int possibleTermAttendance = 0; 
				int possibleTermAttendanceCurrent = 0;
				boolean isPresent = true;
				String sex, ageStr;
				
				EntityManagerFactory emfactory = Persistence.createEntityManagerFactory
						("SchoolMgtSystem");
				EntityManager entitymanager = emfactory.createEntityManager();
				entitymanager.getTransaction().begin();
				
				Students std = entitymanager.find(Students.class, stdNo);
				
				name = std.getOtherNames() + " " + std.getSurName();
				
				try {
					presents = getSchoolAttendancePresents(entitymanager, stdNo, year, term);
				}
				catch(Exception boolE) {
					boolE.printStackTrace();
				}
				
				try {
					absents = getSchoolAttendanceAbsents(entitymanager, stdNo, year, term);
				}
				catch(Exception boolE) {
					boolE.printStackTrace();
				}
				
				try {
					possibleTermAttendance = 
							getAcademicTermNoSchoolDays(entitymanager, term, year) - 
							getAcademicHolidayTotal(entitymanager, year, term);
				}
				catch(Exception boolE) {
					boolE.printStackTrace();
				}
				
				try {
					possibleTermAttendanceCurrent = 
						getAcademicTermNoSchoolDaysCurrent(entitymanager, term, year, date) - 
						getAcademicHolidayTotalCurrent(entitymanager, year, term, date);
				}
				catch(Exception boolE) {
					boolE.printStackTrace();
				}
									
				entitymanager.getTransaction().commit();
				entitymanager.close();
				emfactory.close();
				
				CreateSchoolAttendance schoolAttend = new CreateSchoolAttendance();
				try {
					schoolAttend.createSchoolAttendance(saId, stdNo, name, stdClaz, year, term, user, 
							lastUpdateUser, isPresent, presents + 1, absents, possibleTermAttendance, 
							possibleTermAttendanceCurrent, attendanceDate, date, lastUpdateDate);
					
					count++;
					
				}
				catch(Exception e2) {
					e2.printStackTrace();
				}
				
			}
			
			refreshAttendanceTableView();
			
			Alert alert = new Alert(Alert.AlertType.INFORMATION);
			alert.setContentText(String.valueOf(count)+ " "+ stdClaz + "'s students successfully presented...");
			Optional<ButtonType> result = alert.showAndWait();
			if(result.get() == ButtonType.OK) {
				alert.close();
			}
			else {
				alert.close();
			}
			
		}
		catch(Exception e) {
			e.printStackTrace();
			Alert alert = new Alert(Alert.AlertType.ERROR);
			alert.setContentText("Error: "+ e.getMessage());
			Optional<ButtonType> result = alert.showAndWait();
			if(result.get() == ButtonType.OK) {
				alert.close();
			}
			else {
				alert.close();
			}
		}
	}
	
	@FXML public void attendanceResetButton(ActionEvent event) {
		try {
			String attendanceClassId = attendanceClass.getValue();
			LocalDate date = attendanceDate.getValue();
			String stdClaz, year, term;
			LinkedHashSet<String> attendStdList = new LinkedHashSet<>();
			
			EntityManagerFactory emfactory2 = Persistence.createEntityManagerFactory
					("SchoolMgtSystem");
			EntityManager entitymanager2 = emfactory2.createEntityManager();
			entitymanager2.getTransaction().begin();
			
			StudentClasses clax = entitymanager2.find(StudentClasses.class, attendanceClassId);
			
			attendStdList = clax.getStdList();
			stdClaz = clax.getClassNo()+clax.getClassLetter();
			year = clax.getYear();
			term = clax.getTerm();
			
			entitymanager2.getTransaction().commit();
			entitymanager2.close();
			emfactory2.close();
			
			Alert alertz = new Alert(Alert.AlertType.CONFIRMATION);
			alertz.setContentText("Do you want to reset all of "+stdClaz + "'s students..?");
			Optional<ButtonType> resultz = alertz.showAndWait();
			if(resultz.get() == ButtonType.OK) {
				
				for(String stdId : attendStdList) {
					
					String stdNo = stdId;
					String saId = stdNo + year + term + date;
					
					
					DeleteSchoolAttendance schoolDel = new DeleteSchoolAttendance();
					try {
						schoolDel.deleteSchoolAttendance(saId);
						
					}
					catch(Exception e2) {
						e2.printStackTrace();
					}
					
				}
			}
			else {
				alertz.close();
			}
			
			refreshAttendanceTableView();
			
			Alert alert = new Alert(Alert.AlertType.INFORMATION);
			alert.setContentText("...all of "+stdClaz + "'s students successfully reset...");
			Optional<ButtonType> result = alert.showAndWait();
			if(result.get() == ButtonType.OK) {
				alert.close();
			}
			else {
				alert.close();
			}
			
		}
		catch(Exception e) {
			e.printStackTrace();
			Alert alert = new Alert(Alert.AlertType.ERROR);
			alert.setContentText("Error: "+ e.getMessage());
			Optional<ButtonType> result = alert.showAndWait();
			if(result.get() == ButtonType.OK) {
				alert.close();
			}
			else {
				alert.close();
			}
		}
	}
	
	@FXML public void xcelSchoolAttendance(ActionEvent event) {
		Workbook workbook = new HSSFWorkbook();
		Sheet spreadSheet = workbook.createSheet("sample");
		Row row = spreadSheet.createRow(0);
		
		for(int j = 0; j < attendanceDataTable.getColumns().size(); j++) {
			row.createCell(j).setCellValue(attendanceDataTable.getColumns().get(j).getText());
		}
		
		for(int i = 0; i < attendanceDataTable.getItems().size(); i++) {
			row = spreadSheet.createRow(i + 1);
			for(int j = 0; j < attendanceDataTable.getColumns().size(); j++) {
				if(attendanceDataTable.getColumns().get(j).getCellData(i) != null) {
					row.createCell(j).setCellValue(attendanceDataTable.getColumns().get(j).getCellData(i).toString());
				}
				else {
					row.createCell(j).setCellValue("");
				}
			}
		}
		
		String txt = attendanceClass.getValue()+attendanceDate.getValue()+".xls";
		String filePath = "C:\\workbook\\"+txt;
		
		try {
			FileOutputStream fileOut = new FileOutputStream(filePath);
			try {
				workbook.write(fileOut);
				fileOut.close();
				attendanceLabel.setText(filePath);
			} catch (IOException e2) {
				attendanceLabel.setText("Write Error: "+ e2.getMessage());
			}
		} catch (FileNotFoundException e) {
			attendanceLabel.setText("File Error: "+ e.getMessage());
		}
	}
	
	public Vector<SchoolAttendance> getSchoolAttendanceByStdId(EntityManager em, String stdId) {
		TypedQuery<SchoolAttendance> query = em.createQuery(
				"select e from SchoolAttendance e where "
				+ "e.stdId = ?1 ", SchoolAttendance.class);
		query.setParameter(1, stdId);
		
		return (Vector<SchoolAttendance>) query.getResultList();
	}
	
	public Vector<SchoolAttendance> getSchoolAttendance(EntityManager em, String stdId, 
			String year, String term, LocalDate date) {
		TypedQuery<SchoolAttendance> query = em.createQuery(
				"select e from SchoolAttendance e where "
				+ "e.stdId = ?1   and "
				+ "e.year = ?2 and "
				+ "e.term = ?3 and "
				+ "e.date = ?4 ", SchoolAttendance.class);
		query.setParameter(1, stdId);
		query.setParameter(2, year);
		query.setParameter(3, term);
		query.setParameter(4, date);
		
		return (Vector<SchoolAttendance>) query.getResultList();
	}
	
	public boolean getSchoolAttendanceIsPresent(EntityManager em, String stdId, 
			String year, String term, LocalDate date) {
		TypedQuery<SchoolAttendance> query = em.createQuery(
				"select e from SchoolAttendance e where "
				+ "e.stdId = ?1   and "
				+ "e.year = ?2 and "
				+ "e.term = ?3 and "
				+ "e.date = ?4 ", SchoolAttendance.class);
		query.setParameter(1, stdId);
		query.setParameter(2, year);
		query.setParameter(3, term);
		query.setParameter(4, date);
		
		return (boolean) query.getSingleResult().getIsPresent();
	}
	
	public int getSchoolAttendancePresents(EntityManager em, String stdId, 
			String year, String term) {
		TypedQuery<SchoolAttendance> query = em.createQuery(
				"select e from SchoolAttendance e where "
				+ "e.stdId = ?1   and "
				+ "e.year = ?2 and "
				+ "e.term = ?3  ", SchoolAttendance.class);
		query.setParameter(1, stdId);
		query.setParameter(2, year);
		query.setParameter(3, term);
		
		Vector<SchoolAttendance> presentsVal = (Vector<SchoolAttendance>)query.getResultList();
		
		LinkedHashSet<String> saidCount = new LinkedHashSet<>();
		for(SchoolAttendance att : presentsVal) {
			if(att.getIsPresent()) {
				saidCount.add(att.getSaId());
			}
		}
		
		return saidCount.size();
	}
	
	public int getSchoolAttendancePresentsYear(EntityManager em, String stdId, 
			String year) {
		TypedQuery<SchoolAttendance> query = em.createQuery(
				"select e from SchoolAttendance e where "
				+ "e.stdId = ?1   and "
				+ "e.year = ?2  ", SchoolAttendance.class);
		query.setParameter(1, stdId);
		query.setParameter(2, year);
		
		Vector<SchoolAttendance> presentsVal = (Vector<SchoolAttendance>)query.getResultList();
		
		LinkedHashSet<String> saidCount = new LinkedHashSet<>();
		for(SchoolAttendance att : presentsVal) {
			if(att.getIsPresent()) {
				saidCount.add(att.getSaId());
			}
		}
		
		return saidCount.size();
	}
	
	public int getSchoolAttendanceAbsents(EntityManager em, String stdId, 
			String year, String term) {
		TypedQuery<SchoolAttendance> query = em.createQuery(
				"select e from SchoolAttendance e where "
				+ "e.stdId = ?1   and "
				+ "e.year = ?2 and "
				+ "e.term = ?3 ", SchoolAttendance.class);
		query.setParameter(1, stdId);
		query.setParameter(2, year);
		query.setParameter(3, term);
		
		Vector<SchoolAttendance> absentsVal = (Vector<SchoolAttendance>)query.getResultList();
		
		LinkedHashSet<String> saidCount = new LinkedHashSet<>();
		for(SchoolAttendance att : absentsVal) {
			if(att.getIsPresent() == false) {
				saidCount.add(att.getSaId());
			}
		}
		
		return saidCount.size();
	}
	
	public int getSchoolAttendanceAbsentsYear(EntityManager em, String stdId, 
			String year) {
		TypedQuery<SchoolAttendance> query = em.createQuery(
				"select e from SchoolAttendance e where "
				+ "e.stdId = ?1   and "
				+ "e.year = ?2 ", SchoolAttendance.class);
		query.setParameter(1, stdId);
		query.setParameter(2, year);
		
		Vector<SchoolAttendance> absentsVal = (Vector<SchoolAttendance>)query.getResultList();
		
		LinkedHashSet<String> saidCount = new LinkedHashSet<>();
		for(SchoolAttendance att : absentsVal) {
			if(att.getIsPresent() == false) {
				saidCount.add(att.getSaId());
			}
		}
		
		return saidCount.size();
	}
	
	
	public int getSchoolAttendanceAbsentsDate(EntityManager em, String stdId, 
			String year, String term, LocalDate attendanceDate) {
		TypedQuery<SchoolAttendance> query = em.createQuery(
				"select e from SchoolAttendance e where "
				+ "e.stdId = ?1   and "
				+ "e.year = ?2 and "
				+ "e.term = ?3 and "
				+ "e.attendanceDate = ?4 ", SchoolAttendance.class);
		query.setParameter(1, stdId);
		query.setParameter(2, year);
		query.setParameter(3, term);
		query.setParameter(4, attendanceDate);
		
		Vector<SchoolAttendance> absentsVal = (Vector<SchoolAttendance>)query.getResultList();
		
		LinkedHashSet<String> saidCount = new LinkedHashSet<>();
		for(SchoolAttendance att : absentsVal) {
			if(att.getIsPresent() == false) {
				saidCount.add(att.getSaId());
			}
		}
		
		return saidCount.size();
	}
	
	public int getSchoolAttendanceTermlyPossible(EntityManager em, String stdId, 
			String year, String term, LocalDate date) {
		TypedQuery<SchoolAttendance> query = em.createQuery(
				"select e from SchoolAttendance e where "
				+ "e.stdId = ?1   and "
				+ "e.year = ?2 and "
				+ "e.term = ?3 and "
				+ "e.date = ?4 ", SchoolAttendance.class);
		query.setParameter(1, stdId);
		query.setParameter(2, year);
		query.setParameter(3, term);
		query.setParameter(4, date);
		
		return (int) query.getSingleResult().getTermlyPossible();
	}
	
	public int getSchoolAttendanceTermlyPossibleCurrent(EntityManager em, String stdId, 
			String year, String term, LocalDate date) {
		TypedQuery<SchoolAttendance> query = em.createQuery(
				"select e from SchoolAttendance e where "
				+ "e.stdId = ?1   and "
				+ "e.year = ?2 and "
				+ "e.term = ?3 and "
				+ "e.date = ?4 ", SchoolAttendance.class);
		query.setParameter(1, stdId);
		query.setParameter(2, year);
		query.setParameter(3, term);
		query.setParameter(4, date);
		
		return (int) query.getSingleResult().getTermlyPossibleCurrent();
	}
	
	//Get holiday totals
	public int getAcademicHolidayTotal(EntityManager em, String year, String term) {
		TypedQuery<AcademicHoliday> query = em.createQuery(
				"select e from AcademicHoliday e where "
				+ "e.year = ?1 and "
				+ "e.term = ?2 ", AcademicHoliday.class);
		query.setParameter(1, year);
		query.setParameter(2, term);
		
		Vector<AcademicHoliday> holsTotal = (Vector<AcademicHoliday>) query.getResultList();
		
		int sum = 0;
		for(AcademicHoliday hol : holsTotal) {
			
			if(!(hol.getHolidayType().equals("Terminal"))) {
				sum = sum + hol.getNoHolidays();
			}
			
		}
		
		return sum;
	}
	
	//Get holydays total current
	public int getAcademicHolidayTotalCurrent(EntityManager em, String year, String term, LocalDate date) {
		TypedQuery<AcademicHoliday> query = em.createQuery(
				"select e from AcademicHoliday e where "
				+ "e.year = ?1 and "
				+ "e.term = ?2 ", AcademicHoliday.class);
		query.setParameter(1, year);
		query.setParameter(2, term);
		
		Vector<AcademicHoliday> holsTotal = (Vector<AcademicHoliday>) query.getResultList();
		
		int sum = 0;
		for(AcademicHoliday hol : holsTotal) {
			
			if(!(hol.getHolidayType().equals("Terminal"))) {
				
				if(hol.getHolidayBegins().toEpochDay() < date.toEpochDay() && 
						hol.getHolidayEnds().toEpochDay() > date.toEpochDay()) {
					sum = sum + (int)(date.toEpochDay() - hol.getHolidayBegins().toEpochDay());
				}
				else if(hol.getHolidayBegins().toEpochDay() < date.toEpochDay() && 
						hol.getHolidayEnds().toEpochDay() <= date.toEpochDay()) {
					sum = sum + hol.getNoHolidays();
				}
				else {
					//
				}
			}
			
		}
		
		return sum;
	}
	
	//get academicterm begins date
	public int getAcademicTermNoSchoolDaysCurrent(EntityManager em, String term, String session, LocalDate date) {
		TypedQuery<AcademicTerm> query = em.createQuery(
				"select e from AcademicTerm e "
				+ "where e.term = ?1 and "
				+ "e.session = ?2 ", AcademicTerm.class);
		
		query.setParameter(1, term);
		query.setParameter(2, session);
		
		Vector<AcademicTerm> termVals = (Vector<AcademicTerm>) query.getResultList();
		
		LocalDate termBegins = null;
		for(AcademicTerm tm : termVals) {
			termBegins = tm.getTermBegins();
		}
		
		int daysTerm = (int)(date.toEpochDay() - termBegins.toEpochDay());
		int schoolDays = daysTerm - ((daysTerm/7) * 2);
		
		return schoolDays;
	}
	
	//get academic term total
	public int getAcademicTermNoSchoolDays(EntityManager em, String term, String session) {
		TypedQuery<AcademicTerm> query = em.createQuery(
				"select e from AcademicTerm e "
				+ "where e.term = ?1 and "
				+ "e.session = ?2 ", AcademicTerm.class);
		
		query.setParameter(1, term);
		query.setParameter(2, session);
		
		Vector<AcademicTerm> termVals = (Vector<AcademicTerm>) query.getResultList();
		
		LocalDate termBegins = null;
		LocalDate termEnds = null;
		for(AcademicTerm tm : termVals) {
			termBegins = tm.getTermBegins();
			termEnds = tm.getTermEnds();
		}
		
		int daysTerm = (int)(termEnds.toEpochDay() - termBegins.toEpochDay());
		int schoolDays = daysTerm - ((daysTerm/7) * 2);
		
		return schoolDays;
	}
	
	public int getSchoolAttendanceAbsents2(EntityManager em, String stdId, 
			String year, String term, LocalDate date) {
		TypedQuery<SchoolAttendance> query = em.createQuery(
				"select e from SchoolAttendance e where "
				+ "e.stdId = ?1   and "
				+ "e.year = ?2 and "
				+ "e.term = ?3 and "
				+ "e.date = ?4 ", SchoolAttendance.class);
		query.setParameter(1, stdId);
		query.setParameter(2, year);
		query.setParameter(3, term);
		query.setParameter(4, date);
		
		return (int) query.getSingleResult().getAbsents();
	}
	
	//Attendance by Barcode Scan
	@FXML private ComboBox<String> attendBarcodeClass;
	@FXML private TextField barcodeAttendInput, barcodeAttendIdNo, barcodeAttendSex, barcodeAttendAge, 
		barcodeAttendClass, barcodeAttendYear, barcodeAttendTerm, barcodeAttendAbsents, 
		barcodeAttendPresents, barcodeAttendTermPossible, barcodeAttendTermCurrent;
	@FXML private TextArea barcodeAttendName, barcodeAttendStatus;
	@FXML private ImageView barcodeAttendImageView;
	
	ObservableList<String> attBCList = FXCollections.observableArrayList();
	
	@FXML public void attendanceBarcodeInit(MouseEvent event) {
		populateStdClassesCombo3(attBCList, attendBarcodeClass);
	}
	
	@FXML public void barcodeAttendDetailsInit(KeyEvent event) {
		
		String bcInput = barcodeAttendInput.getText();
		if(bcInput.trim().length() != 0 && !bcInput.contains("Error") && 
				!bcInput.contains("null")) {
			
			String attendanceClassId = attendBarcodeClass.getValue();
			String stdClaz, year, term;
			LinkedHashSet<String> attendStdList = new LinkedHashSet<>();
			
			EntityManagerFactory emfactory2 = Persistence.createEntityManagerFactory
					("SchoolMgtSystem");
			EntityManager entitymanager2 = emfactory2.createEntityManager();
			entitymanager2.getTransaction().begin();
			
			StudentClasses clax = entitymanager2.find(StudentClasses.class, attendanceClassId);
			
			attendStdList = clax.getStdList();
			stdClaz = clax.getClassNo()+clax.getClassLetter();
			year = clax.getYear();
			term = clax.getTerm();
			
			entitymanager2.getTransaction().commit();
			entitymanager2.close();
			emfactory2.close();
			
			if(attendStdList.contains(bcInput)) {
								
				if(event.getCode() == KeyCode.ENTER) {
					barcodeAttendIdNo.setText(bcInput);
					
					LocalDateTime dateTime = LocalDateTime.now();
					LocalDate date = dateTime.toLocalDate();
					String stdNo = barcodeAttendIdNo.getText();
					String saId = stdNo + year + term + date;
					String name;
					String user = dispName;
					String lastUpdateUser = user;
					LocalDate attendanceDate = date;
					LocalDate lastUpdateDate = date;
					int presents = 0;
					int absents = 0; 
					int possibleTermAttendance = 0; 
					int possibleTermAttendanceCurrent = 0;
					boolean isPresent = true;
					String sex, ageStr;
					
					EntityManagerFactory emfactory = Persistence.createEntityManagerFactory
							("SchoolMgtSystem");
					EntityManager entitymanager = emfactory.createEntityManager();
					entitymanager.getTransaction().begin();
					
					Students std = entitymanager.find(Students.class, stdNo);
					
					name = std.getOtherNames() + " " + std.getSurName();
					sex = std.getSex();
					ageStr = String.valueOf(date.getYear() - std.getDateOfBirth().getYear());
					
					try {
						presents = getSchoolAttendancePresents(entitymanager, stdNo, year, term);
					}
					catch(Exception boolE) {
						boolE.printStackTrace();
					}
					
					try {
						absents = getSchoolAttendanceAbsents(entitymanager, stdNo, year, term);
					}
					catch(Exception boolE) {
						boolE.printStackTrace();
					}
					
					try {
						possibleTermAttendance = 
								getAcademicTermNoSchoolDays(entitymanager, term, year) - 
								getAcademicHolidayTotal(entitymanager, year, term);
					}
					catch(Exception boolE) {
						boolE.printStackTrace();
					}
					
					try {
						possibleTermAttendanceCurrent = 
							getAcademicTermNoSchoolDaysCurrent(entitymanager, term, year, date) - 
							getAcademicHolidayTotalCurrent(entitymanager, year, term, date);
					}
					catch(Exception boolE) {
						boolE.printStackTrace();
					}
										
					entitymanager.getTransaction().commit();
					entitymanager.close();
					emfactory.close();
					
					CreateSchoolAttendance schoolAttend = new CreateSchoolAttendance();
					try {
						schoolAttend.createSchoolAttendance(saId, stdNo, name, stdClaz, year, term, user, 
								lastUpdateUser, isPresent, presents, absents, possibleTermAttendance, 
								possibleTermAttendanceCurrent, attendanceDate, date, lastUpdateDate);
						
					}
					catch(Exception e) {
						e.printStackTrace();
					}
					
					try {
						EntityManagerFactory emfactory3 = Persistence.createEntityManagerFactory
								("SchoolMgtSystem");
						EntityManager entitymanager3 = emfactory3.createEntityManager();
						entitymanager3.getTransaction().begin();
						
						SchoolAttendance skul = entitymanager3.find(SchoolAttendance.class, saId);
						
						barcodeAttendSex.setText(sex); 
						barcodeAttendAge.setText(ageStr);
						barcodeAttendClass.setText(skul.getStdClass());
						barcodeAttendYear.setText(skul.getYear()); 
						barcodeAttendTerm.setText(skul.getTerm()); 
						barcodeAttendAbsents.setText(String.valueOf(skul.getAbsents()));
						barcodeAttendPresents.setText(String.valueOf(skul.getPresents()));
						barcodeAttendTermPossible.setText(String.valueOf(skul.getTermlyPossible())); 
						barcodeAttendTermCurrent.setText(String.valueOf(skul.getTermlyPossibleCurrent()));
						barcodeAttendName.setText(name);
						barcodeAttendStatus.setText("Attendance: "+ String.valueOf(skul.getIsPresent()));
						
						entitymanager3.getTransaction().commit();
						entitymanager3.close();
						emfactory3.close();
					}
					catch(Exception findE) {
						findE.printStackTrace();
					}
					
					//view photo
					try {
						String stdId = stdNo; 
						
						String jdbcUrl = dbURL;
						String username = dbUSR;
						String password = dbPWD;
						
						String sql = "SELECT * FROM stdImages WHERE stdid = ?";
						
						try(Connection conn = DriverManager.getConnection(jdbcUrl, username, password);
								){
							
							try(PreparedStatement stmt = conn.prepareStatement(sql);
									){
								stmt.setString(1, stdId);		
								
								ResultSet result = stmt.executeQuery();
								
								
								if(result.next()) {
									InputStream imageStream = result.getBinaryStream("image");
									Image img = new Image(imageStream);
									barcodeAttendImageView.setImage(img);
									//String stdName = result.getString("name");
									//barcodeEnqName.setText(stdName);
								}
								else {
									barcodeAttendImageView.setImage(null);
								}
							
								result.close();
								stmt.close();
								conn.close();
							}
							catch(SQLException io) {
								io.printStackTrace();
								barcodeAttendImageView.setImage(null);
							}
						}
						catch(SQLException eq) {
							eq.printStackTrace();
							barcodeAttendImageView.setImage(null);
						}
						
						//clear barcode input
						barcodeAttendInput.clear();
					}
					catch(Exception e) {
						e.printStackTrace();
						barcodeAttendImageView.setImage(null);
					}
					
				}
				
			}
			else {
				Alert alert = new Alert(Alert.AlertType.INFORMATION);
				alert.setContentText(bcInput +" does not belong to "+ stdClaz + 
						". Please try another class.");
				Optional<ButtonType> result = alert.showAndWait();
				if(result.get() == ButtonType.OK) {
					alert.close();
				}
				else {
					alert.close();
				}
			}
		}
	}
	
	@FXML public void submitBarcodeAttendButton(ActionEvent event) {
		
		String bcInput = barcodeAttendInput.getText();
		if(bcInput.trim().length() != 0 && !bcInput.contains("Error") && 
				!bcInput.contains("null")) {
			
			String attendanceClassId = attendBarcodeClass.getValue();
			String stdClaz, year, term;
			LinkedHashSet<String> attendStdList = new LinkedHashSet<>();
			
			EntityManagerFactory emfactory2 = Persistence.createEntityManagerFactory
					("SchoolMgtSystem");
			EntityManager entitymanager2 = emfactory2.createEntityManager();
			entitymanager2.getTransaction().begin();
			
			StudentClasses clax = entitymanager2.find(StudentClasses.class, attendanceClassId);
			
			attendStdList = clax.getStdList();
			stdClaz = clax.getClassNo()+clax.getClassLetter();
			year = clax.getYear();
			term = clax.getTerm();
			
			entitymanager2.getTransaction().commit();
			entitymanager2.close();
			emfactory2.close();
			
			if(attendStdList.contains(bcInput)) {
								
				if(true) {
					barcodeAttendIdNo.setText(bcInput);
					
					LocalDateTime dateTime = LocalDateTime.now();
					LocalDate date = dateTime.toLocalDate();
					String stdNo = barcodeAttendIdNo.getText();
					String saId = stdNo + year + term + date;
					String name;
					String user = dispName;
					String lastUpdateUser = user;
					LocalDate attendanceDate = date;
					LocalDate lastUpdateDate = date;
					int presents = 0;
					int absents = 0; 
					int possibleTermAttendance = 0; 
					int possibleTermAttendanceCurrent = 0;
					boolean isPresent = true;
					String sex, ageStr;
					
					EntityManagerFactory emfactory = Persistence.createEntityManagerFactory
							("SchoolMgtSystem");
					EntityManager entitymanager = emfactory.createEntityManager();
					entitymanager.getTransaction().begin();
					
					Students std = entitymanager.find(Students.class, stdNo);
					
					name = std.getOtherNames() + " " + std.getSurName();
					sex = std.getSex();
					ageStr = String.valueOf(date.getYear() - std.getDateOfBirth().getYear());
					
					try {
						presents = getSchoolAttendancePresents(entitymanager, stdNo, year, term);
					}
					catch(Exception boolE) {
						boolE.printStackTrace();
					}
					
					try {
						absents = getSchoolAttendanceAbsents(entitymanager, stdNo, year, term);
					}
					catch(Exception boolE) {
						boolE.printStackTrace();
					}
					
					try {
						possibleTermAttendance = 
								getAcademicTermNoSchoolDays(entitymanager, term, year) - 
								getAcademicHolidayTotal(entitymanager, year, term);
					}
					catch(Exception boolE) {
						boolE.printStackTrace();
					}
					
					try {
						possibleTermAttendanceCurrent = 
							getAcademicTermNoSchoolDaysCurrent(entitymanager, term, year, date) - 
							getAcademicHolidayTotalCurrent(entitymanager, year, term, date);
					}
					catch(Exception boolE) {
						boolE.printStackTrace();
					}
										
					entitymanager.getTransaction().commit();
					entitymanager.close();
					emfactory.close();
					
					CreateSchoolAttendance schoolAttend = new CreateSchoolAttendance();
					try {
						schoolAttend.createSchoolAttendance(saId, stdNo, name, stdClaz, year, term, user, 
								lastUpdateUser, isPresent, presents + 1, absents, possibleTermAttendance, 
								possibleTermAttendanceCurrent, attendanceDate, date, lastUpdateDate);
						
					}
					catch(Exception e) {
						e.printStackTrace();
					}
					
					try {
						EntityManagerFactory emfactory3 = Persistence.createEntityManagerFactory
								("SchoolMgtSystem");
						EntityManager entitymanager3 = emfactory3.createEntityManager();
						entitymanager3.getTransaction().begin();
						
						SchoolAttendance skul = entitymanager3.find(SchoolAttendance.class, saId);
						
						barcodeAttendSex.setText(sex); 
						barcodeAttendAge.setText(ageStr);
						barcodeAttendClass.setText(skul.getStdClass());
						barcodeAttendYear.setText(skul.getYear()); 
						barcodeAttendTerm.setText(skul.getTerm()); 
						barcodeAttendAbsents.setText(String.valueOf(getSchoolAttendanceAbsents
								(entitymanager3, stdNo, year, term)));
						barcodeAttendPresents.setText(String.valueOf(getSchoolAttendancePresents
								(entitymanager3, stdNo, year, term)));
						barcodeAttendTermPossible.setText(String.valueOf(skul.getTermlyPossible())); 
						barcodeAttendTermCurrent.setText(String.valueOf(skul.getTermlyPossibleCurrent()));
						barcodeAttendName.setText(name);
						barcodeAttendStatus.setText("Attendance: "+ String.valueOf(skul.getIsPresent()));
						
						entitymanager3.getTransaction().commit();
						entitymanager3.close();
						emfactory3.close();
					}
					catch(Exception findE) {
						findE.printStackTrace();
					}
					
					//view photo
					try {
						String stdId = stdNo; 
						
						String jdbcUrl = dbURL;
						String username = dbUSR;
						String password = dbPWD;
						
						String sql = "SELECT * FROM stdImages WHERE stdid = ?";
						
						try(Connection conn = DriverManager.getConnection(jdbcUrl, username, password);
								){
							
							try(PreparedStatement stmt = conn.prepareStatement(sql);
									){
								stmt.setString(1, stdId);		
								
								ResultSet result = stmt.executeQuery();
								
								
								if(result.next()) {
									InputStream imageStream = result.getBinaryStream("image");
									Image img = new Image(imageStream);
									barcodeAttendImageView.setImage(img);
									//String stdName = result.getString("name");
									//barcodeEnqName.setText(stdName);
								}
								else {
									barcodeAttendImageView.setImage(null);
								}
							
								result.close();
								stmt.close();
								conn.close();
							}
							catch(SQLException io) {
								io.printStackTrace();
								barcodeAttendImageView.setImage(null);
							}
						}
						catch(SQLException eq) {
							eq.printStackTrace();
							barcodeAttendImageView.setImage(null);
						}
						
						//clear barcode input
						barcodeAttendInput.clear();
					}
					catch(Exception e) {
						e.printStackTrace();
						barcodeAttendImageView.setImage(null);
					}
					
				}
				
			}
			else {
				Alert alert = new Alert(Alert.AlertType.INFORMATION);
				alert.setContentText(bcInput +" does not belong to "+ stdClaz + 
						". Please try another class.");
				Optional<ButtonType> result = alert.showAndWait();
				if(result.get() == ButtonType.OK) {
					alert.close();
				}
				else {
					alert.close();
				}
			}
		}		
	}
	
	
	@FXML public void barcodeAttendanceAbsentButton(ActionEvent event) {
		try {
			String attendanceClassId = attendBarcodeClass.getValue();
			String stdClaz, year, term;
			LinkedHashSet<String> attendStdList = new LinkedHashSet<>();
			
			EntityManagerFactory emfactory2 = Persistence.createEntityManagerFactory
					("SchoolMgtSystem");
			EntityManager entitymanager2 = emfactory2.createEntityManager();
			entitymanager2.getTransaction().begin();
			
			StudentClasses clax = entitymanager2.find(StudentClasses.class, attendanceClassId);
			
			attendStdList = clax.getStdList();
			stdClaz = clax.getClassNo()+clax.getClassLetter();
			year = clax.getYear();
			term = clax.getTerm();
			
			entitymanager2.getTransaction().commit();
			entitymanager2.close();
			emfactory2.close();
			
			for(String stdId : attendStdList) {
				
				LocalDateTime dateTime = LocalDateTime.now();
				LocalDate date = dateTime.toLocalDate();
				String stdNo = stdId;
				String saId = stdNo + year + term + date;
				String name;
				String user = dispName;
				String lastUpdateUser = user;
				LocalDate attendanceDate = date;
				LocalDate lastUpdateDate = date;
				int presents = 0;
				int absents = 0; 
				int possibleTermAttendance = 0; 
				int possibleTermAttendanceCurrent = 0;
				boolean isPresent = false;
				String sex, ageStr;
				
				EntityManagerFactory emfactory = Persistence.createEntityManagerFactory
						("SchoolMgtSystem");
				EntityManager entitymanager = emfactory.createEntityManager();
				entitymanager.getTransaction().begin();
				
				Students std = entitymanager.find(Students.class, stdNo);
				
				name = std.getOtherNames() + " " + std.getSurName();
				
				try {
					presents = getSchoolAttendancePresents(entitymanager, stdNo, year, term);
				}
				catch(Exception boolE) {
					boolE.printStackTrace();
				}
				
				try {
					absents = getSchoolAttendanceAbsents(entitymanager, stdNo, year, term);
				}
				catch(Exception boolE) {
					boolE.printStackTrace();
				}
				
				try {
					possibleTermAttendance = 
							getAcademicTermNoSchoolDays(entitymanager, term, year) - 
							getAcademicHolidayTotal(entitymanager, year, term);
				}
				catch(Exception boolE) {
					boolE.printStackTrace();
				}
				
				try {
					possibleTermAttendanceCurrent = 
						getAcademicTermNoSchoolDaysCurrent(entitymanager, term, year, date) - 
						getAcademicHolidayTotalCurrent(entitymanager, year, term, date);
				}
				catch(Exception boolE) {
					boolE.printStackTrace();
				}
									
				entitymanager.getTransaction().commit();
				entitymanager.close();
				emfactory.close();
				
				CreateSchoolAttendance schoolAttend = new CreateSchoolAttendance();
				try {
					schoolAttend.createSchoolAttendance(saId, stdNo, name, stdClaz, year, term, user, 
							lastUpdateUser, isPresent, presents, absents + 1, possibleTermAttendance, 
							possibleTermAttendanceCurrent, attendanceDate, date, lastUpdateDate);
					
					barcodeAttendStatus.setText("...rest of "+stdClaz + "'s students successfully absented...");
				}
				catch(Exception e2) {
					e2.printStackTrace();
				}
				
			}
			
		}
		catch(Exception e) {
			e.printStackTrace();
			Alert alert = new Alert(Alert.AlertType.ERROR);
			alert.setContentText("Error: "+ e.getMessage());
			Optional<ButtonType> result = alert.showAndWait();
			if(result.get() == ButtonType.OK) {
				alert.close();
			}
			else {
				alert.close();
			}
		}
	}
	
	//queries for scores deletion - Annual
	public Vector<AnnualScoresTotal> getAnnualScoresTotalByStdNoYear(EntityManager em, String studentId, 
			String academicYear) {
		TypedQuery<AnnualScoresTotal> query = em.createQuery(
				"select e from AnnualScoresTotal e where "
				+ "e.studentId = ?1  and "
				+ "e.academicYear = ?2 ", AnnualScoresTotal.class);
		query.setParameter(1, studentId);
		query.setParameter(2, academicYear);
		
		return (Vector<AnnualScoresTotal>) query.getResultList();
	}

	public Vector<AnnualScoreSheetsSummary> getAnnualScoreSheetsSummaryByStdNoYear(EntityManager em, String studentId, 
			String academicYear) {
		TypedQuery<AnnualScoreSheetsSummary> query = em.createQuery(
				"select e from AnnualScoreSheetsSummary e where "
				+ "e.studentId = ?1  and "
				+ "e.academicYear = ?2 ", AnnualScoreSheetsSummary.class);
		query.setParameter(1, studentId);
		query.setParameter(2, academicYear);
		
		return (Vector<AnnualScoreSheetsSummary>) query.getResultList();
	}
	
	public Vector<AnnualScoreSheetsSummary> getAnnualScoreSheetsSummaryByStdNoYearSubject(EntityManager em, String studentId, 
			String academicYear, String subjectName) {
		TypedQuery<AnnualScoreSheetsSummary> query = em.createQuery(
				"select e from AnnualScoreSheetsSummary e where "
				+ "e.studentId = ?1  and "
				+ "e.academicYear = ?2 and "
				+ "e.subjectName = ?3 ", AnnualScoreSheetsSummary.class);
		query.setParameter(1, studentId);
		query.setParameter(2, academicYear);
		query.setParameter(3, subjectName);
		
		return (Vector<AnnualScoreSheetsSummary>) query.getResultList();
	}

	public Vector<ScoreSheetsSummary> getScoreSheetsSummaryByStdNoYear(EntityManager em, String studentId, 
			String academicYear) {
		TypedQuery<ScoreSheetsSummary> query = em.createQuery(
				"select e from ScoreSheetsSummary e where "
				+ "e.studentId = ?1 and "
				+ "e.academicYear = ?2 ", ScoreSheetsSummary.class);
		query.setParameter(1, studentId);
		query.setParameter(2, academicYear);
		
		return (Vector<ScoreSheetsSummary>) query.getResultList();
	}

	public Vector<JssScoreSheets> getJssScoreSheetsByStdNoYear(EntityManager em, String stdId, 
			String scoresYear) {
		TypedQuery<JssScoreSheets> query = em.createQuery(
				"select e from JssScoreSheets e where "
				+ "e.stdId = ?1 and "
				+ "e.scoresYear = ?2 ", JssScoreSheets.class);
		query.setParameter(1, stdId);
		query.setParameter(2, scoresYear);
		
		return (Vector<JssScoreSheets>) query.getResultList();
	}
	
	public Vector<ScoreSheets> getScoreSheetsByStdNoYear(EntityManager em, String stdId, 
			String scoresYear) {
		TypedQuery<ScoreSheets> query = em.createQuery(
				"select e from ScoreSheets e where "
				+ "e.stdId = ?1 and "
				+ "e.scoresYear = ?2 ", ScoreSheets.class);
		query.setParameter(1, stdId);
		query.setParameter(2, scoresYear);
		
		return (Vector<ScoreSheets>) query.getResultList();
	}
	
	//scores deletion - termly
//	public Vector<AnnualScoresTotal> getAnnualScoresTotalByStdNoYearTerm(EntityManager em, String studentId, 
//			String academicYear) {
//		TypedQuery<AnnualScoresTotal> query = em.createQuery(
//				"select e from AnnualScoresTotal e where "
//				+ "e.studentId = ?1  and "
//				+ "e.academicYear = ?2 ", AnnualScoresTotal.class);
//		query.setParameter(1, studentId);
//		query.setParameter(2, academicYear);
//		
//		return (Vector<AnnualScoresTotal>) query.getResultList();
//	}
//
//	public Vector<AnnualScoreSheetsSummary> getAnnualScoreSheetsSummaryByStdNoYearTerm(EntityManager em, String studentId, 
//			String academicYear) {
//		TypedQuery<AnnualScoreSheetsSummary> query = em.createQuery(
//				"select e from AnnualScoreSheetsSummary e where "
//				+ "e.studentId = ?1  and "
//				+ "e.academicYear = ?2 ", AnnualScoreSheetsSummary.class);
//		query.setParameter(1, studentId);
//		query.setParameter(2, academicYear);
//		
//		return (Vector<AnnualScoreSheetsSummary>) query.getResultList();
//	}

	public Vector<ScoreSheetsSummary> getScoreSheetsSummaryByStdNoYearTerm(EntityManager em, String studentId, 
			String academicYear, String studentTerm) {
		TypedQuery<ScoreSheetsSummary> query = em.createQuery(
				"select e from ScoreSheetsSummary e where "
				+ "e.studentId = ?1 and "
				+ "e.academicYear = ?2 and "
				+ "e.studentTerm = ?3 ", ScoreSheetsSummary.class);
		query.setParameter(1, studentId);
		query.setParameter(2, academicYear);
		query.setParameter(3, studentTerm);
		
		return (Vector<ScoreSheetsSummary>) query.getResultList();
	}

	public Vector<JssScoreSheets> getJssScoreSheetsByStdNoYearTerm(EntityManager em, String stdId, 
			String scoresYear, String term) {
		TypedQuery<JssScoreSheets> query = em.createQuery(
				"select e from JssScoreSheets e where "
				+ "e.stdId = ?1 and "
				+ "e.scoresYear = ?2 and "
				+ "e.term = ?3 ", JssScoreSheets.class);
		query.setParameter(1, stdId);
		query.setParameter(2, scoresYear);
		query.setParameter(3, term);
		
		return (Vector<JssScoreSheets>) query.getResultList();
	}
	
	public Vector<JssScoreSheets> getJssScoreSheetsByStdNoYearTermSubject(EntityManager em, String stdId, 
			String scoresYear, String term, String subjectName) {
		TypedQuery<JssScoreSheets> query = em.createQuery(
				"select e from JssScoreSheets e where "
				+ "e.stdId = ?1 and "
				+ "e.scoresYear = ?2 and "
				+ "e.term = ?3 and "
				+ "e.subjectName = ?4 ", JssScoreSheets.class);
		query.setParameter(1, stdId);
		query.setParameter(2, scoresYear);
		query.setParameter(3, term);
		query.setParameter(4, subjectName);
		
		return (Vector<JssScoreSheets>) query.getResultList();
	}
	
	public Vector<ScoreSheets> getScoreSheetsByStdNoYearTerm(EntityManager em, String stdId, 
			String scoresYear, String term) {
		TypedQuery<ScoreSheets> query = em.createQuery(
				"select e from ScoreSheets e where "
				+ "e.stdId = ?1 and "
				+ "e.scoresYear = ?2 and "
				+ "e.term = ?3 ", ScoreSheets.class);
		query.setParameter(1, stdId);
		query.setParameter(2, scoresYear);
		query.setParameter(3, term);
		
		return (Vector<ScoreSheets>) query.getResultList();
	}
	
	public Vector<ScoreSheets> getScoreSheetsByStdNoYearTermSubject(EntityManager em, String stdId, 
			String scoresYear, String term, String subjectName) {
		TypedQuery<ScoreSheets> query = em.createQuery(
				"select e from ScoreSheets e where "
				+ "e.stdId = ?1 and "
				+ "e.scoresYear = ?2 and "
				+ "e.term = ?3 and "
				+ "e.subjectName = ?4 ", ScoreSheets.class);
		query.setParameter(1, stdId);
		query.setParameter(2, scoresYear);
		query.setParameter(3, term);
		query.setParameter(4, subjectName);
		
		return (Vector<ScoreSheets>) query.getResultList();
	}
	
	//return classId
	public String getScoreSheetsSummaryByStdNoYearTermClassId(EntityManager em, String studentId, 
			String academicYear, String studentTerm) {
		TypedQuery<ScoreSheetsSummary> query = em.createQuery(
				"select e from ScoreSheetsSummary e where "
				+ "e.studentId = ?1 and "
				+ "e.academicYear = ?2 and "
				+ "e.studentTerm = ?3 ", ScoreSheetsSummary.class);
		query.setParameter(1, studentId);
		query.setParameter(2, academicYear);
		query.setParameter(3, studentTerm);
		
		Vector<ScoreSheetsSummary> summa = new Vector<>();
		
		summa = (Vector<ScoreSheetsSummary>) query.getResultList();
		String classId, year = "", term = "", stdClass = "";
		for(ScoreSheetsSummary sm : summa) {
			year = sm.getAcademicYear();
			term = sm.getStudentTerm();
			stdClass = getPrimeClassReverse(sm.getStudentClass());
		}
		
		classId = stdClass + year + term;
		
		return classId;
	}
	
	//get number of subjects per term
	public int getScoreSheetsSubjectsNoByStdNoTerm(EntityManager em, String stdId, 
			String scoresYear, String term) {
		TypedQuery<ScoreSheets> query = em.createQuery(
				"select e from ScoreSheets e where "
				+ "e.stdId = ?1 and "
				+ "e.scoresYear = ?2 and "
				+ "e.term = ?3 ", ScoreSheets.class);
		query.setParameter(1, stdId);
		query.setParameter(2, scoresYear);
		query.setParameter(3, term);
		
		Vector<ScoreSheets> scoresVal = new Vector<>();
		LinkedHashSet<String> subjects = new LinkedHashSet<>();
		int subjectCount = 0;
		scoresVal = (Vector<ScoreSheets>) query.getResultList();
		for(ScoreSheets sheet : scoresVal) {
			subjects.add(sheet.getSubjectName());
		}
		subjectCount = subjects.size();
		return subjectCount;
	}
	
	//get subject counts per year
	public int getScoreSheetsSubjectsNoByStdNoYear(EntityManager em, String stdId, 
			String scoresYear) {
		TypedQuery<ScoreSheets> query = em.createQuery(
				"select e from ScoreSheets e where "
				+ "e.stdId = ?1 and "
				+ "e.scoresYear = ?2 ", ScoreSheets.class);
		query.setParameter(1, stdId);
		query.setParameter(2, scoresYear);
		
		Vector<ScoreSheets> scoresVal = new Vector<>();
		LinkedHashSet<String> subjects = new LinkedHashSet<>();
		int subjectCount = 0;
		scoresVal = (Vector<ScoreSheets>) query.getResultList();
		for(ScoreSheets sheet : scoresVal) {
			subjects.add(sheet.getSubjectName());
		}
		subjectCount = subjects.size();
		return subjectCount;
	}
	
	//get total per term
	public double getScoreSheetsTotalByStdNoTerm(EntityManager em, String stdId, 
			String scoresYear, String term) {
		TypedQuery<ScoreSheets> query = em.createQuery(
				"select e from ScoreSheets e where "
				+ "e.stdId = ?1 and "
				+ "e.scoresYear = ?2 and "
				+ "e.term = ?3 ", ScoreSheets.class);
		query.setParameter(1, stdId);
		query.setParameter(2, scoresYear);
		query.setParameter(3, term);
		
		Vector<ScoreSheets> scoresVal = new Vector<>();
		double sum = 0;
		scoresVal = (Vector<ScoreSheets>) query.getResultList();
		for(ScoreSheets sheet : scoresVal) {
			sum = sum + sheet.getTotal();
		}
		return sum;
	}
	
	public double getScoreSheetsTotalByStdNoYear(EntityManager em, String stdId, 
			String scoresYear) {
		TypedQuery<ScoreSheets> query = em.createQuery(
				"select e from ScoreSheets e where "
				+ "e.stdId = ?1 and "
				+ "e.scoresYear = ?2 ", ScoreSheets.class);
		query.setParameter(1, stdId);
		query.setParameter(2, scoresYear);
		
		Vector<ScoreSheets> scoresVal = new Vector<>();
		double sum = 0;
		scoresVal = (Vector<ScoreSheets>) query.getResultList();
		for(ScoreSheets sheet : scoresVal) {
			sum = sum + sheet.getTotal();
		}
		return sum;
	}
	
	//Concession controller
	@FXML private ComboBox<String> concessionId, concessionStatusCombo; 
	@FXML private TextField concStdNo, concName, concSex, concStdClassId, concSession, concTerm, 
		balAtConc, amtToPayConc, updBalanceConc, availBalConc, graceDaysGivenConc, graceDaysRemainsConc; 
	@FXML private TextArea aoiConc;
	@FXML private DatePicker expectedPayDateConc, txnDateConc;
	
	ObservableList<String> concStatus = FXCollections.observableArrayList("Activate","Deactivate");
	
	@FXML public void concessionInit(MouseEvent event) {
		try {
			String stdNo = concStdNo.getText().trim().toUpperCase();
			String name, sex, stdClassId, session, term;
			double balance = 0;
			
			EntityManagerFactory emfactory2 = Persistence.createEntityManagerFactory
					("SchoolMgtSystem");
			EntityManager entitymanager2 = emfactory2.createEntityManager();
			entitymanager2.getTransaction().begin();
			
			Students std = entitymanager2.find(Students.class, stdNo);
			
			name = std.getOtherNames()+" "+std.getSurName();
			sex = std.getSex();
			stdClassId = std.getEntryClassAssigned();
			
			StudentClasses stdClassX = entitymanager2.find(StudentClasses.class, stdClassId);
			
			session = stdClassX.getYear();
			term = stdClassX.getTerm();
			
			AccountBalance balX = entitymanager2.find(AccountBalance.class, stdNo);
			
			balance = balX.getBalance();
			
			entitymanager2.getTransaction().commit();
			entitymanager2.close();
			emfactory2.close();
			
			concName.setText(name);
			concSex.setText(sex); 
			concStdClassId.setText(stdClassId);
			concSession.setText(session);
			concTerm.setText(term);
			availBalConc.setText(String.valueOf(balance));
			
		}
		catch(Exception e) {
			e.printStackTrace();
		}
	}
	
	@FXML public void concStatusComboInit(MouseEvent event) {
		concessionStatusCombo.setItems(concStatus);
	}
	
	@FXML public void concIdComboInit(MouseEvent event) {
		populateConcessionCombo(concessionId);
	}
	
	public void populateConcessionCombo(ComboBox<String> combo) {
		ObservableList<String> list = FXCollections.observableArrayList();
		try {
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			Vector<FeeConcession> userData = new Vector<>();
			Query queryX =
					entitymanager.createQuery("select e from FeeConcession e ");
			userData = (Vector<FeeConcession>) queryX.getResultList();
			
			for(FeeConcession x : userData) {
				if(!(list.contains(x.getCid()))) {
					list.add(x.getCid());
				}
			}
			
			combo.setItems(list);
			
			entitymanager.getTransaction().commit();
			entitymanager.close();
			emfactory.close();
			
			new AutoCompleteComboBoxListener<>(combo);
		}
		catch(Exception e) {
			e.printStackTrace();
		}
	}
	
	@FXML public void saveConcessionRequest(ActionEvent event) {
		try {
			String stdNo = concStdNo.getText().trim().toUpperCase();
			String name = concName.getText(); 
			String sex = concSex.getText(); 
			String stdClassId = concStdClassId.getText(); 
			String session = concSession.getText(); 
			String term = concTerm.getText(); 
			double availBal = Double.parseDouble(availBalConc.getText());
			double balance = availBal; //Double.parseDouble(balAtConc.getText()); 
			double amtToPay = Double.parseDouble(amtToPayConc.getText()); 
			double updBalance = availBal; //Double.parseDouble(updBalanceConc.getText());
			LocalDate payDate = expectedPayDateConc.getValue();
			LocalDate date = LocalDate.now();
			LocalDate lastUpdDate = date;
			int graceDays = (int)(payDate.toEpochDay() - date.toEpochDay()); //Integer.parseInt(graceDaysGivenConc.getText()); 
			int graceRemains = (int)(payDate.toEpochDay() - date.toEpochDay()); //Integer.parseInt(graceDaysRemainsConc.getText());
			String aoi = aoiConc.getText().trim();
			String user = dispName;
			String lastUser = dispName;
			String status = concessionStatusCombo.getValue(); 
			
			if(validateStdNo(stdNo)) {
				String cid = stdNo + stdClassId;
				
				try {
					CreateFeeConcession conc = new CreateFeeConcession();
					
					conc.createFeeConcession(cid, stdNo, name, sex, stdClassId, session, term, user, 
							lastUser, status, aoi, balance, amtToPay, updBalance, graceDays,
							graceRemains, date, payDate, lastUpdDate);
					
				}
				catch(Exception e2) {
					e2.printStackTrace();
					Alert alert = new Alert(Alert.AlertType.ERROR);
					alert.setContentText("Error: "+ e2.getMessage());
					Optional<ButtonType> result = alert.showAndWait();
					if(result.get() == ButtonType.OK) {
						alert.close();
					}
					else {
						alert.close();
					}
				}
				finally {
					concessionStatusCombo.setValue("");
					concStdNo.clear();
					concName.clear();
					concSex.clear();
					concStdClassId.clear();
					concSession.clear();
					concTerm.clear();
					balAtConc.clear();
					amtToPayConc.clear();
					updBalanceConc.clear();
					graceDaysGivenConc.clear();
					graceDaysRemainsConc.clear();
					aoiConc.clear();
					expectedPayDateConc.setValue(LocalDate.now());
					txnDateConc.setValue(LocalDate.now());
				}
			}
			else {
				Alert alert = new Alert(Alert.AlertType.ERROR);
				alert.setContentText(stdNo +" is not a valid student id");
				Optional<ButtonType> result = alert.showAndWait();
				if(result.get() == ButtonType.OK) {
					alert.close();
				}
				else {
					alert.close();
				}
			}
		}
		catch(Exception e) {
			e.printStackTrace();
			Alert alert = new Alert(Alert.AlertType.ERROR);
			alert.setContentText("Initial Error: "+ e.getMessage());
			Optional<ButtonType> result = alert.showAndWait();
			if(result.get() == ButtonType.OK) {
				alert.close();
			}
			else {
				alert.close();
			}
		}
	}
	
	//find concession
	@FXML public void findConcessionRequest(ActionEvent event) {
		try {
			String cid = concessionId.getValue();
			
			try {
				EntityManagerFactory emfactory = Persistence.createEntityManagerFactory
						("SchoolMgtSystem");
				EntityManager entitymanager = emfactory.createEntityManager();
				entitymanager.getTransaction().begin();
				
				FeeConcession conc = entitymanager.find(FeeConcession.class, cid);
				
				concessionStatusCombo.setValue(conc.getConcessionStatus());
				concStdNo.setText(conc.getStdNo());
				concName.setText(conc.getName());
				concSex.setText(conc.getSex());
				concStdClassId.setText(conc.getStdClassId());
				concSession.setText(conc.getSession());
				concTerm.setText(conc.getTerm());
				balAtConc.setText(String.valueOf(conc.getBalAtConcession()));
				amtToPayConc.setText(String.valueOf(conc.getAmtPay()));
				updBalanceConc.setText(String.valueOf(conc.getUpdBalance()));
				graceDaysGivenConc.setText(String.valueOf(conc.getGraceDaysGiven()));
				graceDaysRemainsConc.setText(String.valueOf((int)(conc.getExpectedPayDate().toEpochDay()-
						LocalDate.now().toEpochDay())));
				aoiConc.setText(conc.getAoi());
				expectedPayDateConc.setValue(conc.getExpectedPayDate());
				txnDateConc.setValue(conc.getDate());
				
				AccountBalance balC = entitymanager.find(AccountBalance.class, conc.getStdNo());
				
				availBalConc.setText(String.valueOf(balC.getBalance()));
				
				entitymanager.getTransaction().commit();
				entitymanager.close();
				emfactory.close();
			}
			catch(Exception e2) {
				e2.printStackTrace();
				Alert alert = new Alert(Alert.AlertType.ERROR);
				alert.setContentText("Error2: "+ e2.getMessage());
				Optional<ButtonType> result = alert.showAndWait();
				if(result.get() == ButtonType.OK) {
					alert.close();
				}
				else {
					alert.close();
				}
				concessionStatusCombo.setValue("");
				concStdNo.clear();
				concName.clear();
				concSex.clear();
				concStdClassId.clear();
				concSession.clear();
				concTerm.clear();
				balAtConc.clear();
				amtToPayConc.clear();
				updBalanceConc.clear();
				graceDaysGivenConc.clear();
				graceDaysRemainsConc.clear();
				aoiConc.clear();
				expectedPayDateConc.setValue(LocalDate.now());
				txnDateConc.setValue(LocalDate.now());
			}
			
		}
		catch(Exception e) {
			e.printStackTrace();
			Alert alert = new Alert(Alert.AlertType.ERROR);
			alert.setContentText("Error: "+ e.getMessage());
			Optional<ButtonType> result = alert.showAndWait();
			if(result.get() == ButtonType.OK) {
				alert.close();
			}
			else {
				alert.close();
			}
		}
	}
	
	//update concession
	@FXML public void updateConcessionRequest(ActionEvent event) {
		try {
			String cid = concessionId.getValue();
			String stdNo = concStdNo.getText().trim().toUpperCase();
			double availBal = Double.parseDouble(availBalConc.getText());
			double amtToPay = Double.parseDouble(amtToPayConc.getText()); 
			double updBalance = availBal; //Double.parseDouble(updBalanceConc.getText());
			LocalDate payDate = expectedPayDateConc.getValue();
			LocalDate date = LocalDate.now();
			LocalDate lastUpdDate = date;
			int graceDays = Integer.parseInt(graceDaysGivenConc.getText()); 
			int graceRemains = (int)(payDate.toEpochDay() - date.toEpochDay()); //Integer.parseInt(graceDaysRemainsConc.getText());
			String aoi = aoiConc.getText().trim();
			String lastUser = dispName;
			String status = concessionStatusCombo.getValue(); 
			
			if(validateStdNo(stdNo)) {
				
				try {
					CreateFeeConcession conc = new CreateFeeConcession();
					
					conc.updateFeeConcession(cid, lastUser, status, aoi, amtToPay, updBalance, 
							graceDays, graceRemains, payDate, lastUpdDate);
					
					
				}
				catch(Exception e2) {
					e2.printStackTrace();
					Alert alert = new Alert(Alert.AlertType.ERROR);
					alert.setContentText("Error: "+ e2.getMessage());
					Optional<ButtonType> result = alert.showAndWait();
					if(result.get() == ButtonType.OK) {
						alert.close();
					}
					else {
						alert.close();
					}
				}
				finally {
					concessionStatusCombo.setValue("");
					concStdNo.clear();
					concName.clear();
					concSex.clear();
					concStdClassId.clear();
					concSession.clear();
					concTerm.clear();
					balAtConc.clear();
					amtToPayConc.clear();
					updBalanceConc.clear();
					graceDaysGivenConc.clear();
					graceDaysRemainsConc.clear();
					aoiConc.clear();
					expectedPayDateConc.setValue(LocalDate.now());
					txnDateConc.setValue(LocalDate.now());
				}
			}
			else {
				Alert alert = new Alert(Alert.AlertType.ERROR);
				alert.setContentText(stdNo +" is not a valid student id");
				Optional<ButtonType> result = alert.showAndWait();
				if(result.get() == ButtonType.OK) {
					alert.close();
				}
				else {
					alert.close();
				}
			}
		}
		catch(Exception e) {
			e.printStackTrace();
			Alert alert = new Alert(Alert.AlertType.ERROR);
			alert.setContentText("Initial Error: "+ e.getMessage());
			Optional<ButtonType> result = alert.showAndWait();
			if(result.get() == ButtonType.OK) {
				alert.close();
			}
			else {
				alert.close();
			}
		}
	}
	
	//delete concession
	@FXML public void deleteConcessionRequest(ActionEvent event) {
		try {
			String cid = concessionId.getValue();
			
			Alert alert3 = new Alert(Alert.AlertType.CONFIRMATION);
			alert3.setContentText("You are about to delete this entity from the system. "
					+ "Please ensure you backup before proceeding; as this process is "
					+ "irreversible!");
			Optional<ButtonType> result3 = alert3.showAndWait();
			if(result3.get() == ButtonType.OK) {
				
				try {
					CreateFeeConcession conc = new CreateFeeConcession();
					
					conc.deleteFeeConcession(cid);
					
				}
				catch(Exception e2) {
					e2.printStackTrace();
					Alert alert = new Alert(Alert.AlertType.ERROR);
					alert.setContentText("Error: "+ e2.getMessage());
					Optional<ButtonType> result = alert.showAndWait();
					if(result.get() == ButtonType.OK) {
						alert.close();
					}
					else {
						alert.close();
					}
				}
				finally {
					concessionStatusCombo.setValue("");
					concStdNo.clear();
					concName.clear();
					concSex.clear();
					concStdClassId.clear();
					concSession.clear();
					concTerm.clear();
					balAtConc.clear();
					amtToPayConc.clear();
					updBalanceConc.clear();
					graceDaysGivenConc.clear();
					graceDaysRemainsConc.clear();
					aoiConc.clear();
					expectedPayDateConc.setValue(LocalDate.now());
					txnDateConc.setValue(LocalDate.now());
				}
			}
			else {
				alert3.close();
			}
		}
		catch(Exception e) {
			e.printStackTrace();
			Alert alert2 = new Alert(Alert.AlertType.ERROR);
			alert2.setContentText("Initial Error: "+ e.getMessage());
			Optional<ButtonType> result2 = alert2.showAndWait();
			if(result2.get() == ButtonType.OK) {
				alert2.close();
			}
			else {
				alert2.close();
			}
		}
	}
	
	//Concession List Controller
	@FXML private Label concListLabel;
	@FXML private ComboBox<String> concListClassCombo, concListStatusCombo, concListTermCombo, concListSessionCombo;
	@FXML private TableView<ConcessionDataTable> concessionDataTable;
	@FXML private TableColumn<ConcessionDataTable, String> concSNoCol, concStdNoCol, concStdNameCol, 
		concStdClassCol, concDateCol, concExpiresCol, concDaysCol, concStatusCol;
	@FXML private VBox concessionPane;
	
	ObservableList<String> listConc = FXCollections.observableArrayList("All");
	ObservableList<String> listConcStatus = FXCollections.observableArrayList("All","Activate","Deactivate");
	
	@FXML public void concListStatusInit(MouseEvent event) {
		concListStatusCombo.setItems(listConcStatus);
		concListTermCombo.setItems(termN);
	}
	
	@FXML public void concListClassInit(MouseEvent event) {
		populateStdClassesCombo3(listConc,concListClassCombo);
	}
	
	@FXML public void concListSessionInit(MouseEvent event) {
		populateYear(concListSessionCombo);
	}
	
	@FXML public void concListSpoolButton(ActionEvent event) {
		try {
			String stdClassId = concListClassCombo.getValue();
			String status = concListStatusCombo.getValue();
			String session = concListSessionCombo.getValue();
			String term = concListTermCombo.getValue();
			
			try {
				ObservableList<ConcessionDataTable> data = FXCollections.observableArrayList();
				Vector<FeeConcession> concData = new Vector<>();
				
				if(stdClassId.equals("All") && status.equals("All")) {
					EntityManagerFactory emfactory = Persistence.createEntityManagerFactory
							("SchoolMgtSystem");
					EntityManager entitymanager = emfactory.createEntityManager();
					entitymanager.getTransaction().begin();
					
//					try {
//						StudentClasses stdClaz = entitymanager.find(StudentClasses.class, stdClassId);
//						
//						session = stdClaz.getYear();
//						term = stdClaz.getTerm();
//					}
//					catch(Exception e3) {
//						e3.printStackTrace();
//					}
					
					concData = getFeeConcessionByTerm(entitymanager, session, term);
					
					entitymanager.getTransaction().commit();
					entitymanager.close();
					emfactory.close();
					
					int sN = 0;
					for(FeeConcession conc : concData) {
						sN = sN + 1;
						
						data.add(new ConcessionDataTable(
								String.valueOf(sN),
								conc.getStdNo(),
								conc.getName(),
								conc.getStdClassId(),
								conc.getDate().toString(),
								conc.getExpectedPayDate().toString(),
								String.valueOf(conc.getExpectedPayDate().toEpochDay() - LocalDate.now().toEpochDay()),
								conc.getConcessionStatus()
								));
					}
					
					concSNoCol.setCellValueFactory(new PropertyValueFactory("sNo_Data"));
					concStdNoCol.setCellValueFactory(new PropertyValueFactory("stdNo_Data"));
					concStdNameCol.setCellValueFactory(new PropertyValueFactory("name_Data"));
					concStdClassCol.setCellValueFactory(new PropertyValueFactory("stdClass_Data"));
					concDateCol.setCellValueFactory(new PropertyValueFactory("concessionDate_Data"));
					concExpiresCol.setCellValueFactory(new PropertyValueFactory("concessionExpires_Data"));
					concDaysCol.setCellValueFactory(new PropertyValueFactory("graceDaysRemains_Data"));
					concStatusCol.setCellValueFactory(new PropertyValueFactory("status_Data"));
					
					concessionDataTable.setItems(data);
				}
				else if(stdClassId.equals("All") && !status.equals("All")) {
					EntityManagerFactory emfactory = Persistence.createEntityManagerFactory
							("SchoolMgtSystem");
					EntityManager entitymanager = emfactory.createEntityManager();
					entitymanager.getTransaction().begin();
					
					concData = getFeeConcessionByTermStatus(entitymanager, session, term, status);
					
					entitymanager.getTransaction().commit();
					entitymanager.close();
					emfactory.close();
					
					int sN = 0;
					for(FeeConcession conc : concData) {
						sN = sN + 1;
						
						data.add(new ConcessionDataTable(
								String.valueOf(sN),
								conc.getStdNo(),
								conc.getName(),
								conc.getStdClassId(),
								conc.getDate().toString(),
								conc.getExpectedPayDate().toString(),
								String.valueOf(conc.getExpectedPayDate().toEpochDay() - LocalDate.now().toEpochDay()),
								conc.getConcessionStatus()
								));
					}
					
					concSNoCol.setCellValueFactory(new PropertyValueFactory("sNo_Data"));
					concStdNoCol.setCellValueFactory(new PropertyValueFactory("stdNo_Data"));
					concStdNameCol.setCellValueFactory(new PropertyValueFactory("name_Data"));
					concStdClassCol.setCellValueFactory(new PropertyValueFactory("stdClass_Data"));
					concDateCol.setCellValueFactory(new PropertyValueFactory("concessionDate_Data"));
					concExpiresCol.setCellValueFactory(new PropertyValueFactory("concessionExpires_Data"));
					concDaysCol.setCellValueFactory(new PropertyValueFactory("graceDaysRemains_Data"));
					concStatusCol.setCellValueFactory(new PropertyValueFactory("status_Data"));
					
					concessionDataTable.setItems(data);
				}
				else if(!stdClassId.equals("All") && status.equals("All")) {
					EntityManagerFactory emfactory = Persistence.createEntityManagerFactory
							("SchoolMgtSystem");
					EntityManager entitymanager = emfactory.createEntityManager();
					entitymanager.getTransaction().begin();
					
					try {
						StudentClasses stdClaz = entitymanager.find(StudentClasses.class, stdClassId);
						
						session = stdClaz.getYear();
						term = stdClaz.getTerm();
					}
					catch(Exception e3) {
						e3.printStackTrace();
					}
					
					concData = getFeeConcessionByTermStdClass(entitymanager, session, term, stdClassId);
					
					entitymanager.getTransaction().commit();
					entitymanager.close();
					emfactory.close();
					
					int sN = 0;
					for(FeeConcession conc : concData) {
						sN = sN + 1;
						
						data.add(new ConcessionDataTable(
								String.valueOf(sN),
								conc.getStdNo(),
								conc.getName(),
								conc.getStdClassId(),
								conc.getDate().toString(),
								conc.getExpectedPayDate().toString(),
								String.valueOf(conc.getExpectedPayDate().toEpochDay() - LocalDate.now().toEpochDay()),
								conc.getConcessionStatus()
								));
					}
					
					concSNoCol.setCellValueFactory(new PropertyValueFactory("sNo_Data"));
					concStdNoCol.setCellValueFactory(new PropertyValueFactory("stdNo_Data"));
					concStdNameCol.setCellValueFactory(new PropertyValueFactory("name_Data"));
					concStdClassCol.setCellValueFactory(new PropertyValueFactory("stdClass_Data"));
					concDateCol.setCellValueFactory(new PropertyValueFactory("concessionDate_Data"));
					concExpiresCol.setCellValueFactory(new PropertyValueFactory("concessionExpires_Data"));
					concDaysCol.setCellValueFactory(new PropertyValueFactory("graceDaysRemains_Data"));
					concStatusCol.setCellValueFactory(new PropertyValueFactory("status_Data"));
					
					concessionDataTable.setItems(data);
				}
				else if(!stdClassId.equals("All") && !status.equals("All")) {
					EntityManagerFactory emfactory = Persistence.createEntityManagerFactory
							("SchoolMgtSystem");
					EntityManager entitymanager = emfactory.createEntityManager();
					entitymanager.getTransaction().begin();
					
					try {
						StudentClasses stdClaz = entitymanager.find(StudentClasses.class, stdClassId);
						
						session = stdClaz.getYear();
						term = stdClaz.getTerm();
					}
					catch(Exception e3) {
						e3.printStackTrace();
					}
					
					concData = getFeeConcessionByTermStdClassStatus(entitymanager, session, term, 
							stdClassId, status);
					
					entitymanager.getTransaction().commit();
					entitymanager.close();
					emfactory.close();
					
					int sN = 0;
					for(FeeConcession conc : concData) {
						sN = sN + 1;
						
						data.add(new ConcessionDataTable(
								String.valueOf(sN),
								conc.getStdNo(),
								conc.getName(),
								conc.getStdClassId(),
								conc.getDate().toString(),
								conc.getExpectedPayDate().toString(),
								String.valueOf(conc.getExpectedPayDate().toEpochDay() - LocalDate.now().toEpochDay()),
								conc.getConcessionStatus()
								));
					}
					
					concSNoCol.setCellValueFactory(new PropertyValueFactory("sNo_Data"));
					concStdNoCol.setCellValueFactory(new PropertyValueFactory("stdNo_Data"));
					concStdNameCol.setCellValueFactory(new PropertyValueFactory("name_Data"));
					concStdClassCol.setCellValueFactory(new PropertyValueFactory("stdClass_Data"));
					concDateCol.setCellValueFactory(new PropertyValueFactory("concessionDate_Data"));
					concExpiresCol.setCellValueFactory(new PropertyValueFactory("concessionExpires_Data"));
					concDaysCol.setCellValueFactory(new PropertyValueFactory("graceDaysRemains_Data"));
					concStatusCol.setCellValueFactory(new PropertyValueFactory("status_Data"));
					
					concessionDataTable.setItems(data);
				}
				else {
					EntityManagerFactory emfactory = Persistence.createEntityManagerFactory
							("SchoolMgtSystem");
					EntityManager entitymanager = emfactory.createEntityManager();
					entitymanager.getTransaction().begin();
					
//					try {
//						StudentClasses stdClaz = entitymanager.find(StudentClasses.class, stdClassId);
//						
//						session = stdClaz.getYear();
//						term = stdClaz.getTerm();
//					}
//					catch(Exception e3) {
//						e3.printStackTrace();
//					}
					
					concData = getFeeConcessionByTerm(entitymanager, session, term);
					
					entitymanager.getTransaction().commit();
					entitymanager.close();
					emfactory.close();
					
					int sN = 0;
					for(FeeConcession conc : concData) {
						sN = sN + 1;
						
						data.add(new ConcessionDataTable(
								String.valueOf(sN),
								conc.getStdNo(),
								conc.getName(),
								conc.getStdClassId(),
								conc.getDate().toString(),
								conc.getExpectedPayDate().toString(),
								String.valueOf(conc.getExpectedPayDate().toEpochDay() - LocalDate.now().toEpochDay()),
								conc.getConcessionStatus()
								));
					}
					
					concSNoCol.setCellValueFactory(new PropertyValueFactory("sNo_Data"));
					concStdNoCol.setCellValueFactory(new PropertyValueFactory("stdNo_Data"));
					concStdNameCol.setCellValueFactory(new PropertyValueFactory("name_Data"));
					concStdClassCol.setCellValueFactory(new PropertyValueFactory("stdClass_Data"));
					concDateCol.setCellValueFactory(new PropertyValueFactory("concessionDate_Data"));
					concExpiresCol.setCellValueFactory(new PropertyValueFactory("concessionExpires_Data"));
					concDaysCol.setCellValueFactory(new PropertyValueFactory("graceDaysRemains_Data"));
					concStatusCol.setCellValueFactory(new PropertyValueFactory("status_Data"));
					
					concessionDataTable.setItems(data);
				}
			}
			catch(Exception e2) {
				e2.printStackTrace();
				concessionDataTable.setItems(null);
			}
			
		}
		catch(Exception e) {
			e.printStackTrace();
			Alert alert2 = new Alert(Alert.AlertType.ERROR);
			alert2.setContentText("Initial Error: "+ e.getMessage());
			Optional<ButtonType> result2 = alert2.showAndWait();
			if(result2.get() == ButtonType.OK) {
				alert2.close();
			}
			else {
				alert2.close();
			}
		}
	}
	
	public Vector<FeeConcession> getFeeConcessionByTerm(EntityManager em, String session, String term) {
		TypedQuery<FeeConcession> query = em.createQuery(
				"select e from FeeConcession e where "
				+ "e.session = ?1 and "
				+ "e.term = ?2 ", FeeConcession.class);
		query.setParameter(1, session);
		query.setParameter(2, term);
		
		return (Vector<FeeConcession>) query.getResultList();
	}
	
	public Vector<FeeConcession> getFeeConcessionByTermStatus(EntityManager em, String session, String term, 
			String concessionStatus) {
		TypedQuery<FeeConcession> query = em.createQuery(
				"select e from FeeConcession e where "
				+ "e.session = ?1 and "
				+ "e.term = ?2 and "
				+ "e.concessionStatus = ?3 ", FeeConcession.class);
		query.setParameter(1, session);
		query.setParameter(2, term);
		query.setParameter(3, concessionStatus);
		
		return (Vector<FeeConcession>) query.getResultList();
	}
	
	public Vector<FeeConcession> getFeeConcessionByTermStdClass(EntityManager em, String session, String term, 
			String stdClassId) {
		TypedQuery<FeeConcession> query = em.createQuery(
				"select e from FeeConcession e where "
				+ "e.session = ?1 and "
				+ "e.term = ?2 and "
				+ "e.stdClassId = ?3 ", FeeConcession.class);
		query.setParameter(1, session);
		query.setParameter(2, term);
		query.setParameter(3, stdClassId);
		
		return (Vector<FeeConcession>) query.getResultList();
	}
	
	public Vector<FeeConcession> getFeeConcessionByTermStdClassStatus(EntityManager em, String session, String term, 
			String stdClassId, String concessionStatus) {
		TypedQuery<FeeConcession> query = em.createQuery(
				"select e from FeeConcession e where "
				+ "e.session = ?1 and "
				+ "e.term = ?2 and "
				+ "e.stdClassId = ?3 and "
				+ "e.concessionStatus = ?4 ", FeeConcession.class);
		query.setParameter(1, session);
		query.setParameter(2, term);
		query.setParameter(3, stdClassId);
		query.setParameter(4, concessionStatus);
		
		return (Vector<FeeConcession>) query.getResultList();
	}
	
	//xcel concession list
	@FXML public void xcelConcListButton(ActionEvent event) {
		Workbook workbook = new HSSFWorkbook();
		Sheet spreadSheet = workbook.createSheet("sample");
		Row row = spreadSheet.createRow(0);
		
		for(int j = 0; j < concessionDataTable.getColumns().size(); j++) {
			row.createCell(j).setCellValue(concessionDataTable.getColumns().get(j).getText());
		}
		
		for(int i = 0; i < concessionDataTable.getItems().size(); i++) {
			row = spreadSheet.createRow(i + 1);
			for(int j = 0; j < concessionDataTable.getColumns().size(); j++) {
				if(concessionDataTable.getColumns().get(j).getCellData(i) != null) {
					row.createCell(j).setCellValue(concessionDataTable.getColumns().get(j).getCellData(i).toString());
				}
				else {
					row.createCell(j).setCellValue("");
				}
			}
		}
		
		String txt = concListClassCombo.getValue()+concListSessionCombo.getValue()+
				concListTermCombo.getValue()+"ConcessionList"+".xls";
		String filePath = "C:\\workbook\\"+txt;
		
		try {
			FileOutputStream fileOut = new FileOutputStream(filePath);
			try {
				workbook.write(fileOut);
				fileOut.close();
				concListLabel.setText(filePath);
			} catch (IOException e2) {
				concListLabel.setText("Write Error: "+ e2.getMessage());
			}
		} catch (FileNotFoundException e) {
			concListLabel.setText("File Error: "+ e.getMessage());
		}
	}
	
	//print concession list
	@FXML private Button printConcListBtn, xcelConcListBtn, concListSpoolBtn;
	@FXML public void printConcListButton(ActionEvent even) {
		returnConcListBtn.setVisible(false);
		printConcListBtn.setVisible(false);
		concListSpoolBtn.setVisible(false);
		xcelConcListBtn.setVisible(false);
		try {
			printNode(concessionPane);
		}
		catch(Exception exception) {
			exception.printStackTrace();
			concListLabel.setText("Print Error: "+ exception.getLocalizedMessage());
		}
		finally {
			returnConcListBtn.setVisible(true);
			printConcListBtn.setVisible(true);
			concListSpoolBtn.setVisible(true);
			xcelConcListBtn.setVisible(true);
		}
	}
	
	//Admission Processing
	@FXML private TextField admRegFormNo, admYearsAtPrevSchl, admRegFee, admExamScores, 
		admInterviewScores, admSurName, admOtherNames, admPlaceOfBirth, admVillage,
		admFatherName, admFatherPhone, admFatherOccupation, admFatherReligion,
		admMotherName, admMotherPhone, admMotherOccupation, admMotherReligion,
		admGuardianName, admGuardianPhone, admGuardianOccupation, admGuardianReligion,
		admEmail, admPrevSchool;
	@FXML private ComboBox<String> admSession, admTerm, admSex, admNationality, admState, 
		admLGA, admLastClass, admClassSeeking, admClassOffered, admOnOffCampus, admFeePolicy,
		admAdmissionStatus;
	@FXML private TextArea admAddress;
	@FXML private DatePicker admDOB, admDate;
	@FXML private Button submitCreateAdmissionBtn;

	ObservableList<String> admStatusLst = FXCollections.observableArrayList("Admitted",
			"Not Admitted","Reserved");
	ObservableList<String> admStatusLst2 = FXCollections.observableArrayList("All","Admitted",
			"Not Admitted","Reserved");
	ObservableList<String> admOnCampus = FXCollections.observableArrayList("On-Campus",
			"Off-Campus");
	ObservableList<String> admClassLst = FXCollections.observableArrayList();
	
	@FXML public void admInitialize(MouseEvent event) {
		admTerm.setItems(termN);
		admSex.setItems(sex);
		admLastClass.setItems(prevClaz);
		admClassSeeking.setItems(stdClassN);
		admOnOffCampus.setItems(borderStatus);  //.setItems(admOnCampus);
		admFeePolicy.setItems(disable);
		admAdmissionStatus.setItems(admStatusLst);
	}
	
	@FXML public void admInitStdClass(MouseEvent event) {
		populateStdClassesCombo3(admClassLst, admClassOffered);
	}
	
	@FXML public void admInitialize2(MouseEvent event) {
		populateYear(admSession);
	}
	
	@FXML public void admInitCountries(MouseEvent event) {
		populateCountries(admNationality);
	}
	
	@FXML public void admInitStates(MouseEvent event) {
		populateStates(admState);
	}
	
	@FXML public void admInitLGAs(MouseEvent event) {
		populateLGAs(admLGA);
	}
	
	public int getLastRegFormNo(EntityManager em, String surName, String otherNames, 
			String session, String term, LocalDate dateOfBirth, LocalDate date) {
		TypedQuery<ProspectiveStudent> query = em.createQuery(
				"select e from ProspectiveStudent e where "
				+ "e.surName = ?1 and "
				+ "e.otherNames = ?2 and "
				+ "e.session = ?3  and "
				+ "e.term = ?4 and "
				+ "e.dateOfBirth = ?5 and "
				+ "e.date = ?6 ", ProspectiveStudent.class);
		query.setParameter(1, surName);
		query.setParameter(2, otherNames);
		query.setParameter(3, session);
		query.setParameter(4, term);
		query.setParameter(5, dateOfBirth);
		query.setParameter(6, date);
		
		return query.getSingleResult().getRegFormNo();
	}
	
	public int getLastRegFormNo2(EntityManager em) {
		TypedQuery<ProspectiveStudent> query = em.createQuery(
				"select e from ProspectiveStudent e ", ProspectiveStudent.class);
		
		Vector<ProspectiveStudent> form = new Vector<>();
		
		form = (Vector<ProspectiveStudent>)query.getResultList();
		
		return form.lastElement().getRegFormNo();
		
	}
	
	@FXML public void submitCreateAdmissionButton(ActionEvent event) {
		try {
			double regFee = Double.parseDouble(admRegFee.getText().trim());
			String session = admSession.getValue();
			String term = admTerm.getValue();
			String surName = admSurName.getText().trim().toUpperCase();
			String otherNames = admOtherNames.getText().trim().toUpperCase();
			LocalDate dob = admDOB.getValue();
			String sex = admSex.getValue();
			String pob = admPlaceOfBirth.getText().trim();
			String nationality = admNationality.getValue();
			String state = admState.getValue();
			String lga = admLGA.getValue();
			String village = admVillage.getText().trim();
			String address = admAddress.getText().trim();
			String fatherName = admFatherName.getText().trim();
			String fatherPhone = admFatherPhone.getText().trim();
			String fatherOccupation = admFatherOccupation.getText().trim();
			String fatherReligion = admFatherReligion.getText().trim();
			String motherName = admMotherName.getText().trim();
			String motherPhone = admMotherPhone.getText().trim();
			String motherOccupation = admMotherOccupation.getText().trim();
			String motherReligion = admMotherReligion.getText().trim();
			String guardianName = admGuardianName.getText().trim();
			String guardianPhone = admGuardianPhone.getText().trim();
			String guardianOccupation = admGuardianOccupation.getText().trim();
			String guardianReligion = admGuardianReligion.getText().trim();
			String email = admEmail.getText().trim();
			String prevSchool = admPrevSchool.getText().trim();
			int yearsAtPrevSchool = Integer.parseInt(admYearsAtPrevSchl.getText().trim());
			String lastClass = admLastClass.getValue();
			String classSeeking = admClassSeeking.getValue();
			String classOffered = admClassOffered.getValue();
			String boaderStatus = admOnOffCampus.getValue();
			String acceptFeePolicy = admFeePolicy.getValue();
			double examScore = Double.parseDouble(admExamScores.getText().trim());
			double interviewScore = Double.parseDouble(admInterviewScores.getText().trim());
			String admissionStatus = admAdmissionStatus.getValue();
			LocalDate date = LocalDate.now();
			LocalDate lastUpdDate = date;
			String user = dispName;
			String lastUpdateUser = user;
			
			if(surName.length() != 0 && otherNames.length() != 0 && session.length() != 0 && 
					term.length() != 0) {
				try {
					CreateProspectiveStudent std = new CreateProspectiveStudent();
					std.createProspectiveStudent(0, yearsAtPrevSchool, regFee, examScore, 
							interviewScore, session, term, surName, otherNames, sex, pob, 
							nationality, state, lga, village, address, fatherName, fatherPhone, 
							fatherOccupation, fatherReligion, motherName, motherPhone, motherOccupation, 
							motherReligion, guardianName, guardianPhone, guardianOccupation, guardianReligion, 
							email, prevSchool, lastClass, classSeeking, classOffered, boaderStatus, acceptFeePolicy, 
							admissionStatus, user, lastUpdateUser, dob, date, lastUpdDate);
					
					//set regno
					int regNo;
					EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
					EntityManager entitymanager = emfactory.createEntityManager();
					entitymanager.getTransaction().begin();
					
					regNo = getLastRegFormNo(entitymanager, surName, otherNames, session, 
							term, dob, date);
					admRegFormNo.setText(String.valueOf(regNo));
						
					entitymanager.getTransaction().commit();
					
					entitymanager.close();
					emfactory.close();
					
					//launch admission form
					if(event.getSource() == submitCreateAdmissionBtn) {
						try {				
							Stage primaryStage = (Stage)submitCreateAdmissionBtn.getScene().getWindow();
							VBox pane = (VBox)FXMLLoader.load(getClass().getResource("admissionForm.fxml"));
							primaryStage.setTitle("Admission Form");
							Scene scene = new Scene(pane,710,800);
							scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
							primaryStage.setScene(scene);
							primaryStage.show();
							
							//admRegFormNo2.setText(String.valueOf(regNo));
							
						} catch(Exception e) {
							e.printStackTrace();
						}
					}
				}
				catch(Exception e2) {
					e2.printStackTrace();
				}
				finally {
					admRegFee.setText(String.valueOf(0.0));
					admSession.setValue("");
					admTerm.setValue("");
					admSurName.clear();
					admOtherNames.clear();
					admDOB.setValue(LocalDate.now());
					admSex.setValue("");
					admPlaceOfBirth.clear();
					admNationality.setValue("Nigeria");
					admState.setValue("Benue");
					admLGA.setValue("Gboko");
					admVillage.clear();
					admAddress.clear();
					admFatherName.clear();
					admFatherPhone.clear();
					admFatherOccupation.clear();
					admFatherReligion.clear();
					admMotherName.clear();
					admMotherPhone.clear();
					admMotherOccupation.clear();
					admMotherReligion.clear();
					admGuardianName.clear();
					admGuardianPhone.clear();
					admGuardianOccupation.clear();
					admGuardianReligion.clear();
					admEmail.clear();
					admPrevSchool.clear();
					admYearsAtPrevSchl.setText(String.valueOf(0));
					admLastClass.setValue("");
					admClassSeeking.setValue("");
					admClassOffered.setValue("");
					admOnOffCampus.setValue("");
					admFeePolicy.setValue("");
					admExamScores.setText(String.valueOf(0.0));
					admInterviewScores.setText(String.valueOf(0.0));
					admAdmissionStatus.setValue("");
					admDate.setValue(LocalDate.now());
				}
			}
			else {
				Alert alert = new Alert(Alert.AlertType.ERROR);
				alert.setContentText("Session, Term and Surname must be provided!");
				alert.setTitle("Invalid Entries");
				Optional<ButtonType> result = alert.showAndWait();
				if(result.get() == ButtonType.OK) {
					alert.close();
				}
				else {
					alert.close();
				}
			}
		}
		catch(Exception e) {
			e.printStackTrace();
			Alert alert = new Alert(Alert.AlertType.ERROR);
			alert.setContentText("Error: "+e.getMessage());
			alert.setTitle("Invalid Entries");
			Optional<ButtonType> result = alert.showAndWait();
			if(result.get() == ButtonType.OK) {
				alert.close();
			}
			else {
				alert.close();
			}
		}
	}
	
	@FXML public void updateCreateAdmissionButton(ActionEvent event) {
		try {
			int regFormNo = Integer.parseInt(admRegFormNo.getText().trim());
			double regFee = Double.parseDouble(admRegFee.getText().trim());
			String session = admSession.getValue();
			String term = admTerm.getValue();
			String surName = admSurName.getText().trim().toUpperCase();
			String otherNames = admOtherNames.getText().trim().toUpperCase();
			LocalDate dob = admDOB.getValue();
			String sex = admSex.getValue();
			String pob = admPlaceOfBirth.getText().trim();
			String nationality = admNationality.getValue();
			String state = admState.getValue();
			String lga = admLGA.getValue();
			String village = admVillage.getText().trim();
			String address = admAddress.getText().trim();
			String fatherName = admFatherName.getText().trim();
			String fatherPhone = admFatherPhone.getText().trim();
			String fatherOccupation = admFatherOccupation.getText().trim();
			String fatherReligion = admFatherReligion.getText().trim();
			String motherName = admMotherName.getText().trim();
			String motherPhone = admMotherPhone.getText().trim();
			String motherOccupation = admMotherOccupation.getText().trim();
			String motherReligion = admMotherReligion.getText().trim();
			String guardianName = admGuardianName.getText().trim();
			String guardianPhone = admGuardianPhone.getText().trim();
			String guardianOccupation = admGuardianOccupation.getText().trim();
			String guardianReligion = admGuardianReligion.getText().trim();
			String email = admEmail.getText().trim();
			String prevSchool = admPrevSchool.getText().trim();
			int yearsAtPrevSchool = Integer.parseInt(admYearsAtPrevSchl.getText().trim());
			String lastClass = admLastClass.getValue();
			String classSeeking = admClassSeeking.getValue();
			String classOffered = admClassOffered.getValue();
			String boaderStatus = admOnOffCampus.getValue();
			String acceptFeePolicy = admFeePolicy.getValue();
			double examScore = Double.parseDouble(admExamScores.getText().trim());
			double interviewScore = Double.parseDouble(admInterviewScores.getText().trim());
			String admissionStatus = admAdmissionStatus.getValue();
			LocalDate date = LocalDate.now();
			LocalDate lastUpdDate = date;
			String user = dispName;
			String lastUpdateUser = user;
			
			try {
				CreateProspectiveStudent std = new CreateProspectiveStudent();
				std.updateProspectiveStudent(regFormNo, yearsAtPrevSchool, regFee, examScore, 
						interviewScore, session, term, surName, otherNames, sex, pob, 
						nationality, state, lga, village, address, fatherName, fatherPhone, 
						fatherOccupation, fatherReligion, motherName, motherPhone, motherOccupation, 
						motherReligion, guardianName, guardianPhone, guardianOccupation, guardianReligion, 
						email, prevSchool, lastClass, classSeeking, classOffered, boaderStatus, acceptFeePolicy, 
						admissionStatus, lastUpdateUser, dob, lastUpdDate);
				
			}
			catch(Exception e2) {
				e2.printStackTrace();
			}
			finally {
				admRegFee.setText(String.valueOf(0.0));
				admSession.setValue("");
				admTerm.setValue("");
				admSurName.clear();
				admOtherNames.clear();
				admDOB.setValue(LocalDate.now());
				admSex.setValue("");
				admPlaceOfBirth.clear();
				admNationality.setValue("Nigeria");
				admState.setValue("Benue");
				admLGA.setValue("Gboko");
				admVillage.clear();
				admAddress.clear();
				admFatherName.clear();
				admFatherPhone.clear();
				admFatherOccupation.clear();
				admFatherReligion.clear();
				admMotherName.clear();
				admMotherPhone.clear();
				admMotherOccupation.clear();
				admMotherReligion.clear();
				admGuardianName.clear();
				admGuardianPhone.clear();
				admGuardianOccupation.clear();
				admGuardianReligion.clear();
				admEmail.clear();
				admPrevSchool.clear();
				admYearsAtPrevSchl.setText(String.valueOf(0));
				admLastClass.setValue("");
				admClassSeeking.setValue("");
				admClassOffered.setValue("");
				admOnOffCampus.setValue("");
				admFeePolicy.setValue("");
				admExamScores.setText(String.valueOf(0.0));
				admInterviewScores.setText(String.valueOf(0.0));
				admAdmissionStatus.setValue("");
				admDate.setValue(LocalDate.now());
			}
	
		}
		catch(Exception e) {
			e.printStackTrace();
			Alert alert = new Alert(Alert.AlertType.ERROR);
			alert.setContentText("Error: "+e.getMessage());
			alert.setTitle("Invalid Entries");
			Optional<ButtonType> result = alert.showAndWait();
			if(result.get() == ButtonType.OK) {
				alert.close();
			}
			else {
				alert.close();
			}
		}
	}
	
	@FXML public void findCreateAdmissionButton(ActionEvent event) {
		try {
			int regFormNo = Integer.parseInt(admRegFormNo.getText().trim());
			
			try {
				EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
				EntityManager entitymanager = emfactory.createEntityManager();
				entitymanager.getTransaction().begin();
				
				ProspectiveStudent std = entitymanager.find(ProspectiveStudent.class, regFormNo);
				
				admRegFee.setText(String.valueOf(std.getRegFee()));
				admSession.setValue(std.getSession());
				admTerm.setValue(std.getTerm());
				admSurName.setText(std.getSurName());
				admOtherNames.setText(std.getOtherNames());
				admDOB.setValue(std.getDateOfBirth());
				admSex.setValue(std.getSex());
				admPlaceOfBirth.setText(std.getPlaceOfBirth());
				admNationality.setValue(std.getNationality());
				admState.setValue(std.getState());
				admLGA.setValue(std.getLGA());
				admVillage.setText(std.getVillage());
				admAddress.setText(std.getAddress());
				admFatherName.setText(std.getFatherName());
				admFatherPhone.setText(std.getFatherPhone());
				admFatherOccupation.setText(std.getFatherOccupation());
				admFatherReligion.setText(std.getFatherReligion());
				admMotherName.setText(std.getMotherName());
				admMotherPhone.setText(std.getMotherPhone());
				admMotherOccupation.setText(std.getMotherOccupation());
				admMotherReligion.setText(std.getMotherReligion());
				admGuardianName.setText(std.getGuardianName());
				admGuardianPhone.setText(std.getGuardianPhone());
				admGuardianOccupation.setText(std.getGuardianOccupation());
				admGuardianReligion.setText(std.getGuardianReligion());
				admEmail.setText(std.getEmail());
				admPrevSchool.setText(std.getPrevSchool());
				admYearsAtPrevSchl.setText(String.valueOf(std.getYearsAtPrevSchool()));
				admLastClass.setValue(std.getLastClass());
				admClassSeeking.setValue(std.getClassSeeking());
				admClassOffered.setValue(std.getClassOffered());
				admOnOffCampus.setValue(std.getOnOffCampus());
				admFeePolicy.setValue(std.getAcceptFeePolicy());
				admExamScores.setText(String.valueOf(std.getExamScores()));
				admInterviewScores.setText(String.valueOf(std.getInterviewScores()));
				admAdmissionStatus.setValue(std.getAdmissionStatus());
				admDate.setValue(std.getDate());
					
				entitymanager.getTransaction().commit();
				
				entitymanager.close();
				emfactory.close();
			}
			catch(Exception e2) {
				e2.printStackTrace();
				Alert alert = new Alert(Alert.AlertType.ERROR);
				alert.setContentText("Error: "+e2.getMessage());
				alert.setTitle("Invalid Parameters...");
				Optional<ButtonType> result = alert.showAndWait();
				if(result.get() == ButtonType.OK) {
					alert.close();
				}
				else {
					alert.close();
				}
				admRegFee.setText(String.valueOf(0.0));
				admSession.setValue("");
				admTerm.setValue("");
				admSurName.clear();
				admOtherNames.clear();
				admDOB.setValue(LocalDate.now());
				admSex.setValue("");
				admPlaceOfBirth.clear();
				admNationality.setValue("Nigeria");
				admState.setValue("Benue");
				admLGA.setValue("Gboko");
				admVillage.clear();
				admAddress.clear();
				admFatherName.clear();
				admFatherPhone.clear();
				admFatherOccupation.clear();
				admFatherReligion.clear();
				admMotherName.clear();
				admMotherPhone.clear();
				admMotherOccupation.clear();
				admMotherReligion.clear();
				admGuardianName.clear();
				admGuardianPhone.clear();
				admGuardianOccupation.clear();
				admGuardianReligion.clear();
				admEmail.clear();
				admPrevSchool.clear();
				admYearsAtPrevSchl.setText(String.valueOf(0));
				admLastClass.setValue("");
				admClassSeeking.setValue("");
				admClassOffered.setValue("");
				admOnOffCampus.setValue("");
				admFeePolicy.setValue("");
				admExamScores.setText(String.valueOf(0.0));
				admInterviewScores.setText(String.valueOf(0.0));
				admAdmissionStatus.setValue("");
				admDate.setValue(LocalDate.now());
			}
		}
		catch(Exception e) {
			e.printStackTrace();
			Alert alert = new Alert(Alert.AlertType.ERROR);
			alert.setContentText("Error: "+e.getMessage());
			alert.setTitle("Invalid Entry for reg form no...");
			Optional<ButtonType> result = alert.showAndWait();
			if(result.get() == ButtonType.OK) {
				alert.close();
			}
			else {
				alert.close();
			}
			admRegFee.setText(String.valueOf(0.0));
			admSession.setValue("");
			admTerm.setValue("");
			admSurName.clear();
			admOtherNames.clear();
			admDOB.setValue(LocalDate.now());
			admSex.setValue("");
			admPlaceOfBirth.clear();
			admNationality.setValue("Nigeria");
			admState.setValue("Benue");
			admLGA.setValue("Gboko");
			admVillage.clear();
			admAddress.clear();
			admFatherName.clear();
			admFatherPhone.clear();
			admFatherOccupation.clear();
			admFatherReligion.clear();
			admMotherName.clear();
			admMotherPhone.clear();
			admMotherOccupation.clear();
			admMotherReligion.clear();
			admGuardianName.clear();
			admGuardianPhone.clear();
			admGuardianOccupation.clear();
			admGuardianReligion.clear();
			admEmail.clear();
			admPrevSchool.clear();
			admYearsAtPrevSchl.setText(String.valueOf(0));
			admLastClass.setValue("");
			admClassSeeking.setValue("");
			admClassOffered.setValue("");
			admOnOffCampus.setValue("");
			admFeePolicy.setValue("");
			admExamScores.setText(String.valueOf(0.0));
			admInterviewScores.setText(String.valueOf(0.0));
			admAdmissionStatus.setValue("");
			admDate.setValue(LocalDate.now());
		}
	}
	
	@FXML public void deleteCreateAdmissionButton(ActionEvent event) {
		
		Alert alert2 = new Alert(Alert.AlertType.CONFIRMATION);
		alert2.setContentText("Are you sure you want to delete this entity?");
		alert2.setTitle("Deleting Record...");
		Optional<ButtonType> result2 = alert2.showAndWait();
		if(result2.get() == ButtonType.OK) {
			
			try {
				int regFormNo = Integer.parseInt(admRegFormNo.getText().trim());
				
				try {
					CreateProspectiveStudent std = new CreateProspectiveStudent();
					std.deleteProspectiveStudent(regFormNo);
				}
				catch(Exception e2) {
					e2.printStackTrace();
				}
				finally {
					admRegFee.setText(String.valueOf(0.0));
					admSession.setValue("");
					admTerm.setValue("");
					admSurName.clear();
					admOtherNames.clear();
					admDOB.setValue(LocalDate.now());
					admSex.setValue("");
					admPlaceOfBirth.clear();
					admNationality.setValue("Nigeria");
					admState.setValue("Cross River");
					admLGA.setValue("Yala");
					admVillage.clear();
					admAddress.clear();
					admFatherName.clear();
					admFatherPhone.clear();
					admFatherOccupation.clear();
					admFatherReligion.clear();
					admMotherName.clear();
					admMotherPhone.clear();
					admMotherOccupation.clear();
					admMotherReligion.clear();
					admGuardianName.clear();
					admGuardianPhone.clear();
					admGuardianOccupation.clear();
					admGuardianReligion.clear();
					admEmail.clear();
					admPrevSchool.clear();
					admYearsAtPrevSchl.setText(String.valueOf(0));
					admLastClass.setValue("");
					admClassSeeking.setValue("");
					admClassOffered.setValue("");
					admOnOffCampus.setValue("");
					admFeePolicy.setValue("");
					admExamScores.setText(String.valueOf(0.0));
					admInterviewScores.setText(String.valueOf(0.0));
					admAdmissionStatus.setValue("");
					admDate.setValue(LocalDate.now());
				}
			}
			catch(Exception e) {
				e.printStackTrace();
				Alert alert = new Alert(Alert.AlertType.ERROR);
				alert.setContentText("Error: "+e.getMessage());
				alert.setTitle("Invalid Entry for reg form no...");
				Optional<ButtonType> result = alert.showAndWait();
				if(result.get() == ButtonType.OK) {
					alert.close();
				}
				else {
					alert.close();
				}
			}
		}
		else {
			alert2.close();
		}
	}
	
	//Admission Form
	@FXML private Button printAdmissionFormBtn, spoolAdmissionBtn;
	@FXML private VBox admFrm;
	@FXML private TextField admRegFormNo2, admYearsAtPrevSchl2, admRegFee2, admExamScores2, 
	admInterviewScores2, admSurName2, admOtherNames2, admPlaceOfBirth2, admVillage2,
	admFatherName2, admFatherPhone2, admFatherOccupation2, admFatherReligion2,
	admMotherName2, admMotherPhone2, admMotherOccupation2, admMotherReligion2,
	admGuardianName2, admGuardianPhone2, admGuardianOccupation2, admGuardianReligion2,
	admEmail2, admPrevSchool2,  admSession2, admSex2, admNationality2, admState2, 
	admLGA2, admLastClass2, admClassSeeking2, admClassOffered2, admOnOffCampus2, admFeePolicy2,
	admAdmissionStatus2, admAddress2, admDOB2, admDate2, admStateOfMarriage, admAddressCandidate;
	
	@FXML public void admFormPopulate(MouseEvent event) {
		try {
			int regNo;
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			regNo = getLastRegFormNo2(entitymanager);
			admRegFormNo2.setText(String.valueOf(regNo));
			
			ProspectiveStudent std = entitymanager.find(ProspectiveStudent.class, regNo);
			admSession2.setText(std.getSession());
			admRegFee2.setText(String.valueOf(std.getRegFee()));
			admSurName2.setText(std.getSurName());
			admOtherNames2.setText(std.getOtherNames());
			admDOB2.setText(std.getDateOfBirth().toString());
			admPlaceOfBirth2.setText(std.getPlaceOfBirth());
			admSex2.setText(std.getSex());
			admFatherName2.setText(std.getFatherName());
			admAddress2.setText(std.getAddress());
			admFatherPhone2.setText(std.getFatherPhone());
			admFatherOccupation2.setText(std.getFatherOccupation());
			admMotherOccupation2.setText(std.getMotherOccupation());
			admNationality2.setText(std.getNationality()); 
			admState2.setText(std.getState());
			admLGA2.setText(std.getLGA());
			admStateOfMarriage.setText("");
			admAddressCandidate.setText(std.getAddress());
			admFatherReligion2.setText(std.getFatherReligion());
			admPrevSchool2.setText(std.getPrevSchool());
			admYearsAtPrevSchl2.setText(String.valueOf(std.getYearsAtPrevSchool()));
			admLastClass2.setText(std.getLastClass());
			admClassSeeking2.setText(std.getClassSeeking());
			admOnOffCampus2.setText(std.getOnOffCampus()); 
			admFeePolicy2.setText(std.getAcceptFeePolicy());
			admEmail2.setText(std.getEmail());
			admExamScores2.setText(String.valueOf(std.getExamScores())); 
			admInterviewScores2.setText(String.valueOf(std.getInterviewScores()));
			admAdmissionStatus2.setText(std.getAdmissionStatus());
			admClassOffered2.setText(std.getClassOffered());
				
			entitymanager.getTransaction().commit();
			
			entitymanager.close();
			emfactory.close();
			
		}
		catch(Exception e) {
			e.printStackTrace();
		}
	}
	
	@FXML public void spoolAdmissionButton(ActionEvent event) {
		try {
			int regNo = Integer.parseInt(admRegFormNo2.getText());
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			ProspectiveStudent std = entitymanager.find(ProspectiveStudent.class, regNo);
			
			admSession2.setText(std.getSession());
			admRegFee2.setText(String.valueOf(std.getRegFee()));
			admSurName2.setText(std.getSurName());
			admOtherNames2.setText(std.getOtherNames());
			admDOB2.setText(std.getDateOfBirth().toString());
			admPlaceOfBirth2.setText(std.getPlaceOfBirth());
			admSex2.setText(std.getSex());
			admFatherName2.setText(std.getFatherName());
			admAddress2.setText(std.getAddress());
			admFatherPhone2.setText(std.getFatherPhone());
			admFatherOccupation2.setText(std.getFatherOccupation());
			admMotherOccupation2.setText(std.getMotherOccupation());
			admNationality2.setText(std.getNationality()); 
			admState2.setText(std.getState());
			admLGA2.setText(std.getLGA());
			admStateOfMarriage.setText("");
			admAddressCandidate.setText(std.getAddress());
			admFatherReligion2.setText(std.getFatherReligion());
			admPrevSchool2.setText(std.getPrevSchool());
			admYearsAtPrevSchl2.setText(String.valueOf(std.getYearsAtPrevSchool()));
			admLastClass2.setText(std.getLastClass());
			admClassSeeking2.setText(std.getClassSeeking());
			admOnOffCampus2.setText(std.getOnOffCampus()); 
			admFeePolicy2.setText(std.getAcceptFeePolicy());
			admEmail2.setText(std.getEmail());
			admExamScores2.setText(String.valueOf(std.getExamScores())); 
			admInterviewScores2.setText(String.valueOf(std.getInterviewScores()));
			admAdmissionStatus2.setText(std.getAdmissionStatus());
			admClassOffered2.setText(std.getClassOffered());
				
			entitymanager.getTransaction().commit();
			
			entitymanager.close();
			emfactory.close();
			
		}
		catch(Exception e) {
			e.printStackTrace();
		}
	}
	
	@FXML public void printAdmissionFormButton(ActionEvent event) {
		returnAdmissionForm.setVisible(false);
		printAdmissionFormBtn.setVisible(false);
		spoolAdmissionBtn.setVisible(false);
		try {
			printNodePortrait(admFrm);
		}
		catch(Exception exception) {
			exception.printStackTrace();
		}
		finally {
			returnAdmissionForm.setVisible(true);
			printAdmissionFormBtn.setVisible(true);
			spoolAdmissionBtn.setVisible(true);
		}
	}
	
	public static void printNodePortrait(final VBox printPane) throws NoSuchMethodException, 
			InstantiationException, IllegalAccessException, InvocationTargetException {

		Printer printer = Printer.getDefaultPrinter();
		PageLayout pageLayout
		= printer.createPageLayout(Paper.A4, PageOrientation.PORTRAIT, Printer.MarginType.HARDWARE_MINIMUM);
		//PrinterAttributes attr = printer.getPrinterAttributes();
		PrinterJob job = PrinterJob.createPrinterJob();
		double scaleX
		= pageLayout.getPrintableWidth() / printPane.getBoundsInParent().getWidth();
		double scaleY
		= pageLayout.getPrintableHeight() / printPane.getBoundsInParent().getHeight();
		Scale scale = new Scale(scaleX, scaleY);
		printPane.getTransforms().add(scale);

		if (job != null && job.showPrintDialog(printPane.getScene().getWindow())) {
			boolean success = job.printPage(pageLayout, printPane);
			if (success) {
				job.endJob();

			}
		}
		printPane.getTransforms().remove(scale);
	}
	
	@FXML public void defineHomeAccessButton(MouseEvent event) {
		homeLaunchAccess();
	}
	
	public void homeLaunchAccess() {
		if(dispUserClass.equals("Cashier") || dispUserClass.equalsIgnoreCase("Bursar")) {
			//enterstdInfoBtn.setDisable(true);
			staffInfoButton.setDisable(true);
			//enterFinInfoBtn.setDisable(true);
			enterScoreInfoBtn.setDisable(true);
			enterAcademicYrBtn.setDisable(true);
			enterAttendanceBtn.setDisable(true);
			enterHostelBtn.setDisable(true);
			librarySysBtn.setDisable(true);
			generateReportsButton.setDisable(true);
			//enterInventoryPad.setDisable(true);
			//enterSecurityBtn.setDisable(true);

		}
		else if(dispUserClass.equals("Teacher")) {
			//enterstdInfoBtn.setDisable(true);
			staffInfoButton.setDisable(true);
			enterFinInfoBtn.setDisable(true);
			//enterScoreInfoBtn.setDisable(true);
			enterAcademicYrBtn.setDisable(true);
			//enterAttendanceBtn.setDisable(true);
			enterHostelBtn.setDisable(true);
			librarySysBtn.setDisable(true);
			//generateReportsButton.setDisable(true);
			enterInventoryPad.setDisable(true);
			//enterSecurityBtn.setDisable(true);

		}
		else if(dispUserClass.equals("Dean") || dispUserClass.equals("Sub-Dean")) {
			//enterstdInfoBtn.setDisable(true);
			//staffInfoButton.setDisable(true);
			enterFinInfoBtn.setDisable(true);
			//enterScoreInfoBtn.setDisable(true);
			enterAcademicYrBtn.setDisable(true);
			//enterAttendanceBtn.setDisable(true);
			enterHostelBtn.setDisable(true);
			librarySysBtn.setDisable(true);
			//generateReportsButton.setDisable(true);
			//enterInventoryPad.setDisable(true);
			//enterSecurityBtn.setDisable(true);

		}
		else if(dispUserClass.equals("Vice-Principal") || dispUserClass.equals("Principal")) {
			//enterstdInfoBtn.setDisable(true);
			//staffInfoButton.setDisable(true);
			//enterFinInfoBtn.setDisable(true);
			enterScoreInfoBtn.setDisable(true);
			//enterAcademicYrBtn.setDisable(true);
			enterAttendanceBtn.setDisable(true);
			//enterHostelBtn.setDisable(true);
			//librarySysBtn.setDisable(true);
			//generateReportsButton.setDisable(true);
			//enterInventoryPad.setDisable(true);
			//enterSecurityBtn.setDisable(true);

		}
		else if(dispUserClass.equals("AdmissionOfficer")) {
			
			//enterstdInfoBtn.setDisable(true);
			staffInfoButton.setDisable(true);
			enterFinInfoBtn.setDisable(true);
			enterScoreInfoBtn.setDisable(true);
			enterAcademicYrBtn.setDisable(true);
			enterAttendanceBtn.setDisable(true);
			//enterHostelBtn.setDisable(true);
			librarySysBtn.setDisable(true);
			generateReportsButton.setDisable(true);
			enterInventoryPad.setDisable(true);
			//enterSecurityBtn.setDisable(true);

		}
		else if(dispUserClass.equals("SecurityOfficer")) {
			
			//enterstdInfoBtn.setDisable(true);
			staffInfoButton.setDisable(true);
			enterFinInfoBtn.setDisable(true);
			enterScoreInfoBtn.setDisable(true);
			enterAcademicYrBtn.setDisable(true);
			enterAttendanceBtn.setDisable(true);
			enterHostelBtn.setDisable(true);
			librarySysBtn.setDisable(true);
			generateReportsButton.setDisable(true);
			enterInventoryPad.setDisable(true);
			//enterSecurityBtn.setDisable(true);

		}
		else if(dispUserClass.equals("Boarding-Master")) {
			
			//enterstdInfoBtn.setDisable(true);
			staffInfoButton.setDisable(true);
			//enterFinInfoBtn.setDisable(true);
			enterScoreInfoBtn.setDisable(true);
			enterAcademicYrBtn.setDisable(true);
			enterAttendanceBtn.setDisable(true);
			//enterHostelBtn.setDisable(true);
			//librarySysBtn.setDisable(true);
			generateReportsButton.setDisable(true);
			enterInventoryPad.setDisable(true);
			//enterSecurityBtn.setDisable(true);

		}
		else if(dispUserClass.equals("Counsellor")){
			//enterstdInfoBtn.setDisable(true);
			staffInfoButton.setDisable(true);
			enterFinInfoBtn.setDisable(true);
			//enterScoreInfoBtn.setDisable(true);
			enterAcademicYrBtn.setDisable(true);
			enterAttendanceBtn.setDisable(true);
			enterHostelBtn.setDisable(true);
			//librarySysBtn.setDisable(true);
			//generateReportsButton.setDisable(true);
			enterInventoryPad.setDisable(true);
			//enterSecurityBtn.setDisable(true);
		}
		else if(dispUserClass.equals("Computer-Operator")) {
			//enterstdInfoBtn.setDisable(true);
			staffInfoButton.setDisable(true);
			enterFinInfoBtn.setDisable(true);
			enterScoreInfoBtn.setDisable(true);
			enterAcademicYrBtn.setDisable(true);
			enterAttendanceBtn.setDisable(true);
			enterHostelBtn.setDisable(true);
			librarySysBtn.setDisable(true);
			generateReportsButton.setDisable(true);
			//enterInventoryPad.setDisable(true);
			//enterSecurityBtn.setDisable(true);
		
		}
		else {
			//do nothing
		}
	}
	
	@FXML public void defineFinInfoAccessButton(MouseEvent event) {
		finInfoAccess();
	}
	
	public void finInfoAccess() {
		if(dispUserClass.equals("Cashier") || dispUserClass.equalsIgnoreCase("Bursar")) {
			//enterABBtn.setDisable(true);
			//tellerButton.setDisable(true);
			FTButton.setDisable(true);
			//enterStmBtn.setDisable(true);
			//enterPayAnalysisBtn.setDisable(true);
			//enterEarnedIncomeBtn2.setDisable(true);
			//invoicingBtn.setDisable(true);
			enterOpenTillGLBtn.setDisable(true);
		}
		else if(dispUserClass.equals("Teacher")) {
			//enterABBtn.setDisable(true);
			tellerButton.setDisable(true);
			FTButton.setDisable(true);
			enterStmBtn.setDisable(true);
			enterPayAnalysisBtn.setDisable(true);
			enterEarnedIncomeBtn2.setDisable(true);
			invoicingBtn.setDisable(true);
			enterOpenTillGLBtn.setDisable(true);
		}
		else if(dispUserClass.equals("Dean") || dispUserClass.equals("Sub-Dean")) {
			//enterABBtn.setDisable(true);
			tellerButton.setDisable(true);
			FTButton.setDisable(true);
			//enterStmBtn.setDisable(true);
			enterPayAnalysisBtn.setDisable(true);
			enterEarnedIncomeBtn2.setDisable(true);
			invoicingBtn.setDisable(true);
			enterOpenTillGLBtn.setDisable(true);
		}
		else if(dispUserClass.equals("Vice-Principal") || dispUserClass.equals("Principal")) {
			//enterABBtn.setDisable(true);
			tellerButton.setDisable(true);
			FTButton.setDisable(true);
			//enterStmBtn.setDisable(true);
			enterPayAnalysisBtn.setDisable(true);
			enterEarnedIncomeBtn2.setDisable(true);
			invoicingBtn.setDisable(true);
			enterOpenTillGLBtn.setDisable(true);
		}
		else if(dispUserClass.equals("AdmissionOfficer")) {
			//enterABBtn.setDisable(true);
			tellerButton.setDisable(true);
			FTButton.setDisable(true);
			enterStmBtn.setDisable(true);
			enterPayAnalysisBtn.setDisable(true);
			enterEarnedIncomeBtn2.setDisable(true);
			invoicingBtn.setDisable(true);
			enterOpenTillGLBtn.setDisable(true);
		}
		else if(dispUserClass.equals("SecurityOfficer")) {
			enterABBtn.setDisable(true);
			tellerButton.setDisable(true);
			FTButton.setDisable(true);
			enterStmBtn.setDisable(true);
			enterPayAnalysisBtn.setDisable(true);
			enterEarnedIncomeBtn2.setDisable(true);
			invoicingBtn.setDisable(true);
			enterOpenTillGLBtn.setDisable(true);
		}
		else if(dispUserClass.equals("Boarding-Master")) {
			//enterABBtn.setDisable(true);
			tellerButton.setDisable(true);
			FTButton.setDisable(true);
			//enterStmBtn.setDisable(true);
			enterPayAnalysisBtn.setDisable(true);
			enterEarnedIncomeBtn2.setDisable(true);
			invoicingBtn.setDisable(true);
			enterOpenTillGLBtn.setDisable(true);
		}
		else if(dispUserClass.equals("Counsellor")){
			//enterABBtn.setDisable(true);
			tellerButton.setDisable(true);
			FTButton.setDisable(true);
			//enterStmBtn.setDisable(true);
			enterPayAnalysisBtn.setDisable(true);
			enterEarnedIncomeBtn2.setDisable(true);
			invoicingBtn.setDisable(true);
			enterOpenTillGLBtn.setDisable(true);
		}
		else if(dispUserClass.equals("Computer-Operator")) {
			//enterABBtn.setDisable(true);
			tellerButton.setDisable(true);
			FTButton.setDisable(true);
			//enterStmBtn.setDisable(true);
			enterPayAnalysisBtn.setDisable(true);
			enterEarnedIncomeBtn2.setDisable(true);
			invoicingBtn.setDisable(true);
			enterOpenTillGLBtn.setDisable(true);
		}
		else {
			//do nothing
		}
	}
	
	@FXML public void defineStdInfoAccessButton(MouseEvent event) {
		stdInfoAccess();
	}
	
	@FXML private Button enterBiometricBtn;
	public void stdInfoAccess() {
		if(dispUserClass.equals("Cashier") || dispUserClass.equalsIgnoreCase("Bursar")) {
			enterAdmissionBtn.setDisable(true);
			createNewStudentButton.setDisable(true);
			//findStudentButton.setDisable(true);
			enterConcessionBtn.setDisable(true);
			//enterBarcodeEnqBtn.setDisable(true);
			enterBiometricBtn.setDisable(true);
			enterUploadPhotoBtn.setDisable(true);
			enterDiscRecBtn.setDisable(true);
		}
		else if(dispUserClass.equals("Teacher")) {
			enterAdmissionBtn.setDisable(true);
			createNewStudentButton.setDisable(true);
			//findStudentButton.setDisable(true);
			enterConcessionBtn.setDisable(true);
			enterBarcodeEnqBtn.setDisable(true);
			enterBiometricBtn.setDisable(true);
			enterUploadPhotoBtn.setDisable(true);
			enterDiscRecBtn.setDisable(true);
		}
		else if(dispUserClass.equals("Dean") || dispUserClass.equals("Sub-Dean")) {
			//enterAdmissionBtn.setDisable(true);
			createNewStudentButton.setDisable(true);
			//findStudentButton.setDisable(true);
			enterConcessionBtn.setDisable(true);
			//enterBarcodeEnqBtn.setDisable(true);
			enterBiometricBtn.setDisable(true);
			enterUploadPhotoBtn.setDisable(true);
			enterDiscRecBtn.setDisable(true);
		}
		else if(dispUserClass.equals("Vice-Principal") || dispUserClass.equals("Principal")) {
			//enterAdmissionBtn.setDisable(true);
			//createNewStudentButton.setDisable(true);
			//findStudentButton.setDisable(true);
			//enterConcessionBtn.setDisable(true);
			//enterBarcodeEnqBtn.setDisable(true);
			enterBiometricBtn.setDisable(true);
			enterUploadPhotoBtn.setDisable(true);
			enterDiscRecBtn.setDisable(true);
		}
		else if(dispUserClass.equals("AdmissionOfficer")) {
			//enterAdmissionBtn.setDisable(true);
			//createNewStudentButton.setDisable(true);
			//findStudentButton.setDisable(true);
			enterConcessionBtn.setDisable(true);
			enterBarcodeEnqBtn.setDisable(true);
			enterBiometricBtn.setDisable(true);
			enterUploadPhotoBtn.setDisable(true);
			enterDiscRecBtn.setDisable(true);
		}
		else if(dispUserClass.equals("SecurityOfficer")) {
			enterAdmissionBtn.setDisable(true);
			createNewStudentButton.setDisable(true);
			findStudentButton.setDisable(true);
			enterConcessionBtn.setDisable(true);
			//enterBarcodeEnqBtn.setDisable(true);
			enterBiometricBtn.setDisable(true);
			enterUploadPhotoBtn.setDisable(true);
			enterDiscRecBtn.setDisable(true);
		}
		else if(dispUserClass.equals("Boarding-Master")) {
			enterAdmissionBtn.setDisable(true);
			createNewStudentButton.setDisable(true);
			//findStudentButton.setDisable(true);
			enterConcessionBtn.setDisable(true);
			//enterBarcodeEnqBtn.setDisable(true);
			enterBiometricBtn.setDisable(true);
			//enterUploadPhotoBtn.setDisable(true);
			//enterDiscRecBtn.setDisable(true);
		}
		else if(dispUserClass.equals("Counsellor")){
			enterAdmissionBtn.setDisable(true);
			createNewStudentButton.setDisable(true);
			//findStudentButton.setDisable(true);
			enterConcessionBtn.setDisable(true);
			enterBarcodeEnqBtn.setDisable(true);
			enterBiometricBtn.setDisable(true);
			//enterUploadPhotoBtn.setDisable(true);
			//enterDiscRecBtn.setDisable(true);
		}
		else if(dispUserClass.equals("Computer-Operator")) {
			enterAdmissionBtn.setDisable(true);
			//createNewStudentButton.setDisable(true);
			//findStudentButton.setDisable(true);
			enterConcessionBtn.setDisable(true);
			//enterBarcodeEnqBtn.setDisable(true);
			enterBiometricBtn.setDisable(true);
			//enterUploadPhotoBtn.setDisable(true);
			enterDiscRecBtn.setDisable(true);
		}
		else {
			//do nothing
		}
	}
	
	@FXML public void defineUpdateStdInfoAccessButton(MouseEvent event) {
		updateStdInfoAccess();
	}
	
	public void updateStdInfoAccess() {
		if(dispUserClass.equals("Cashier") || dispUserClass.equalsIgnoreCase("Bursar")) {
			updateStdBtn.setDisable(true);
		}
		else if(dispUserClass.equals("Teacher")) {
			updateStdBtn.setDisable(true);
		}
		else if(dispUserClass.equals("Dean") || dispUserClass.equals("Sub-Dean")) {
			updateStdBtn.setDisable(true);
		}
		else if(dispUserClass.equals("Vice-Principal") || dispUserClass.equals("Principal")) {
			//updateStdBtn.setDisable(true);
		}
		else if(dispUserClass.equals("AdmissionOfficer")) {
			//updateStdBtn.setDisable(true);
			
		}
		else if(dispUserClass.equals("SecurityOfficer")) {
			updateStdBtn.setDisable(true);
			
		}
		else if(dispUserClass.equals("Boarding-Master")) {
			
			updateStdBtn.setDisable(true);
		}
		else if(dispUserClass.equals("Counsellor")){
			updateStdBtn.setDisable(true);
		}
		else if(dispUserClass.equals("Computer-Operator")) {
			//updateStdBtn.setDisable(true);
		}
		else {
			//do nothing
		}
	}
	
	@FXML private Tab specialBarcAttendance;
	
	@FXML public void defineSpecialBarcodeAttendanceAccessButton(Event event) {
		specialBarcodeAttendanceAccess();
	}
	
	public void specialBarcodeAttendanceAccess() {
		if(dispUserClass.equals("Cashier") || dispUserClass.equalsIgnoreCase("Bursar")) {
			specialBarcAttendance.setDisable(true);
		}
		else if(dispUserClass.equals("Teacher")) {
			specialBarcAttendance.setDisable(true);
		}
		else if(dispUserClass.equals("Dean") || dispUserClass.equals("Sub-Dean")) {
			specialBarcAttendance.setDisable(true);
		}
		else if(dispUserClass.equals("Vice-Principal") || dispUserClass.equals("Principal")) {
			//specialBarcAttendance.setDisable(true);
		}
		else if(dispUserClass.equals("AdmissionOfficer")) {
			specialBarcAttendance.setDisable(true);
		}
		else if(dispUserClass.equals("SecurityOfficer")) {
			specialBarcAttendance.setDisable(true);
		}
		else if(dispUserClass.equals("Boarding-Master")) {
			specialBarcAttendance.setDisable(true);
		}
		else if(dispUserClass.equals("Counsellor")){
			specialBarcAttendance.setDisable(true);
		}
		else if(dispUserClass.equals("Computer-Operator")) {
			//specialBarcAttendance.setDisable(true);
		}
		else {
			//do nothing
		}
	}
	
	@FXML public void defineAdminInfoAccessButton(MouseEvent event){
		adminInfoAccess();
	}
	
	public void adminInfoAccess() {
		if(dispUserClass.equals("Cashier") || dispUserClass.equalsIgnoreCase("Bursar")) {
			enterDrugsInfoBtn.setDisable(true);
			enterCreateClass.setDisable(true);
			enterAssignBillToClassBtn.setDisable(true);
			//enterBACBtn.setDisable(true);
			//enterStdClassListBtn.setDisable(true);
			enterMoveClass2ClassBtn.setDisable(true);
			enterChangeBorderStatusBtn.setDisable(true);
			enterInventoryBtn.setDisable(true);
			//invListBtn.setDisable(true);
			enterChangeStdClassBtn.setDisable(true);
			enterEOTBtn.setDisable(true);
			enterGenReportBtn.setDisable(true);
			deleteStudentButton.setDisable(true);
		}
		else if(dispUserClass.equals("Teacher")) {
			enterDrugsInfoBtn.setDisable(true);
			enterCreateClass.setDisable(true);
			enterAssignBillToClassBtn.setDisable(true);
			enterBACBtn.setDisable(true);
			//enterStdClassListBtn.setDisable(true);
			enterMoveClass2ClassBtn.setDisable(true);
			enterChangeBorderStatusBtn.setDisable(true);
			enterInventoryBtn.setDisable(true);
			invListBtn.setDisable(true);
			enterChangeStdClassBtn.setDisable(true);
			enterEOTBtn.setDisable(true);
			enterGenReportBtn.setDisable(true);
			deleteStudentButton.setDisable(true);
		}
		else if(dispUserClass.equals("Dean") || dispUserClass.equals("Sub-Dean")) {
			enterDrugsInfoBtn.setDisable(true);
			enterCreateClass.setDisable(true);
			enterAssignBillToClassBtn.setDisable(true);
			enterBACBtn.setDisable(true);
			//enterStdClassListBtn.setDisable(true);
			enterMoveClass2ClassBtn.setDisable(true);
			enterChangeBorderStatusBtn.setDisable(true);
			enterInventoryBtn.setDisable(true);
			//invListBtn.setDisable(true);
			enterChangeStdClassBtn.setDisable(true);
			//enterEOTBtn.setDisable(true);
			enterGenReportBtn.setDisable(true);
			//deleteStudentButton.setDisable(true);
		}
		else if(dispUserClass.equals("Vice-Principal") || dispUserClass.equals("Principal")) {
			enterDrugsInfoBtn.setDisable(true);
			enterCreateClass.setDisable(true);
			enterAssignBillToClassBtn.setDisable(true);
			//enterBACBtn.setDisable(true);
			//enterStdClassListBtn.setDisable(true);
			//enterMoveClass2ClassBtn.setDisable(true);
			enterChangeBorderStatusBtn.setDisable(true);
			enterInventoryBtn.setDisable(true);
			//invListBtn.setDisable(true);
			enterChangeStdClassBtn.setDisable(true);
			enterEOTBtn.setDisable(true);
			enterGenReportBtn.setDisable(true);
			deleteStudentButton.setDisable(true);
		}
		else if(dispUserClass.equals("AdmissionOfficer")) {
			enterDrugsInfoBtn.setDisable(true);
			enterCreateClass.setDisable(true);
			enterAssignBillToClassBtn.setDisable(true);
			enterBACBtn.setDisable(true);
			//enterStdClassListBtn.setDisable(true);
			enterMoveClass2ClassBtn.setDisable(true);
			enterChangeBorderStatusBtn.setDisable(true);
			enterInventoryBtn.setDisable(true);
			invListBtn.setDisable(true);
			enterChangeStdClassBtn.setDisable(true);
			enterEOTBtn.setDisable(true);
			enterGenReportBtn.setDisable(true);
			deleteStudentButton.setDisable(true);
		}
		else if(dispUserClass.equals("SecurityOfficer")) {
			enterDrugsInfoBtn.setDisable(true);
			enterCreateClass.setDisable(true);
			enterAssignBillToClassBtn.setDisable(true);
			enterBACBtn.setDisable(true);
			enterStdClassListBtn.setDisable(true);
			enterMoveClass2ClassBtn.setDisable(true);
			enterChangeBorderStatusBtn.setDisable(true);
			enterInventoryBtn.setDisable(true);
			invListBtn.setDisable(true);
			enterChangeStdClassBtn.setDisable(true);
			enterEOTBtn.setDisable(true);
			enterGenReportBtn.setDisable(true);
			deleteStudentButton.setDisable(true);
		}
		else if(dispUserClass.equals("Boarding-Master")) {
			enterDrugsInfoBtn.setDisable(true);
			enterCreateClass.setDisable(true);
			enterAssignBillToClassBtn.setDisable(true);
			enterBACBtn.setDisable(true);
			//enterStdClassListBtn.setDisable(true);
			enterMoveClass2ClassBtn.setDisable(true);
			enterChangeBorderStatusBtn.setDisable(true);
			enterInventoryBtn.setDisable(true);
			invListBtn.setDisable(true);
			enterChangeStdClassBtn.setDisable(true);
			enterEOTBtn.setDisable(true);
			enterGenReportBtn.setDisable(true);
			deleteStudentButton.setDisable(true);
		}
		else if(dispUserClass.equals("Counsellor")){
			enterDrugsInfoBtn.setDisable(true);
			enterCreateClass.setDisable(true);
			enterAssignBillToClassBtn.setDisable(true);
			enterBACBtn.setDisable(true);
			//enterStdClassListBtn.setDisable(true);
			enterMoveClass2ClassBtn.setDisable(true);
			enterChangeBorderStatusBtn.setDisable(true);
			enterInventoryBtn.setDisable(true);
			invListBtn.setDisable(true);
			enterChangeStdClassBtn.setDisable(true);
			enterEOTBtn.setDisable(true);
			enterGenReportBtn.setDisable(true);
			deleteStudentButton.setDisable(true);
		}
		else if(dispUserClass.equals("Computer-Operator")) {
			enterDrugsInfoBtn.setDisable(true);
			enterCreateClass.setDisable(true);
			enterAssignBillToClassBtn.setDisable(true);
			//enterBACBtn.setDisable(true);
			//enterStdClassListBtn.setDisable(true);
			//enterMoveClass2ClassBtn.setDisable(true);
			enterChangeBorderStatusBtn.setDisable(true);
			enterInventoryBtn.setDisable(true);
			//invListBtn.setDisable(true);
			enterChangeStdClassBtn.setDisable(true);
			//enterEOTBtn.setDisable(true);
			enterGenReportBtn.setDisable(true);
			deleteStudentButton.setDisable(true);
		}
		else {
			//do nothing
		}
	}
	
	@FXML public void defineBillAClassInfoAccess(MouseEvent event) {
		billAClassInfoAccess();
	}
	
	public void billAClassInfoAccess() {
		if(dispUserClass.equals("Cashier") || dispUserClass.equalsIgnoreCase("Bursar")) {
			graduateClassBtn.setDisable(true);
		}
		else if(dispUserClass.equals("Teacher")) {
			graduateClassBtn.setDisable(true);
		}
		else if(dispUserClass.equals("Dean") || dispUserClass.equals("Sub-Dean")) {
			graduateClassBtn.setDisable(true);
		}
		else if(dispUserClass.equals("Vice-Principal") || dispUserClass.equals("Principal")) {
			graduateClassBtn.setDisable(true);
		}
		else if(dispUserClass.equals("AdmissionOfficer")) {
			graduateClassBtn.setDisable(true);
		}
		else if(dispUserClass.equals("SecurityOfficer")) {
			graduateClassBtn.setDisable(true);
		}
		else if(dispUserClass.equals("Boarding-Master")) {
			graduateClassBtn.setDisable(true);
		}
		else if(dispUserClass.equals("Counsellor")){
			graduateClassBtn.setDisable(true);
		}
		else if(dispUserClass.equals("Computer-Operator")) {
			graduateClassBtn.setDisable(true);
		}
		else {
			//do nothing
		}
	}
	
	@FXML public void defineScoreCardInfoAccessButton(MouseEvent event) {
		scoreCardInfoAccess();
	}
	
	public void scoreCardInfoAccess() {
		if(dispUserClass.equals("Cashier") || dispUserClass.equalsIgnoreCase("Bursar")) {
			enterScoreSheetsJssClass.setDisable(true);
			enterEOTResult.setDisable(true);
			enterLiveResult.setDisable(true);
			addDeleteSubjectsButton.setDisable(true);
		}
		else if(dispUserClass.equals("Teacher")) {
			//enterScoreSheetsJssClass.setDisable(true);
			//enterEOTResult.setDisable(true);
			enterLiveResult.setDisable(true);
			addDeleteSubjectsButton.setDisable(true);
		}
		else if(dispUserClass.equals("Dean") || dispUserClass.equals("Sub-Dean")) {
			//enterScoreSheetsJssClass.setDisable(true);
			//enterEOTResult.setDisable(true);
			//enterLiveResult.setDisable(true);
			addDeleteSubjectsButton.setDisable(true);
		}
		else if(dispUserClass.equals("Vice-Principal") || dispUserClass.equals("Principal")) {
			enterScoreSheetsJssClass.setDisable(true);
			//enterEOTResult.setDisable(true);
			enterLiveResult.setDisable(true);
			addDeleteSubjectsButton.setDisable(true);
		}
		else if(dispUserClass.equals("AdmissionOfficer")) {
			enterScoreSheetsJssClass.setDisable(true);
			enterEOTResult.setDisable(true);
			enterLiveResult.setDisable(true);
			addDeleteSubjectsButton.setDisable(true);
		}
		else if(dispUserClass.equals("SecurityOfficer")) {
			enterScoreSheetsJssClass.setDisable(true);
			enterEOTResult.setDisable(true);
			enterLiveResult.setDisable(true);
			addDeleteSubjectsButton.setDisable(true);
		}
		else if(dispUserClass.equals("Boarding-Master")) {
			enterScoreSheetsJssClass.setDisable(true);
			//enterEOTResult.setDisable(true);
			enterLiveResult.setDisable(true);
			addDeleteSubjectsButton.setDisable(true);
		}
		else if(dispUserClass.equals("Counsellor")){
			enterScoreSheetsJssClass.setDisable(true);
			//enterEOTResult.setDisable(true);
			//enterLiveResult.setDisable(true);
			addDeleteSubjectsButton.setDisable(true);
		}
		else if(dispUserClass.equals("Computer-Operator")) {
			enterScoreSheetsJssClass.setDisable(true);
			//enterEOTResult.setDisable(true);
			//enterLiveResult.setDisable(true);
			addDeleteSubjectsButton.setDisable(true);
		}
		else {
			//do nothing
		}
	}
	
	//Admission List Table
	@FXML private VBox vboxAdmissionPane;
	@FXML private Label admLabel;
	@FXML private ComboBox<String> admSessionCmb, admTermCmb, admClassCmb, admStatusCmb;
	@FXML private DatePicker admFroDate, admToDate;
	@FXML private TableView<AdmissionListDataTable> admissionListDataTable;
	@FXML private TableColumn<AdmissionListDataTable,String> admSNCol, admFormNoCol, admNameCol, 
		admSessionCol, admTermCol, admClassCol, admStatusCol, admDateCol;
	@FXML private Button spoolAdmissionListBtn;
	
	@FXML public void admListInit(MouseEvent event) {
		populateYear(admSessionCmb);
	}
	
	@FXML public void admListInit2(MouseEvent event) {
		admTermCmb.setItems(termN2);
		admStatusCmb.setItems(admStatusLst2);
	}
	
	ObservableList<String> admList2 = FXCollections.observableArrayList("All");
	@FXML public void admListInit3(MouseEvent event) {
		populateStdClassesCombo3(admList2, admClassCmb);
	}
	
	@FXML public void spoolAdmissionListButton(ActionEvent event) {
		try {
			String session = admSessionCmb.getValue();
			String term = admTermCmb.getValue();
			String stdClass = admClassCmb.getValue();
			String status = admStatusCmb.getValue();
			LocalDate froDate = admFroDate.getValue();
			LocalDate toDate = admToDate.getValue();
			
			if(term.equalsIgnoreCase("All") && stdClass.equalsIgnoreCase("All") && 
					status.equalsIgnoreCase("All")) {
				try {
					ObservableList<AdmissionListDataTable> data = FXCollections.observableArrayList();
					Vector<ProspectiveStudent> prospects = new Vector<>();
					
					EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
					EntityManager entitymanager = emfactory.createEntityManager();
					entitymanager.getTransaction().begin();
					
					prospects = getAdmissionListYear(entitymanager, session, froDate, toDate);
					
					entitymanager.getTransaction().commit();
					entitymanager.close();
					emfactory.close();
					
					int i = 1;
					for(ProspectiveStudent std : prospects) {
						String sNo = String.valueOf(i);
						data.add(new AdmissionListDataTable(
								sNo,
								String.valueOf(std.getRegFormNo()),
								std.getOtherNames() + " " + std.getSurName(),
								std.getSession(),
								std.getTerm(),
								std.getClassOffered(),
								std.getAdmissionStatus(),
								std.getDate().toString()
								));
						i++;
					}
					
					admSNCol.setCellValueFactory(new PropertyValueFactory("sNo_Data"));
					admFormNoCol.setCellValueFactory(new PropertyValueFactory("formNo_Data"));
					admNameCol.setCellValueFactory(new PropertyValueFactory("stdName_Data"));
					admSessionCol.setCellValueFactory(new PropertyValueFactory("session_Data"));
					admTermCol.setCellValueFactory(new PropertyValueFactory("term_Data"));
					admClassCol.setCellValueFactory(new PropertyValueFactory("stdClass_Data"));
					admStatusCol.setCellValueFactory(new PropertyValueFactory("status_Data"));
					admDateCol.setCellValueFactory(new PropertyValueFactory("date_Data"));
							
					admissionListDataTable.setItems(data);
					
				}
				catch(Exception e2) {
					e2.printStackTrace();
					admissionListDataTable.setItems(null);
				}
			}
			else if(term.equalsIgnoreCase("All") && stdClass.equalsIgnoreCase("All")) {
				try {
					ObservableList<AdmissionListDataTable> data = FXCollections.observableArrayList();
					Vector<ProspectiveStudent> prospects = new Vector<>();
					
					EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
					EntityManager entitymanager = emfactory.createEntityManager();
					entitymanager.getTransaction().begin();
					
					prospects = getAdmissionListYearStatus(entitymanager, session, status, 
							froDate, toDate);
					
					entitymanager.getTransaction().commit();
					entitymanager.close();
					emfactory.close();
					
					int i = 1;
					for(ProspectiveStudent std : prospects) {
						String sNo = String.valueOf(i);
						data.add(new AdmissionListDataTable(
								sNo,
								String.valueOf(std.getRegFormNo()),
								std.getOtherNames() + " " + std.getSurName(),
								std.getSession(),
								std.getTerm(),
								std.getClassOffered(),
								std.getAdmissionStatus(),
								std.getDate().toString()
								));
						i++;
					}
					
					admSNCol.setCellValueFactory(new PropertyValueFactory("sNo_Data"));
					admFormNoCol.setCellValueFactory(new PropertyValueFactory("formNo_Data"));
					admNameCol.setCellValueFactory(new PropertyValueFactory("stdName_Data"));
					admSessionCol.setCellValueFactory(new PropertyValueFactory("session_Data"));
					admTermCol.setCellValueFactory(new PropertyValueFactory("term_Data"));
					admClassCol.setCellValueFactory(new PropertyValueFactory("stdClass_Data"));
					admStatusCol.setCellValueFactory(new PropertyValueFactory("status_Data"));
					admDateCol.setCellValueFactory(new PropertyValueFactory("date_Data"));
							
					admissionListDataTable.setItems(data);
					
				}
				catch(Exception e2) {
					e2.printStackTrace();
					admissionListDataTable.setItems(null);
				}
				
			}
			else if(term.equalsIgnoreCase("All")) {
				try {
					ObservableList<AdmissionListDataTable> data = FXCollections.observableArrayList();
					Vector<ProspectiveStudent> prospects = new Vector<>();
					
					EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
					EntityManager entitymanager = emfactory.createEntityManager();
					entitymanager.getTransaction().begin();
					
					prospects = getAdmissionListYearStatusClass(entitymanager, session, status, 
							stdClass, froDate, toDate);
					
					entitymanager.getTransaction().commit();
					entitymanager.close();
					emfactory.close();
					
					int i = 1;
					for(ProspectiveStudent std : prospects) {
						String sNo = String.valueOf(i);
						data.add(new AdmissionListDataTable(
								sNo,
								String.valueOf(std.getRegFormNo()),
								std.getOtherNames() + " " + std.getSurName(),
								std.getSession(),
								std.getTerm(),
								std.getClassOffered(),
								std.getAdmissionStatus(),
								std.getDate().toString()
								));
						i++;
					}
					
					admSNCol.setCellValueFactory(new PropertyValueFactory("sNo_Data"));
					admFormNoCol.setCellValueFactory(new PropertyValueFactory("formNo_Data"));
					admNameCol.setCellValueFactory(new PropertyValueFactory("stdName_Data"));
					admSessionCol.setCellValueFactory(new PropertyValueFactory("session_Data"));
					admTermCol.setCellValueFactory(new PropertyValueFactory("term_Data"));
					admClassCol.setCellValueFactory(new PropertyValueFactory("stdClass_Data"));
					admStatusCol.setCellValueFactory(new PropertyValueFactory("status_Data"));
					admDateCol.setCellValueFactory(new PropertyValueFactory("date_Data"));
							
					admissionListDataTable.setItems(data);
					
				}
				catch(Exception e2) {
					e2.printStackTrace();
					admissionListDataTable.setItems(null);
				}
			}
			else if(stdClass.equals("All") && status.equals("All")){
				try {
					ObservableList<AdmissionListDataTable> data = FXCollections.observableArrayList();
					Vector<ProspectiveStudent> prospects = new Vector<>();
					
					EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
					EntityManager entitymanager = emfactory.createEntityManager();
					entitymanager.getTransaction().begin();
					
					prospects = getAdmissionListYearTerm(entitymanager, session, term, 
							froDate, toDate);
					
					entitymanager.getTransaction().commit();
					entitymanager.close();
					emfactory.close();
					
					int i = 1;
					for(ProspectiveStudent std : prospects) {
						String sNo = String.valueOf(i);
						data.add(new AdmissionListDataTable(
								sNo,
								String.valueOf(std.getRegFormNo()),
								std.getOtherNames() + " " + std.getSurName(),
								std.getSession(),
								std.getTerm(),
								std.getClassOffered(),
								std.getAdmissionStatus(),
								std.getDate().toString()
								));
						i++;
					}
					
					admSNCol.setCellValueFactory(new PropertyValueFactory("sNo_Data"));
					admFormNoCol.setCellValueFactory(new PropertyValueFactory("formNo_Data"));
					admNameCol.setCellValueFactory(new PropertyValueFactory("stdName_Data"));
					admSessionCol.setCellValueFactory(new PropertyValueFactory("session_Data"));
					admTermCol.setCellValueFactory(new PropertyValueFactory("term_Data"));
					admClassCol.setCellValueFactory(new PropertyValueFactory("stdClass_Data"));
					admStatusCol.setCellValueFactory(new PropertyValueFactory("status_Data"));
					admDateCol.setCellValueFactory(new PropertyValueFactory("date_Data"));
							
					admissionListDataTable.setItems(data);
					
				}
				catch(Exception e2) {
					e2.printStackTrace();
					admissionListDataTable.setItems(null);
				}
			}
			else if(status.equals("All")){
				try {
					ObservableList<AdmissionListDataTable> data = FXCollections.observableArrayList();
					Vector<ProspectiveStudent> prospects = new Vector<>();
					
					EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
					EntityManager entitymanager = emfactory.createEntityManager();
					entitymanager.getTransaction().begin();
					
					prospects = getAdmissionListYearTermClass(entitymanager, session, term, 
							stdClass, froDate, toDate);
					
					entitymanager.getTransaction().commit();
					entitymanager.close();
					emfactory.close();
					
					int i = 1;
					for(ProspectiveStudent std : prospects) {
						String sNo = String.valueOf(i);
						data.add(new AdmissionListDataTable(
								sNo,
								String.valueOf(std.getRegFormNo()),
								std.getOtherNames() + " " + std.getSurName(),
								std.getSession(),
								std.getTerm(),
								std.getClassOffered(),
								std.getAdmissionStatus(),
								std.getDate().toString()
								));
						i++;
					}
					
					admSNCol.setCellValueFactory(new PropertyValueFactory("sNo_Data"));
					admFormNoCol.setCellValueFactory(new PropertyValueFactory("formNo_Data"));
					admNameCol.setCellValueFactory(new PropertyValueFactory("stdName_Data"));
					admSessionCol.setCellValueFactory(new PropertyValueFactory("session_Data"));
					admTermCol.setCellValueFactory(new PropertyValueFactory("term_Data"));
					admClassCol.setCellValueFactory(new PropertyValueFactory("stdClass_Data"));
					admStatusCol.setCellValueFactory(new PropertyValueFactory("status_Data"));
					admDateCol.setCellValueFactory(new PropertyValueFactory("date_Data"));
							
					admissionListDataTable.setItems(data);
					
				}
				catch(Exception e2) {
					e2.printStackTrace();
					admissionListDataTable.setItems(null);
				}
			}
			else {
				try {
					ObservableList<AdmissionListDataTable> data = FXCollections.observableArrayList();
					Vector<ProspectiveStudent> prospects = new Vector<>();
					
					EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("SchoolMgtSystem");
					EntityManager entitymanager = emfactory.createEntityManager();
					entitymanager.getTransaction().begin();
					
					prospects = getAdmissionListYearStatusClassTerm(entitymanager, session, term, status, 
							stdClass, froDate, toDate);
					
					entitymanager.getTransaction().commit();
					entitymanager.close();
					emfactory.close();
					
					int i = 1;
					for(ProspectiveStudent std : prospects) {
						String sNo = String.valueOf(i);
						data.add(new AdmissionListDataTable(
								sNo,
								String.valueOf(std.getRegFormNo()),
								std.getOtherNames() + " " + std.getSurName(),
								std.getSession(),
								std.getTerm(),
								std.getClassOffered(),
								std.getAdmissionStatus(),
								std.getDate().toString()
								));
						i++;
					}
					
					admSNCol.setCellValueFactory(new PropertyValueFactory("sNo_Data"));
					admFormNoCol.setCellValueFactory(new PropertyValueFactory("formNo_Data"));
					admNameCol.setCellValueFactory(new PropertyValueFactory("stdName_Data"));
					admSessionCol.setCellValueFactory(new PropertyValueFactory("session_Data"));
					admTermCol.setCellValueFactory(new PropertyValueFactory("term_Data"));
					admClassCol.setCellValueFactory(new PropertyValueFactory("stdClass_Data"));
					admStatusCol.setCellValueFactory(new PropertyValueFactory("status_Data"));
					admDateCol.setCellValueFactory(new PropertyValueFactory("date_Data"));
							
					admissionListDataTable.setItems(data);
					
				}
				catch(Exception e2) {
					e2.printStackTrace();
					admissionListDataTable.setItems(null);
				}
			}
		}
		catch(Exception e) {
			e.printStackTrace();
			Alert alert = new Alert(Alert.AlertType.WARNING);
			alert.setContentText("Invalid parameters..!");
			alert.setTitle("Error");
			Optional<ButtonType> result = alert.showAndWait();
			if(result.get() == ButtonType.OK) {
				alert.close();
			}
			else {
				alert.close();
			}
		}
	}
	
	//Get Admission List by year
	public Vector<ProspectiveStudent> getAdmissionListYear(EntityManager em, String session, 
			LocalDate froDate, LocalDate toDate) {
		TypedQuery<ProspectiveStudent> query = em.createQuery(
				"select e from ProspectiveStudent e where "
				+ "e.session = ?1 and e.date between "
				+ "?2 and "
				+ "?3 ", ProspectiveStudent.class);
		query.setParameter(1, session);
		query.setParameter(2, froDate);
		query.setParameter(3, toDate);
		
		return (Vector<ProspectiveStudent>) query.getResultList();
	}
	
	//Get Admission List by year, term
	public Vector<ProspectiveStudent> getAdmissionListYearTerm(EntityManager em, String session, 
			String term, LocalDate froDate, LocalDate toDate) {
		TypedQuery<ProspectiveStudent> query = em.createQuery(
				"select e from ProspectiveStudent e where "
				+ "e.session = ?1 and "
				+ "e.term = ?2 "
				+ "and e.date between "
				+ "?3 and "
				+ "?4 ", ProspectiveStudent.class);
		query.setParameter(1, session);
		query.setParameter(2, term);
		query.setParameter(3, froDate);
		query.setParameter(4, toDate);
		
		return (Vector<ProspectiveStudent>) query.getResultList();
	}
	
	//Get Admission List by year, term, stdClass
	public Vector<ProspectiveStudent> getAdmissionListYearTermClass(EntityManager em, String session, 
			String term, String classOffered, LocalDate froDate, LocalDate toDate) {
		TypedQuery<ProspectiveStudent> query = em.createQuery(
				"select e from ProspectiveStudent e where "
				+ "e.session = ?1 and "
				+ "e.term = ?2 and "
				+ "e.classOffered = ?3 "
				+ "and e.date between "
				+ "?4 and "
				+ "?5 ", ProspectiveStudent.class);
		query.setParameter(1, session);
		query.setParameter(2, term);
		query.setParameter(3, classOffered);
		query.setParameter(4, froDate);
		query.setParameter(5, toDate);
		
		return (Vector<ProspectiveStudent>) query.getResultList();
	}
	
	//Get Admission List by Year, Admission status
	public Vector<ProspectiveStudent> getAdmissionListYearStatus(EntityManager em, String session,
			String admissionStatus, LocalDate froDate, LocalDate toDate) {
		TypedQuery<ProspectiveStudent> query = em.createQuery(
				"select e from ProspectiveStudent e where "
				+ "e.session = ?1 and "
				+ "e.admissionStatus = ?2 and e.date between "
				+ "?3 and "
				+ "?4 ", ProspectiveStudent.class);
		query.setParameter(1, session);
		query.setParameter(2, admissionStatus);
		query.setParameter(3, froDate);
		query.setParameter(4, toDate);
		
		return (Vector<ProspectiveStudent>) query.getResultList();
	}
	
	//Get Admission List By year, status and class
	public Vector<ProspectiveStudent> getAdmissionListYearStatusClass(EntityManager em, String session,
			String admissionStatus, String classOffered, LocalDate froDate, LocalDate toDate) {
		TypedQuery<ProspectiveStudent> query = em.createQuery(
				"select e from ProspectiveStudent e where "
				+ "e.session = ?1 and "
				+ "e.admissionStatus = ?2 and "
				+ "e.classOffered = ?3 and e.date between "
				+ "?4 and "
				+ "?5 ", ProspectiveStudent.class);
		query.setParameter(1, session);
		query.setParameter(2, admissionStatus);
		query.setParameter(3, classOffered);
		query.setParameter(4, froDate);
		query.setParameter(5, toDate);
		
		return (Vector<ProspectiveStudent>) query.getResultList();
	}
	
	//Get Admission List by year, status, class, term
	public Vector<ProspectiveStudent> getAdmissionListYearStatusClassTerm(EntityManager em, 
			String session, String term, String admissionStatus, String classOffered, 
			LocalDate froDate, LocalDate toDate) {
		TypedQuery<ProspectiveStudent> query = em.createQuery(
				"select e from ProspectiveStudent e where "
				+ "e.session = ?1 and "
				+ "e.term = ?2 and "
				+ "e.admissionStatus = ?3 and "
				+ "e.classOffered = ?4 and e.date between "
				+ "?5 and "
				+ "?6 ", ProspectiveStudent.class);
		query.setParameter(1, session);
		query.setParameter(2, term);
		query.setParameter(3, admissionStatus);
		query.setParameter(4, classOffered);
		query.setParameter(5, froDate);
		query.setParameter(6, toDate);
		
		return (Vector<ProspectiveStudent>) query.getResultList();
	}
	
	@FXML private Button printAdmissionBtn, xcelAdmissionBtn;
	@FXML public void printAdmissionButton(ActionEvent event) {
		spoolAdmissionListBtn.setVisible(false); 
		printAdmissionBtn.setVisible(false); 
		xcelAdmissionBtn.setVisible(false);
		returnAdmissionList.setVisible(false);
		try {
			printNode(vboxAdmissionPane);
		}
		catch(Exception exception) {
			admLabel.setText(exception.getMessage());
		}
		finally {
			spoolAdmissionListBtn.setVisible(true); 
			printAdmissionBtn.setVisible(true); 
			xcelAdmissionBtn.setVisible(true);
			returnAdmissionList.setVisible(true);
		}
	}
	
	@FXML public void xcelAdmissionButton(ActionEvent event) {
		Workbook workbook = new HSSFWorkbook();
		Sheet spreadSheet = workbook.createSheet("sheet");
		Row row = spreadSheet.createRow(0);
		
		for(int j = 0; j < admissionListDataTable.getColumns().size(); j++) {
			row.createCell(j).setCellValue(admissionListDataTable.getColumns().get(j).getText());
		}
		
		for(int i = 0; i < admissionListDataTable.getItems().size(); i++) {
			row = spreadSheet.createRow(i + 1);
			for(int j = 0; j < admissionListDataTable.getColumns().size(); j++) {
				if(admissionListDataTable.getColumns().get(j).getCellData(i) != null) {
					row.createCell(j).setCellValue(admissionListDataTable.getColumns().get(j).getCellData(i).toString());
				}
				else {
					row.createCell(j).setCellValue("");
				}
			}
		}
		
		String localDate = LocalDate.now().toString();
		String txt = "admissionListDataTable"+localDate+".xls";
		String filePath = "C:\\workbook\\"+txt;
		
		try {
			FileOutputStream fileOut = new FileOutputStream(filePath);
			try {
				workbook.write(fileOut);
				fileOut.close();
				admLabel.setText(filePath);
			} catch (IOException e2) {
				admLabel.setText("Write Error: "+ e2.getMessage());
			}
		} catch (FileNotFoundException e) {
			admLabel.setText("File Error: "+ e.getMessage());
		}
	}
	
	//JSS_NEW_RESULT
	@FXML private TableView<JssNewScoresDataTable> jssNewScoresDataTable;	
	@FXML private TableView<BehaviourDataTable> behaviourDataTableNew;	
	@FXML private TableColumn<BehaviourDataTable,String> behaviourColNew;
	@FXML private TableView<SkillsDataTable> skillsDataTableNew;	
	@FXML private TableColumn<SkillsDataTable,String> skillsColNew;
	@FXML private Label nameJSSNew_LBL, classJSSNew_LBL, noInClassJSSNew_LBL, 
		ageJSSNew_LBL, stdTermJSSNew_LBL, sessionJSSNew_LBL;
	@FXML private Label sexJSSNew_LBL, totalScoreJSSNew_LBL, avgJSSNew_LBL,
		overAllPositionJSSNew_LBL, outOfJSSNew_LBL, 
		daysInTermJssNew, presentsInTermJssNew, absentsInTermJssNew;
	@FXML private ImageView imageViewJSSResultNew;
	
	@FXML private ComboBox<String> termJSS_LBLNew, yearJSS_LBLNew;
	@FXML private SplitPane printPane4New;
	
	@FXML
	TableColumn<JssScoresDataTable,String> JSSNewsubjectCol, JSSASS1Col, JSSASS2Col, JSSASS3Col, 
		JSSCWK1Col, JSSCWK2Col, JSSCWK3Col, JSSTest1Col, JSSTest2Col, JSSProjCol, 
		JSSPosCol, JSSNewExamCol, 
		JSSNewTotalCol, JSSNewGradeCol, JSSNewClassAvgCol, JSSNewClassHighestCol, 
		JSSNewClassLowestCol, JSSNewRemarksCol;
	
	@FXML private TextField idNoJSSNew_LBL; 
	@FXML private Button JSSNew_SpoolResultButton;
	
	@FXML public void JSSNew_initialize(MouseEvent event) {
		termJSS_LBLNew.setItems(termN);
		//yearJSS_LBL.setItems(years);
		populateYear(yearJSS_LBLNew);
	}
	
	@SuppressWarnings({ "rawtypes", "unchecked" })
	@FXML
	public void JSSNew_SpoolResultActionButton(ActionEvent event) {
		String stdNo = idNoJSSNew_LBL.getText().trim().toUpperCase();
		String term = termJSS_LBLNew.getValue();
		String year = yearJSS_LBLNew.getValue();
		LinkedList<String> DataSet = new LinkedList<>();
		Vector<JssScoreSheetsNew> SID_elements = new Vector<>();
		
		System.out.println("StdNo-term-year: "+stdNo+":"+term+":"+year);
		
		LinkedList<String> Behaviour = new LinkedList<>();
		LinkedList<String> Skills = new LinkedList<>();
		Behaviour.add("Punctuality");
		Behaviour.add("Attendance at class");
		Behaviour.add("Attentiveness at class");
		Behaviour.add("Carrying out Assignment");
		Behaviour.add("Participation in sch activities");
		Behaviour.add("Neatness");
		Behaviour.add("Honesty");
		Behaviour.add("Self control");
		Behaviour.add("Relationship with others");
		Behaviour.add("Helping others");
		Behaviour.add("Games sports");
		Behaviour.add("Handling of Tools Lab Workshop");
		
		Skills.add("Handwriting");
		Skills.add("Verbal Fluency");
		Skills.add("Games");
		Skills.add("Sports");
		Skills.add("Handling Tools");
		Skills.add("Drawing and Painting");
		Skills.add("Musical Skills");
		
		String stdClassVal;
		
		try{
			EntityManagerFactory emfactory = Persistence.createEntityManagerFactory
					("SchoolMgtSystem");
			EntityManager entitymanager = emfactory.createEntityManager();
			entitymanager.getTransaction().begin();
			
			Students std = entitymanager.find(Students.class, stdNo);
			
			nameJSSNew_LBL.setText(std.getSurName()+", "+std.getOtherNames());
			sexJSSNew_LBL.setText(std.getSex());
			
			LocalDate dateAgeStr2 = std.getDateOfBirth();
			LocalDate currentDateStr = LocalDate.now();
			int diffDateStr = currentDateStr.getYear() - dateAgeStr2.getYear();
			ageJSSNew_LBL.setText(String.valueOf(diffDateStr));
			
			//String stdClassId = std.getEntryClassAssigned();
			
			//days in term, presents and absents
			daysInTermJssNew.setText(String.valueOf(getAcademicTermNoSchoolDays(entitymanager, term, year) - 
				getAcademicHolidayTotal(entitymanager, year, term)));
			presentsInTermJssNew.setText(String.valueOf(
				getSchoolAttendancePresents(entitymanager, stdNo, year, term)));
			absentsInTermJssNew.setText(String.valueOf(
				getSchoolAttendanceAbsents(entitymanager, stdNo, year, term)));
			
			EntityManagerFactory emfactory33 = Persistence.createEntityManagerFactory
					("SchoolMgtSystem");
			EntityManager entitymanager33 = emfactory33.createEntityManager();
			entitymanager33.getTransaction().begin();
						
			stdClassVal = getStudentClassByStdNoYearTerm(entitymanager33, stdNo, year, term);
			System.out.println("StdClassVal: "+stdClassVal);
			
			entitymanager33.getTransaction().commit();
			entitymanager33.close();
			emfactory33.close();
			
			DecimalFormat fm = new DecimalFormat("#.00");
			
			if(stdClassVal.contains("JSS")) {
				
				//***
				//LinkedHashSet<String> elements = std.getScores_sId();
				
				ObservableList<JssNewScoresDataTable> data = FXCollections.observableArrayList();
				ObservableList<BehaviourDataTable> dataBehaviour = FXCollections.observableArrayList();
				ObservableList<SkillsDataTable> dataSkills = FXCollections.observableArrayList();
				
				Vector<JssScoreSheetsNew> Data2 = new Vector<>();
				Vector<ScoreSheetsSummary> DataPosition = new Vector<>();
				Vector<ScoreSheetsSummary> myClassSize = new Vector<>();
				
				// try this for classAvg, classHighest and classLowest
				Vector<JssScoreSheetsNew> DataX = new Vector<>();
				
//				String stdClass2 = getPrimeClassOnly(stdClassId, year, term, stdClassVal);
				String stdClass2 = getPrimeClass(stdClassVal);
				System.out.println("stdClass2: "+stdClass2);			
				try {
					DataX = (Vector<JssScoreSheetsNew>) getJssScoreSheetsNewByClassYearTerm(entitymanager, stdClass2, 
							year, term);
					for(JssScoreSheetsNew sc : DataX) {
						System.out.println("DataX: "+sc.getName()+" - Score: "+sc.getTotal());
					}
				}
				catch(Exception jssE) {
					jssE.printStackTrace();
				}
				
				LinkedHashSet<String> elements2 = new LinkedHashSet<>();
				
				try {
					
					SID_elements = getJssScoreSheetsNewByStdNoClassYearTerm(entitymanager, stdNo, stdClass2, 
							year, term);
				}
				catch(Exception jssEx) {
					jssEx.printStackTrace();
				}
				
				for(JssScoreSheetsNew sheet : SID_elements) {
					//System.out.println("SID_SID: "+ sheet.getSId());
					elements2.add(sheet.getSId());
					System.out.println(sheet.getStdId()+" : "+sheet.getName());
				}
				
				//query for class position
				
				try {
					DataPosition = getScoreSheetSummaryYearTerm(entitymanager, year, term);
				}
				catch(Exception jssE2) {
					jssE2.printStackTrace();
				}
							
				for(String e : elements2) {
					if(!(String.valueOf(e).equals(null)) && 
							String.valueOf(e).charAt(String.valueOf(e).length()-1) == '1' && 
							e.contains(stdClass2+term) && 
							e.contains(year)){
								
						LinkedList<String> DataSet2 = new LinkedList<>();
						try {
							EntityManagerFactory emf = Persistence.createEntityManagerFactory
									("SchoolMgtSystem");
							EntityManager entitymgr = emf.createEntityManager();
							entitymgr.getTransaction().begin();
							
							JssScoreSheetsNew scores = entitymgr.find(JssScoreSheetsNew.class, e);
													
							if(scores.getScoresYear().equals(year)) {
								//String stdClassVal = scores.getStdClass();
								
								classJSSNew_LBL.setText(getPrimeClassReverse(stdClassVal));
								stdTermJSSNew_LBL.setText(term);
								sessionJSSNew_LBL.setText(scores.getScoresYear());
																
								Vector<JssScoreSheetsNew> testData = DataX;
								int countx = 0;
								int county = 0;
								double sumx = 0;
								double sumPlus = 0;
							
								LinkedList<Double> tempList = new LinkedList<>();
							
								for(JssScoreSheetsNew test : testData) {
									
									if(test.getSubjectName().equals(scores.getSubjectName())&&
											test.getStdClass().equals(scores.getStdClass()) && 
											test.getTerm().equals(scores.getTerm()) &&
											test.getScoresYear().equals(scores.getScoresYear())) {
										sumx = sumx + test.getTotal();
										tempList.add(test.getTotal());
										countx = countx + 1;
									}
									
									if(test.getStdId().equals(stdNo) &&
											test.getStdClass().equals(scores.getStdClass()) && 
											test.getTerm().equals(scores.getTerm()) &&
											test.getScoresYear().equals(scores.getScoresYear())) {
										sumPlus = sumPlus + test.getTotal();
										county = county + 1;
									}
								}
								
								tempList.sort(null);
								double classHighest = (double) tempList.toArray()[tempList.size()-1];
								double classLowest = (double)tempList.toArray()[0];
								double averageX = sumx/countx;
								String avgX = fm.format(averageX);
								String classHighestX = fm.format(classHighest);
								String classLowestX = fm.format(classLowest);
								
								Data2 = DataX; 
								int position = 1;
								int classPos = 1;
								double myTotal = 0;
								double myTotal2 = 0;
							
								for (JssScoreSheetsNew s : Data2) {						
									if(s.getSubjectName().equals(scores.getSubjectName())&&
											s.getStdClass().equals(scores.getStdClass()) &&
											s.getTerm().equals(scores.getTerm()) &&
											s.getScoresYear().equals(scores.getScoresYear())) {
										int subjCode = s.getSubjectCode();
										
										//Try JDBC Begings per subject
										
										String stdClassX2 = stdClass2;
										
										final String JDBC_Driver2 = "com.mysql.jdbc.Driver";
										final String DB_URL2 = dbURL;
										final String DB_User2 = dbUSR;
										final String DB_PWD2 = dbPWD;
										
										
										Connection conn2 = null;
										PreparedStatement stmt2 = null;
										
										try {
											Class.forName(JDBC_Driver2);
											conn2 = DriverManager.getConnection(DB_URL2, DB_User2, DB_PWD2);
											
											String sql;
											sql = "SELECT *, 1+(SELECT count(*) from JssScoreSheetsNew a "
													+ "WHERE a.STDCLASS = ? and "
													+ "a.TERM = ? and "
													+ "a.SCORESYEAR = ? and "
													+ "a.SUBJECTCODE = ? and "
													+ "a.TOTAL > b.TOTAL) as POSITION, TOTAL FROM JssScoreSheetsNew b "
													+ "where "
													+ "b.STDCLASS = ? and "
													+ "b.TERM = ? and "
													+ "b.SCORESYEAR = ? and "
													+ "b.SUBJECTCODE = ? "
													+ "order by TOTAL desc";
											
											stmt2 = conn2.prepareStatement(sql);
																					
											stmt2.setString(1, stdClassX2);
											stmt2.setString(2, term);
											stmt2.setString(3, year);
											stmt2.setInt(4, subjCode);
										
											stmt2.setString(5, stdClassX2);
											stmt2.setString(6, term);
											stmt2.setString(7, year);
											stmt2.setInt(8, subjCode);
											
											ResultSet rs2 = stmt2.executeQuery();
											
											
											while(rs2.next()) {
												DataSet2.add(rs2.getString("POSITION"));
											}
											rs2.close();
											stmt2.close();
											conn2.close();
										}
										catch(SQLException es) {
											//idNoJSSNew_LBL.setText("Error JDBC: "+ es.getSQLState());
										}
										catch(Exception es2) {
											//idNoJSSNew_LBL.setText("Error JDBC: "+ es2.getMessage());
										}
										finally {
											try {
												if(stmt2 != null ) {
													stmt2.close();
												}
											}
											catch(SQLException ces) {
												//idNoJSSNew_LBL.setText("Error JDBC: "+ ces.getSQLState());
											}
											try {
												if(conn2 != null ) {
													conn2.close();
												}
											}
											catch(Exception ces2) {
												//idNoJSSNew_LBL.setText("JDBC: "+ces2.getMessage());
											}
											
										}
										
										//Try JDBC Ends per subject
										
										if(s.getStdId().equals(stdNo) ) {
											
											String remarks;
											
											// Insert here
												
											if(termJSS_LBLNew.getValue().equals(scores.getTerm())
													&& yearJSS_LBLNew.getValue().equals(scores.getScoresYear())) {
												String subPos;
												int subPos2 = Integer.parseInt(DataSet2.get(position-1));
												if(subPos2 == 1 || subPos2 == 21 || subPos2 == 31 || subPos2 == 41 || subPos2 == 51 
														|| subPos2 == 61 || subPos2 == 71 || subPos2 == 81 || subPos2 == 91 
														|| subPos2 == 101 || subPos2 == 121 || subPos2 == 131 || subPos2 == 141 
														|| subPos2 == 151 || subPos2 == 161 || subPos2 == 171 || subPos2 == 181) {
													subPos = String.valueOf(subPos2)+"st";
												}
												else if(subPos2 == 2|| subPos2 == 22 || subPos2 == 32 || subPos2 == 42 || subPos2 == 52 
														|| subPos2 == 62 || subPos2 == 72 || subPos2 == 82 || subPos2 == 92 
														|| subPos2 == 102 || subPos2 == 122 || subPos2 == 132 || subPos2 == 142 
														|| subPos2 == 152 || subPos2 == 162 || subPos2 == 172 || subPos2 == 182) {
													subPos = String.valueOf(subPos2)+"nd";
												}
												else if(subPos2 == 3|| subPos2 == 23 || subPos2 == 33 || subPos2 == 43 || subPos2 == 53 
														|| subPos2 == 63 || subPos2 == 73 || subPos2 == 83 || subPos2 == 93 
														|| subPos2 == 103 || subPos2 == 123 || subPos2 == 133 || subPos2 == 143 
														|| subPos2 == 153 || subPos2 == 163 || subPos2 == 173 || subPos2 == 183) {
													subPos = String.valueOf(subPos2)+"rd";
												}
												else {
													subPos = String.valueOf(subPos2)+"th";
												}
												try {
													
													if(scores.getGrade().equals("A")) {
														remarks = "Excellent";
														if(s.getTotal() == myTotal) {
															
															data.add(
																new JssNewScoresDataTable(scores.getSubjectName(),
																String.valueOf(scores.getASS1()),
																String.valueOf(scores.getASS2()),
																String.valueOf(scores.getASS3()),
																String.valueOf(scores.getClassWork1()),
																String.valueOf(scores.getClassWork2()),
																String.valueOf(scores.getClassWork3()),
																String.valueOf(scores.getTest1()),
																String.valueOf(scores.getTest2()),
																String.valueOf(scores.getProject()),
																String.valueOf(scores.getExamScore()),
																String.valueOf(scores.getTotal()),
																scores.getGrade(),
																subPos, 
																avgX,
																classHighestX,
																classLowestX,
																remarks
																));
														}
														else {
			
															data.add(
																new JssNewScoresDataTable(scores.getSubjectName(),
																String.valueOf(scores.getASS1()),
																String.valueOf(scores.getASS2()),
																String.valueOf(scores.getASS3()),
																String.valueOf(scores.getClassWork1()),
																String.valueOf(scores.getClassWork2()),
																String.valueOf(scores.getClassWork3()),
																String.valueOf(scores.getTest1()),
																String.valueOf(scores.getTest2()),
																String.valueOf(scores.getProject()),
																String.valueOf(scores.getExamScore()),
																String.valueOf(scores.getTotal()),
																scores.getGrade(),
																subPos, 
																avgX,
																classHighestX,
																classLowestX,
																remarks
																));
														}
													}
													else if(scores.getGrade().equals("B")) {
														remarks = "Very Good";
														if(s.getTotal() == myTotal) {
													
															data.add(
																new JssNewScoresDataTable(scores.getSubjectName(),
																String.valueOf(scores.getASS1()),
																String.valueOf(scores.getASS2()),
																String.valueOf(scores.getASS3()),
																String.valueOf(scores.getClassWork1()),
																String.valueOf(scores.getClassWork2()),
																String.valueOf(scores.getClassWork3()),
																String.valueOf(scores.getTest1()),
																String.valueOf(scores.getTest2()),
																String.valueOf(scores.getProject()),
																String.valueOf(scores.getExamScore()),
																String.valueOf(scores.getTotal()),
																scores.getGrade(),
																subPos, 
																avgX,
																classHighestX,
																classLowestX,
																remarks
																));
														}
														else {
			
															data.add(
																new JssNewScoresDataTable(scores.getSubjectName(),
																String.valueOf(scores.getASS1()),
																String.valueOf(scores.getASS2()),
																String.valueOf(scores.getASS3()),
																String.valueOf(scores.getClassWork1()),
																String.valueOf(scores.getClassWork2()),
																String.valueOf(scores.getClassWork3()),
																String.valueOf(scores.getTest1()),
																String.valueOf(scores.getTest2()),
																String.valueOf(scores.getProject()),
																String.valueOf(scores.getExamScore()),
																String.valueOf(scores.getTotal()),
																scores.getGrade(),
																subPos, 
																avgX,
																classHighestX,
																classLowestX,
																remarks
																));
														}
													}
													else if(scores.getGrade().equals("C")) {
														remarks = "Good";
														
														if(s.getTotal() == myTotal) {
														
															data.add(
																new JssNewScoresDataTable(scores.getSubjectName(),
																String.valueOf(scores.getASS1()),
																String.valueOf(scores.getASS2()),
																String.valueOf(scores.getASS3()),
																String.valueOf(scores.getClassWork1()),
																String.valueOf(scores.getClassWork2()),
																String.valueOf(scores.getClassWork3()),
																String.valueOf(scores.getTest1()),
																String.valueOf(scores.getTest2()),
																String.valueOf(scores.getProject()),
																String.valueOf(scores.getExamScore()),
																String.valueOf(scores.getTotal()),
																scores.getGrade(),
																subPos, 
																avgX,
																classHighestX,
																classLowestX,
																remarks
																));
														}
														else {
			
															data.add(
																new JssNewScoresDataTable(scores.getSubjectName(),
																String.valueOf(scores.getASS1()),
																String.valueOf(scores.getASS2()),
																String.valueOf(scores.getASS3()),
																String.valueOf(scores.getClassWork1()),
																String.valueOf(scores.getClassWork2()),
																String.valueOf(scores.getClassWork3()),
																String.valueOf(scores.getTest1()),
																String.valueOf(scores.getTest2()),
																String.valueOf(scores.getProject()),
																String.valueOf(scores.getExamScore()),
																String.valueOf(scores.getTotal()),
																scores.getGrade(),
																subPos, 
																avgX,
																classHighestX,
																classLowestX,
																remarks
																));
															}
														}
													else if(scores.getGrade().equals("D")) {
														remarks = "Fair";
														if(s.getTotal() == myTotal) {
														
															data.add(
																new JssNewScoresDataTable(scores.getSubjectName(),
																String.valueOf(scores.getASS1()),
																String.valueOf(scores.getASS2()),
																String.valueOf(scores.getASS3()),
																String.valueOf(scores.getClassWork1()),
																String.valueOf(scores.getClassWork2()),
																String.valueOf(scores.getClassWork3()),
																String.valueOf(scores.getTest1()),
																String.valueOf(scores.getTest2()),
																String.valueOf(scores.getProject()),
																String.valueOf(scores.getExamScore()),
																String.valueOf(scores.getTotal()),
																scores.getGrade(),
																subPos, 
																avgX,
																classHighestX,
																classLowestX,
																remarks
																));
														}
														else {
			
															data.add(
																new JssNewScoresDataTable(scores.getSubjectName(),
																String.valueOf(scores.getASS1()),
																String.valueOf(scores.getASS2()),
																String.valueOf(scores.getASS3()),
																String.valueOf(scores.getClassWork1()),
																String.valueOf(scores.getClassWork2()),
																String.valueOf(scores.getClassWork3()),
																String.valueOf(scores.getTest1()),
																String.valueOf(scores.getTest2()),
																String.valueOf(scores.getProject()),
																String.valueOf(scores.getExamScore()),
																String.valueOf(scores.getTotal()),
																scores.getGrade(),
																subPos, 
																avgX,
																classHighestX,
																classLowestX,
																remarks
																));
														}
													}
													
													else {
														remarks = "Fail";
														if(s.getTotal() == myTotal) {
								
															data.add(
																new JssNewScoresDataTable(scores.getSubjectName(),
																String.valueOf(scores.getASS1()),
																String.valueOf(scores.getASS2()),
																String.valueOf(scores.getASS3()),
																String.valueOf(scores.getClassWork1()),
																String.valueOf(scores.getClassWork2()),
																String.valueOf(scores.getClassWork3()),
																String.valueOf(scores.getTest1()),
																String.valueOf(scores.getTest2()),
																String.valueOf(scores.getProject()),
																String.valueOf(scores.getExamScore()),
																String.valueOf(scores.getTotal()),
																scores.getGrade(),
																subPos, 
																avgX,
																classHighestX,
																classLowestX,
																remarks
																));
														}
														else {
			
															data.add(
																new JssNewScoresDataTable(scores.getSubjectName(),
																String.valueOf(scores.getASS1()),
																String.valueOf(scores.getASS2()),
																String.valueOf(scores.getASS3()),
																String.valueOf(scores.getClassWork1()),
																String.valueOf(scores.getClassWork2()),
																String.valueOf(scores.getClassWork3()),
																String.valueOf(scores.getTest1()),
																String.valueOf(scores.getTest2()),
																String.valueOf(scores.getProject()),
																String.valueOf(scores.getExamScore()),
																String.valueOf(scores.getTotal()),
																scores.getGrade(),
																subPos, 
																avgX,
																classHighestX,
																classLowestX,
																remarks
																));
														}
													}
												}
											catch(Exception except) {
												//idNoJSSNew_LBL.setText("You must specify term and year for your result"
												//		+ except.getMessage());
												except.printStackTrace();
											}
										}
									}
										
										//End insert here
										
									else {
										// do nothing STDID
									}

									position++;
									myTotal = s.getTotal();
									
								}
								else {
									// do nothing
								}
							}
							
							//Try JDBC Begings for class position 
							
							String stdClassX = stdClass2;
							
							final String JDBC_Driver = "com.mysql.jdbc.Driver";
							final String DB_URL = dbURL;
							final String DB_User = dbUSR;
							final String DB_PWD = dbPWD;
							
							
							Connection conn = null;
							//Statement stmt = null;
							PreparedStatement stmt = null;
							
							try {
								Class.forName(JDBC_Driver);
								conn = DriverManager.getConnection(DB_URL, DB_User, DB_PWD);
								//stmt = conn.createStatement();
								
								String sql;
								sql = "SELECT *, 1+(SELECT count(*) from scoresheetssummary a "
										+ "WHERE a.STUDENTCLASS = ? and "
										+ "a.STUDENTTERM = ? and "
										+ "a.ACADEMICYEAR = ? and "
										+ "a.TOTALSCORES > b.totalscores) as POSITION, "
										+ "TOTALSCORES "
										+ "FROM scoresheetssummary b "
										+ "where b.STUDENTCLASS = ? and "
										+ "b.STUDENTTERM = ? and "
										+ "b.ACADEMICYEAR = ? "
										+ "order by TOTALSCORES desc";
								
								stmt = conn.prepareStatement(sql);
								
								int term2 = Integer.parseInt(term);
								int year2 = Integer.parseInt(year);
								stmt = conn.prepareStatement(sql);
								stmt.setString(1, stdClassX);
								stmt.setInt(2, term2);
								stmt.setInt(3, year2);
								stmt.setString(4, stdClassX);
								stmt.setInt(5, term2);
								stmt.setInt(6, year2);
								
								ResultSet rs = stmt.executeQuery();
								
								while(rs.next()) {
									DataSet.add(rs.getString("POSITION"));
								}
								rs.close();
								stmt.close();
								conn.close();
							}
							catch(SQLException es) {
								//idNoJSSNew_LBL.setText("Error JDBC: "+ es.getSQLState());
							}
							catch(Exception es2) {
								//idNoJSSNew_LBL.setText("Error JDBC: "+ es2.getMessage());
							}
							finally {
								try {
									if(stmt != null ) {
										stmt.close();
									}
								}
								catch(SQLException ces) {
									//idNoJSSNew_LBL.setText("Error JDBC: "+ ces.getSQLState());
								}
								try {
									if(conn != null ) {
										conn.close();
									}
								}
								catch(Exception ces2) {
									//idNoJSSNew_LBL.setText("JDBC: "+ces2.getMessage());
								}
								
							}
							
							int count = 0;
							int count2 = 0;
							int termCount = 0;
							int termNo = 0;
							LinkedHashSet<String> setTermUnique = new LinkedHashSet<>();
							
							for(ScoreSheetsSummary ex : DataPosition) {
								if(ex.getStudentTerm().equals(term) &&
										ex.getAcademicYear().equals(year) &&
										ex.getStudentClass().equals(scores.getStdClass())) {
									myClassSize.add(ex);
									count2 = count2 + 1;
								}
								setTermUnique.add(ex.getAcademicYear()+ex.getStudentTerm());
								count = count + 1;
							}
							
							for(String ter : setTermUnique) {
								if(!(Integer.parseInt(ter) == termNo)) {
									termCount = termCount + 1;
								}
								else {
									termCount = termCount + 0;
								}
								termNo = Integer.parseInt(ter);
							}
							
							int countxx = 0;
							
							for(ScoreSheetsSummary elem : DataPosition) {
								if(elem.getStudentClass().equals(scores.getStdClass()) &&
										elem.getStudentTerm().equals(scores.getTerm()) &&
										elem.getAcademicYear().equals(scores.getScoresYear())) {
									
									if(elem.getStudentName().equals(scores.getName())&&
									elem.getStudentId().equals(stdNo) &&
									elem.getStudentTerm().equals(term) &&
									elem.getAcademicYear().equals(year)){
										
										//try using jdbc begins
									
										String classPosz;
										int classPosz2 = Integer.parseInt(DataSet.get(classPos-1));
										if(classPosz2 == 1 || classPosz2 == 21 || classPosz2 == 31 || classPosz2 == 41 
												|| classPosz2 == 51 || classPosz2 == 61 || classPosz2 == 71 || classPosz2 == 81 
												|| classPosz2 == 91 || classPosz2 == 101 || classPosz2 == 121 
												|| classPosz2 == 131 || classPosz2 == 141 || classPosz2 == 151 
												|| classPosz2 == 161 || classPosz2 == 171 || classPosz2 == 181) {
											classPosz = String.valueOf(classPosz2)+"st";
										}
										else if(classPosz2 == 2|| classPosz2 == 22 || classPosz2 == 32 || classPosz2 == 42 
												|| classPosz2 == 52 || classPosz2 == 62 || classPosz2 == 72 || classPosz2 == 82 
												|| classPosz2 == 92 || classPosz2 == 102 || classPosz2 == 122 || classPosz2 == 132 
												|| classPosz2 == 142 || classPosz2 == 152 || classPosz2 == 162 || classPosz2 == 172 
												|| classPosz2 == 182) {
											classPosz = String.valueOf(classPosz2)+"nd";
										}
										else if(classPosz2 == 3|| classPosz2 == 23 || classPosz2 == 33 || classPosz2 == 43 
												|| classPosz2 == 53 || classPosz2 == 63 || classPosz2 == 73 || classPosz2 == 83 
												|| classPosz2 == 93 || classPosz2 == 103 || classPosz2 == 123 || classPosz2 == 133 
												|| classPosz2 == 143 || classPosz2 == 153 || classPosz2 == 163 || classPosz2 == 173 
												|| classPosz2 == 183) {
											classPosz = String.valueOf(classPosz2)+"rd";
										}
										else {
											classPosz = String.valueOf(classPosz2)+"th";
										}
										
										overAllPositionJSSNew_LBL.setText(classPosz);
										
										//try using jdbc ends
										
									}
									else {
										if(elem.getTotalScores() ==  myTotal2) {
											countxx = countxx + 1;
										}
										classPos = classPos + 1;
										myTotal2 = elem.getTotalScores();
									}
								}
								else {
									//
								}
							}
							
							double myClassAvg = 0;
							for(ScoreSheetsSummary avg : myClassSize) {
								if(avg.getAcademicYear().equals(year) &&
										avg.getStudentTerm().equals(term)&&
										avg.getStudentClass().equals(scores.getStdClass())) {
									myClassAvg = myClassAvg + avg.getTotalScores();
								}
								
							}
							
							noInClassJSSNew_LBL.setText(String.valueOf(count2));
							outOfJSSNew_LBL.setText(String.valueOf(count2));
							}
						
							entitymgr.getTransaction().commit();
							entitymgr.close();
							emf.close();
						}
					
						catch(Exception er) {
							//idNoJSSNew_LBL.setText("Error Scores: " + er.getMessage());
							er.printStackTrace();
						}
					}
				}
					
			double totalScoresResult = 0;
			double avgScoresResult = 0;
			int dataSize = data.size();
			
			for(JssNewScoresDataTable datum : data) {
				totalScoresResult += Double.parseDouble(datum.getTotal_Data());
			}
			
			avgScoresResult = totalScoresResult/dataSize;
			String averageScoreResult = fm.format(avgScoresResult);
			totalScoreJSSNew_LBL.setText(String.valueOf(fm.format(totalScoresResult)));
			avgJSSNew_LBL.setText(averageScoreResult);
					
			JSSNewsubjectCol.setCellValueFactory(new PropertyValueFactory("subjectName_Data"));
			JSSASS1Col.setCellValueFactory(new PropertyValueFactory("ASS1_Data"));
			JSSASS2Col.setCellValueFactory(new PropertyValueFactory("ASS2_Data"));
			JSSASS3Col.setCellValueFactory(new PropertyValueFactory("ASS3_Data"));
			JSSCWK1Col.setCellValueFactory(new PropertyValueFactory("CWK1_Data"));
			JSSCWK2Col.setCellValueFactory(new PropertyValueFactory("CWK2_Data"));
			JSSCWK3Col.setCellValueFactory(new PropertyValueFactory("CWK3_Data"));
			
			JSSTest1Col.setCellValueFactory(new PropertyValueFactory("test1_Data"));
			JSSTest2Col.setCellValueFactory(new PropertyValueFactory("test2_Data"));
			JSSProjCol.setCellValueFactory(new PropertyValueFactory("proj_Data"));
			
			JSSNewExamCol.setCellValueFactory(new PropertyValueFactory("exam_Data"));
			JSSNewTotalCol.setCellValueFactory(new PropertyValueFactory("total_Data"));
			JSSNewGradeCol.setCellValueFactory(new PropertyValueFactory("grade_Data"));
			JSSPosCol.setCellValueFactory(new PropertyValueFactory("position_Data"));
			
			JSSNewClassAvgCol.setCellValueFactory(new PropertyValueFactory("classAvg_Data"));
			JSSNewClassHighestCol.setCellValueFactory(new PropertyValueFactory("classHighest_Data"));
			JSSNewClassLowestCol.setCellValueFactory(new PropertyValueFactory("classLowest_Data"));
			JSSNewRemarksCol.setCellValueFactory(new PropertyValueFactory("remark_Data"));
			
			//colouring grade
			/*JSSNewGradeCol.setCellFactory(new Callback<TableColumn<JssNewScoresDataTable,String>,TableCell<JssNewScoresDataTable,String>>(){
				public TableCell call(TableColumn param) {
					return new TableCell<JssNewScoresDataTable,String>(){
						@Override
						public void updateItem(String item, boolean empty) {
							super.updateItem(item,empty);
							if(!(isEmpty())) {
								if(item.equals("E")) {
									this.setTextFill(Color.RED);
								}
								setText(item);
							}
						}
					};
				}
			});
			
			JSSNewTotalCol.setCellFactory(new Callback<TableColumn<JssNewScoresDataTable,String>,TableCell<JssNewScoresDataTable,String>>(){
				public TableCell call(TableColumn param) {
					return new TableCell<JssNewScoresDataTable,String>(){
						@Override
						public void updateItem(String item, boolean empty) {
							super.updateItem(item,empty);
							if(!(isEmpty())) {
								if(Double.parseDouble(item) < 40) {
									this.setTextFill(Color.RED);
								}
								setText(item);
							}
						}
					};
				}
			});*/
			
			jssNewScoresDataTable.setItems(data);
					
			entitymanager.getTransaction().commit();
			entitymanager.close();
			emfactory.close();
			
			for(String str : Behaviour) {
				dataBehaviour.add(new BehaviourDataTable(str));
			}
			
			behaviourColNew.setCellValueFactory(new PropertyValueFactory("behaviour_Data"));
			
			behaviourDataTableNew.setItems(dataBehaviour);
			
			for(String str : Skills) {
				dataSkills.add(new SkillsDataTable(str));
			}
			
			skillsColNew.setCellValueFactory(new PropertyValueFactory("skills_Data"));
			
			skillsDataTableNew.setItems(dataSkills);
			}
			else {
				Alert alert = new Alert(Alert.AlertType.ERROR);
				alert.setContentText("Please use the SSS Result template for Senior Students...");
				Optional<ButtonType> result = alert.showAndWait();
				if(result.get() == ButtonType.OK) {
					alert.close();
				}
				else {
					alert.close();
				}
			}
		
		}
		catch(Exception e) {
			idNoJSSNew_LBL.setText("Error: " + e.getLocalizedMessage());
			jssNewScoresDataTable.setItems(null);
			nameJSSNew_LBL.setText(null);
			sexJSSNew_LBL.setText(null);
			ageJSSNew_LBL.setText(null);
			classJSSNew_LBL.setText(null);
			stdTermJSSNew_LBL.setText(null);
			sessionJSSNew_LBL.setText(null);
			noInClassJSSNew_LBL.setText(null);
			totalScoreJSSNew_LBL.setText(null);
			avgJSSNew_LBL.setText(null);
			overAllPositionJSSNew_LBL.setText(null);
			outOfJSSNew_LBL.setText(null);
			e.printStackTrace();
		}
		
		//view image
		try {
			String stdId = stdNo;
			
			String jdbcUrl = dbURL;
			String username = dbUSR;
			String password = dbPWD;
			
			String sql = "SELECT * FROM stdImages WHERE stdid = ?";
			
			try(Connection conn = DriverManager.getConnection(jdbcUrl, username, password);
					){
				
				try(PreparedStatement stmt = conn.prepareStatement(sql);
						){
					stmt.setString(1, stdId);		
					
					ResultSet result = stmt.executeQuery();
					
					
					if(result.next()) {
						InputStream imageStream = result.getBinaryStream("image");
						Image img = new Image(imageStream);
						imageViewJSSResultNew.setImage(img);
					}
					else {
						imageViewJSSResultNew.setImage(null);
					}
				
					result.close();
					stmt.close();
					conn.close();
				}
				catch(SQLException io) {
					//idNoJSSNew_LBL.setText(io.getMessage());
					imageViewJSSResultNew.setImage(null);
				}
			}
			catch(SQLException eq) {
				//idNoJSSNew_LBL.setText(eq.getMessage());
				imageViewJSSResultNew.setImage(null);
			}
		}
		catch(Exception e) {
			//idNoJSSNew_LBL.setText(e.getMessage());
			imageViewJSSResultNew.setImage(null);
		}
				
	}
	
}